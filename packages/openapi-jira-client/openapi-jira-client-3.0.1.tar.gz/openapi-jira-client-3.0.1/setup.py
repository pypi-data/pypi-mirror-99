# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['openapi_jira_client',
 'openapi_jira_client.api',
 'openapi_jira_client.api.app_properties',
 'openapi_jira_client.api.application_roles',
 'openapi_jira_client.api.audit_records',
 'openapi_jira_client.api.avatars',
 'openapi_jira_client.api.dashboards',
 'openapi_jira_client.api.dynamic_modules',
 'openapi_jira_client.api.filter_sharing',
 'openapi_jira_client.api.filters',
 'openapi_jira_client.api.group_and_user_picker',
 'openapi_jira_client.api.groups',
 'openapi_jira_client.api.issue_attachments',
 'openapi_jira_client.api.issue_comment_properties',
 'openapi_jira_client.api.issue_comments',
 'openapi_jira_client.api.issue_custom_field_contexts',
 'openapi_jira_client.api.issue_custom_field_options',
 'openapi_jira_client.api.issue_custom_field_options_apps',
 'openapi_jira_client.api.issue_field_configurations',
 'openapi_jira_client.api.issue_fields',
 'openapi_jira_client.api.issue_link_types',
 'openapi_jira_client.api.issue_links',
 'openapi_jira_client.api.issue_navigator_settings',
 'openapi_jira_client.api.issue_notification_schemes',
 'openapi_jira_client.api.issue_priorities',
 'openapi_jira_client.api.issue_properties',
 'openapi_jira_client.api.issue_remote_links',
 'openapi_jira_client.api.issue_resolutions',
 'openapi_jira_client.api.issue_search',
 'openapi_jira_client.api.issue_security_level',
 'openapi_jira_client.api.issue_security_schemes',
 'openapi_jira_client.api.issue_type_properties',
 'openapi_jira_client.api.issue_type_schemes',
 'openapi_jira_client.api.issue_type_screen_schemes',
 'openapi_jira_client.api.issue_types',
 'openapi_jira_client.api.issue_votes',
 'openapi_jira_client.api.issue_watchers',
 'openapi_jira_client.api.issue_worklog_properties',
 'openapi_jira_client.api.issue_worklogs',
 'openapi_jira_client.api.issues',
 'openapi_jira_client.api.jira_expressions',
 'openapi_jira_client.api.jira_settings',
 'openapi_jira_client.api.jql',
 'openapi_jira_client.api.labels',
 'openapi_jira_client.api.myself',
 'openapi_jira_client.api.permission_schemes',
 'openapi_jira_client.api.permissions',
 'openapi_jira_client.api.project_avatars',
 'openapi_jira_client.api.project_categories',
 'openapi_jira_client.api.project_components',
 'openapi_jira_client.api.project_email',
 'openapi_jira_client.api.project_key_and_name_validation',
 'openapi_jira_client.api.project_permission_schemes',
 'openapi_jira_client.api.project_properties',
 'openapi_jira_client.api.project_role_actors',
 'openapi_jira_client.api.project_roles',
 'openapi_jira_client.api.project_types',
 'openapi_jira_client.api.project_versions',
 'openapi_jira_client.api.projects',
 'openapi_jira_client.api.screen_schemes',
 'openapi_jira_client.api.screen_tab_fields',
 'openapi_jira_client.api.screen_tabs',
 'openapi_jira_client.api.screens',
 'openapi_jira_client.api.server_info',
 'openapi_jira_client.api.tasks',
 'openapi_jira_client.api.time_tracking',
 'openapi_jira_client.api.user_properties',
 'openapi_jira_client.api.user_search',
 'openapi_jira_client.api.users',
 'openapi_jira_client.api.webhooks',
 'openapi_jira_client.api.workflow_scheme_drafts',
 'openapi_jira_client.api.workflow_scheme_project_associations',
 'openapi_jira_client.api.workflow_schemes',
 'openapi_jira_client.api.workflow_status_categories',
 'openapi_jira_client.api.workflow_statuses',
 'openapi_jira_client.api.workflow_transition_properties',
 'openapi_jira_client.api.workflow_transition_rules',
 'openapi_jira_client.api.workflows',
 'openapi_jira_client.models']

package_data = \
{'': ['*']}

install_requires = \
['attrs>=20.1.0,<21.0.0',
 'httpx>=0.15.4,<0.17.0',
 'python-dateutil>=2.8.0,<3.0.0']

setup_kwargs = {
    'name': 'openapi-jira-client',
    'version': '3.0.1',
    'description': 'A client library for accessing The Jira Cloud platform REST API',
    'long_description': '# openapi-jira-client\nA client library for accessing The Jira Cloud platform REST API\n\n## Usage\nFirst, create a client:\n\n```python\nfrom openapi_jira_client import Client\n\nclient = Client(base_url="https://api.example.com")\n```\n\nIf the endpoints you\'re going to hit require authentication, use `AuthenticatedClient` instead:\n\n```python\nfrom openapi_jira_client import AuthenticatedClient\n\nclient = AuthenticatedClient(base_url="https://api.example.com", token="SuperSecretToken")\n```\n\nNow call your endpoint and use your models:\n\n```python\nfrom openapi_jira_client.models import MyDataModel\nfrom openapi_jira_client.api.my_tag import get_my_data_model\nfrom openapi_jira_client.types import Response\n\nmy_data: MyDataModel = get_my_data_model.sync(client=client)\n# or if you need more info (e.g. status_code)\nresponse: Response[MyDataModel] = get_my_data_model.sync_detailed(client=client)\n```\n\nOr do the same thing with an async version:\n\n```python\nfrom openapi_jira_client.models import MyDataModel\nfrom openapi_jira_client.api.my_tag import get_my_data_model\nfrom openapi_jira_client.types import Response\n\nmy_data: MyDataModel = await get_my_data_model.asyncio(client=client)\nresponse: Response[MyDataModel] = await get_my_data_model.asyncio_detailed(client=client)\n```\n\nThings to know:\n1. Every path/method combo becomes a Python module with four functions:\n    1. `sync`: Blocking request that returns parsed data (if successful) or `None`\n    1. `sync_detailed`: Blocking request that always returns a `Request`, optionally with `parsed` set if the request was successful.\n    1. `asyncio`: Like `sync` but the async instead of blocking\n    1. `asyncio_detailed`: Like `sync_detailed` by async instead of blocking\n     \n1. All path/query params, and bodies become method arguments.\n1. If your endpoint had any tags on it, the first tag will be used as a module name for the function (my_tag above)\n1. Any endpoint which did not have a tag will be in `openapi_jira_client.api.default`    \n\n## Building / publishing this Client\nThis project uses [Poetry](https://python-poetry.org/) to manage dependencies  and packaging.  Here are the basics:\n1. Update the metadata in pyproject.toml (e.g. authors, version)\n1. If you\'re using a private repository, configure it with Poetry\n    1. `poetry config repositories.<your-repository-name> <url-to-your-repository>`\n    1. `poetry config http-basic.<your-repository-name> <username> <password>`\n1. Publish the client with `poetry publish --build -r <your-repository-name>` or, if for public PyPI, just `poetry publish --build`\n\nIf you want to install this client into another project without publishing it (e.g. for development) then:\n1. If that project **is using Poetry**, you can simply do `poetry add <path-to-this-client>` from that project\n1. If that project is not using Poetry:\n    1. Build a wheel with `poetry build -f wheel`\n    1. Install that wheel from the other project `pip install <path-to-wheel>`',
    'author': None,
    'author_email': None,
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
