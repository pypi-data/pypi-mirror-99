# coding: utf-8

"""
    bmlx api-server.

    Documentation of bmlx api-server apis. To find more info about generating spec from source, please refer to https://goswagger.io/use/spec.html  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from bmlx_openapi_client.configuration import Configuration


class Model(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'converted_model_artifact': 'int',
        'converted_uri': 'str',
        'create_time': 'int',
        'db_status': 'int',
        'experiment_run_id': 'int',
        'id': 'int',
        'model_suite_id': 'int',
        'pushed_model_artifact': 'int',
        'pushed_uri': 'str',
        'raw_model_artifact': 'int',
        'raw_uri': 'str',
        'status': 'str'
    }

    attribute_map = {
        'converted_model_artifact': 'converted_model_artifact',
        'converted_uri': 'converted_uri',
        'create_time': 'create_time',
        'db_status': 'db_status',
        'experiment_run_id': 'experiment_run_id',
        'id': 'id',
        'model_suite_id': 'model_suite_id',
        'pushed_model_artifact': 'pushed_model_artifact',
        'pushed_uri': 'pushed_uri',
        'raw_model_artifact': 'raw_model_artifact',
        'raw_uri': 'raw_uri',
        'status': 'status'
    }

    def __init__(self, converted_model_artifact=None, converted_uri=None, create_time=None, db_status=None, experiment_run_id=None, id=None, model_suite_id=None, pushed_model_artifact=None, pushed_uri=None, raw_model_artifact=None, raw_uri=None, status=None, local_vars_configuration=None):  # noqa: E501
        """Model - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._converted_model_artifact = None
        self._converted_uri = None
        self._create_time = None
        self._db_status = None
        self._experiment_run_id = None
        self._id = None
        self._model_suite_id = None
        self._pushed_model_artifact = None
        self._pushed_uri = None
        self._raw_model_artifact = None
        self._raw_uri = None
        self._status = None
        self.discriminator = None

        if converted_model_artifact is not None:
            self.converted_model_artifact = converted_model_artifact
        if converted_uri is not None:
            self.converted_uri = converted_uri
        if create_time is not None:
            self.create_time = create_time
        if db_status is not None:
            self.db_status = db_status
        if experiment_run_id is not None:
            self.experiment_run_id = experiment_run_id
        if id is not None:
            self.id = id
        if model_suite_id is not None:
            self.model_suite_id = model_suite_id
        if pushed_model_artifact is not None:
            self.pushed_model_artifact = pushed_model_artifact
        if pushed_uri is not None:
            self.pushed_uri = pushed_uri
        if raw_model_artifact is not None:
            self.raw_model_artifact = raw_model_artifact
        if raw_uri is not None:
            self.raw_uri = raw_uri
        if status is not None:
            self.status = status

    @property
    def converted_model_artifact(self):
        """Gets the converted_model_artifact of this Model.  # noqa: E501


        :return: The converted_model_artifact of this Model.  # noqa: E501
        :rtype: int
        """
        return self._converted_model_artifact

    @converted_model_artifact.setter
    def converted_model_artifact(self, converted_model_artifact):
        """Sets the converted_model_artifact of this Model.


        :param converted_model_artifact: The converted_model_artifact of this Model.  # noqa: E501
        :type converted_model_artifact: int
        """

        self._converted_model_artifact = converted_model_artifact

    @property
    def converted_uri(self):
        """Gets the converted_uri of this Model.  # noqa: E501


        :return: The converted_uri of this Model.  # noqa: E501
        :rtype: str
        """
        return self._converted_uri

    @converted_uri.setter
    def converted_uri(self, converted_uri):
        """Sets the converted_uri of this Model.


        :param converted_uri: The converted_uri of this Model.  # noqa: E501
        :type converted_uri: str
        """

        self._converted_uri = converted_uri

    @property
    def create_time(self):
        """Gets the create_time of this Model.  # noqa: E501


        :return: The create_time of this Model.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Model.


        :param create_time: The create_time of this Model.  # noqa: E501
        :type create_time: int
        """

        self._create_time = create_time

    @property
    def db_status(self):
        """Gets the db_status of this Model.  # noqa: E501


        :return: The db_status of this Model.  # noqa: E501
        :rtype: int
        """
        return self._db_status

    @db_status.setter
    def db_status(self, db_status):
        """Sets the db_status of this Model.


        :param db_status: The db_status of this Model.  # noqa: E501
        :type db_status: int
        """

        self._db_status = db_status

    @property
    def experiment_run_id(self):
        """Gets the experiment_run_id of this Model.  # noqa: E501


        :return: The experiment_run_id of this Model.  # noqa: E501
        :rtype: int
        """
        return self._experiment_run_id

    @experiment_run_id.setter
    def experiment_run_id(self, experiment_run_id):
        """Sets the experiment_run_id of this Model.


        :param experiment_run_id: The experiment_run_id of this Model.  # noqa: E501
        :type experiment_run_id: int
        """

        self._experiment_run_id = experiment_run_id

    @property
    def id(self):
        """Gets the id of this Model.  # noqa: E501


        :return: The id of this Model.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Model.


        :param id: The id of this Model.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def model_suite_id(self):
        """Gets the model_suite_id of this Model.  # noqa: E501


        :return: The model_suite_id of this Model.  # noqa: E501
        :rtype: int
        """
        return self._model_suite_id

    @model_suite_id.setter
    def model_suite_id(self, model_suite_id):
        """Sets the model_suite_id of this Model.


        :param model_suite_id: The model_suite_id of this Model.  # noqa: E501
        :type model_suite_id: int
        """

        self._model_suite_id = model_suite_id

    @property
    def pushed_model_artifact(self):
        """Gets the pushed_model_artifact of this Model.  # noqa: E501


        :return: The pushed_model_artifact of this Model.  # noqa: E501
        :rtype: int
        """
        return self._pushed_model_artifact

    @pushed_model_artifact.setter
    def pushed_model_artifact(self, pushed_model_artifact):
        """Sets the pushed_model_artifact of this Model.


        :param pushed_model_artifact: The pushed_model_artifact of this Model.  # noqa: E501
        :type pushed_model_artifact: int
        """

        self._pushed_model_artifact = pushed_model_artifact

    @property
    def pushed_uri(self):
        """Gets the pushed_uri of this Model.  # noqa: E501


        :return: The pushed_uri of this Model.  # noqa: E501
        :rtype: str
        """
        return self._pushed_uri

    @pushed_uri.setter
    def pushed_uri(self, pushed_uri):
        """Sets the pushed_uri of this Model.


        :param pushed_uri: The pushed_uri of this Model.  # noqa: E501
        :type pushed_uri: str
        """

        self._pushed_uri = pushed_uri

    @property
    def raw_model_artifact(self):
        """Gets the raw_model_artifact of this Model.  # noqa: E501


        :return: The raw_model_artifact of this Model.  # noqa: E501
        :rtype: int
        """
        return self._raw_model_artifact

    @raw_model_artifact.setter
    def raw_model_artifact(self, raw_model_artifact):
        """Sets the raw_model_artifact of this Model.


        :param raw_model_artifact: The raw_model_artifact of this Model.  # noqa: E501
        :type raw_model_artifact: int
        """

        self._raw_model_artifact = raw_model_artifact

    @property
    def raw_uri(self):
        """Gets the raw_uri of this Model.  # noqa: E501


        :return: The raw_uri of this Model.  # noqa: E501
        :rtype: str
        """
        return self._raw_uri

    @raw_uri.setter
    def raw_uri(self, raw_uri):
        """Sets the raw_uri of this Model.


        :param raw_uri: The raw_uri of this Model.  # noqa: E501
        :type raw_uri: str
        """

        self._raw_uri = raw_uri

    @property
    def status(self):
        """Gets the status of this Model.  # noqa: E501


        :return: The status of this Model.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Model.


        :param status: The status of this Model.  # noqa: E501
        :type status: str
        """
        allowed_values = ["Trained", "Converted", "Pushed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                elif len(args) == 2:
                    return x.to_dict(serialize)
                else:
                    raise ValueError("Invalid argument size of to_dict")
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Model):
            return True

        return self.to_dict() != other.to_dict()
