# coding: utf-8

"""
    bmlx api-server.

    Documentation of bmlx api-server apis. To find more info about generating spec from source, please refer to https://goswagger.io/use/spec.html  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from bmlx_openapi_client.configuration import Configuration


class Node(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'children': 'list[str]',
        'component': 'str',
        'exec_properties': 'dict(str, str)',
        'inputs': 'list[NodeIO]',
        'outputs': 'list[NodeIO]'
    }

    attribute_map = {
        'children': 'children',
        'component': 'component',
        'exec_properties': 'exec_properties',
        'inputs': 'inputs',
        'outputs': 'outputs'
    }

    def __init__(self, children=None, component=None, exec_properties=None, inputs=None, outputs=None, local_vars_configuration=None):  # noqa: E501
        """Node - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._children = None
        self._component = None
        self._exec_properties = None
        self._inputs = None
        self._outputs = None
        self.discriminator = None

        self.children = children
        self.component = component
        if exec_properties is not None:
            self.exec_properties = exec_properties
        if inputs is not None:
            self.inputs = inputs
        if outputs is not None:
            self.outputs = outputs

    @property
    def children(self):
        """Gets the children of this Node.  # noqa: E501


        :return: The children of this Node.  # noqa: E501
        :rtype: list[str]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this Node.


        :param children: The children of this Node.  # noqa: E501
        :type children: list[str]
        """
        if self.local_vars_configuration.client_side_validation and children is None:  # noqa: E501
            raise ValueError("Invalid value for `children`, must not be `None`")  # noqa: E501

        self._children = children

    @property
    def component(self):
        """Gets the component of this Node.  # noqa: E501


        :return: The component of this Node.  # noqa: E501
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this Node.


        :param component: The component of this Node.  # noqa: E501
        :type component: str
        """
        if self.local_vars_configuration.client_side_validation and component is None:  # noqa: E501
            raise ValueError("Invalid value for `component`, must not be `None`")  # noqa: E501

        self._component = component

    @property
    def exec_properties(self):
        """Gets the exec_properties of this Node.  # noqa: E501

        exec properties  # noqa: E501

        :return: The exec_properties of this Node.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._exec_properties

    @exec_properties.setter
    def exec_properties(self, exec_properties):
        """Sets the exec_properties of this Node.

        exec properties  # noqa: E501

        :param exec_properties: The exec_properties of this Node.  # noqa: E501
        :type exec_properties: dict(str, str)
        """

        self._exec_properties = exec_properties

    @property
    def inputs(self):
        """Gets the inputs of this Node.  # noqa: E501

        input artifacts  # noqa: E501

        :return: The inputs of this Node.  # noqa: E501
        :rtype: list[NodeIO]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this Node.

        input artifacts  # noqa: E501

        :param inputs: The inputs of this Node.  # noqa: E501
        :type inputs: list[NodeIO]
        """

        self._inputs = inputs

    @property
    def outputs(self):
        """Gets the outputs of this Node.  # noqa: E501

        output artifacts  # noqa: E501

        :return: The outputs of this Node.  # noqa: E501
        :rtype: list[NodeIO]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this Node.

        output artifacts  # noqa: E501

        :param outputs: The outputs of this Node.  # noqa: E501
        :type outputs: list[NodeIO]
        """

        self._outputs = outputs

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                elif len(args) == 2:
                    return x.to_dict(serialize)
                else:
                    raise ValueError("Invalid argument size of to_dict")
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Node):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Node):
            return True

        return self.to_dict() != other.to_dict()
