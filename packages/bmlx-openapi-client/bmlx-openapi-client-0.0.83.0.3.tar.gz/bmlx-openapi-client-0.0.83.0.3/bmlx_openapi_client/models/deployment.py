# coding: utf-8

"""
    bmlx api-server.

    Documentation of bmlx api-server apis. To find more info about generating spec from source, please refer to https://goswagger.io/use/spec.html  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from bmlx_openapi_client.configuration import Configuration


class Deployment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'create_time': 'int',
        'db_status': 'int',
        'id': 'int',
        'model_suite_id': 'int',
        'namespace': 'str',
        'owner': 'str',
        'status': 'str'
    }

    attribute_map = {
        'create_time': 'create_time',
        'db_status': 'db_status',
        'id': 'id',
        'model_suite_id': 'model_suite_id',
        'namespace': 'namespace',
        'owner': 'owner',
        'status': 'status'
    }

    def __init__(self, create_time=None, db_status=None, id=None, model_suite_id=None, namespace=None, owner=None, status=None, local_vars_configuration=None):  # noqa: E501
        """Deployment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._create_time = None
        self._db_status = None
        self._id = None
        self._model_suite_id = None
        self._namespace = None
        self._owner = None
        self._status = None
        self.discriminator = None

        if create_time is not None:
            self.create_time = create_time
        if db_status is not None:
            self.db_status = db_status
        if id is not None:
            self.id = id
        if model_suite_id is not None:
            self.model_suite_id = model_suite_id
        if namespace is not None:
            self.namespace = namespace
        if owner is not None:
            self.owner = owner
        if status is not None:
            self.status = status

    @property
    def create_time(self):
        """Gets the create_time of this Deployment.  # noqa: E501


        :return: The create_time of this Deployment.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Deployment.


        :param create_time: The create_time of this Deployment.  # noqa: E501
        :type create_time: int
        """

        self._create_time = create_time

    @property
    def db_status(self):
        """Gets the db_status of this Deployment.  # noqa: E501


        :return: The db_status of this Deployment.  # noqa: E501
        :rtype: int
        """
        return self._db_status

    @db_status.setter
    def db_status(self, db_status):
        """Sets the db_status of this Deployment.


        :param db_status: The db_status of this Deployment.  # noqa: E501
        :type db_status: int
        """

        self._db_status = db_status

    @property
    def id(self):
        """Gets the id of this Deployment.  # noqa: E501


        :return: The id of this Deployment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Deployment.


        :param id: The id of this Deployment.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def model_suite_id(self):
        """Gets the model_suite_id of this Deployment.  # noqa: E501


        :return: The model_suite_id of this Deployment.  # noqa: E501
        :rtype: int
        """
        return self._model_suite_id

    @model_suite_id.setter
    def model_suite_id(self, model_suite_id):
        """Sets the model_suite_id of this Deployment.


        :param model_suite_id: The model_suite_id of this Deployment.  # noqa: E501
        :type model_suite_id: int
        """

        self._model_suite_id = model_suite_id

    @property
    def namespace(self):
        """Gets the namespace of this Deployment.  # noqa: E501


        :return: The namespace of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Deployment.


        :param namespace: The namespace of this Deployment.  # noqa: E501
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def owner(self):
        """Gets the owner of this Deployment.  # noqa: E501


        :return: The owner of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Deployment.


        :param owner: The owner of this Deployment.  # noqa: E501
        :type owner: str
        """

        self._owner = owner

    @property
    def status(self):
        """Gets the status of this Deployment.  # noqa: E501


        :return: The status of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Deployment.


        :param status: The status of this Deployment.  # noqa: E501
        :type status: str
        """
        allowed_values = ["Running", "Stopped", "Failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                elif len(args) == 2:
                    return x.to_dict(serialize)
                else:
                    raise ValueError("Invalid argument size of to_dict")
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Deployment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Deployment):
            return True

        return self.to_dict() != other.to_dict()
