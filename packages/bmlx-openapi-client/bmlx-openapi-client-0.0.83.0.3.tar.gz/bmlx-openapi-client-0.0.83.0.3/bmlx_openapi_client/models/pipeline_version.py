# coding: utf-8

"""
    bmlx api-server.

    Documentation of bmlx api-server apis. To find more info about generating spec from source, please refer to https://goswagger.io/use/spec.html  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from bmlx_openapi_client.configuration import Configuration


class PipelineVersion(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'commit_id': 'str',
        'commit_msg': 'str',
        'committer': 'str',
        'create_time': 'int',
        'dag': 'list[Node]',
        'db_status': 'int',
        'id': 'int',
        'name': 'str',
        'owner': 'str',
        'package_checksum': 'str',
        'package_uri': 'str',
        'parameters': 'list[ParameterConfig]',
        'pipeline_id': 'int',
        'pipeline_name': 'str'
    }

    attribute_map = {
        'commit_id': 'commit_id',
        'commit_msg': 'commit_msg',
        'committer': 'committer',
        'create_time': 'create_time',
        'dag': 'dag',
        'db_status': 'db_status',
        'id': 'id',
        'name': 'name',
        'owner': 'owner',
        'package_checksum': 'package_checksum',
        'package_uri': 'package_uri',
        'parameters': 'parameters',
        'pipeline_id': 'pipeline_id',
        'pipeline_name': 'pipeline_name'
    }

    def __init__(self, commit_id=None, commit_msg=None, committer=None, create_time=None, dag=None, db_status=None, id=None, name=None, owner=None, package_checksum=None, package_uri=None, parameters=None, pipeline_id=None, pipeline_name=None, local_vars_configuration=None):  # noqa: E501
        """PipelineVersion - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._commit_id = None
        self._commit_msg = None
        self._committer = None
        self._create_time = None
        self._dag = None
        self._db_status = None
        self._id = None
        self._name = None
        self._owner = None
        self._package_checksum = None
        self._package_uri = None
        self._parameters = None
        self._pipeline_id = None
        self._pipeline_name = None
        self.discriminator = None

        if commit_id is not None:
            self.commit_id = commit_id
        if commit_msg is not None:
            self.commit_msg = commit_msg
        if committer is not None:
            self.committer = committer
        if create_time is not None:
            self.create_time = create_time
        if dag is not None:
            self.dag = dag
        if db_status is not None:
            self.db_status = db_status
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if owner is not None:
            self.owner = owner
        if package_checksum is not None:
            self.package_checksum = package_checksum
        if package_uri is not None:
            self.package_uri = package_uri
        if parameters is not None:
            self.parameters = parameters
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        if pipeline_name is not None:
            self.pipeline_name = pipeline_name

    @property
    def commit_id(self):
        """Gets the commit_id of this PipelineVersion.  # noqa: E501


        :return: The commit_id of this PipelineVersion.  # noqa: E501
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this PipelineVersion.


        :param commit_id: The commit_id of this PipelineVersion.  # noqa: E501
        :type commit_id: str
        """

        self._commit_id = commit_id

    @property
    def commit_msg(self):
        """Gets the commit_msg of this PipelineVersion.  # noqa: E501


        :return: The commit_msg of this PipelineVersion.  # noqa: E501
        :rtype: str
        """
        return self._commit_msg

    @commit_msg.setter
    def commit_msg(self, commit_msg):
        """Sets the commit_msg of this PipelineVersion.


        :param commit_msg: The commit_msg of this PipelineVersion.  # noqa: E501
        :type commit_msg: str
        """

        self._commit_msg = commit_msg

    @property
    def committer(self):
        """Gets the committer of this PipelineVersion.  # noqa: E501


        :return: The committer of this PipelineVersion.  # noqa: E501
        :rtype: str
        """
        return self._committer

    @committer.setter
    def committer(self, committer):
        """Sets the committer of this PipelineVersion.


        :param committer: The committer of this PipelineVersion.  # noqa: E501
        :type committer: str
        """

        self._committer = committer

    @property
    def create_time(self):
        """Gets the create_time of this PipelineVersion.  # noqa: E501


        :return: The create_time of this PipelineVersion.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this PipelineVersion.


        :param create_time: The create_time of this PipelineVersion.  # noqa: E501
        :type create_time: int
        """

        self._create_time = create_time

    @property
    def dag(self):
        """Gets the dag of this PipelineVersion.  # noqa: E501


        :return: The dag of this PipelineVersion.  # noqa: E501
        :rtype: list[Node]
        """
        return self._dag

    @dag.setter
    def dag(self, dag):
        """Sets the dag of this PipelineVersion.


        :param dag: The dag of this PipelineVersion.  # noqa: E501
        :type dag: list[Node]
        """

        self._dag = dag

    @property
    def db_status(self):
        """Gets the db_status of this PipelineVersion.  # noqa: E501


        :return: The db_status of this PipelineVersion.  # noqa: E501
        :rtype: int
        """
        return self._db_status

    @db_status.setter
    def db_status(self, db_status):
        """Sets the db_status of this PipelineVersion.


        :param db_status: The db_status of this PipelineVersion.  # noqa: E501
        :type db_status: int
        """

        self._db_status = db_status

    @property
    def id(self):
        """Gets the id of this PipelineVersion.  # noqa: E501


        :return: The id of this PipelineVersion.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PipelineVersion.


        :param id: The id of this PipelineVersion.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PipelineVersion.  # noqa: E501


        :return: The name of this PipelineVersion.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PipelineVersion.


        :param name: The name of this PipelineVersion.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this PipelineVersion.  # noqa: E501


        :return: The owner of this PipelineVersion.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this PipelineVersion.


        :param owner: The owner of this PipelineVersion.  # noqa: E501
        :type owner: str
        """

        self._owner = owner

    @property
    def package_checksum(self):
        """Gets the package_checksum of this PipelineVersion.  # noqa: E501


        :return: The package_checksum of this PipelineVersion.  # noqa: E501
        :rtype: str
        """
        return self._package_checksum

    @package_checksum.setter
    def package_checksum(self, package_checksum):
        """Sets the package_checksum of this PipelineVersion.


        :param package_checksum: The package_checksum of this PipelineVersion.  # noqa: E501
        :type package_checksum: str
        """

        self._package_checksum = package_checksum

    @property
    def package_uri(self):
        """Gets the package_uri of this PipelineVersion.  # noqa: E501

        根据gitlab 创建pipeline version的时候，将整个project 打包(包含根据 bmlx.yml 中entry字段 指定的 pipeline 文件产生的argo workflow yml)，将package 上传至ceph  # noqa: E501

        :return: The package_uri of this PipelineVersion.  # noqa: E501
        :rtype: str
        """
        return self._package_uri

    @package_uri.setter
    def package_uri(self, package_uri):
        """Sets the package_uri of this PipelineVersion.

        根据gitlab 创建pipeline version的时候，将整个project 打包(包含根据 bmlx.yml 中entry字段 指定的 pipeline 文件产生的argo workflow yml)，将package 上传至ceph  # noqa: E501

        :param package_uri: The package_uri of this PipelineVersion.  # noqa: E501
        :type package_uri: str
        """

        self._package_uri = package_uri

    @property
    def parameters(self):
        """Gets the parameters of this PipelineVersion.  # noqa: E501


        :return: The parameters of this PipelineVersion.  # noqa: E501
        :rtype: list[ParameterConfig]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this PipelineVersion.


        :param parameters: The parameters of this PipelineVersion.  # noqa: E501
        :type parameters: list[ParameterConfig]
        """

        self._parameters = parameters

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this PipelineVersion.  # noqa: E501


        :return: The pipeline_id of this PipelineVersion.  # noqa: E501
        :rtype: int
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this PipelineVersion.


        :param pipeline_id: The pipeline_id of this PipelineVersion.  # noqa: E501
        :type pipeline_id: int
        """

        self._pipeline_id = pipeline_id

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this PipelineVersion.  # noqa: E501


        :return: The pipeline_name of this PipelineVersion.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this PipelineVersion.


        :param pipeline_name: The pipeline_name of this PipelineVersion.  # noqa: E501
        :type pipeline_name: str
        """

        self._pipeline_name = pipeline_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                elif len(args) == 2:
                    return x.to_dict(serialize)
                else:
                    raise ValueError("Invalid argument size of to_dict")
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineVersion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PipelineVersion):
            return True

        return self.to_dict() != other.to_dict()
