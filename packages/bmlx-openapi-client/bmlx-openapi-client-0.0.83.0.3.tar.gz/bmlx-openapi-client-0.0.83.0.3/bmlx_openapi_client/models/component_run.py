# coding: utf-8

"""
    bmlx api-server.

    Documentation of bmlx api-server apis. To find more info about generating spec from source, please refer to https://goswagger.io/use/spec.html  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from bmlx_openapi_client.configuration import Configuration


class ComponentRun(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'component': 'str',
        'db_status': 'int',
        'end_time': 'int',
        'experiment_run_id': 'int',
        'id': 'int',
        'inputs': 'list[Artifact]',
        'outputs': 'list[Artifact]',
        'run_context': 'dict(str, str)',
        'start_time': 'int',
        'status': 'str'
    }

    attribute_map = {
        'component': 'component',
        'db_status': 'db_status',
        'end_time': 'end_time',
        'experiment_run_id': 'experiment_run_id',
        'id': 'id',
        'inputs': 'inputs',
        'outputs': 'outputs',
        'run_context': 'run_context',
        'start_time': 'start_time',
        'status': 'status'
    }

    def __init__(self, component=None, db_status=None, end_time=None, experiment_run_id=None, id=None, inputs=None, outputs=None, run_context=None, start_time=None, status=None, local_vars_configuration=None):  # noqa: E501
        """ComponentRun - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._component = None
        self._db_status = None
        self._end_time = None
        self._experiment_run_id = None
        self._id = None
        self._inputs = None
        self._outputs = None
        self._run_context = None
        self._start_time = None
        self._status = None
        self.discriminator = None

        if component is not None:
            self.component = component
        if db_status is not None:
            self.db_status = db_status
        if end_time is not None:
            self.end_time = end_time
        if experiment_run_id is not None:
            self.experiment_run_id = experiment_run_id
        if id is not None:
            self.id = id
        if inputs is not None:
            self.inputs = inputs
        if outputs is not None:
            self.outputs = outputs
        if run_context is not None:
            self.run_context = run_context
        if start_time is not None:
            self.start_time = start_time
        if status is not None:
            self.status = status

    @property
    def component(self):
        """Gets the component of this ComponentRun.  # noqa: E501


        :return: The component of this ComponentRun.  # noqa: E501
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this ComponentRun.


        :param component: The component of this ComponentRun.  # noqa: E501
        :type component: str
        """

        self._component = component

    @property
    def db_status(self):
        """Gets the db_status of this ComponentRun.  # noqa: E501


        :return: The db_status of this ComponentRun.  # noqa: E501
        :rtype: int
        """
        return self._db_status

    @db_status.setter
    def db_status(self, db_status):
        """Sets the db_status of this ComponentRun.


        :param db_status: The db_status of this ComponentRun.  # noqa: E501
        :type db_status: int
        """

        self._db_status = db_status

    @property
    def end_time(self):
        """Gets the end_time of this ComponentRun.  # noqa: E501


        :return: The end_time of this ComponentRun.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ComponentRun.


        :param end_time: The end_time of this ComponentRun.  # noqa: E501
        :type end_time: int
        """

        self._end_time = end_time

    @property
    def experiment_run_id(self):
        """Gets the experiment_run_id of this ComponentRun.  # noqa: E501


        :return: The experiment_run_id of this ComponentRun.  # noqa: E501
        :rtype: int
        """
        return self._experiment_run_id

    @experiment_run_id.setter
    def experiment_run_id(self, experiment_run_id):
        """Sets the experiment_run_id of this ComponentRun.


        :param experiment_run_id: The experiment_run_id of this ComponentRun.  # noqa: E501
        :type experiment_run_id: int
        """

        self._experiment_run_id = experiment_run_id

    @property
    def id(self):
        """Gets the id of this ComponentRun.  # noqa: E501


        :return: The id of this ComponentRun.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComponentRun.


        :param id: The id of this ComponentRun.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def inputs(self):
        """Gets the inputs of this ComponentRun.  # noqa: E501


        :return: The inputs of this ComponentRun.  # noqa: E501
        :rtype: list[Artifact]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this ComponentRun.


        :param inputs: The inputs of this ComponentRun.  # noqa: E501
        :type inputs: list[Artifact]
        """

        self._inputs = inputs

    @property
    def outputs(self):
        """Gets the outputs of this ComponentRun.  # noqa: E501


        :return: The outputs of this ComponentRun.  # noqa: E501
        :rtype: list[Artifact]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this ComponentRun.


        :param outputs: The outputs of this ComponentRun.  # noqa: E501
        :type outputs: list[Artifact]
        """

        self._outputs = outputs

    @property
    def run_context(self):
        """Gets the run_context of this ComponentRun.  # noqa: E501


        :return: The run_context of this ComponentRun.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._run_context

    @run_context.setter
    def run_context(self, run_context):
        """Sets the run_context of this ComponentRun.


        :param run_context: The run_context of this ComponentRun.  # noqa: E501
        :type run_context: dict(str, str)
        """

        self._run_context = run_context

    @property
    def start_time(self):
        """Gets the start_time of this ComponentRun.  # noqa: E501


        :return: The start_time of this ComponentRun.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ComponentRun.


        :param start_time: The start_time of this ComponentRun.  # noqa: E501
        :type start_time: int
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this ComponentRun.  # noqa: E501


        :return: The status of this ComponentRun.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ComponentRun.


        :param status: The status of this ComponentRun.  # noqa: E501
        :type status: str
        """
        allowed_values = ["NotStarted", "Running", "Pending", "Succeeded", "Failed", "Error", "Terminated", "Terminating", "Skipped", "Omitted"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                elif len(args) == 2:
                    return x.to_dict(serialize)
                else:
                    raise ValueError("Invalid argument size of to_dict")
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComponentRun):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComponentRun):
            return True

        return self.to_dict() != other.to_dict()
