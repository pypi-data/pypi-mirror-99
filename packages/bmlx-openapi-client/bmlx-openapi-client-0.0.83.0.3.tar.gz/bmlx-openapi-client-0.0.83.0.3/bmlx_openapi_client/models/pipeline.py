# coding: utf-8

"""
    bmlx api-server.

    Documentation of bmlx api-server apis. To find more info about generating spec from source, please refer to https://goswagger.io/use/spec.html  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from bmlx_openapi_client.configuration import Configuration


class Pipeline(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'create_time': 'int',
        'db_status': 'int',
        'description': 'str',
        'id': 'int',
        'name': 'str',
        'owner': 'str',
        'repo': 'str',
        'tags': 'list[str]'
    }

    attribute_map = {
        'create_time': 'create_time',
        'db_status': 'db_status',
        'description': 'description',
        'id': 'id',
        'name': 'name',
        'owner': 'owner',
        'repo': 'repo',
        'tags': 'tags'
    }

    def __init__(self, create_time=None, db_status=None, description=None, id=None, name=None, owner=None, repo=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """Pipeline - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._create_time = None
        self._db_status = None
        self._description = None
        self._id = None
        self._name = None
        self._owner = None
        self._repo = None
        self._tags = None
        self.discriminator = None

        if create_time is not None:
            self.create_time = create_time
        if db_status is not None:
            self.db_status = db_status
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if owner is not None:
            self.owner = owner
        if repo is not None:
            self.repo = repo
        if tags is not None:
            self.tags = tags

    @property
    def create_time(self):
        """Gets the create_time of this Pipeline.  # noqa: E501


        :return: The create_time of this Pipeline.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Pipeline.


        :param create_time: The create_time of this Pipeline.  # noqa: E501
        :type create_time: int
        """

        self._create_time = create_time

    @property
    def db_status(self):
        """Gets the db_status of this Pipeline.  # noqa: E501


        :return: The db_status of this Pipeline.  # noqa: E501
        :rtype: int
        """
        return self._db_status

    @db_status.setter
    def db_status(self, db_status):
        """Sets the db_status of this Pipeline.


        :param db_status: The db_status of this Pipeline.  # noqa: E501
        :type db_status: int
        """

        self._db_status = db_status

    @property
    def description(self):
        """Gets the description of this Pipeline.  # noqa: E501


        :return: The description of this Pipeline.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Pipeline.


        :param description: The description of this Pipeline.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Pipeline.  # noqa: E501


        :return: The id of this Pipeline.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Pipeline.


        :param id: The id of this Pipeline.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Pipeline.  # noqa: E501


        :return: The name of this Pipeline.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Pipeline.


        :param name: The name of this Pipeline.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this Pipeline.  # noqa: E501


        :return: The owner of this Pipeline.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Pipeline.


        :param owner: The owner of this Pipeline.  # noqa: E501
        :type owner: str
        """

        self._owner = owner

    @property
    def repo(self):
        """Gets the repo of this Pipeline.  # noqa: E501


        :return: The repo of this Pipeline.  # noqa: E501
        :rtype: str
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this Pipeline.


        :param repo: The repo of this Pipeline.  # noqa: E501
        :type repo: str
        """

        self._repo = repo

    @property
    def tags(self):
        """Gets the tags of this Pipeline.  # noqa: E501


        :return: The tags of this Pipeline.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Pipeline.


        :param tags: The tags of this Pipeline.  # noqa: E501
        :type tags: list[str]
        """

        self._tags = tags

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                elif len(args) == 2:
                    return x.to_dict(serialize)
                else:
                    raise ValueError("Invalid argument size of to_dict")
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pipeline):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Pipeline):
            return True

        return self.to_dict() != other.to_dict()
