# coding: utf-8

"""
    bmlx api-server.

    Documentation of bmlx api-server apis. To find more info about generating spec from source, please refer to https://goswagger.io/use/spec.html  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from bmlx_openapi_client.configuration import Configuration


class Artifact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'create_time': 'int',
        'db_status': 'int',
        'description': 'str',
        'experiment_id': 'int',
        'experiment_run_id': 'int',
        'id': 'int',
        'import_only': 'bool',
        'name': 'str',
        'producer_component': 'str',
        'status': 'str',
        'type': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'create_time': 'create_time',
        'db_status': 'db_status',
        'description': 'description',
        'experiment_id': 'experiment_id',
        'experiment_run_id': 'experiment_run_id',
        'id': 'id',
        'import_only': 'import_only',
        'name': 'name',
        'producer_component': 'producer_component',
        'status': 'status',
        'type': 'type',
        'uri': 'uri'
    }

    def __init__(self, create_time=None, db_status=None, description=None, experiment_id=None, experiment_run_id=None, id=None, import_only=None, name=None, producer_component=None, status=None, type=None, uri=None, local_vars_configuration=None):  # noqa: E501
        """Artifact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._create_time = None
        self._db_status = None
        self._description = None
        self._experiment_id = None
        self._experiment_run_id = None
        self._id = None
        self._import_only = None
        self._name = None
        self._producer_component = None
        self._status = None
        self._type = None
        self._uri = None
        self.discriminator = None

        if create_time is not None:
            self.create_time = create_time
        if db_status is not None:
            self.db_status = db_status
        if description is not None:
            self.description = description
        if experiment_id is not None:
            self.experiment_id = experiment_id
        if experiment_run_id is not None:
            self.experiment_run_id = experiment_run_id
        if id is not None:
            self.id = id
        if import_only is not None:
            self.import_only = import_only
        if name is not None:
            self.name = name
        if producer_component is not None:
            self.producer_component = producer_component
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if uri is not None:
            self.uri = uri

    @property
    def create_time(self):
        """Gets the create_time of this Artifact.  # noqa: E501


        :return: The create_time of this Artifact.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Artifact.


        :param create_time: The create_time of this Artifact.  # noqa: E501
        :type create_time: int
        """

        self._create_time = create_time

    @property
    def db_status(self):
        """Gets the db_status of this Artifact.  # noqa: E501


        :return: The db_status of this Artifact.  # noqa: E501
        :rtype: int
        """
        return self._db_status

    @db_status.setter
    def db_status(self, db_status):
        """Sets the db_status of this Artifact.


        :param db_status: The db_status of this Artifact.  # noqa: E501
        :type db_status: int
        """

        self._db_status = db_status

    @property
    def description(self):
        """Gets the description of this Artifact.  # noqa: E501


        :return: The description of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Artifact.


        :param description: The description of this Artifact.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def experiment_id(self):
        """Gets the experiment_id of this Artifact.  # noqa: E501


        :return: The experiment_id of this Artifact.  # noqa: E501
        :rtype: int
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this Artifact.


        :param experiment_id: The experiment_id of this Artifact.  # noqa: E501
        :type experiment_id: int
        """

        self._experiment_id = experiment_id

    @property
    def experiment_run_id(self):
        """Gets the experiment_run_id of this Artifact.  # noqa: E501


        :return: The experiment_run_id of this Artifact.  # noqa: E501
        :rtype: int
        """
        return self._experiment_run_id

    @experiment_run_id.setter
    def experiment_run_id(self, experiment_run_id):
        """Sets the experiment_run_id of this Artifact.


        :param experiment_run_id: The experiment_run_id of this Artifact.  # noqa: E501
        :type experiment_run_id: int
        """

        self._experiment_run_id = experiment_run_id

    @property
    def id(self):
        """Gets the id of this Artifact.  # noqa: E501

        create artifact 的请求中，不能携带 ID  # noqa: E501

        :return: The id of this Artifact.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Artifact.

        create artifact 的请求中，不能携带 ID  # noqa: E501

        :param id: The id of this Artifact.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def import_only(self):
        """Gets the import_only of this Artifact.  # noqa: E501

        表示引入了原有的artifact，并没有重新创建。这是为了解决一种case: pipeline 中 有sample_selector 会通过创建一个 Model Artifact 来import 之前已经训练好的模型 同时会有 xdl_trainer 去训练模型，并创建一个 Model Artifact。 我们规定一个名称的 Model Artifact 在一次experiment run中只能被创建一次， 因此在创建的时候通过 ImportOnly 字段可以判断不同情况并相应处理  # noqa: E501

        :return: The import_only of this Artifact.  # noqa: E501
        :rtype: bool
        """
        return self._import_only

    @import_only.setter
    def import_only(self, import_only):
        """Sets the import_only of this Artifact.

        表示引入了原有的artifact，并没有重新创建。这是为了解决一种case: pipeline 中 有sample_selector 会通过创建一个 Model Artifact 来import 之前已经训练好的模型 同时会有 xdl_trainer 去训练模型，并创建一个 Model Artifact。 我们规定一个名称的 Model Artifact 在一次experiment run中只能被创建一次， 因此在创建的时候通过 ImportOnly 字段可以判断不同情况并相应处理  # noqa: E501

        :param import_only: The import_only of this Artifact.  # noqa: E501
        :type import_only: bool
        """

        self._import_only = import_only

    @property
    def name(self):
        """Gets the name of this Artifact.  # noqa: E501


        :return: The name of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Artifact.


        :param name: The name of this Artifact.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def producer_component(self):
        """Gets the producer_component of this Artifact.  # noqa: E501


        :return: The producer_component of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._producer_component

    @producer_component.setter
    def producer_component(self, producer_component):
        """Sets the producer_component of this Artifact.


        :param producer_component: The producer_component of this Artifact.  # noqa: E501
        :type producer_component: str
        """

        self._producer_component = producer_component

    @property
    def status(self):
        """Gets the status of this Artifact.  # noqa: E501


        :return: The status of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Artifact.


        :param status: The status of this Artifact.  # noqa: E501
        :type status: str
        """
        allowed_values = ["Unknown", "Pending", "Live", "MarkedForDeletion", "Deleted"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this Artifact.  # noqa: E501


        :return: The type of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Artifact.


        :param type: The type of this Artifact.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this Artifact.  # noqa: E501


        :return: The uri of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Artifact.


        :param uri: The uri of this Artifact.  # noqa: E501
        :type uri: str
        """

        self._uri = uri

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                elif len(args) == 2:
                    return x.to_dict(serialize)
                else:
                    raise ValueError("Invalid argument size of to_dict")
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Artifact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Artifact):
            return True

        return self.to_dict() != other.to_dict()
