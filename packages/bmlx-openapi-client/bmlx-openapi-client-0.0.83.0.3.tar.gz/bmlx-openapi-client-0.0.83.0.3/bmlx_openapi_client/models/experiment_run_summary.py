# coding: utf-8

"""
    bmlx api-server.

    Documentation of bmlx api-server apis. To find more info about generating spec from source, please refer to https://goswagger.io/use/spec.html  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from bmlx_openapi_client.configuration import Configuration


class ExperimentRunSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'average_run_seconds': 'int',
        'db_status': 'int',
        'error_runs': 'int',
        'experiment_id': 'int',
        'failed_runs': 'int',
        'notstarted_runs': 'int',
        'pending_runs': 'int',
        'running_runs': 'int',
        'succeeded_runs': 'int',
        'terminated_runs': 'int',
        'terminating_runs': 'int'
    }

    attribute_map = {
        'average_run_seconds': 'average_run_seconds',
        'db_status': 'db_status',
        'error_runs': 'error_runs',
        'experiment_id': 'experiment_id',
        'failed_runs': 'failed_runs',
        'notstarted_runs': 'notstarted_runs',
        'pending_runs': 'pending_runs',
        'running_runs': 'running_runs',
        'succeeded_runs': 'succeeded_runs',
        'terminated_runs': 'terminated_runs',
        'terminating_runs': 'terminating_runs'
    }

    def __init__(self, average_run_seconds=None, db_status=None, error_runs=None, experiment_id=None, failed_runs=None, notstarted_runs=None, pending_runs=None, running_runs=None, succeeded_runs=None, terminated_runs=None, terminating_runs=None, local_vars_configuration=None):  # noqa: E501
        """ExperimentRunSummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._average_run_seconds = None
        self._db_status = None
        self._error_runs = None
        self._experiment_id = None
        self._failed_runs = None
        self._notstarted_runs = None
        self._pending_runs = None
        self._running_runs = None
        self._succeeded_runs = None
        self._terminated_runs = None
        self._terminating_runs = None
        self.discriminator = None

        if average_run_seconds is not None:
            self.average_run_seconds = average_run_seconds
        if db_status is not None:
            self.db_status = db_status
        if error_runs is not None:
            self.error_runs = error_runs
        if experiment_id is not None:
            self.experiment_id = experiment_id
        if failed_runs is not None:
            self.failed_runs = failed_runs
        if notstarted_runs is not None:
            self.notstarted_runs = notstarted_runs
        if pending_runs is not None:
            self.pending_runs = pending_runs
        if running_runs is not None:
            self.running_runs = running_runs
        if succeeded_runs is not None:
            self.succeeded_runs = succeeded_runs
        if terminated_runs is not None:
            self.terminated_runs = terminated_runs
        if terminating_runs is not None:
            self.terminating_runs = terminating_runs

    @property
    def average_run_seconds(self):
        """Gets the average_run_seconds of this ExperimentRunSummary.  # noqa: E501


        :return: The average_run_seconds of this ExperimentRunSummary.  # noqa: E501
        :rtype: int
        """
        return self._average_run_seconds

    @average_run_seconds.setter
    def average_run_seconds(self, average_run_seconds):
        """Sets the average_run_seconds of this ExperimentRunSummary.


        :param average_run_seconds: The average_run_seconds of this ExperimentRunSummary.  # noqa: E501
        :type average_run_seconds: int
        """

        self._average_run_seconds = average_run_seconds

    @property
    def db_status(self):
        """Gets the db_status of this ExperimentRunSummary.  # noqa: E501


        :return: The db_status of this ExperimentRunSummary.  # noqa: E501
        :rtype: int
        """
        return self._db_status

    @db_status.setter
    def db_status(self, db_status):
        """Sets the db_status of this ExperimentRunSummary.


        :param db_status: The db_status of this ExperimentRunSummary.  # noqa: E501
        :type db_status: int
        """

        self._db_status = db_status

    @property
    def error_runs(self):
        """Gets the error_runs of this ExperimentRunSummary.  # noqa: E501


        :return: The error_runs of this ExperimentRunSummary.  # noqa: E501
        :rtype: int
        """
        return self._error_runs

    @error_runs.setter
    def error_runs(self, error_runs):
        """Sets the error_runs of this ExperimentRunSummary.


        :param error_runs: The error_runs of this ExperimentRunSummary.  # noqa: E501
        :type error_runs: int
        """

        self._error_runs = error_runs

    @property
    def experiment_id(self):
        """Gets the experiment_id of this ExperimentRunSummary.  # noqa: E501


        :return: The experiment_id of this ExperimentRunSummary.  # noqa: E501
        :rtype: int
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this ExperimentRunSummary.


        :param experiment_id: The experiment_id of this ExperimentRunSummary.  # noqa: E501
        :type experiment_id: int
        """

        self._experiment_id = experiment_id

    @property
    def failed_runs(self):
        """Gets the failed_runs of this ExperimentRunSummary.  # noqa: E501


        :return: The failed_runs of this ExperimentRunSummary.  # noqa: E501
        :rtype: int
        """
        return self._failed_runs

    @failed_runs.setter
    def failed_runs(self, failed_runs):
        """Sets the failed_runs of this ExperimentRunSummary.


        :param failed_runs: The failed_runs of this ExperimentRunSummary.  # noqa: E501
        :type failed_runs: int
        """

        self._failed_runs = failed_runs

    @property
    def notstarted_runs(self):
        """Gets the notstarted_runs of this ExperimentRunSummary.  # noqa: E501


        :return: The notstarted_runs of this ExperimentRunSummary.  # noqa: E501
        :rtype: int
        """
        return self._notstarted_runs

    @notstarted_runs.setter
    def notstarted_runs(self, notstarted_runs):
        """Sets the notstarted_runs of this ExperimentRunSummary.


        :param notstarted_runs: The notstarted_runs of this ExperimentRunSummary.  # noqa: E501
        :type notstarted_runs: int
        """

        self._notstarted_runs = notstarted_runs

    @property
    def pending_runs(self):
        """Gets the pending_runs of this ExperimentRunSummary.  # noqa: E501


        :return: The pending_runs of this ExperimentRunSummary.  # noqa: E501
        :rtype: int
        """
        return self._pending_runs

    @pending_runs.setter
    def pending_runs(self, pending_runs):
        """Sets the pending_runs of this ExperimentRunSummary.


        :param pending_runs: The pending_runs of this ExperimentRunSummary.  # noqa: E501
        :type pending_runs: int
        """

        self._pending_runs = pending_runs

    @property
    def running_runs(self):
        """Gets the running_runs of this ExperimentRunSummary.  # noqa: E501


        :return: The running_runs of this ExperimentRunSummary.  # noqa: E501
        :rtype: int
        """
        return self._running_runs

    @running_runs.setter
    def running_runs(self, running_runs):
        """Sets the running_runs of this ExperimentRunSummary.


        :param running_runs: The running_runs of this ExperimentRunSummary.  # noqa: E501
        :type running_runs: int
        """

        self._running_runs = running_runs

    @property
    def succeeded_runs(self):
        """Gets the succeeded_runs of this ExperimentRunSummary.  # noqa: E501


        :return: The succeeded_runs of this ExperimentRunSummary.  # noqa: E501
        :rtype: int
        """
        return self._succeeded_runs

    @succeeded_runs.setter
    def succeeded_runs(self, succeeded_runs):
        """Sets the succeeded_runs of this ExperimentRunSummary.


        :param succeeded_runs: The succeeded_runs of this ExperimentRunSummary.  # noqa: E501
        :type succeeded_runs: int
        """

        self._succeeded_runs = succeeded_runs

    @property
    def terminated_runs(self):
        """Gets the terminated_runs of this ExperimentRunSummary.  # noqa: E501


        :return: The terminated_runs of this ExperimentRunSummary.  # noqa: E501
        :rtype: int
        """
        return self._terminated_runs

    @terminated_runs.setter
    def terminated_runs(self, terminated_runs):
        """Sets the terminated_runs of this ExperimentRunSummary.


        :param terminated_runs: The terminated_runs of this ExperimentRunSummary.  # noqa: E501
        :type terminated_runs: int
        """

        self._terminated_runs = terminated_runs

    @property
    def terminating_runs(self):
        """Gets the terminating_runs of this ExperimentRunSummary.  # noqa: E501


        :return: The terminating_runs of this ExperimentRunSummary.  # noqa: E501
        :rtype: int
        """
        return self._terminating_runs

    @terminating_runs.setter
    def terminating_runs(self, terminating_runs):
        """Sets the terminating_runs of this ExperimentRunSummary.


        :param terminating_runs: The terminating_runs of this ExperimentRunSummary.  # noqa: E501
        :type terminating_runs: int
        """

        self._terminating_runs = terminating_runs

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                elif len(args) == 2:
                    return x.to_dict(serialize)
                else:
                    raise ValueError("Invalid argument size of to_dict")
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExperimentRunSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExperimentRunSummary):
            return True

        return self.to_dict() != other.to_dict()
