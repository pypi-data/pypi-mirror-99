# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.23
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class TOTPEnrollmentStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'state': 'str',
        'key': 'str'
    }

    attribute_map = {
        'state': 'state',
        'key': 'key'
    }

    def __init__(self, state=None, key=None, local_vars_configuration=None):  # noqa: E501
        """TOTPEnrollmentStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._state = None
        self._key = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if key is not None:
            self.key = key

    @property
    def state(self):
        """Gets the state of this TOTPEnrollmentStatus.  # noqa: E501

        The state of the TOTP enrollment. - pending: The user has been issued a key to register with their authentication application but have not provided a valid answer. - success: The user has provided a valid answer to the enrollment challenge.   # noqa: E501

        :return: The state of this TOTPEnrollmentStatus.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TOTPEnrollmentStatus.

        The state of the TOTP enrollment. - pending: The user has been issued a key to register with their authentication application but have not provided a valid answer. - success: The user has provided a valid answer to the enrollment challenge.   # noqa: E501

        :param state: The state of this TOTPEnrollmentStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["pending", "success"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def key(self):
        """Gets the key of this TOTPEnrollmentStatus.  # noqa: E501

        An opaque string used to sync up the user's application and agilicus's Time-based One-time Password server. This will only be available when initially creating the resource.  # noqa: E501

        :return: The key of this TOTPEnrollmentStatus.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this TOTPEnrollmentStatus.

        An opaque string used to sync up the user's application and agilicus's Time-based One-time Password server. This will only be available when initially creating the resource.  # noqa: E501

        :param key: The key of this TOTPEnrollmentStatus.  # noqa: E501
        :type: str
        """

        self._key = key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TOTPEnrollmentStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TOTPEnrollmentStatus):
            return True

        return self.to_dict() != other.to_dict()
