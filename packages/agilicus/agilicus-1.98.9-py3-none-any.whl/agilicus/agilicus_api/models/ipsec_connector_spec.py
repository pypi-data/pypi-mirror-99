# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.23
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class IpsecConnectorSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'name_slug': 'str',
        'org_id': 'str',
        'ipsec_gateway_id': 'str',
        'connections': 'list[IpsecConnection]'
    }

    attribute_map = {
        'name': 'name',
        'name_slug': 'name_slug',
        'org_id': 'org_id',
        'ipsec_gateway_id': 'ipsec_gateway_id',
        'connections': 'connections'
    }

    def __init__(self, name=None, name_slug=None, org_id=None, ipsec_gateway_id=None, connections=None, local_vars_configuration=None):  # noqa: E501
        """IpsecConnectorSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._name_slug = None
        self._org_id = None
        self._ipsec_gateway_id = None
        self._connections = None
        self.discriminator = None

        self.name = name
        if name_slug is not None:
            self.name_slug = name_slug
        self.org_id = org_id
        if ipsec_gateway_id is not None:
            self.ipsec_gateway_id = ipsec_gateway_id
        if connections is not None:
            self.connections = connections

    @property
    def name(self):
        """Gets the name of this IpsecConnectorSpec.  # noqa: E501

        The name of the IPsec connector   # noqa: E501

        :return: The name of this IpsecConnectorSpec.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IpsecConnectorSpec.

        The name of the IPsec connector   # noqa: E501

        :param name: The name of this IpsecConnectorSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501

        self._name = name

    @property
    def name_slug(self):
        """Gets the name_slug of this IpsecConnectorSpec.  # noqa: E501

        A human readable slug to identify a resource and that is rfc1035 label compliant. The length has been restricted to 20 characters such that this name can be concatenated with other names or slugs. A slug is readOnly as it is generated by the backend resource.   # noqa: E501

        :return: The name_slug of this IpsecConnectorSpec.  # noqa: E501
        :rtype: str
        """
        return self._name_slug

    @name_slug.setter
    def name_slug(self, name_slug):
        """Sets the name_slug of this IpsecConnectorSpec.

        A human readable slug to identify a resource and that is rfc1035 label compliant. The length has been restricted to 20 characters such that this name can be concatenated with other names or slugs. A slug is readOnly as it is generated by the backend resource.   # noqa: E501

        :param name_slug: The name_slug of this IpsecConnectorSpec.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name_slug is not None and len(name_slug) > 20):
            raise ValueError("Invalid value for `name_slug`, length must be less than or equal to `20`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name_slug is not None and not re.search(r'^[a-z]|[a-z0-9][a-z0-9\-]*[a-z0-9]$', name_slug)):  # noqa: E501
            raise ValueError(r"Invalid value for `name_slug`, must be a follow pattern or equal to `/^[a-z]|[a-z0-9][a-z0-9\-]*[a-z0-9]$/`")  # noqa: E501

        self._name_slug = name_slug

    @property
    def org_id(self):
        """Gets the org_id of this IpsecConnectorSpec.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The org_id of this IpsecConnectorSpec.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this IpsecConnectorSpec.

        Unique identifier  # noqa: E501

        :param org_id: The org_id of this IpsecConnectorSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def ipsec_gateway_id(self):
        """Gets the ipsec_gateway_id of this IpsecConnectorSpec.  # noqa: E501

        The GUID of the IpsecGateway where this connector is instantiated from.  # noqa: E501

        :return: The ipsec_gateway_id of this IpsecConnectorSpec.  # noqa: E501
        :rtype: str
        """
        return self._ipsec_gateway_id

    @ipsec_gateway_id.setter
    def ipsec_gateway_id(self, ipsec_gateway_id):
        """Sets the ipsec_gateway_id of this IpsecConnectorSpec.

        The GUID of the IpsecGateway where this connector is instantiated from.  # noqa: E501

        :param ipsec_gateway_id: The ipsec_gateway_id of this IpsecConnectorSpec.  # noqa: E501
        :type: str
        """

        self._ipsec_gateway_id = ipsec_gateway_id

    @property
    def connections(self):
        """Gets the connections of this IpsecConnectorSpec.  # noqa: E501

        Defines the set of IPsec connections within the connector. Adding an IpsecConnection(s) here will instantiate the connection(s). Removing an IpsecConnection(s) here cause the connection(s) to be torn down.   # noqa: E501

        :return: The connections of this IpsecConnectorSpec.  # noqa: E501
        :rtype: list[IpsecConnection]
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this IpsecConnectorSpec.

        Defines the set of IPsec connections within the connector. Adding an IpsecConnection(s) here will instantiate the connection(s). Removing an IpsecConnection(s) here cause the connection(s) to be torn down.   # noqa: E501

        :param connections: The connections of this IpsecConnectorSpec.  # noqa: E501
        :type: list[IpsecConnection]
        """

        self._connections = connections

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpsecConnectorSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IpsecConnectorSpec):
            return True

        return self.to_dict() != other.to_dict()
