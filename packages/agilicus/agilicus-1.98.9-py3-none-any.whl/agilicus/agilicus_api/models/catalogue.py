# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.23
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class Catalogue(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'category': 'str',
        'catalogue_entries': 'list[CatalogueEntry]',
        'created': 'datetime',
        'updated': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'category': 'category',
        'catalogue_entries': 'catalogue_entries',
        'created': 'created',
        'updated': 'updated'
    }

    def __init__(self, id=None, category=None, catalogue_entries=None, created=None, updated=None, local_vars_configuration=None):  # noqa: E501
        """Catalogue - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._category = None
        self._catalogue_entries = None
        self._created = None
        self._updated = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if category is not None:
            self.category = category
        if catalogue_entries is not None:
            self.catalogue_entries = catalogue_entries
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated

    @property
    def id(self):
        """Gets the id of this Catalogue.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The id of this Catalogue.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Catalogue.

        Unique identifier  # noqa: E501

        :param id: The id of this Catalogue.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def category(self):
        """Gets the category of this Catalogue.  # noqa: E501

        The category of catalogue that this catalogue belongs to.  # noqa: E501

        :return: The category of this Catalogue.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Catalogue.

        The category of catalogue that this catalogue belongs to.  # noqa: E501

        :param category: The category of this Catalogue.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                category is not None and len(category) > 100):
            raise ValueError("Invalid value for `category`, length must be less than or equal to `100`")  # noqa: E501

        self._category = category

    @property
    def catalogue_entries(self):
        """Gets the catalogue_entries of this Catalogue.  # noqa: E501

        The list of catalogue entries for the catalogue  # noqa: E501

        :return: The catalogue_entries of this Catalogue.  # noqa: E501
        :rtype: list[CatalogueEntry]
        """
        return self._catalogue_entries

    @catalogue_entries.setter
    def catalogue_entries(self, catalogue_entries):
        """Sets the catalogue_entries of this Catalogue.

        The list of catalogue entries for the catalogue  # noqa: E501

        :param catalogue_entries: The catalogue_entries of this Catalogue.  # noqa: E501
        :type: list[CatalogueEntry]
        """

        self._catalogue_entries = catalogue_entries

    @property
    def created(self):
        """Gets the created of this Catalogue.  # noqa: E501

        Creation time  # noqa: E501

        :return: The created of this Catalogue.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Catalogue.

        Creation time  # noqa: E501

        :param created: The created of this Catalogue.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this Catalogue.  # noqa: E501

        Update time  # noqa: E501

        :return: The updated of this Catalogue.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Catalogue.

        Update time  # noqa: E501

        :param updated: The updated of this Catalogue.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Catalogue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Catalogue):
            return True

        return self.to_dict() != other.to_dict()
