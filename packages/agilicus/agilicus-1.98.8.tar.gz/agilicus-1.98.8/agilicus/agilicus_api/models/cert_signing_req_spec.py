# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.19
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class CertSigningReqSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'org_id': 'str',
        'auto_renew': 'bool',
        'rotate_keys': 'bool',
        'request': 'str'
    }

    attribute_map = {
        'org_id': 'org_id',
        'auto_renew': 'auto_renew',
        'rotate_keys': 'rotate_keys',
        'request': 'request'
    }

    def __init__(self, org_id=None, auto_renew=True, rotate_keys=None, request=None, local_vars_configuration=None):  # noqa: E501
        """CertSigningReqSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._org_id = None
        self._auto_renew = None
        self._rotate_keys = None
        self._request = None
        self.discriminator = None

        self.org_id = org_id
        if auto_renew is not None:
            self.auto_renew = auto_renew
        if rotate_keys is not None:
            self.rotate_keys = rotate_keys
        self.request = request

    @property
    def org_id(self):
        """Gets the org_id of this CertSigningReqSpec.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The org_id of this CertSigningReqSpec.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this CertSigningReqSpec.

        Unique identifier  # noqa: E501

        :param org_id: The org_id of this CertSigningReqSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def auto_renew(self):
        """Gets the auto_renew of this CertSigningReqSpec.  # noqa: E501

        When enabled (true), system will automatically renew the certificate using the provided request CSR.  The resulting certificate will be updated in CertSigningReqCertificateStatus.   # noqa: E501

        :return: The auto_renew of this CertSigningReqSpec.  # noqa: E501
        :rtype: bool
        """
        return self._auto_renew

    @auto_renew.setter
    def auto_renew(self, auto_renew):
        """Sets the auto_renew of this CertSigningReqSpec.

        When enabled (true), system will automatically renew the certificate using the provided request CSR.  The resulting certificate will be updated in CertSigningReqCertificateStatus.   # noqa: E501

        :param auto_renew: The auto_renew of this CertSigningReqSpec.  # noqa: E501
        :type: bool
        """

        self._auto_renew = auto_renew

    @property
    def rotate_keys(self):
        """Gets the rotate_keys of this CertSigningReqSpec.  # noqa: E501

        Provided as a mechansim to notify a user/client to rotate their keys. A client would retrieve this and the client would then issue a new request. A subsequent PUT with a new request will reset this property to false. This may be true whereby a user has decided to update all keys, and this facility could be made available via the administration portal.   # noqa: E501

        :return: The rotate_keys of this CertSigningReqSpec.  # noqa: E501
        :rtype: bool
        """
        return self._rotate_keys

    @rotate_keys.setter
    def rotate_keys(self, rotate_keys):
        """Sets the rotate_keys of this CertSigningReqSpec.

        Provided as a mechansim to notify a user/client to rotate their keys. A client would retrieve this and the client would then issue a new request. A subsequent PUT with a new request will reset this property to false. This may be true whereby a user has decided to update all keys, and this facility could be made available via the administration portal.   # noqa: E501

        :param rotate_keys: The rotate_keys of this CertSigningReqSpec.  # noqa: E501
        :type: bool
        """

        self._rotate_keys = rotate_keys

    @property
    def request(self):
        """Gets the request of this CertSigningReqSpec.  # noqa: E501

        The certificate signing request (CSR) formatted as PEM. The certificate signing request (CSR) formatted as PEM.   # noqa: E501

        :return: The request of this CertSigningReqSpec.  # noqa: E501
        :rtype: str
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this CertSigningReqSpec.

        The certificate signing request (CSR) formatted as PEM. The certificate signing request (CSR) formatted as PEM.   # noqa: E501

        :param request: The request of this CertSigningReqSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and request is None:  # noqa: E501
            raise ValueError("Invalid value for `request`, must not be `None`")  # noqa: E501

        self._request = request

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertSigningReqSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CertSigningReqSpec):
            return True

        return self.to_dict() != other.to_dict()
