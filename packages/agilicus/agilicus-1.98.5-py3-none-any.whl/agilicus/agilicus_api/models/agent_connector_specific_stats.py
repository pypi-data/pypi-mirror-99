# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.17
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class AgentConnectorSpecificStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'system': 'AgentConnectorSystemStats',
        'transport': 'AgentConnectorTransportStats',
        'shares': 'AgentConnectorShareStats',
        'authz': 'AgentConnectorAuthzStats'
    }

    attribute_map = {
        'system': 'system',
        'transport': 'transport',
        'shares': 'shares',
        'authz': 'authz'
    }

    def __init__(self, system=None, transport=None, shares=None, authz=None, local_vars_configuration=None):  # noqa: E501
        """AgentConnectorSpecificStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._system = None
        self._transport = None
        self._shares = None
        self._authz = None
        self.discriminator = None

        self.system = system
        self.transport = transport
        if shares is not None:
            self.shares = shares
        if authz is not None:
            self.authz = authz

    @property
    def system(self):
        """Gets the system of this AgentConnectorSpecificStats.  # noqa: E501


        :return: The system of this AgentConnectorSpecificStats.  # noqa: E501
        :rtype: AgentConnectorSystemStats
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this AgentConnectorSpecificStats.


        :param system: The system of this AgentConnectorSpecificStats.  # noqa: E501
        :type: AgentConnectorSystemStats
        """
        if self.local_vars_configuration.client_side_validation and system is None:  # noqa: E501
            raise ValueError("Invalid value for `system`, must not be `None`")  # noqa: E501

        self._system = system

    @property
    def transport(self):
        """Gets the transport of this AgentConnectorSpecificStats.  # noqa: E501


        :return: The transport of this AgentConnectorSpecificStats.  # noqa: E501
        :rtype: AgentConnectorTransportStats
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this AgentConnectorSpecificStats.


        :param transport: The transport of this AgentConnectorSpecificStats.  # noqa: E501
        :type: AgentConnectorTransportStats
        """
        if self.local_vars_configuration.client_side_validation and transport is None:  # noqa: E501
            raise ValueError("Invalid value for `transport`, must not be `None`")  # noqa: E501

        self._transport = transport

    @property
    def shares(self):
        """Gets the shares of this AgentConnectorSpecificStats.  # noqa: E501


        :return: The shares of this AgentConnectorSpecificStats.  # noqa: E501
        :rtype: AgentConnectorShareStats
        """
        return self._shares

    @shares.setter
    def shares(self, shares):
        """Sets the shares of this AgentConnectorSpecificStats.


        :param shares: The shares of this AgentConnectorSpecificStats.  # noqa: E501
        :type: AgentConnectorShareStats
        """

        self._shares = shares

    @property
    def authz(self):
        """Gets the authz of this AgentConnectorSpecificStats.  # noqa: E501


        :return: The authz of this AgentConnectorSpecificStats.  # noqa: E501
        :rtype: AgentConnectorAuthzStats
        """
        return self._authz

    @authz.setter
    def authz(self, authz):
        """Sets the authz of this AgentConnectorSpecificStats.


        :param authz: The authz of this AgentConnectorSpecificStats.  # noqa: E501
        :type: AgentConnectorAuthzStats
        """

        self._authz = authz

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgentConnectorSpecificStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AgentConnectorSpecificStats):
            return True

        return self.to_dict() != other.to_dict()
