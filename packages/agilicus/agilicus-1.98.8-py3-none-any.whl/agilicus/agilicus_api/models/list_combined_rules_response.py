# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.19
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class ListCombinedRulesResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'limit': 'int',
        'combined_rules': 'list[CombinedRules]'
    }

    attribute_map = {
        'limit': 'limit',
        'combined_rules': 'combined_rules'
    }

    def __init__(self, limit=None, combined_rules=None, local_vars_configuration=None):  # noqa: E501
        """ListCombinedRulesResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._limit = None
        self._combined_rules = None
        self.discriminator = None

        self.limit = limit
        if combined_rules is not None:
            self.combined_rules = combined_rules

    @property
    def limit(self):
        """Gets the limit of this ListCombinedRulesResponse.  # noqa: E501

        The maximum number of CombinedRules that could be returned in the response.   # noqa: E501

        :return: The limit of this ListCombinedRulesResponse.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ListCombinedRulesResponse.

        The maximum number of CombinedRules that could be returned in the response.   # noqa: E501

        :param limit: The limit of this ListCombinedRulesResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and limit is None:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501

        self._limit = limit

    @property
    def combined_rules(self):
        """Gets the combined_rules of this ListCombinedRulesResponse.  # noqa: E501

        The combined rules matching the search criteria  # noqa: E501

        :return: The combined_rules of this ListCombinedRulesResponse.  # noqa: E501
        :rtype: list[CombinedRules]
        """
        return self._combined_rules

    @combined_rules.setter
    def combined_rules(self, combined_rules):
        """Sets the combined_rules of this ListCombinedRulesResponse.

        The combined rules matching the search criteria  # noqa: E501

        :param combined_rules: The combined_rules of this ListCombinedRulesResponse.  # noqa: E501
        :type: list[CombinedRules]
        """

        self._combined_rules = combined_rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListCombinedRulesResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListCombinedRulesResponse):
            return True

        return self.to_dict() != other.to_dict()
