# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.19
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class AgentConnectorAuthzStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allowed': 'int',
        'allowed_app_handled': 'int',
        'denied': 'int',
        'token_cached_failed': 'int',
        'token_cached_success': 'int',
        'token_parse_failed': 'int',
        'token_static_token': 'int',
        'token_bad_jti': 'int',
        'token_lookup_success': 'int',
        'token_lookup_notfound': 'int',
        'token_lookup_badrequest': 'int',
        'token_lookup_4xx_other': 'int',
        'token_lookup_error': 'int',
        'token_lookup_revoked': 'int',
        'token_basic_auth_decode_fail': 'int',
        'token_basic_auth_too_long': 'int',
        'token_basic_auth_no_password': 'int',
        'token_basic_auth_cached_success': 'int',
        'token_basic_auth_cached_failed': 'int'
    }

    attribute_map = {
        'allowed': 'allowed',
        'allowed_app_handled': 'allowed_app_handled',
        'denied': 'denied',
        'token_cached_failed': 'token_cached_failed',
        'token_cached_success': 'token_cached_success',
        'token_parse_failed': 'token_parse_failed',
        'token_static_token': 'token_static_token',
        'token_bad_jti': 'token_bad_jti',
        'token_lookup_success': 'token_lookup_success',
        'token_lookup_notfound': 'token_lookup_notfound',
        'token_lookup_badrequest': 'token_lookup_badrequest',
        'token_lookup_4xx_other': 'token_lookup_4xx_other',
        'token_lookup_error': 'token_lookup_error',
        'token_lookup_revoked': 'token_lookup_revoked',
        'token_basic_auth_decode_fail': 'token_basic_auth_decode_fail',
        'token_basic_auth_too_long': 'token_basic_auth_too_long',
        'token_basic_auth_no_password': 'token_basic_auth_no_password',
        'token_basic_auth_cached_success': 'token_basic_auth_cached_success',
        'token_basic_auth_cached_failed': 'token_basic_auth_cached_failed'
    }

    def __init__(self, allowed=None, allowed_app_handled=None, denied=None, token_cached_failed=None, token_cached_success=None, token_parse_failed=None, token_static_token=None, token_bad_jti=None, token_lookup_success=None, token_lookup_notfound=None, token_lookup_badrequest=None, token_lookup_4xx_other=None, token_lookup_error=None, token_lookup_revoked=None, token_basic_auth_decode_fail=None, token_basic_auth_too_long=None, token_basic_auth_no_password=None, token_basic_auth_cached_success=None, token_basic_auth_cached_failed=None, local_vars_configuration=None):  # noqa: E501
        """AgentConnectorAuthzStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._allowed = None
        self._allowed_app_handled = None
        self._denied = None
        self._token_cached_failed = None
        self._token_cached_success = None
        self._token_parse_failed = None
        self._token_static_token = None
        self._token_bad_jti = None
        self._token_lookup_success = None
        self._token_lookup_notfound = None
        self._token_lookup_badrequest = None
        self._token_lookup_4xx_other = None
        self._token_lookup_error = None
        self._token_lookup_revoked = None
        self._token_basic_auth_decode_fail = None
        self._token_basic_auth_too_long = None
        self._token_basic_auth_no_password = None
        self._token_basic_auth_cached_success = None
        self._token_basic_auth_cached_failed = None
        self.discriminator = None

        self.allowed = allowed
        self.allowed_app_handled = allowed_app_handled
        self.denied = denied
        self.token_cached_failed = token_cached_failed
        self.token_cached_success = token_cached_success
        self.token_parse_failed = token_parse_failed
        self.token_static_token = token_static_token
        self.token_bad_jti = token_bad_jti
        self.token_lookup_success = token_lookup_success
        self.token_lookup_notfound = token_lookup_notfound
        self.token_lookup_badrequest = token_lookup_badrequest
        self.token_lookup_4xx_other = token_lookup_4xx_other
        self.token_lookup_error = token_lookup_error
        self.token_lookup_revoked = token_lookup_revoked
        self.token_basic_auth_decode_fail = token_basic_auth_decode_fail
        self.token_basic_auth_too_long = token_basic_auth_too_long
        self.token_basic_auth_no_password = token_basic_auth_no_password
        self.token_basic_auth_cached_success = token_basic_auth_cached_success
        self.token_basic_auth_cached_failed = token_basic_auth_cached_failed

    @property
    def allowed(self):
        """Gets the allowed of this AgentConnectorAuthzStats.  # noqa: E501

        The number of allowed requests.   # noqa: E501

        :return: The allowed of this AgentConnectorAuthzStats.  # noqa: E501
        :rtype: int
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """Sets the allowed of this AgentConnectorAuthzStats.

        The number of allowed requests.   # noqa: E501

        :param allowed: The allowed of this AgentConnectorAuthzStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and allowed is None:  # noqa: E501
            raise ValueError("Invalid value for `allowed`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                allowed is not None and allowed < 0):  # noqa: E501
            raise ValueError("Invalid value for `allowed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._allowed = allowed

    @property
    def allowed_app_handled(self):
        """Gets the allowed_app_handled of this AgentConnectorAuthzStats.  # noqa: E501

        The authz has been allowed due to the authentication handled by the application.   # noqa: E501

        :return: The allowed_app_handled of this AgentConnectorAuthzStats.  # noqa: E501
        :rtype: int
        """
        return self._allowed_app_handled

    @allowed_app_handled.setter
    def allowed_app_handled(self, allowed_app_handled):
        """Sets the allowed_app_handled of this AgentConnectorAuthzStats.

        The authz has been allowed due to the authentication handled by the application.   # noqa: E501

        :param allowed_app_handled: The allowed_app_handled of this AgentConnectorAuthzStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and allowed_app_handled is None:  # noqa: E501
            raise ValueError("Invalid value for `allowed_app_handled`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                allowed_app_handled is not None and allowed_app_handled < 0):  # noqa: E501
            raise ValueError("Invalid value for `allowed_app_handled`, must be a value greater than or equal to `0`")  # noqa: E501

        self._allowed_app_handled = allowed_app_handled

    @property
    def denied(self):
        """Gets the denied of this AgentConnectorAuthzStats.  # noqa: E501

        The number of denied requests.   # noqa: E501

        :return: The denied of this AgentConnectorAuthzStats.  # noqa: E501
        :rtype: int
        """
        return self._denied

    @denied.setter
    def denied(self, denied):
        """Sets the denied of this AgentConnectorAuthzStats.

        The number of denied requests.   # noqa: E501

        :param denied: The denied of this AgentConnectorAuthzStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and denied is None:  # noqa: E501
            raise ValueError("Invalid value for `denied`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                denied is not None and denied < 0):  # noqa: E501
            raise ValueError("Invalid value for `denied`, must be a value greater than or equal to `0`")  # noqa: E501

        self._denied = denied

    @property
    def token_cached_failed(self):
        """Gets the token_cached_failed of this AgentConnectorAuthzStats.  # noqa: E501

        The number of times a failed lookup response was returned that had been cached.   # noqa: E501

        :return: The token_cached_failed of this AgentConnectorAuthzStats.  # noqa: E501
        :rtype: int
        """
        return self._token_cached_failed

    @token_cached_failed.setter
    def token_cached_failed(self, token_cached_failed):
        """Sets the token_cached_failed of this AgentConnectorAuthzStats.

        The number of times a failed lookup response was returned that had been cached.   # noqa: E501

        :param token_cached_failed: The token_cached_failed of this AgentConnectorAuthzStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and token_cached_failed is None:  # noqa: E501
            raise ValueError("Invalid value for `token_cached_failed`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                token_cached_failed is not None and token_cached_failed < 0):  # noqa: E501
            raise ValueError("Invalid value for `token_cached_failed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._token_cached_failed = token_cached_failed

    @property
    def token_cached_success(self):
        """Gets the token_cached_success of this AgentConnectorAuthzStats.  # noqa: E501

        The number of times a successful lookup response was returned that had been cached.   # noqa: E501

        :return: The token_cached_success of this AgentConnectorAuthzStats.  # noqa: E501
        :rtype: int
        """
        return self._token_cached_success

    @token_cached_success.setter
    def token_cached_success(self, token_cached_success):
        """Sets the token_cached_success of this AgentConnectorAuthzStats.

        The number of times a successful lookup response was returned that had been cached.   # noqa: E501

        :param token_cached_success: The token_cached_success of this AgentConnectorAuthzStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and token_cached_success is None:  # noqa: E501
            raise ValueError("Invalid value for `token_cached_success`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                token_cached_success is not None and token_cached_success < 0):  # noqa: E501
            raise ValueError("Invalid value for `token_cached_success`, must be a value greater than or equal to `0`")  # noqa: E501

        self._token_cached_success = token_cached_success

    @property
    def token_parse_failed(self):
        """Gets the token_parse_failed of this AgentConnectorAuthzStats.  # noqa: E501

        The number of times a there was a failure parsing the token. This is due to missing claims in the token.   # noqa: E501

        :return: The token_parse_failed of this AgentConnectorAuthzStats.  # noqa: E501
        :rtype: int
        """
        return self._token_parse_failed

    @token_parse_failed.setter
    def token_parse_failed(self, token_parse_failed):
        """Sets the token_parse_failed of this AgentConnectorAuthzStats.

        The number of times a there was a failure parsing the token. This is due to missing claims in the token.   # noqa: E501

        :param token_parse_failed: The token_parse_failed of this AgentConnectorAuthzStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and token_parse_failed is None:  # noqa: E501
            raise ValueError("Invalid value for `token_parse_failed`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                token_parse_failed is not None and token_parse_failed < 0):  # noqa: E501
            raise ValueError("Invalid value for `token_parse_failed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._token_parse_failed = token_parse_failed

    @property
    def token_static_token(self):
        """Gets the token_static_token of this AgentConnectorAuthzStats.  # noqa: E501

        The number of times a static token was used in a request.   # noqa: E501

        :return: The token_static_token of this AgentConnectorAuthzStats.  # noqa: E501
        :rtype: int
        """
        return self._token_static_token

    @token_static_token.setter
    def token_static_token(self, token_static_token):
        """Sets the token_static_token of this AgentConnectorAuthzStats.

        The number of times a static token was used in a request.   # noqa: E501

        :param token_static_token: The token_static_token of this AgentConnectorAuthzStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and token_static_token is None:  # noqa: E501
            raise ValueError("Invalid value for `token_static_token`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                token_static_token is not None and token_static_token < 0):  # noqa: E501
            raise ValueError("Invalid value for `token_static_token`, must be a value greater than or equal to `0`")  # noqa: E501

        self._token_static_token = token_static_token

    @property
    def token_bad_jti(self):
        """Gets the token_bad_jti of this AgentConnectorAuthzStats.  # noqa: E501

        The number of times the token JTI was missing.   # noqa: E501

        :return: The token_bad_jti of this AgentConnectorAuthzStats.  # noqa: E501
        :rtype: int
        """
        return self._token_bad_jti

    @token_bad_jti.setter
    def token_bad_jti(self, token_bad_jti):
        """Sets the token_bad_jti of this AgentConnectorAuthzStats.

        The number of times the token JTI was missing.   # noqa: E501

        :param token_bad_jti: The token_bad_jti of this AgentConnectorAuthzStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and token_bad_jti is None:  # noqa: E501
            raise ValueError("Invalid value for `token_bad_jti`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                token_bad_jti is not None and token_bad_jti < 0):  # noqa: E501
            raise ValueError("Invalid value for `token_bad_jti`, must be a value greater than or equal to `0`")  # noqa: E501

        self._token_bad_jti = token_bad_jti

    @property
    def token_lookup_success(self):
        """Gets the token_lookup_success of this AgentConnectorAuthzStats.  # noqa: E501

        The number of times a token introspect was performed and the result was success.   # noqa: E501

        :return: The token_lookup_success of this AgentConnectorAuthzStats.  # noqa: E501
        :rtype: int
        """
        return self._token_lookup_success

    @token_lookup_success.setter
    def token_lookup_success(self, token_lookup_success):
        """Sets the token_lookup_success of this AgentConnectorAuthzStats.

        The number of times a token introspect was performed and the result was success.   # noqa: E501

        :param token_lookup_success: The token_lookup_success of this AgentConnectorAuthzStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and token_lookup_success is None:  # noqa: E501
            raise ValueError("Invalid value for `token_lookup_success`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                token_lookup_success is not None and token_lookup_success < 0):  # noqa: E501
            raise ValueError("Invalid value for `token_lookup_success`, must be a value greater than or equal to `0`")  # noqa: E501

        self._token_lookup_success = token_lookup_success

    @property
    def token_lookup_notfound(self):
        """Gets the token_lookup_notfound of this AgentConnectorAuthzStats.  # noqa: E501

        The number of times a token introspect was performed and the result was not found.   # noqa: E501

        :return: The token_lookup_notfound of this AgentConnectorAuthzStats.  # noqa: E501
        :rtype: int
        """
        return self._token_lookup_notfound

    @token_lookup_notfound.setter
    def token_lookup_notfound(self, token_lookup_notfound):
        """Sets the token_lookup_notfound of this AgentConnectorAuthzStats.

        The number of times a token introspect was performed and the result was not found.   # noqa: E501

        :param token_lookup_notfound: The token_lookup_notfound of this AgentConnectorAuthzStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and token_lookup_notfound is None:  # noqa: E501
            raise ValueError("Invalid value for `token_lookup_notfound`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                token_lookup_notfound is not None and token_lookup_notfound < 0):  # noqa: E501
            raise ValueError("Invalid value for `token_lookup_notfound`, must be a value greater than or equal to `0`")  # noqa: E501

        self._token_lookup_notfound = token_lookup_notfound

    @property
    def token_lookup_badrequest(self):
        """Gets the token_lookup_badrequest of this AgentConnectorAuthzStats.  # noqa: E501

        The number of times a token introspect was performed and the result was a bad request   # noqa: E501

        :return: The token_lookup_badrequest of this AgentConnectorAuthzStats.  # noqa: E501
        :rtype: int
        """
        return self._token_lookup_badrequest

    @token_lookup_badrequest.setter
    def token_lookup_badrequest(self, token_lookup_badrequest):
        """Sets the token_lookup_badrequest of this AgentConnectorAuthzStats.

        The number of times a token introspect was performed and the result was a bad request   # noqa: E501

        :param token_lookup_badrequest: The token_lookup_badrequest of this AgentConnectorAuthzStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and token_lookup_badrequest is None:  # noqa: E501
            raise ValueError("Invalid value for `token_lookup_badrequest`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                token_lookup_badrequest is not None and token_lookup_badrequest < 0):  # noqa: E501
            raise ValueError("Invalid value for `token_lookup_badrequest`, must be a value greater than or equal to `0`")  # noqa: E501

        self._token_lookup_badrequest = token_lookup_badrequest

    @property
    def token_lookup_4xx_other(self):
        """Gets the token_lookup_4xx_other of this AgentConnectorAuthzStats.  # noqa: E501

        The number of times a token introspect was performed and the result was a 4xx result that was not a 404, 410 or 400.   # noqa: E501

        :return: The token_lookup_4xx_other of this AgentConnectorAuthzStats.  # noqa: E501
        :rtype: int
        """
        return self._token_lookup_4xx_other

    @token_lookup_4xx_other.setter
    def token_lookup_4xx_other(self, token_lookup_4xx_other):
        """Sets the token_lookup_4xx_other of this AgentConnectorAuthzStats.

        The number of times a token introspect was performed and the result was a 4xx result that was not a 404, 410 or 400.   # noqa: E501

        :param token_lookup_4xx_other: The token_lookup_4xx_other of this AgentConnectorAuthzStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and token_lookup_4xx_other is None:  # noqa: E501
            raise ValueError("Invalid value for `token_lookup_4xx_other`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                token_lookup_4xx_other is not None and token_lookup_4xx_other < 0):  # noqa: E501
            raise ValueError("Invalid value for `token_lookup_4xx_other`, must be a value greater than or equal to `0`")  # noqa: E501

        self._token_lookup_4xx_other = token_lookup_4xx_other

    @property
    def token_lookup_error(self):
        """Gets the token_lookup_error of this AgentConnectorAuthzStats.  # noqa: E501

        The number of times a token introspect was performed and the result was an error.   # noqa: E501

        :return: The token_lookup_error of this AgentConnectorAuthzStats.  # noqa: E501
        :rtype: int
        """
        return self._token_lookup_error

    @token_lookup_error.setter
    def token_lookup_error(self, token_lookup_error):
        """Sets the token_lookup_error of this AgentConnectorAuthzStats.

        The number of times a token introspect was performed and the result was an error.   # noqa: E501

        :param token_lookup_error: The token_lookup_error of this AgentConnectorAuthzStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and token_lookup_error is None:  # noqa: E501
            raise ValueError("Invalid value for `token_lookup_error`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                token_lookup_error is not None and token_lookup_error < 0):  # noqa: E501
            raise ValueError("Invalid value for `token_lookup_error`, must be a value greater than or equal to `0`")  # noqa: E501

        self._token_lookup_error = token_lookup_error

    @property
    def token_lookup_revoked(self):
        """Gets the token_lookup_revoked of this AgentConnectorAuthzStats.  # noqa: E501

        The number of times a token introspect was performed and the result returned was that the token has been revoked.   # noqa: E501

        :return: The token_lookup_revoked of this AgentConnectorAuthzStats.  # noqa: E501
        :rtype: int
        """
        return self._token_lookup_revoked

    @token_lookup_revoked.setter
    def token_lookup_revoked(self, token_lookup_revoked):
        """Sets the token_lookup_revoked of this AgentConnectorAuthzStats.

        The number of times a token introspect was performed and the result returned was that the token has been revoked.   # noqa: E501

        :param token_lookup_revoked: The token_lookup_revoked of this AgentConnectorAuthzStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and token_lookup_revoked is None:  # noqa: E501
            raise ValueError("Invalid value for `token_lookup_revoked`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                token_lookup_revoked is not None and token_lookup_revoked < 0):  # noqa: E501
            raise ValueError("Invalid value for `token_lookup_revoked`, must be a value greater than or equal to `0`")  # noqa: E501

        self._token_lookup_revoked = token_lookup_revoked

    @property
    def token_basic_auth_decode_fail(self):
        """Gets the token_basic_auth_decode_fail of this AgentConnectorAuthzStats.  # noqa: E501

        The number of times a request was made with basic auth and the base64 decode failed.   # noqa: E501

        :return: The token_basic_auth_decode_fail of this AgentConnectorAuthzStats.  # noqa: E501
        :rtype: int
        """
        return self._token_basic_auth_decode_fail

    @token_basic_auth_decode_fail.setter
    def token_basic_auth_decode_fail(self, token_basic_auth_decode_fail):
        """Sets the token_basic_auth_decode_fail of this AgentConnectorAuthzStats.

        The number of times a request was made with basic auth and the base64 decode failed.   # noqa: E501

        :param token_basic_auth_decode_fail: The token_basic_auth_decode_fail of this AgentConnectorAuthzStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and token_basic_auth_decode_fail is None:  # noqa: E501
            raise ValueError("Invalid value for `token_basic_auth_decode_fail`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                token_basic_auth_decode_fail is not None and token_basic_auth_decode_fail < 0):  # noqa: E501
            raise ValueError("Invalid value for `token_basic_auth_decode_fail`, must be a value greater than or equal to `0`")  # noqa: E501

        self._token_basic_auth_decode_fail = token_basic_auth_decode_fail

    @property
    def token_basic_auth_too_long(self):
        """Gets the token_basic_auth_too_long of this AgentConnectorAuthzStats.  # noqa: E501

        The number of times a request was made with basic auth and the basic auth string was too long. The maximum size permitted is 141 characters.   # noqa: E501

        :return: The token_basic_auth_too_long of this AgentConnectorAuthzStats.  # noqa: E501
        :rtype: int
        """
        return self._token_basic_auth_too_long

    @token_basic_auth_too_long.setter
    def token_basic_auth_too_long(self, token_basic_auth_too_long):
        """Sets the token_basic_auth_too_long of this AgentConnectorAuthzStats.

        The number of times a request was made with basic auth and the basic auth string was too long. The maximum size permitted is 141 characters.   # noqa: E501

        :param token_basic_auth_too_long: The token_basic_auth_too_long of this AgentConnectorAuthzStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and token_basic_auth_too_long is None:  # noqa: E501
            raise ValueError("Invalid value for `token_basic_auth_too_long`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                token_basic_auth_too_long is not None and token_basic_auth_too_long < 0):  # noqa: E501
            raise ValueError("Invalid value for `token_basic_auth_too_long`, must be a value greater than or equal to `0`")  # noqa: E501

        self._token_basic_auth_too_long = token_basic_auth_too_long

    @property
    def token_basic_auth_no_password(self):
        """Gets the token_basic_auth_no_password of this AgentConnectorAuthzStats.  # noqa: E501

        The number of times a request was made with basic auth and the password was missing.   # noqa: E501

        :return: The token_basic_auth_no_password of this AgentConnectorAuthzStats.  # noqa: E501
        :rtype: int
        """
        return self._token_basic_auth_no_password

    @token_basic_auth_no_password.setter
    def token_basic_auth_no_password(self, token_basic_auth_no_password):
        """Sets the token_basic_auth_no_password of this AgentConnectorAuthzStats.

        The number of times a request was made with basic auth and the password was missing.   # noqa: E501

        :param token_basic_auth_no_password: The token_basic_auth_no_password of this AgentConnectorAuthzStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and token_basic_auth_no_password is None:  # noqa: E501
            raise ValueError("Invalid value for `token_basic_auth_no_password`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                token_basic_auth_no_password is not None and token_basic_auth_no_password < 0):  # noqa: E501
            raise ValueError("Invalid value for `token_basic_auth_no_password`, must be a value greater than or equal to `0`")  # noqa: E501

        self._token_basic_auth_no_password = token_basic_auth_no_password

    @property
    def token_basic_auth_cached_success(self):
        """Gets the token_basic_auth_cached_success of this AgentConnectorAuthzStats.  # noqa: E501

        The number of times a request was made with basic auth and the successful result was returned from the cache.   # noqa: E501

        :return: The token_basic_auth_cached_success of this AgentConnectorAuthzStats.  # noqa: E501
        :rtype: int
        """
        return self._token_basic_auth_cached_success

    @token_basic_auth_cached_success.setter
    def token_basic_auth_cached_success(self, token_basic_auth_cached_success):
        """Sets the token_basic_auth_cached_success of this AgentConnectorAuthzStats.

        The number of times a request was made with basic auth and the successful result was returned from the cache.   # noqa: E501

        :param token_basic_auth_cached_success: The token_basic_auth_cached_success of this AgentConnectorAuthzStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and token_basic_auth_cached_success is None:  # noqa: E501
            raise ValueError("Invalid value for `token_basic_auth_cached_success`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                token_basic_auth_cached_success is not None and token_basic_auth_cached_success < 0):  # noqa: E501
            raise ValueError("Invalid value for `token_basic_auth_cached_success`, must be a value greater than or equal to `0`")  # noqa: E501

        self._token_basic_auth_cached_success = token_basic_auth_cached_success

    @property
    def token_basic_auth_cached_failed(self):
        """Gets the token_basic_auth_cached_failed of this AgentConnectorAuthzStats.  # noqa: E501

        The number of times a request was made with basic auth and the failed result was returned from the cache.   # noqa: E501

        :return: The token_basic_auth_cached_failed of this AgentConnectorAuthzStats.  # noqa: E501
        :rtype: int
        """
        return self._token_basic_auth_cached_failed

    @token_basic_auth_cached_failed.setter
    def token_basic_auth_cached_failed(self, token_basic_auth_cached_failed):
        """Sets the token_basic_auth_cached_failed of this AgentConnectorAuthzStats.

        The number of times a request was made with basic auth and the failed result was returned from the cache.   # noqa: E501

        :param token_basic_auth_cached_failed: The token_basic_auth_cached_failed of this AgentConnectorAuthzStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and token_basic_auth_cached_failed is None:  # noqa: E501
            raise ValueError("Invalid value for `token_basic_auth_cached_failed`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                token_basic_auth_cached_failed is not None and token_basic_auth_cached_failed < 0):  # noqa: E501
            raise ValueError("Invalid value for `token_basic_auth_cached_failed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._token_basic_auth_cached_failed = token_basic_auth_cached_failed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgentConnectorAuthzStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AgentConnectorAuthzStats):
            return True

        return self.to_dict() != other.to_dict()
