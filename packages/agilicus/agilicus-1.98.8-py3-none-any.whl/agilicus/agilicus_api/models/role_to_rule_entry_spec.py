# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.19
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class RoleToRuleEntrySpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'role_id': 'str',
        'rule_id': 'str',
        'app_id': 'str',
        'org_id': 'str',
        'included': 'bool'
    }

    attribute_map = {
        'role_id': 'role_id',
        'rule_id': 'rule_id',
        'app_id': 'app_id',
        'org_id': 'org_id',
        'included': 'included'
    }

    def __init__(self, role_id=None, rule_id=None, app_id=None, org_id=None, included=True, local_vars_configuration=None):  # noqa: E501
        """RoleToRuleEntrySpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._role_id = None
        self._rule_id = None
        self._app_id = None
        self._org_id = None
        self._included = None
        self.discriminator = None

        if role_id is not None:
            self.role_id = role_id
        if rule_id is not None:
            self.rule_id = rule_id
        if app_id is not None:
            self.app_id = app_id
        if org_id is not None:
            self.org_id = org_id
        if included is not None:
            self.included = included

    @property
    def role_id(self):
        """Gets the role_id of this RoleToRuleEntrySpec.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The role_id of this RoleToRuleEntrySpec.  # noqa: E501
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this RoleToRuleEntrySpec.

        Unique identifier  # noqa: E501

        :param role_id: The role_id of this RoleToRuleEntrySpec.  # noqa: E501
        :type: str
        """

        self._role_id = role_id

    @property
    def rule_id(self):
        """Gets the rule_id of this RoleToRuleEntrySpec.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The rule_id of this RoleToRuleEntrySpec.  # noqa: E501
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this RoleToRuleEntrySpec.

        Unique identifier  # noqa: E501

        :param rule_id: The rule_id of this RoleToRuleEntrySpec.  # noqa: E501
        :type: str
        """

        self._rule_id = rule_id

    @property
    def app_id(self):
        """Gets the app_id of this RoleToRuleEntrySpec.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The app_id of this RoleToRuleEntrySpec.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this RoleToRuleEntrySpec.

        Unique identifier  # noqa: E501

        :param app_id: The app_id of this RoleToRuleEntrySpec.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def org_id(self):
        """Gets the org_id of this RoleToRuleEntrySpec.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The org_id of this RoleToRuleEntrySpec.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this RoleToRuleEntrySpec.

        Unique identifier  # noqa: E501

        :param org_id: The org_id of this RoleToRuleEntrySpec.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def included(self):
        """Gets the included of this RoleToRuleEntrySpec.  # noqa: E501

        Whether to include or exclude the rule in the role. If true, the rule is included. If false, it is excluded.   # noqa: E501

        :return: The included of this RoleToRuleEntrySpec.  # noqa: E501
        :rtype: bool
        """
        return self._included

    @included.setter
    def included(self, included):
        """Sets the included of this RoleToRuleEntrySpec.

        Whether to include or exclude the rule in the role. If true, the rule is included. If false, it is excluded.   # noqa: E501

        :param included: The included of this RoleToRuleEntrySpec.  # noqa: E501
        :type: bool
        """

        self._included = included

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoleToRuleEntrySpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RoleToRuleEntrySpec):
            return True

        return self.to_dict() != other.to_dict()
