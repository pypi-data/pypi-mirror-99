# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.18
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class OrganisationStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'all_up': 'bool',
        'admin_up': 'bool',
        'issuer_up': 'bool',
        'current_state': 'OrganisationStateStatus'
    }

    attribute_map = {
        'all_up': 'all_up',
        'admin_up': 'admin_up',
        'issuer_up': 'issuer_up',
        'current_state': 'current_state'
    }

    def __init__(self, all_up=None, admin_up=None, issuer_up=None, current_state=None, local_vars_configuration=None):  # noqa: E501
        """OrganisationStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._all_up = None
        self._admin_up = None
        self._issuer_up = None
        self._current_state = None
        self.discriminator = None

        self.all_up = all_up
        self.admin_up = admin_up
        self.issuer_up = issuer_up
        if current_state is not None:
            self.current_state = current_state

    @property
    def all_up(self):
        """Gets the all_up of this OrganisationStatus.  # noqa: E501

        An aggregate status indicating that the organisation is fully ready.  # noqa: E501

        :return: The all_up of this OrganisationStatus.  # noqa: E501
        :rtype: bool
        """
        return self._all_up

    @all_up.setter
    def all_up(self, all_up):
        """Sets the all_up of this OrganisationStatus.

        An aggregate status indicating that the organisation is fully ready.  # noqa: E501

        :param all_up: The all_up of this OrganisationStatus.  # noqa: E501
        :type: bool
        """

        self._all_up = all_up

    @property
    def admin_up(self):
        """Gets the admin_up of this OrganisationStatus.  # noqa: E501

        status of organisation admin portal  # noqa: E501

        :return: The admin_up of this OrganisationStatus.  # noqa: E501
        :rtype: bool
        """
        return self._admin_up

    @admin_up.setter
    def admin_up(self, admin_up):
        """Sets the admin_up of this OrganisationStatus.

        status of organisation admin portal  # noqa: E501

        :param admin_up: The admin_up of this OrganisationStatus.  # noqa: E501
        :type: bool
        """

        self._admin_up = admin_up

    @property
    def issuer_up(self):
        """Gets the issuer_up of this OrganisationStatus.  # noqa: E501

        status of organisation issuer  # noqa: E501

        :return: The issuer_up of this OrganisationStatus.  # noqa: E501
        :rtype: bool
        """
        return self._issuer_up

    @issuer_up.setter
    def issuer_up(self, issuer_up):
        """Sets the issuer_up of this OrganisationStatus.

        status of organisation issuer  # noqa: E501

        :param issuer_up: The issuer_up of this OrganisationStatus.  # noqa: E501
        :type: bool
        """

        self._issuer_up = issuer_up

    @property
    def current_state(self):
        """Gets the current_state of this OrganisationStatus.  # noqa: E501


        :return: The current_state of this OrganisationStatus.  # noqa: E501
        :rtype: OrganisationStateStatus
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """Sets the current_state of this OrganisationStatus.


        :param current_state: The current_state of this OrganisationStatus.  # noqa: E501
        :type: OrganisationStateStatus
        """

        self._current_state = current_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganisationStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganisationStatus):
            return True

        return self.to_dict() != other.to_dict()
