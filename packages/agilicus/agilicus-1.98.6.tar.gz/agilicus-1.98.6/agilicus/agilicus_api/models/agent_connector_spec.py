# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.18
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class AgentConnectorSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'name_slug': 'str',
        'org_id': 'str',
        'max_number_connections': 'int',
        'connection_uri': 'str',
        'service_account_required': 'bool',
        'local_authentication_enabled': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'name_slug': 'name_slug',
        'org_id': 'org_id',
        'max_number_connections': 'max_number_connections',
        'connection_uri': 'connection_uri',
        'service_account_required': 'service_account_required',
        'local_authentication_enabled': 'local_authentication_enabled'
    }

    def __init__(self, name=None, name_slug=None, org_id=None, max_number_connections=None, connection_uri=None, service_account_required=None, local_authentication_enabled=None, local_vars_configuration=None):  # noqa: E501
        """AgentConnectorSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._name_slug = None
        self._org_id = None
        self._max_number_connections = None
        self._connection_uri = None
        self._service_account_required = None
        self._local_authentication_enabled = None
        self.discriminator = None

        self.name = name
        if name_slug is not None:
            self.name_slug = name_slug
        self.org_id = org_id
        if max_number_connections is not None:
            self.max_number_connections = max_number_connections
        if connection_uri is not None:
            self.connection_uri = connection_uri
        if service_account_required is not None:
            self.service_account_required = service_account_required
        if local_authentication_enabled is not None:
            self.local_authentication_enabled = local_authentication_enabled

    @property
    def name(self):
        """Gets the name of this AgentConnectorSpec.  # noqa: E501

        A descriptive name for the connector  # noqa: E501

        :return: The name of this AgentConnectorSpec.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AgentConnectorSpec.

        A descriptive name for the connector  # noqa: E501

        :param name: The name of this AgentConnectorSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501

        self._name = name

    @property
    def name_slug(self):
        """Gets the name_slug of this AgentConnectorSpec.  # noqa: E501

        A human readable slug to identify a resource and that is rfc1035 label compliant. The length has been restricted to 20 characters such that this name can be concatenated with other names or slugs. A slug is readOnly as it is generated by the backend resource.   # noqa: E501

        :return: The name_slug of this AgentConnectorSpec.  # noqa: E501
        :rtype: str
        """
        return self._name_slug

    @name_slug.setter
    def name_slug(self, name_slug):
        """Sets the name_slug of this AgentConnectorSpec.

        A human readable slug to identify a resource and that is rfc1035 label compliant. The length has been restricted to 20 characters such that this name can be concatenated with other names or slugs. A slug is readOnly as it is generated by the backend resource.   # noqa: E501

        :param name_slug: The name_slug of this AgentConnectorSpec.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name_slug is not None and len(name_slug) > 20):
            raise ValueError("Invalid value for `name_slug`, length must be less than or equal to `20`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name_slug is not None and not re.search(r'^[a-z]|[a-z0-9][a-z0-9\-]*[a-z0-9]$', name_slug)):  # noqa: E501
            raise ValueError(r"Invalid value for `name_slug`, must be a follow pattern or equal to `/^[a-z]|[a-z0-9][a-z0-9\-]*[a-z0-9]$/`")  # noqa: E501

        self._name_slug = name_slug

    @property
    def org_id(self):
        """Gets the org_id of this AgentConnectorSpec.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The org_id of this AgentConnectorSpec.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this AgentConnectorSpec.

        Unique identifier  # noqa: E501

        :param org_id: The org_id of this AgentConnectorSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def max_number_connections(self):
        """Gets the max_number_connections of this AgentConnectorSpec.  # noqa: E501

        The maximum number of connections to maintain to the cluster when stable. Note that this value may be exceeded during times of reconfiguration. A value of zero means that the connector is effectively unused by this Secure Agent.   # noqa: E501

        :return: The max_number_connections of this AgentConnectorSpec.  # noqa: E501
        :rtype: int
        """
        return self._max_number_connections

    @max_number_connections.setter
    def max_number_connections(self, max_number_connections):
        """Sets the max_number_connections of this AgentConnectorSpec.

        The maximum number of connections to maintain to the cluster when stable. Note that this value may be exceeded during times of reconfiguration. A value of zero means that the connector is effectively unused by this Secure Agent.   # noqa: E501

        :param max_number_connections: The max_number_connections of this AgentConnectorSpec.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                max_number_connections is not None and max_number_connections > 64):  # noqa: E501
            raise ValueError("Invalid value for `max_number_connections`, must be a value less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_number_connections is not None and max_number_connections < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_number_connections`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_number_connections = max_number_connections

    @property
    def connection_uri(self):
        """Gets the connection_uri of this AgentConnectorSpec.  # noqa: E501

        Overrides the default URI used to connect to this connector. This can be used to point the Secure Agent somewhere other than the default.   # noqa: E501

        :return: The connection_uri of this AgentConnectorSpec.  # noqa: E501
        :rtype: str
        """
        return self._connection_uri

    @connection_uri.setter
    def connection_uri(self, connection_uri):
        """Sets the connection_uri of this AgentConnectorSpec.

        Overrides the default URI used to connect to this connector. This can be used to point the Secure Agent somewhere other than the default.   # noqa: E501

        :param connection_uri: The connection_uri of this AgentConnectorSpec.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                connection_uri is not None and len(connection_uri) > 1024):
            raise ValueError("Invalid value for `connection_uri`, length must be less than or equal to `1024`")  # noqa: E501

        self._connection_uri = connection_uri

    @property
    def service_account_required(self):
        """Gets the service_account_required of this AgentConnectorSpec.  # noqa: E501

        If service_account_enabled field is set to true, a service account will be created. If service_account_enabled field is set to false, the service account will be deleted. If the service_account_enabled field is not set no action on the service account is taken.   # noqa: E501

        :return: The service_account_required of this AgentConnectorSpec.  # noqa: E501
        :rtype: bool
        """
        return self._service_account_required

    @service_account_required.setter
    def service_account_required(self, service_account_required):
        """Sets the service_account_required of this AgentConnectorSpec.

        If service_account_enabled field is set to true, a service account will be created. If service_account_enabled field is set to false, the service account will be deleted. If the service_account_enabled field is not set no action on the service account is taken.   # noqa: E501

        :param service_account_required: The service_account_required of this AgentConnectorSpec.  # noqa: E501
        :type: bool
        """

        self._service_account_required = service_account_required

    @property
    def local_authentication_enabled(self):
        """Gets the local_authentication_enabled of this AgentConnectorSpec.  # noqa: E501

        Determines whether or not the agent will expose an endpoint for local authentication  # noqa: E501

        :return: The local_authentication_enabled of this AgentConnectorSpec.  # noqa: E501
        :rtype: bool
        """
        return self._local_authentication_enabled

    @local_authentication_enabled.setter
    def local_authentication_enabled(self, local_authentication_enabled):
        """Sets the local_authentication_enabled of this AgentConnectorSpec.

        Determines whether or not the agent will expose an endpoint for local authentication  # noqa: E501

        :param local_authentication_enabled: The local_authentication_enabled of this AgentConnectorSpec.  # noqa: E501
        :type: bool
        """

        self._local_authentication_enabled = local_authentication_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgentConnectorSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AgentConnectorSpec):
            return True

        return self.to_dict() != other.to_dict()
