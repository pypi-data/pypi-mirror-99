# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.18
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class AuthenticationDocumentSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_id': 'str',
        'org_id': 'str',
        'auth_issuer_url': 'str',
        'expiry': 'datetime'
    }

    attribute_map = {
        'user_id': 'user_id',
        'org_id': 'org_id',
        'auth_issuer_url': 'auth_issuer_url',
        'expiry': 'expiry'
    }

    def __init__(self, user_id=None, org_id=None, auth_issuer_url=None, expiry=None, local_vars_configuration=None):  # noqa: E501
        """AuthenticationDocumentSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._user_id = None
        self._org_id = None
        self._auth_issuer_url = None
        self._expiry = None
        self.discriminator = None

        self.user_id = user_id
        self.org_id = org_id
        if auth_issuer_url is not None:
            self.auth_issuer_url = auth_issuer_url
        if expiry is not None:
            self.expiry = expiry

    @property
    def user_id(self):
        """Gets the user_id of this AuthenticationDocumentSpec.  # noqa: E501

        The user id requesting an authentication document  # noqa: E501

        :return: The user_id of this AuthenticationDocumentSpec.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AuthenticationDocumentSpec.

        The user id requesting an authentication document  # noqa: E501

        :param user_id: The user_id of this AuthenticationDocumentSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                user_id is not None and len(user_id) > 40):
            raise ValueError("Invalid value for `user_id`, length must be less than or equal to `40`")  # noqa: E501

        self._user_id = user_id

    @property
    def org_id(self):
        """Gets the org_id of this AuthenticationDocumentSpec.  # noqa: E501

        The org id for the user requesting an authentication document  # noqa: E501

        :return: The org_id of this AuthenticationDocumentSpec.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this AuthenticationDocumentSpec.

        The org id for the user requesting an authentication document  # noqa: E501

        :param org_id: The org_id of this AuthenticationDocumentSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                org_id is not None and len(org_id) > 40):
            raise ValueError("Invalid value for `org_id`, length must be less than or equal to `40`")  # noqa: E501

        self._org_id = org_id

    @property
    def auth_issuer_url(self):
        """Gets the auth_issuer_url of this AuthenticationDocumentSpec.  # noqa: E501

        The URL of the authentication issuer associated with this authentication document. This URL is used by service accounts to request a token.  # noqa: E501

        :return: The auth_issuer_url of this AuthenticationDocumentSpec.  # noqa: E501
        :rtype: str
        """
        return self._auth_issuer_url

    @auth_issuer_url.setter
    def auth_issuer_url(self, auth_issuer_url):
        """Sets the auth_issuer_url of this AuthenticationDocumentSpec.

        The URL of the authentication issuer associated with this authentication document. This URL is used by service accounts to request a token.  # noqa: E501

        :param auth_issuer_url: The auth_issuer_url of this AuthenticationDocumentSpec.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                auth_issuer_url is not None and len(auth_issuer_url) > 511):
            raise ValueError("Invalid value for `auth_issuer_url`, length must be less than or equal to `511`")  # noqa: E501

        self._auth_issuer_url = auth_issuer_url

    @property
    def expiry(self):
        """Gets the expiry of this AuthenticationDocumentSpec.  # noqa: E501

        The authentication document expiry time in UTC. If ommitted the document does not expire.  # noqa: E501

        :return: The expiry of this AuthenticationDocumentSpec.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this AuthenticationDocumentSpec.

        The authentication document expiry time in UTC. If ommitted the document does not expire.  # noqa: E501

        :param expiry: The expiry of this AuthenticationDocumentSpec.  # noqa: E501
        :type: datetime
        """

        self._expiry = expiry

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthenticationDocumentSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthenticationDocumentSpec):
            return True

        return self.to_dict() != other.to_dict()
