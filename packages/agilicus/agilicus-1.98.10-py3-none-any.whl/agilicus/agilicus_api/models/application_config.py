# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.23
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class ApplicationConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'authentication_config': 'ApplicationAuthenticationConfig',
        'oidc_config': 'OIDCProxyConfig'
    }

    attribute_map = {
        'authentication_config': 'authentication_config',
        'oidc_config': 'oidc_config'
    }

    def __init__(self, authentication_config=None, oidc_config=None, local_vars_configuration=None):  # noqa: E501
        """ApplicationConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._authentication_config = None
        self._oidc_config = None
        self.discriminator = None

        if authentication_config is not None:
            self.authentication_config = authentication_config
        if oidc_config is not None:
            self.oidc_config = oidc_config

    @property
    def authentication_config(self):
        """Gets the authentication_config of this ApplicationConfig.  # noqa: E501


        :return: The authentication_config of this ApplicationConfig.  # noqa: E501
        :rtype: ApplicationAuthenticationConfig
        """
        return self._authentication_config

    @authentication_config.setter
    def authentication_config(self, authentication_config):
        """Sets the authentication_config of this ApplicationConfig.


        :param authentication_config: The authentication_config of this ApplicationConfig.  # noqa: E501
        :type: ApplicationAuthenticationConfig
        """

        self._authentication_config = authentication_config

    @property
    def oidc_config(self):
        """Gets the oidc_config of this ApplicationConfig.  # noqa: E501


        :return: The oidc_config of this ApplicationConfig.  # noqa: E501
        :rtype: OIDCProxyConfig
        """
        return self._oidc_config

    @oidc_config.setter
    def oidc_config(self, oidc_config):
        """Sets the oidc_config of this ApplicationConfig.


        :param oidc_config: The oidc_config of this ApplicationConfig.  # noqa: E501
        :type: OIDCProxyConfig
        """

        self._oidc_config = oidc_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationConfig):
            return True

        return self.to_dict() != other.to_dict()
