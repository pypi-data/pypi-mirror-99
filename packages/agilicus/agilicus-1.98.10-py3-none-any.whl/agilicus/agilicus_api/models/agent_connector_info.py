# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.23
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class AgentConnectorInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'local_authentication_enabled': 'bool',
        'connections_info': 'list[AgentConnectorConnectionInfo]',
        'allow_list': 'AllowMapCompiled',
        'authz_public_key': 'str'
    }

    attribute_map = {
        'local_authentication_enabled': 'local_authentication_enabled',
        'connections_info': 'connections_info',
        'allow_list': 'allow_list',
        'authz_public_key': 'authz_public_key'
    }

    def __init__(self, local_authentication_enabled=None, connections_info=None, allow_list=None, authz_public_key=None, local_vars_configuration=None):  # noqa: E501
        """AgentConnectorInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._local_authentication_enabled = None
        self._connections_info = None
        self._allow_list = None
        self._authz_public_key = None
        self.discriminator = None

        if local_authentication_enabled is not None:
            self.local_authentication_enabled = local_authentication_enabled
        if connections_info is not None:
            self.connections_info = connections_info
        if allow_list is not None:
            self.allow_list = allow_list
        if authz_public_key is not None:
            self.authz_public_key = authz_public_key

    @property
    def local_authentication_enabled(self):
        """Gets the local_authentication_enabled of this AgentConnectorInfo.  # noqa: E501

        Determines whether or not the agent will expose an endpoint for local authentication  # noqa: E501

        :return: The local_authentication_enabled of this AgentConnectorInfo.  # noqa: E501
        :rtype: bool
        """
        return self._local_authentication_enabled

    @local_authentication_enabled.setter
    def local_authentication_enabled(self, local_authentication_enabled):
        """Sets the local_authentication_enabled of this AgentConnectorInfo.

        Determines whether or not the agent will expose an endpoint for local authentication  # noqa: E501

        :param local_authentication_enabled: The local_authentication_enabled of this AgentConnectorInfo.  # noqa: E501
        :type: bool
        """

        self._local_authentication_enabled = local_authentication_enabled

    @property
    def connections_info(self):
        """Gets the connections_info of this AgentConnectorInfo.  # noqa: E501

        The list of connections associated with this agent  # noqa: E501

        :return: The connections_info of this AgentConnectorInfo.  # noqa: E501
        :rtype: list[AgentConnectorConnectionInfo]
        """
        return self._connections_info

    @connections_info.setter
    def connections_info(self, connections_info):
        """Sets the connections_info of this AgentConnectorInfo.

        The list of connections associated with this agent  # noqa: E501

        :param connections_info: The connections_info of this AgentConnectorInfo.  # noqa: E501
        :type: list[AgentConnectorConnectionInfo]
        """

        self._connections_info = connections_info

    @property
    def allow_list(self):
        """Gets the allow_list of this AgentConnectorInfo.  # noqa: E501


        :return: The allow_list of this AgentConnectorInfo.  # noqa: E501
        :rtype: AllowMapCompiled
        """
        return self._allow_list

    @allow_list.setter
    def allow_list(self, allow_list):
        """Sets the allow_list of this AgentConnectorInfo.


        :param allow_list: The allow_list of this AgentConnectorInfo.  # noqa: E501
        :type: AllowMapCompiled
        """

        self._allow_list = allow_list

    @property
    def authz_public_key(self):
        """Gets the authz_public_key of this AgentConnectorInfo.  # noqa: E501

        The PEM encoded public key used for validating bearer tokens  # noqa: E501

        :return: The authz_public_key of this AgentConnectorInfo.  # noqa: E501
        :rtype: str
        """
        return self._authz_public_key

    @authz_public_key.setter
    def authz_public_key(self, authz_public_key):
        """Sets the authz_public_key of this AgentConnectorInfo.

        The PEM encoded public key used for validating bearer tokens  # noqa: E501

        :param authz_public_key: The authz_public_key of this AgentConnectorInfo.  # noqa: E501
        :type: str
        """

        self._authz_public_key = authz_public_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgentConnectorInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AgentConnectorInfo):
            return True

        return self.to_dict() != other.to_dict()
