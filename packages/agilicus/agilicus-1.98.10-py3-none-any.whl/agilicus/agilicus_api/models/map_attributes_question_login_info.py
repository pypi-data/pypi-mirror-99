# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.23
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class MapAttributesQuestionLoginInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_object': 'UserSummary',
        'client_guid': 'str',
        'issuer_guid': 'str'
    }

    attribute_map = {
        'user_object': 'user_object',
        'client_guid': 'client_guid',
        'issuer_guid': 'issuer_guid'
    }

    def __init__(self, user_object=None, client_guid=None, issuer_guid=None, local_vars_configuration=None):  # noqa: E501
        """MapAttributesQuestionLoginInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._user_object = None
        self._client_guid = None
        self._issuer_guid = None
        self.discriminator = None

        self.user_object = user_object
        self.client_guid = client_guid
        self.issuer_guid = issuer_guid

    @property
    def user_object(self):
        """Gets the user_object of this MapAttributesQuestionLoginInfo.  # noqa: E501


        :return: The user_object of this MapAttributesQuestionLoginInfo.  # noqa: E501
        :rtype: UserSummary
        """
        return self._user_object

    @user_object.setter
    def user_object(self, user_object):
        """Sets the user_object of this MapAttributesQuestionLoginInfo.


        :param user_object: The user_object of this MapAttributesQuestionLoginInfo.  # noqa: E501
        :type: UserSummary
        """
        if self.local_vars_configuration.client_side_validation and user_object is None:  # noqa: E501
            raise ValueError("Invalid value for `user_object`, must not be `None`")  # noqa: E501

        self._user_object = user_object

    @property
    def client_guid(self):
        """Gets the client_guid of this MapAttributesQuestionLoginInfo.  # noqa: E501

        The guid of the client initiating the request on behalf of the user  # noqa: E501

        :return: The client_guid of this MapAttributesQuestionLoginInfo.  # noqa: E501
        :rtype: str
        """
        return self._client_guid

    @client_guid.setter
    def client_guid(self, client_guid):
        """Sets the client_guid of this MapAttributesQuestionLoginInfo.

        The guid of the client initiating the request on behalf of the user  # noqa: E501

        :param client_guid: The client_guid of this MapAttributesQuestionLoginInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and client_guid is None:  # noqa: E501
            raise ValueError("Invalid value for `client_guid`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                client_guid is not None and len(client_guid) > 40):
            raise ValueError("Invalid value for `client_guid`, length must be less than or equal to `40`")  # noqa: E501

        self._client_guid = client_guid

    @property
    def issuer_guid(self):
        """Gets the issuer_guid of this MapAttributesQuestionLoginInfo.  # noqa: E501

        The guid of the issuer the user is logging into.  # noqa: E501

        :return: The issuer_guid of this MapAttributesQuestionLoginInfo.  # noqa: E501
        :rtype: str
        """
        return self._issuer_guid

    @issuer_guid.setter
    def issuer_guid(self, issuer_guid):
        """Sets the issuer_guid of this MapAttributesQuestionLoginInfo.

        The guid of the issuer the user is logging into.  # noqa: E501

        :param issuer_guid: The issuer_guid of this MapAttributesQuestionLoginInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and issuer_guid is None:  # noqa: E501
            raise ValueError("Invalid value for `issuer_guid`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                issuer_guid is not None and len(issuer_guid) > 40):
            raise ValueError("Invalid value for `issuer_guid`, length must be less than or equal to `40`")  # noqa: E501

        self._issuer_guid = issuer_guid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MapAttributesQuestionLoginInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MapAttributesQuestionLoginInfo):
            return True

        return self.to_dict() != other.to_dict()
