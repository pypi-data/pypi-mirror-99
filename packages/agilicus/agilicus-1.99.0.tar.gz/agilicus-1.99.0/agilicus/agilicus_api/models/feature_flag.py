# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.24
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class FeatureFlag(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'feature': 'str',
        'enabled': 'bool',
        'setting': 'str'
    }

    attribute_map = {
        'feature': 'feature',
        'enabled': 'enabled',
        'setting': 'setting'
    }

    def __init__(self, feature=None, enabled=None, setting='', local_vars_configuration=None):  # noqa: E501
        """FeatureFlag - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._feature = None
        self._enabled = None
        self._setting = None
        self.discriminator = None

        self.feature = feature
        self.enabled = enabled
        if setting is not None:
            self.setting = setting

    @property
    def feature(self):
        """Gets the feature of this FeatureFlag.  # noqa: E501

        The name of the feature  # noqa: E501

        :return: The feature of this FeatureFlag.  # noqa: E501
        :rtype: str
        """
        return self._feature

    @feature.setter
    def feature(self, feature):
        """Sets the feature of this FeatureFlag.

        The name of the feature  # noqa: E501

        :param feature: The feature of this FeatureFlag.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and feature is None:  # noqa: E501
            raise ValueError("Invalid value for `feature`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                feature is not None and len(feature) > 128):
            raise ValueError("Invalid value for `feature`, length must be less than or equal to `128`")  # noqa: E501

        self._feature = feature

    @property
    def enabled(self):
        """Gets the enabled of this FeatureFlag.  # noqa: E501

        Whether the feature is enabled  # noqa: E501

        :return: The enabled of this FeatureFlag.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this FeatureFlag.

        Whether the feature is enabled  # noqa: E501

        :param enabled: The enabled of this FeatureFlag.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def setting(self):
        """Gets the setting of this FeatureFlag.  # noqa: E501

        a specific setting for the feature  # noqa: E501

        :return: The setting of this FeatureFlag.  # noqa: E501
        :rtype: str
        """
        return self._setting

    @setting.setter
    def setting(self, setting):
        """Sets the setting of this FeatureFlag.

        a specific setting for the feature  # noqa: E501

        :param setting: The setting of this FeatureFlag.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                setting is not None and len(setting) > 4096):
            raise ValueError("Invalid value for `setting`, length must be less than or equal to `4096`")  # noqa: E501

        self._setting = setting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeatureFlag):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FeatureFlag):
            return True

        return self.to_dict() != other.to_dict()
