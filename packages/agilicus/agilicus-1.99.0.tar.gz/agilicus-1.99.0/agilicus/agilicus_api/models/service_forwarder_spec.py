# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.24
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class ServiceForwarderSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'org_id': 'str',
        'bind_address': 'str',
        'port': 'int',
        'protocol': 'str',
        'application_service_id': 'str',
        'connector_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'org_id': 'org_id',
        'bind_address': 'bind_address',
        'port': 'port',
        'protocol': 'protocol',
        'application_service_id': 'application_service_id',
        'connector_id': 'connector_id'
    }

    def __init__(self, name=None, org_id=None, bind_address=None, port=None, protocol='tcp', application_service_id=None, connector_id=None, local_vars_configuration=None):  # noqa: E501
        """ServiceForwarderSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._org_id = None
        self._bind_address = None
        self._port = None
        self._protocol = None
        self._application_service_id = None
        self._connector_id = None
        self.discriminator = None

        self.name = name
        self.org_id = org_id
        if bind_address is not None:
            self.bind_address = bind_address
        self.port = port
        if protocol is not None:
            self.protocol = protocol
        if application_service_id is not None:
            self.application_service_id = application_service_id
        if connector_id is not None:
            self.connector_id = connector_id

    @property
    def name(self):
        """Gets the name of this ServiceForwarderSpec.  # noqa: E501

        The name of the service forwarder. This value must be unique within an organisation.   # noqa: E501

        :return: The name of this ServiceForwarderSpec.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceForwarderSpec.

        The name of the service forwarder. This value must be unique within an organisation.   # noqa: E501

        :param name: The name of this ServiceForwarderSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this ServiceForwarderSpec.  # noqa: E501

        The organisation which owns this service forwarder.  # noqa: E501

        :return: The org_id of this ServiceForwarderSpec.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this ServiceForwarderSpec.

        The organisation which owns this service forwarder.  # noqa: E501

        :param org_id: The org_id of this ServiceForwarderSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def bind_address(self):
        """Gets the bind_address of this ServiceForwarderSpec.  # noqa: E501

        The local bind address that local applications will forward to in order to access the service forwarder.  bind_address default is localhost.   # noqa: E501

        :return: The bind_address of this ServiceForwarderSpec.  # noqa: E501
        :rtype: str
        """
        return self._bind_address

    @bind_address.setter
    def bind_address(self, bind_address):
        """Sets the bind_address of this ServiceForwarderSpec.

        The local bind address that local applications will forward to in order to access the service forwarder.  bind_address default is localhost.   # noqa: E501

        :param bind_address: The bind_address of this ServiceForwarderSpec.  # noqa: E501
        :type: str
        """

        self._bind_address = bind_address

    @property
    def port(self):
        """Gets the port of this ServiceForwarderSpec.  # noqa: E501

        The transport-layer port on which to access the service forwarder. exclusiveMinimum: 0 exclusiveMaximum: 65536   # noqa: E501

        :return: The port of this ServiceForwarderSpec.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ServiceForwarderSpec.

        The transport-layer port on which to access the service forwarder. exclusiveMinimum: 0 exclusiveMaximum: 65536   # noqa: E501

        :param port: The port of this ServiceForwarderSpec.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and port is None:  # noqa: E501
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this ServiceForwarderSpec.  # noqa: E501

        The transport-layer protocol being fowarded to the remote application service.   # noqa: E501

        :return: The protocol of this ServiceForwarderSpec.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ServiceForwarderSpec.

        The transport-layer protocol being fowarded to the remote application service.   # noqa: E501

        :param protocol: The protocol of this ServiceForwarderSpec.  # noqa: E501
        :type: str
        """
        allowed_values = ["tcp"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and protocol not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def application_service_id(self):
        """Gets the application_service_id of this ServiceForwarderSpec.  # noqa: E501

        The application service id that this service forwarder connects to.   # noqa: E501

        :return: The application_service_id of this ServiceForwarderSpec.  # noqa: E501
        :rtype: str
        """
        return self._application_service_id

    @application_service_id.setter
    def application_service_id(self, application_service_id):
        """Sets the application_service_id of this ServiceForwarderSpec.

        The application service id that this service forwarder connects to.   # noqa: E501

        :param application_service_id: The application_service_id of this ServiceForwarderSpec.  # noqa: E501
        :type: str
        """

        self._application_service_id = application_service_id

    @property
    def connector_id(self):
        """Gets the connector_id of this ServiceForwarderSpec.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The connector_id of this ServiceForwarderSpec.  # noqa: E501
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this ServiceForwarderSpec.

        Unique identifier  # noqa: E501

        :param connector_id: The connector_id of this ServiceForwarderSpec.  # noqa: E501
        :type: str
        """

        self._connector_id = connector_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceForwarderSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceForwarderSpec):
            return True

        return self.to_dict() != other.to_dict()
