# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.24
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class BaseUpstream(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'issuer': 'str',
        'upstream_type': 'str',
        'icon': 'str',
        'auto_create_status': 'AutoCreateStatus'
    }

    attribute_map = {
        'name': 'name',
        'issuer': 'issuer',
        'upstream_type': 'upstream_type',
        'icon': 'icon',
        'auto_create_status': 'auto_create_status'
    }

    def __init__(self, name=None, issuer=None, upstream_type=None, icon=None, auto_create_status=None, local_vars_configuration=None):  # noqa: E501
        """BaseUpstream - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._issuer = None
        self._upstream_type = None
        self._icon = None
        self._auto_create_status = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if issuer is not None:
            self.issuer = issuer
        if upstream_type is not None:
            self.upstream_type = upstream_type
        if icon is not None:
            self.icon = icon
        if auto_create_status is not None:
            self.auto_create_status = auto_create_status

    @property
    def name(self):
        """Gets the name of this BaseUpstream.  # noqa: E501

        A name used to uniquely refer to the upstream identity provider configuration. This is the text that will be displayed when presenting the upstream identity for login.  # noqa: E501

        :return: The name of this BaseUpstream.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BaseUpstream.

        A name used to uniquely refer to the upstream identity provider configuration. This is the text that will be displayed when presenting the upstream identity for login.  # noqa: E501

        :param name: The name of this BaseUpstream.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def issuer(self):
        """Gets the issuer of this BaseUpstream.  # noqa: E501

        The upstream issuer uri. This is the URI which identifies the issuer against which users selecting this upstream will authenticate.  # noqa: E501

        :return: The issuer of this BaseUpstream.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this BaseUpstream.

        The upstream issuer uri. This is the URI which identifies the issuer against which users selecting this upstream will authenticate.  # noqa: E501

        :param issuer: The issuer of this BaseUpstream.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                issuer is not None and len(issuer) > 511):
            raise ValueError("Invalid value for `issuer`, length must be less than or equal to `511`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                issuer is not None and len(issuer) < 1):
            raise ValueError("Invalid value for `issuer`, length must be greater than or equal to `1`")  # noqa: E501

        self._issuer = issuer

    @property
    def upstream_type(self):
        """Gets the upstream_type of this BaseUpstream.  # noqa: E501

        The type of upstream. For instance an OpenID Connector Upstream.  # noqa: E501

        :return: The upstream_type of this BaseUpstream.  # noqa: E501
        :rtype: str
        """
        return self._upstream_type

    @upstream_type.setter
    def upstream_type(self, upstream_type):
        """Sets the upstream_type of this BaseUpstream.

        The type of upstream. For instance an OpenID Connector Upstream.  # noqa: E501

        :param upstream_type: The upstream_type of this BaseUpstream.  # noqa: E501
        :type: str
        """
        allowed_values = ["oidc", "local_auth"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and upstream_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `upstream_type` ({0}), must be one of {1}"  # noqa: E501
                .format(upstream_type, allowed_values)
            )

        self._upstream_type = upstream_type

    @property
    def icon(self):
        """Gets the icon of this BaseUpstream.  # noqa: E501

        The icon file to be used, limited to: numbers, letters, underscores, hyphens and periods. It is part of a css class (with the periods replaced by underscores).  To use a custom icon than the provided default you will need to add the icon the static/img folder and update the static css file to add a new css button like below ```json .dex-btn-icon--<your-logo_svg> {   background-image: url(../static/img/<your-logo.svg>); } ```  To use a default icon simply enter an icon name from the pre-provided defaults found in the static/img folder The default icons are   - bitbucket   - coreos   - email   - github   - gitlab   - google   - ldap   - linkedin   - microsoft   - oidc   - saml   # noqa: E501

        :return: The icon of this BaseUpstream.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this BaseUpstream.

        The icon file to be used, limited to: numbers, letters, underscores, hyphens and periods. It is part of a css class (with the periods replaced by underscores).  To use a custom icon than the provided default you will need to add the icon the static/img folder and update the static css file to add a new css button like below ```json .dex-btn-icon--<your-logo_svg> {   background-image: url(../static/img/<your-logo.svg>); } ```  To use a default icon simply enter an icon name from the pre-provided defaults found in the static/img folder The default icons are   - bitbucket   - coreos   - email   - github   - gitlab   - google   - ldap   - linkedin   - microsoft   - oidc   - saml   # noqa: E501

        :param icon: The icon of this BaseUpstream.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                icon is not None and len(icon) > 50):
            raise ValueError("Invalid value for `icon`, length must be less than or equal to `50`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                icon is not None and len(icon) < 1):
            raise ValueError("Invalid value for `icon`, length must be greater than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                icon is not None and not re.search(r'^[0-9a-zA-Z-_.]+$', icon)):  # noqa: E501
            raise ValueError(r"Invalid value for `icon`, must be a follow pattern or equal to `/^[0-9a-zA-Z-_.]+$/`")  # noqa: E501

        self._icon = icon

    @property
    def auto_create_status(self):
        """Gets the auto_create_status of this BaseUpstream.  # noqa: E501


        :return: The auto_create_status of this BaseUpstream.  # noqa: E501
        :rtype: AutoCreateStatus
        """
        return self._auto_create_status

    @auto_create_status.setter
    def auto_create_status(self, auto_create_status):
        """Sets the auto_create_status of this BaseUpstream.


        :param auto_create_status: The auto_create_status of this BaseUpstream.  # noqa: E501
        :type: AutoCreateStatus
        """

        self._auto_create_status = auto_create_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseUpstream):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BaseUpstream):
            return True

        return self.to_dict() != other.to_dict()
