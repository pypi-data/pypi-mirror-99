# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.24
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class APIKeyIntrospect(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_key_auth_info': 'APIKeyIntrospectAuthorizationInfo',
        'introspect_options': 'TokenIntrospectOptions',
        'multi_org': 'bool'
    }

    attribute_map = {
        'api_key_auth_info': 'api_key_auth_info',
        'introspect_options': 'introspect_options',
        'multi_org': 'multi_org'
    }

    def __init__(self, api_key_auth_info=None, introspect_options=None, multi_org=None, local_vars_configuration=None):  # noqa: E501
        """APIKeyIntrospect - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_key_auth_info = None
        self._introspect_options = None
        self._multi_org = None
        self.discriminator = None

        self.api_key_auth_info = api_key_auth_info
        if introspect_options is not None:
            self.introspect_options = introspect_options
        if multi_org is not None:
            self.multi_org = multi_org

    @property
    def api_key_auth_info(self):
        """Gets the api_key_auth_info of this APIKeyIntrospect.  # noqa: E501


        :return: The api_key_auth_info of this APIKeyIntrospect.  # noqa: E501
        :rtype: APIKeyIntrospectAuthorizationInfo
        """
        return self._api_key_auth_info

    @api_key_auth_info.setter
    def api_key_auth_info(self, api_key_auth_info):
        """Sets the api_key_auth_info of this APIKeyIntrospect.


        :param api_key_auth_info: The api_key_auth_info of this APIKeyIntrospect.  # noqa: E501
        :type: APIKeyIntrospectAuthorizationInfo
        """
        if self.local_vars_configuration.client_side_validation and api_key_auth_info is None:  # noqa: E501
            raise ValueError("Invalid value for `api_key_auth_info`, must not be `None`")  # noqa: E501

        self._api_key_auth_info = api_key_auth_info

    @property
    def introspect_options(self):
        """Gets the introspect_options of this APIKeyIntrospect.  # noqa: E501


        :return: The introspect_options of this APIKeyIntrospect.  # noqa: E501
        :rtype: TokenIntrospectOptions
        """
        return self._introspect_options

    @introspect_options.setter
    def introspect_options(self, introspect_options):
        """Sets the introspect_options of this APIKeyIntrospect.


        :param introspect_options: The introspect_options of this APIKeyIntrospect.  # noqa: E501
        :type: TokenIntrospectOptions
        """

        self._introspect_options = introspect_options

    @property
    def multi_org(self):
        """Gets the multi_org of this APIKeyIntrospect.  # noqa: E501

        Whether or not to allow this APIKey to represent multiple orgs  # noqa: E501

        :return: The multi_org of this APIKeyIntrospect.  # noqa: E501
        :rtype: bool
        """
        return self._multi_org

    @multi_org.setter
    def multi_org(self, multi_org):
        """Sets the multi_org of this APIKeyIntrospect.

        Whether or not to allow this APIKey to represent multiple orgs  # noqa: E501

        :param multi_org: The multi_org of this APIKeyIntrospect.  # noqa: E501
        :type: bool
        """

        self._multi_org = multi_org

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIKeyIntrospect):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, APIKeyIntrospect):
            return True

        return self.to_dict() != other.to_dict()
