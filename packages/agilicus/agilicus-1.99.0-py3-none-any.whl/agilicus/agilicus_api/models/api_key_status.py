# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.24
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class APIKeyStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_key': 'str',
        'token_id': 'str'
    }

    attribute_map = {
        'api_key': 'api_key',
        'token_id': 'token_id'
    }

    def __init__(self, api_key=None, token_id=None, local_vars_configuration=None):  # noqa: E501
        """APIKeyStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_key = None
        self._token_id = None
        self.discriminator = None

        if api_key is not None:
            self.api_key = api_key
        self.token_id = token_id

    @property
    def api_key(self):
        """Gets the api_key of this APIKeyStatus.  # noqa: E501

        The value to use as the password in the basic authentication flow. Note that this value will only be present in the APIKeyStatus when creating the API Key. It is omitted in future requests to prevent it from leaking. Treat this key like any other password: keep it secret; keep it safe.   # noqa: E501

        :return: The api_key of this APIKeyStatus.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this APIKeyStatus.

        The value to use as the password in the basic authentication flow. Note that this value will only be present in the APIKeyStatus when creating the API Key. It is omitted in future requests to prevent it from leaking. Treat this key like any other password: keep it secret; keep it safe.   # noqa: E501

        :param api_key: The api_key of this APIKeyStatus.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def token_id(self):
        """Gets the token_id of this APIKeyStatus.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The token_id of this APIKeyStatus.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this APIKeyStatus.

        Unique identifier  # noqa: E501

        :param token_id: The token_id of this APIKeyStatus.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and token_id is None:  # noqa: E501
            raise ValueError("Invalid value for `token_id`, must not be `None`")  # noqa: E501

        self._token_id = token_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIKeyStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, APIKeyStatus):
            return True

        return self.to_dict() != other.to_dict()
