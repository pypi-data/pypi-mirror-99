# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.24
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class FileShareServiceStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'share_base_app_name': 'str',
        'instance_id': 'str',
        'instance_org_id': 'str',
        'share_uri': 'str'
    }

    attribute_map = {
        'share_base_app_name': 'share_base_app_name',
        'instance_id': 'instance_id',
        'instance_org_id': 'instance_org_id',
        'share_uri': 'share_uri'
    }

    def __init__(self, share_base_app_name=None, instance_id=None, instance_org_id=None, share_uri=None, local_vars_configuration=None):  # noqa: E501
        """FileShareServiceStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._share_base_app_name = None
        self._instance_id = None
        self._instance_org_id = None
        self._share_uri = None
        self.discriminator = None

        if share_base_app_name is not None:
            self.share_base_app_name = share_base_app_name
        if instance_id is not None:
            self.instance_id = instance_id
        if instance_org_id is not None:
            self.instance_org_id = instance_org_id
        if share_uri is not None:
            self.share_uri = share_uri

    @property
    def share_base_app_name(self):
        """Gets the share_base_app_name of this FileShareServiceStatus.  # noqa: E501

        The name of the application in the system providing the file share. This can be used to construct the default URI used to access the file share given the organisation's subdomain.   # noqa: E501

        :return: The share_base_app_name of this FileShareServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._share_base_app_name

    @share_base_app_name.setter
    def share_base_app_name(self, share_base_app_name):
        """Sets the share_base_app_name of this FileShareServiceStatus.

        The name of the application in the system providing the file share. This can be used to construct the default URI used to access the file share given the organisation's subdomain.   # noqa: E501

        :param share_base_app_name: The share_base_app_name of this FileShareServiceStatus.  # noqa: E501
        :type: str
        """

        self._share_base_app_name = share_base_app_name

    @property
    def instance_id(self):
        """Gets the instance_id of this FileShareServiceStatus.  # noqa: E501

        The identifier of the instance running the file share. Useful for auditing/etc.   # noqa: E501

        :return: The instance_id of this FileShareServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this FileShareServiceStatus.

        The identifier of the instance running the file share. Useful for auditing/etc.   # noqa: E501

        :param instance_id: The instance_id of this FileShareServiceStatus.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def instance_org_id(self):
        """Gets the instance_org_id of this FileShareServiceStatus.  # noqa: E501

        The identifier of the organistion responsible for the instance running the file share.   # noqa: E501

        :return: The instance_org_id of this FileShareServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._instance_org_id

    @instance_org_id.setter
    def instance_org_id(self, instance_org_id):
        """Sets the instance_org_id of this FileShareServiceStatus.

        The identifier of the organistion responsible for the instance running the file share.   # noqa: E501

        :param instance_org_id: The instance_org_id of this FileShareServiceStatus.  # noqa: E501
        :type: str
        """

        self._instance_org_id = instance_org_id

    @property
    def share_uri(self):
        """Gets the share_uri of this FileShareServiceStatus.  # noqa: E501

        The uri at which to access this file share. If this value is empty, the file share can be accessed at https://shares.$(organisation.subdomain)/share_name.   # noqa: E501

        :return: The share_uri of this FileShareServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._share_uri

    @share_uri.setter
    def share_uri(self, share_uri):
        """Sets the share_uri of this FileShareServiceStatus.

        The uri at which to access this file share. If this value is empty, the file share can be accessed at https://shares.$(organisation.subdomain)/share_name.   # noqa: E501

        :param share_uri: The share_uri of this FileShareServiceStatus.  # noqa: E501
        :type: str
        """

        self._share_uri = share_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileShareServiceStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileShareServiceStatus):
            return True

        return self.to_dict() != other.to_dict()
