# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.24
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class FileShareServiceSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'share_name': 'str',
        'org_id': 'str',
        'local_path': 'str',
        'connector_id': 'str',
        'share_index': 'int',
        'transport_end_to_end_tls': 'bool',
        'transport_base_domain': 'str'
    }

    attribute_map = {
        'name': 'name',
        'share_name': 'share_name',
        'org_id': 'org_id',
        'local_path': 'local_path',
        'connector_id': 'connector_id',
        'share_index': 'share_index',
        'transport_end_to_end_tls': 'transport_end_to_end_tls',
        'transport_base_domain': 'transport_base_domain'
    }

    def __init__(self, name=None, share_name=None, org_id=None, local_path=None, connector_id=None, share_index=None, transport_end_to_end_tls=None, transport_base_domain=None, local_vars_configuration=None):  # noqa: E501
        """FileShareServiceSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._share_name = None
        self._org_id = None
        self._local_path = None
        self._connector_id = None
        self._share_index = None
        self._transport_end_to_end_tls = None
        self._transport_base_domain = None
        self.discriminator = None

        self.name = name
        self.share_name = share_name
        self.org_id = org_id
        self.local_path = local_path
        self.connector_id = connector_id
        if share_index is not None:
            self.share_index = share_index
        if transport_end_to_end_tls is not None:
            self.transport_end_to_end_tls = transport_end_to_end_tls
        if transport_base_domain is not None:
            self.transport_base_domain = transport_base_domain

    @property
    def name(self):
        """Gets the name of this FileShareServiceSpec.  # noqa: E501

        The name of the service. This uniquely identifies the service within the organisation.   # noqa: E501

        :return: The name of this FileShareServiceSpec.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileShareServiceSpec.

        The name of the service. This uniquely identifies the service within the organisation.   # noqa: E501

        :param name: The name of this FileShareServiceSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501

        self._name = name

    @property
    def share_name(self):
        """Gets the share_name of this FileShareServiceSpec.  # noqa: E501

        The name of the share as exposed to the Internet. This will be used to build the URI used to mount the share. The share_name is unique among the file shares of the organisation.   # noqa: E501

        :return: The share_name of this FileShareServiceSpec.  # noqa: E501
        :rtype: str
        """
        return self._share_name

    @share_name.setter
    def share_name(self, share_name):
        """Sets the share_name of this FileShareServiceSpec.

        The name of the share as exposed to the Internet. This will be used to build the URI used to mount the share. The share_name is unique among the file shares of the organisation.   # noqa: E501

        :param share_name: The share_name of this FileShareServiceSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and share_name is None:  # noqa: E501
            raise ValueError("Invalid value for `share_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                share_name is not None and len(share_name) > 1024):
            raise ValueError("Invalid value for `share_name`, length must be less than or equal to `1024`")  # noqa: E501

        self._share_name = share_name

    @property
    def org_id(self):
        """Gets the org_id of this FileShareServiceSpec.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The org_id of this FileShareServiceSpec.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this FileShareServiceSpec.

        Unique identifier  # noqa: E501

        :param org_id: The org_id of this FileShareServiceSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def local_path(self):
        """Gets the local_path of this FileShareServiceSpec.  # noqa: E501

        The path to the directory to share on the local file system. This should point to a directory, not a file. Use a slash ('/', U+002F) to separate directories within the path.   # noqa: E501

        :return: The local_path of this FileShareServiceSpec.  # noqa: E501
        :rtype: str
        """
        return self._local_path

    @local_path.setter
    def local_path(self, local_path):
        """Sets the local_path of this FileShareServiceSpec.

        The path to the directory to share on the local file system. This should point to a directory, not a file. Use a slash ('/', U+002F) to separate directories within the path.   # noqa: E501

        :param local_path: The local_path of this FileShareServiceSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and local_path is None:  # noqa: E501
            raise ValueError("Invalid value for `local_path`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                local_path is not None and len(local_path) > 4096):
            raise ValueError("Invalid value for `local_path`, length must be less than or equal to `4096`")  # noqa: E501

        self._local_path = local_path

    @property
    def connector_id(self):
        """Gets the connector_id of this FileShareServiceSpec.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The connector_id of this FileShareServiceSpec.  # noqa: E501
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this FileShareServiceSpec.

        Unique identifier  # noqa: E501

        :param connector_id: The connector_id of this FileShareServiceSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and connector_id is None:  # noqa: E501
            raise ValueError("Invalid value for `connector_id`, must not be `None`")  # noqa: E501

        self._connector_id = connector_id

    @property
    def share_index(self):
        """Gets the share_index of this FileShareServiceSpec.  # noqa: E501

        The index of the FileShareService. This is used to construct a unique URI at which to access this FileShareService.   # noqa: E501

        :return: The share_index of this FileShareServiceSpec.  # noqa: E501
        :rtype: int
        """
        return self._share_index

    @share_index.setter
    def share_index(self, share_index):
        """Sets the share_index of this FileShareServiceSpec.

        The index of the FileShareService. This is used to construct a unique URI at which to access this FileShareService.   # noqa: E501

        :param share_index: The share_index of this FileShareServiceSpec.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                share_index is not None and share_index > 4294967295):  # noqa: E501
            raise ValueError("Invalid value for `share_index`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                share_index is not None and share_index < 1):  # noqa: E501
            raise ValueError("Invalid value for `share_index`, must be a value greater than or equal to `1`")  # noqa: E501

        self._share_index = share_index

    @property
    def transport_end_to_end_tls(self):
        """Gets the transport_end_to_end_tls of this FileShareServiceSpec.  # noqa: E501

        Whether or not the FileShareService encrypts data using the same Transport Layer Security (TLS) session as seen by the client. Setting this to true will cause the FileShareService to provision a Certificate signed by a private key only known to it. All traffic to and from the FileShareService will be encrypted using a TLS session derived from that Certificate. Setting this to false will cause the FileShareService to use a TLS session derived from a Certificate provisioned by the Agilicus Cloud.   # noqa: E501

        :return: The transport_end_to_end_tls of this FileShareServiceSpec.  # noqa: E501
        :rtype: bool
        """
        return self._transport_end_to_end_tls

    @transport_end_to_end_tls.setter
    def transport_end_to_end_tls(self, transport_end_to_end_tls):
        """Sets the transport_end_to_end_tls of this FileShareServiceSpec.

        Whether or not the FileShareService encrypts data using the same Transport Layer Security (TLS) session as seen by the client. Setting this to true will cause the FileShareService to provision a Certificate signed by a private key only known to it. All traffic to and from the FileShareService will be encrypted using a TLS session derived from that Certificate. Setting this to false will cause the FileShareService to use a TLS session derived from a Certificate provisioned by the Agilicus Cloud.   # noqa: E501

        :param transport_end_to_end_tls: The transport_end_to_end_tls of this FileShareServiceSpec.  # noqa: E501
        :type: bool
        """

        self._transport_end_to_end_tls = transport_end_to_end_tls

    @property
    def transport_base_domain(self):
        """Gets the transport_base_domain of this FileShareServiceSpec.  # noqa: E501

        The base domain from which to access this share. The file share endpoint will be \"https://share-$(share_index).$(base_domain)\"   # noqa: E501

        :return: The transport_base_domain of this FileShareServiceSpec.  # noqa: E501
        :rtype: str
        """
        return self._transport_base_domain

    @transport_base_domain.setter
    def transport_base_domain(self, transport_base_domain):
        """Sets the transport_base_domain of this FileShareServiceSpec.

        The base domain from which to access this share. The file share endpoint will be \"https://share-$(share_index).$(base_domain)\"   # noqa: E501

        :param transport_base_domain: The transport_base_domain of this FileShareServiceSpec.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                transport_base_domain is not None and len(transport_base_domain) > 240):
            raise ValueError("Invalid value for `transport_base_domain`, length must be less than or equal to `240`")  # noqa: E501

        self._transport_base_domain = transport_base_domain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileShareServiceSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileShareServiceSpec):
            return True

        return self.to_dict() != other.to_dict()
