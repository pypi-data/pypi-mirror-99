# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.24
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class ApplicationAssignment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'org_id': 'str',
        'environment_name': 'str',
        'application_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'org_id': 'org_id',
        'environment_name': 'environment_name',
        'application_name': 'application_name'
    }

    def __init__(self, id=None, org_id=None, environment_name=None, application_name=None, local_vars_configuration=None):  # noqa: E501
        """ApplicationAssignment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._org_id = None
        self._environment_name = None
        self._application_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.org_id = org_id
        self.environment_name = environment_name
        if application_name is not None:
            self.application_name = application_name

    @property
    def id(self):
        """Gets the id of this ApplicationAssignment.  # noqa: E501

        The unique identifier for the assignment.  # noqa: E501

        :return: The id of this ApplicationAssignment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationAssignment.

        The unique identifier for the assignment.  # noqa: E501

        :param id: The id of this ApplicationAssignment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def org_id(self):
        """Gets the org_id of this ApplicationAssignment.  # noqa: E501

        The unique identifier for the organisation which is being given access to the application environment.   # noqa: E501

        :return: The org_id of this ApplicationAssignment.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this ApplicationAssignment.

        The unique identifier for the organisation which is being given access to the application environment.   # noqa: E501

        :param org_id: The org_id of this ApplicationAssignment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def environment_name(self):
        """Gets the environment_name of this ApplicationAssignment.  # noqa: E501

        The name of the environment of the application for which to give access.   # noqa: E501

        :return: The environment_name of this ApplicationAssignment.  # noqa: E501
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this ApplicationAssignment.

        The name of the environment of the application for which to give access.   # noqa: E501

        :param environment_name: The environment_name of this ApplicationAssignment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and environment_name is None:  # noqa: E501
            raise ValueError("Invalid value for `environment_name`, must not be `None`")  # noqa: E501

        self._environment_name = environment_name

    @property
    def application_name(self):
        """Gets the application_name of this ApplicationAssignment.  # noqa: E501

        The display name for the application for which to give access. Provided on get for convenience. Do not set the field for modifying operations as it will be ignored.   # noqa: E501

        :return: The application_name of this ApplicationAssignment.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this ApplicationAssignment.

        The display name for the application for which to give access. Provided on get for convenience. Do not set the field for modifying operations as it will be ignored.   # noqa: E501

        :param application_name: The application_name of this ApplicationAssignment.  # noqa: E501
        :type: str
        """

        self._application_name = application_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationAssignment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationAssignment):
            return True

        return self.to_dict() != other.to_dict()
