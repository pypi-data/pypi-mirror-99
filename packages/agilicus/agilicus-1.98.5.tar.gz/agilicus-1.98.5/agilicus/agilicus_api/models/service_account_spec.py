# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.17
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class ServiceAccountSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'enabled': 'bool',
        'org_id': 'str',
        'allowed_sub_orgs': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'enabled': 'enabled',
        'org_id': 'org_id',
        'allowed_sub_orgs': 'allowed_sub_orgs'
    }

    def __init__(self, name=None, enabled=None, org_id=None, allowed_sub_orgs=None, local_vars_configuration=None):  # noqa: E501
        """ServiceAccountSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._enabled = None
        self._org_id = None
        self._allowed_sub_orgs = None
        self.discriminator = None

        self.name = name
        if enabled is not None:
            self.enabled = enabled
        self.org_id = org_id
        if allowed_sub_orgs is not None:
            self.allowed_sub_orgs = allowed_sub_orgs

    @property
    def name(self):
        """Gets the name of this ServiceAccountSpec.  # noqa: E501

        The name of the service account. This will be used as part of the generated email for the service account. Note the service account's email will not be updated after it has been created.   # noqa: E501

        :return: The name of this ServiceAccountSpec.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceAccountSpec.

        The name of the service account. This will be used as part of the generated email for the service account. Note the service account's email will not be updated after it has been created.   # noqa: E501

        :param name: The name of this ServiceAccountSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def enabled(self):
        """Gets the enabled of this ServiceAccountSpec.  # noqa: E501

        Enable/Disable a service account. This will enable/disable the service account user associated with this account.  # noqa: E501

        :return: The enabled of this ServiceAccountSpec.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ServiceAccountSpec.

        Enable/Disable a service account. This will enable/disable the service account user associated with this account.  # noqa: E501

        :param enabled: The enabled of this ServiceAccountSpec.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def org_id(self):
        """Gets the org_id of this ServiceAccountSpec.  # noqa: E501

        The unique id of the Organisation to which this service account belongs to. This restricts the possible values for allowed_sub_orgs   # noqa: E501

        :return: The org_id of this ServiceAccountSpec.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this ServiceAccountSpec.

        The unique id of the Organisation to which this service account belongs to. This restricts the possible values for allowed_sub_orgs   # noqa: E501

        :param org_id: The org_id of this ServiceAccountSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                org_id is not None and len(org_id) > 40):
            raise ValueError("Invalid value for `org_id`, length must be less than or equal to `40`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                org_id is not None and len(org_id) < 1):
            raise ValueError("Invalid value for `org_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._org_id = org_id

    @property
    def allowed_sub_orgs(self):
        """Gets the allowed_sub_orgs of this ServiceAccountSpec.  # noqa: E501

        The list of suborgs that this service account can be used in. To enable this service account in a sub organisation, activate this service account's user in the organisation.  # noqa: E501

        :return: The allowed_sub_orgs of this ServiceAccountSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_sub_orgs

    @allowed_sub_orgs.setter
    def allowed_sub_orgs(self, allowed_sub_orgs):
        """Sets the allowed_sub_orgs of this ServiceAccountSpec.

        The list of suborgs that this service account can be used in. To enable this service account in a sub organisation, activate this service account's user in the organisation.  # noqa: E501

        :param allowed_sub_orgs: The allowed_sub_orgs of this ServiceAccountSpec.  # noqa: E501
        :type: list[str]
        """

        self._allowed_sub_orgs = allowed_sub_orgs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceAccountSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceAccountSpec):
            return True

        return self.to_dict() != other.to_dict()
