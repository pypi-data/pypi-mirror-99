# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.18
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class X509CertificateSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'certificate': 'str',
        'csr_id': 'str',
        'org_id': 'str',
        'message': 'str',
        'reason': 'CSRReasonEnum'
    }

    attribute_map = {
        'certificate': 'certificate',
        'csr_id': 'csr_id',
        'org_id': 'org_id',
        'message': 'message',
        'reason': 'reason'
    }

    def __init__(self, certificate=None, csr_id=None, org_id=None, message=None, reason=None, local_vars_configuration=None):  # noqa: E501
        """X509CertificateSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._certificate = None
        self._csr_id = None
        self._org_id = None
        self._message = None
        self._reason = None
        self.discriminator = None

        if certificate is not None:
            self.certificate = certificate
        self.csr_id = csr_id
        self.org_id = org_id
        if message is not None:
            self.message = message
        self.reason = reason

    @property
    def certificate(self):
        """Gets the certificate of this X509CertificateSpec.  # noqa: E501

        The issued x509 certificate, formatted as PEM.  # noqa: E501

        :return: The certificate of this X509CertificateSpec.  # noqa: E501
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this X509CertificateSpec.

        The issued x509 certificate, formatted as PEM.  # noqa: E501

        :param certificate: The certificate of this X509CertificateSpec.  # noqa: E501
        :type: str
        """

        self._certificate = certificate

    @property
    def csr_id(self):
        """Gets the csr_id of this X509CertificateSpec.  # noqa: E501

        The CertSigningReq id associated with this certificate  # noqa: E501

        :return: The csr_id of this X509CertificateSpec.  # noqa: E501
        :rtype: str
        """
        return self._csr_id

    @csr_id.setter
    def csr_id(self, csr_id):
        """Sets the csr_id of this X509CertificateSpec.

        The CertSigningReq id associated with this certificate  # noqa: E501

        :param csr_id: The csr_id of this X509CertificateSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and csr_id is None:  # noqa: E501
            raise ValueError("Invalid value for `csr_id`, must not be `None`")  # noqa: E501

        self._csr_id = csr_id

    @property
    def org_id(self):
        """Gets the org_id of this X509CertificateSpec.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The org_id of this X509CertificateSpec.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this X509CertificateSpec.

        Unique identifier  # noqa: E501

        :param org_id: The org_id of this X509CertificateSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def message(self):
        """Gets the message of this X509CertificateSpec.  # noqa: E501

        A system message associated with the reason.   # noqa: E501

        :return: The message of this X509CertificateSpec.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this X509CertificateSpec.

        A system message associated with the reason.   # noqa: E501

        :param message: The message of this X509CertificateSpec.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def reason(self):
        """Gets the reason of this X509CertificateSpec.  # noqa: E501


        :return: The reason of this X509CertificateSpec.  # noqa: E501
        :rtype: CSRReasonEnum
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this X509CertificateSpec.


        :param reason: The reason of this X509CertificateSpec.  # noqa: E501
        :type: CSRReasonEnum
        """
        if self.local_vars_configuration.client_side_validation and reason is None:  # noqa: E501
            raise ValueError("Invalid value for `reason`, must not be `None`")  # noqa: E501

        self._reason = reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, X509CertificateSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, X509CertificateSpec):
            return True

        return self.to_dict() != other.to_dict()
