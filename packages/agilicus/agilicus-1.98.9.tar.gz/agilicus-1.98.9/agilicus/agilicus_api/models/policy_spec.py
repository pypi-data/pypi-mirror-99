# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.03.23
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class PolicySpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'issuer_id': 'str',
        'org_id': 'str',
        'supported_mfa_methods': 'list[str]',
        'default_action': 'str',
        'rules': 'list[PolicyRule]',
        'policy_groups': 'list[PolicyGroup]'
    }

    attribute_map = {
        'name': 'name',
        'issuer_id': 'issuer_id',
        'org_id': 'org_id',
        'supported_mfa_methods': 'supported_mfa_methods',
        'default_action': 'default_action',
        'rules': 'rules',
        'policy_groups': 'policy_groups'
    }

    def __init__(self, name=None, issuer_id=None, org_id=None, supported_mfa_methods=None, default_action=None, rules=None, policy_groups=None, local_vars_configuration=None):  # noqa: E501
        """PolicySpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._issuer_id = None
        self._org_id = None
        self._supported_mfa_methods = None
        self._default_action = None
        self._rules = None
        self._policy_groups = None
        self.discriminator = None

        if name is not None:
            self.name = name
        self.issuer_id = issuer_id
        if org_id is not None:
            self.org_id = org_id
        self.supported_mfa_methods = supported_mfa_methods
        self.default_action = default_action
        if rules is not None:
            self.rules = rules
        if policy_groups is not None:
            self.policy_groups = policy_groups

    @property
    def name(self):
        """Gets the name of this PolicySpec.  # noqa: E501

        The name of the policy so that it can be identifiable when applied to organizations or clients  # noqa: E501

        :return: The name of this PolicySpec.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PolicySpec.

        The name of the policy so that it can be identifiable when applied to organizations or clients  # noqa: E501

        :param name: The name of this PolicySpec.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501

        self._name = name

    @property
    def issuer_id(self):
        """Gets the issuer_id of this PolicySpec.  # noqa: E501

        The issuer that this policy applies to  # noqa: E501

        :return: The issuer_id of this PolicySpec.  # noqa: E501
        :rtype: str
        """
        return self._issuer_id

    @issuer_id.setter
    def issuer_id(self, issuer_id):
        """Sets the issuer_id of this PolicySpec.

        The issuer that this policy applies to  # noqa: E501

        :param issuer_id: The issuer_id of this PolicySpec.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                issuer_id is not None and len(issuer_id) > 40):
            raise ValueError("Invalid value for `issuer_id`, length must be less than or equal to `40`")  # noqa: E501

        self._issuer_id = issuer_id

    @property
    def org_id(self):
        """Gets the org_id of this PolicySpec.  # noqa: E501

        The org id corresponding to the issuer whose policy you are updating  # noqa: E501

        :return: The org_id of this PolicySpec.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this PolicySpec.

        The org id corresponding to the issuer whose policy you are updating  # noqa: E501

        :param org_id: The org_id of this PolicySpec.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                org_id is not None and len(org_id) > 40):
            raise ValueError("Invalid value for `org_id`, length must be less than or equal to `40`")  # noqa: E501

        self._org_id = org_id

    @property
    def supported_mfa_methods(self):
        """Gets the supported_mfa_methods of this PolicySpec.  # noqa: E501

        A list of supported MFA methods. An empty list implies that no MFA methods are acceptable  # noqa: E501

        :return: The supported_mfa_methods of this PolicySpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_mfa_methods

    @supported_mfa_methods.setter
    def supported_mfa_methods(self, supported_mfa_methods):
        """Sets the supported_mfa_methods of this PolicySpec.

        A list of supported MFA methods. An empty list implies that no MFA methods are acceptable  # noqa: E501

        :param supported_mfa_methods: The supported_mfa_methods of this PolicySpec.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and supported_mfa_methods is None:  # noqa: E501
            raise ValueError("Invalid value for `supported_mfa_methods`, must not be `None`")  # noqa: E501

        self._supported_mfa_methods = supported_mfa_methods

    @property
    def default_action(self):
        """Gets the default_action of this PolicySpec.  # noqa: E501

        The action to take if none of the conditions evaluate to true. Actions are case sensitive.  # noqa: E501

        :return: The default_action of this PolicySpec.  # noqa: E501
        :rtype: str
        """
        return self._default_action

    @default_action.setter
    def default_action(self, default_action):
        """Sets the default_action of this PolicySpec.

        The action to take if none of the conditions evaluate to true. Actions are case sensitive.  # noqa: E501

        :param default_action: The default_action of this PolicySpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and default_action is None:  # noqa: E501
            raise ValueError("Invalid value for `default_action`, must not be `None`")  # noqa: E501
        allowed_values = ["do_mfa", "dont_mfa", "deny_login", "allow_login", "authenticate"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and default_action not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `default_action` ({0}), must be one of {1}"  # noqa: E501
                .format(default_action, allowed_values)
            )

        self._default_action = default_action

    @property
    def rules(self):
        """Gets the rules of this PolicySpec.  # noqa: E501

        The list of rules defining the policy. A rule consists of conditions, actions, and a priority  # noqa: E501

        :return: The rules of this PolicySpec.  # noqa: E501
        :rtype: list[PolicyRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this PolicySpec.

        The list of rules defining the policy. A rule consists of conditions, actions, and a priority  # noqa: E501

        :param rules: The rules of this PolicySpec.  # noqa: E501
        :type: list[PolicyRule]
        """

        self._rules = rules

    @property
    def policy_groups(self):
        """Gets the policy_groups of this PolicySpec.  # noqa: E501

        A list of policy groups ordered by priority. The first item in the list represents the group with the highest priority. A policy group consists of a list of rules. All rules in a group of higher priority will have higher precedence than any rule in a group of lower priority.   # noqa: E501

        :return: The policy_groups of this PolicySpec.  # noqa: E501
        :rtype: list[PolicyGroup]
        """
        return self._policy_groups

    @policy_groups.setter
    def policy_groups(self, policy_groups):
        """Sets the policy_groups of this PolicySpec.

        A list of policy groups ordered by priority. The first item in the list represents the group with the highest priority. A policy group consists of a list of rules. All rules in a group of higher priority will have higher precedence than any rule in a group of lower priority.   # noqa: E501

        :param policy_groups: The policy_groups of this PolicySpec.  # noqa: E501
        :type: list[PolicyGroup]
        """

        self._policy_groups = policy_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicySpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PolicySpec):
            return True

        return self.to_dict() != other.to_dict()
