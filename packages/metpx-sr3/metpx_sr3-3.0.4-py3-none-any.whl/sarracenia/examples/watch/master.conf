
post_broker amqp://user@broker

# the broker for the data_pump you intend to publish to.
# make sure there is an entry like:
# amqps://user:password@broker
# in your ~/.config/sarra/credentials.conf file to match this.
#

post_exchange xs_user

# sr_watch publishes to an exchange named *xs_*"broker_username" by default.
# Use the *post_exchange* option to override that default.


blocksize 0

#The value of blocksize should be one of::
#
#   0 - autocompute an appropriate partitioning strategy (default)
#   1 - always send files in a single part.
#   <sz> - used a fixed partition size (example size: 1M )
#
#Files can be announced as multiple blocks (or parts). Each part has a separate checksum.
#The parts and their checksums are stored in the cache. Partitions can traverse
#the network separately, and in paralllel.  When files change, transfers are
#optimized by only sending parts which have changed.


path /home/user/public_html

# the path(s) to watch for file events.
# If a path defines a file then this file is watched.
#
# If a path defines a directory then all files in that directory are
# watched...(and any subdirectories of those, etc... )
#

post_base_url http://server/~user

# The beginning of the URL that posts will have.
# if you expect people to download using a web URL, then one should publish that.
# another common option is an SFTP-url, such as sftp://user@server/
# when notifying for local consumption, file: url's are a common choice also.

post_base_dir /home/user/public_html

# A list of event types to monitor separated by a 'pipe symbol'.
# Available events:  create, delete, follow, link, modify, poll
# Default: default is all of them, except poll

events create|delete|link|modify

# The *create*, *modify*, and *delete* events reflect what is expected: a file being created, modified, or deleted.
# If *link* is set, symbolic links will be posted as links so that consumers can choose
# how to process them. If it is not set, then no symbolic link events will ever be posted.


realpath off

# The realpath option resolves paths given to their canonical ones, eliminating
# any indirection via symlinks. The behaviour improves the ability of sr_watch to
# monitor trees, but the trees may have completely different paths than the arguments
# given. This option also enforces traversing of symbolic links. 


sleep 5s

# The time to wait between generating events.  The option is a time interval and
# can be expressed in seconds, minutes, hours, days, weeks (s,m,h,d,w.)
# When files are written frequently, it is counter productive to produce a post 
# for every change, as it can produce a continuous stream of changes where the 
# transfers cannot be done quickly enough to keep up.  In such circumstances, 
# one can group all changes made to a file in *sleep* time, and produce a 
# single post.

to broker

#  A comma-separated list of destination clusters to which the posted data should be sent.
#  Ask pump administrators for a list of valid destinations.
#
#  default: the hostname of the broker being posted to.


force_polling off

# usually much more cpu-intensive than default (inotify) mode.
# turn on for cluster file systems (writing might be done by other nodes.)

follow_symlinks off

# if you want to keep watching across symlinked directories, or send the contents
# of symlinked files. if link events are not posted, but follow_symlinks is on,
# then symlinked files will be announced as ordinary files.
#

header printer=MyPrinter

# Add a <name> header with the given value to advertisements. Used to pass strings as metadata in the
# advertisements to improve decision making for consumers.  Should be used sparingly. There are limits
# on how many headers can be used, and minimizing the size of messages has important performance
# impacts.

sum d

# All file posts include a checksum.  It is placed in the amqp message header will have as an
# entry *sum* with default value 'd,md5_checksum_on_data'.
# The *sum* option tell the program how to calculate the checksum.
# It is a comma separated string.  Valid checksum flags are ::
#
#    [0|n|d|s|N|z]
#    where 0 : no checksum... value in post is a random integer (only for testing/debugging.)
#          d : do md5sum on file content (default for now, compatibility)
#          n : do md5sum checksum on filename
#          N : do SHA512 checksum on filename
#          s : do SHA512 on file content (default in future)
#          z,a : calculate checksum value using algorithm a and assign after download.
#

delete off

# In force_polling mode, assume that directories empty themselves, so that every file in each *path*
# should be posted at every polling pass, instead of just new ones.  Use caching to ignore the ones
# seen before.  In polling mode, the speed of recognition of files is limited to the speed at which
# a tree can be traversed.  The scanning method needs to be chosen based on the performance sought.

rename newname

# With the  *rename*   option, the user can
# suggest a destination path for its files. If the given
# path ends with '/' it suggests a directory path...
# If it doesn't, the option specifies a file renaming.
#
# FIXME: nobody remembers why this option exists, could just use on_message plugin, kind of strange.



