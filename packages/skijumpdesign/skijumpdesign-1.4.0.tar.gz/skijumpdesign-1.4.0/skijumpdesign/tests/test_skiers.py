import os
from math import isclose

import numpy as np
import matplotlib.pyplot as plt

from ..skiers import Skier
from ..surfaces import Surface, FlatSurface, TakeoffSurface
from ..utils import vel2speed


def test_skier(plot=False):

    mass = 75.0
    area = 0.5
    drag_coeff = 1.0
    friction_coeff = 0.3
    air_density = 0.85

    skier = Skier(mass, area, drag_coeff, friction_coeff)

    assert isclose(skier.mass, mass)
    assert isclose(skier.area, area)
    assert isclose(skier.drag_coeff, drag_coeff)
    assert isclose(skier.friction_coeff, friction_coeff)

    vel = -10.0

    assert isclose(skier.drag_force(vel), 1 / 2 * vel**2 * air_density *
                   drag_coeff * area)

    assert isclose(skier.friction_force(vel, slope=10.0),
                   friction_coeff * mass * 9.81 * np.cos(np.tan(10.0)))

    takeoff_pos = (4.0, 3.0)  # x, y
    takeoff_vel = (1.0, 10.0)  # vx, vy

    surf = Surface(np.linspace(0.0, 10.0, num=10), np.zeros(10))

    flight_traj = skier.fly_to(surf, takeoff_pos, takeoff_vel)

    if plot:
        ax = surf.plot()
        flight_traj.plot(ax=ax)

    landing_pos = tuple(flight_traj.pos[-1])
    landing_vel = tuple(flight_traj.vel[-1])

    takeoff_speed, takeoff_angle = vel2speed(*takeoff_vel)

    takeoff_speed2, landing_vel2 = skier.speed_to_land_at(landing_pos,
                                                          takeoff_pos,
                                                          takeoff_angle,
                                                          surf=surf)

    assert isclose(takeoff_speed, takeoff_speed2, rel_tol=1e-5)
    assert isclose(landing_vel[0], landing_vel2[0], rel_tol=1e-5)
    assert isclose(landing_vel[1], landing_vel2[1], rel_tol=1e-5)


def test_slide_on():

    # Make sure spacing is at least 0.3 m
    x = np.linspace(0, 6 * np.pi, num=120)
    y = np.sin(x)

    surf = Surface(x, y)

    mass = 75.0
    area = 0.5
    drag_coeff = 1.0
    friction_coeff = 0.3

    skier = Skier(mass, area, drag_coeff, friction_coeff)

    traj = skier.slide_on(surf, 50.0)

    expected_times = \
np.array([0.        , 0.00280697, 0.00561393, 0.0084209 , 0.01122786,
          0.01403483, 0.01684179, 0.01964876, 0.02245572, 0.02526269,
          0.02806965, 0.03087662, 0.03368358, 0.03649055, 0.03929751,
          0.04210448, 0.04491144, 0.04771841, 0.05052537, 0.05333234,
          0.0561393 , 0.05894627, 0.06175323, 0.0645602 , 0.06736716,
          0.07017413, 0.07298109, 0.07578806, 0.07859502, 0.08140199,
          0.08420895, 0.08701592, 0.08982288, 0.09262985, 0.09543681,
          0.09824378, 0.10105074, 0.10385771, 0.10666467, 0.10947164,
          0.1122786 , 0.11508557, 0.11789253, 0.1206995 , 0.12350646,
          0.12631343, 0.12912039, 0.13192736, 0.13473432, 0.13754129,
          0.14034825, 0.14315522, 0.14596218, 0.14876915, 0.15157611,
          0.15438308, 0.15719004, 0.15999701, 0.16280397, 0.16561094,
          0.1684179 , 0.17122487, 0.17403183, 0.1768388 , 0.17964576,
          0.18245273, 0.18525969, 0.18806666, 0.19087362, 0.19368059,
          0.19648755, 0.19929452, 0.20210148, 0.20490845, 0.20771541,
          0.21052238, 0.21332934, 0.21613631, 0.21894327, 0.22175024,
          0.2245572 , 0.22736417, 0.23017113, 0.2329781 , 0.23578506,
          0.23859203, 0.24139899, 0.24420596, 0.24701292, 0.24981989,
          0.25262685, 0.25543382, 0.25824078, 0.26104775, 0.26385471,
          0.26666168, 0.26946864, 0.27227561, 0.27508257, 0.27788954,
          0.2806965 , 0.28350347, 0.28631043, 0.2891174 , 0.29192436,
          0.29473133, 0.29753829, 0.30034526, 0.30315222, 0.30595919,
          0.30876615, 0.31157312, 0.31438008, 0.31718705, 0.31999401,
          0.32280098, 0.32560794, 0.32841491, 0.33122187, 0.33402884,
          0.3368358 , 0.33964277, 0.34244974, 0.3452567 , 0.34806367,
          0.35087063, 0.3536776 , 0.35648456, 0.35929153, 0.36209849,
          0.36490546, 0.36771242, 0.37051939, 0.37332635, 0.37613332,
          0.37894028, 0.38174725])

    expected_x = \
np.array([ 0.        ,  0.09927789,  0.19955059,  0.30122071,  0.40491696,
           0.51143158,  0.62172019,  0.73690183,  0.85825894,  0.98723736,
           1.12544635,  1.27465857,  1.43711731,  1.61148119,  1.79253409,
           1.97589775,  2.15814512,  2.33680033,  2.51033871,  2.67818681,
           2.84072233,  2.99927419,  3.15612251,  3.31389873,  3.47277987,
           3.63484738,  3.80171535,  3.97401565,  4.15139782,  4.33252917,
           4.51509474,  4.69579728,  4.87035729,  5.033513  ,  5.1799285 ,
           5.31436873,  5.43986856,  5.5576283 ,  5.66883322,  5.77465352,
           5.87624437,  5.97474586,  6.07128303,  6.16696588,  6.26288934,
           6.35967739,  6.45694011,  6.55515543,  6.65496514,  6.75712654,
           6.86251249,  6.97211138,  7.08702714,  7.20847925,  7.33780273,
           7.47644815,  7.6259816 ,  7.78747938,  7.95796356,  8.13323771,
           8.30984487,  8.48507517,  8.65696585,  8.82430122,  8.98661268,
           9.14417874,  9.29802498,  9.44992408,  9.60239583,  9.75700912,
           9.91436617, 10.07615015, 10.2430726 , 10.41486242, 10.59026586,
          10.76704651, 10.94198534, 11.11088066, 11.26864527, 11.41410257,
          11.54904706, 11.67463094, 11.79206162, 11.90260171, 12.00756906,
          12.10833673, 12.206333  , 12.30304137, 12.39934117, 12.49478609,
          12.58967784, 12.68444025, 12.77959214, 12.87574734, 12.97361469,
          13.07399802, 13.17779619, 13.28600303, 13.3997074 , 13.52009317,
          13.64851577, 13.78703767, 13.93593106, 14.09431764, 14.2605661 ,
          14.43229212, 14.6063584 , 14.7788746 , 14.94535395, 15.1057677 ,
          15.26189431, 15.41465687, 15.56505473, 15.71416353, 15.86313514,
          16.01319773, 16.16569887, 16.32339492, 16.4859959 , 16.65171496,
          16.81882932, 16.98568023, 17.15067306, 17.31227719, 17.46902611,
          17.61951734, 17.76241249, 17.89643721, 18.02084517, 18.13786321,
          18.24907347, 18.35566415, 18.45866939, 18.55896932, 18.65728999,
          18.75420344, 18.85012765])

    expected_v = \
np.array([50.        , 50.06753557, 50.18785133, 50.37897037, 50.64411716,
          50.9999092 , 51.47666101, 52.11838412, 52.98278705, 54.14127535,
          55.67895154, 57.69461518, 60.31211158, 63.42769226, 66.71789026,
          69.91231321, 72.79984336, 75.22863749, 77.10612701, 78.39901787,
          79.13329065, 79.39420046, 79.32627703, 79.12683457, 78.80196136,
          78.12428315, 76.92703342, 75.12133131, 72.69618163, 69.71847481,
          66.33298698, 62.7623799 , 59.307201  , 56.34588337, 54.26707577,
          52.72222087, 51.51647172, 50.59692594, 49.91484789, 49.42566872,
          49.08898635, 48.86856547, 48.73233754, 48.65240079, 48.60502022,
          48.59619027, 48.67088417, 48.81783236, 49.03436418, 49.32966772,
          49.72478988, 50.25263637, 50.95797165, 51.89741902, 53.13946054,
          54.76443707, 56.86454828, 59.471793  , 62.36396576, 65.31909512,
          68.15356994, 70.72092967, 72.91186439, 74.65421481, 75.91297224,
          76.69027862, 77.02542651, 76.9948591 , 76.71217019, 76.28463828,
          75.58197947, 74.43527565, 72.7515024 , 70.51366385, 67.78079267,
          64.68795006, 61.44622574, 58.34273801, 55.73306602, 53.68189195,
          52.06346512, 50.81470724, 49.87501027, 49.18623642, 48.69271819,
          48.34125829, 48.08112972, 47.86407575, 47.68172756, 47.57710321,
          47.53677558, 47.55235246, 47.62234866, 47.75218602, 47.9541934 ,
          48.24760668, 48.6585688 , 49.22012967, 49.97224629, 50.96178263,
          52.24838363, 53.95594538, 56.09851111, 58.6155671 , 61.40025793,
          64.29938648, 67.11341392, 69.59645973, 71.46905868, 72.80488654,
          73.7607434 , 74.39352463, 74.74372079, 74.83541761, 74.67629601,
          74.25763206, 73.54922389, 72.31629095, 70.57940244, 68.50508837,
          66.23860204, 63.90392007, 61.60374238, 59.41949219, 57.41131603,
          55.61808374, 54.05738846, 52.72554664, 51.60929666, 50.72708275,
          50.04549643, 49.52673908, 49.13701309, 48.84652187, 48.62946983,
          48.46406242, 48.33250608])

    np.testing.assert_allclose(expected_times, traj.t, rtol=1e-5)
    np.testing.assert_allclose(expected_x, traj.pos[:, 0], rtol=1e-5)
    np.testing.assert_allclose(expected_v, traj.speed, rtol=1e-5)


def test_slide_on_regression():

    approach_ang = -np.deg2rad(20)  # radians
    approach_len = 20.0  # meters
    takeoff_ang = np.deg2rad(15)

    skier = Skier()

    approach = FlatSurface(approach_ang, approach_len)

    takeoff_entry_speed = skier.end_speed_on(approach)

    expected_speed = 10.92727081007988054750512674218044

    assert isclose(takeoff_entry_speed, expected_speed, rel_tol=1e-16)

    takeoff_entry_vel = skier.end_vel_on(approach)

    # NOTE : Not true regression here because there was a bug in end_vel_on
    # which used tan instead of arctan.
    expected_vx = 10.26827574556135758143682323861867
    expected_vy = -3.7373467286218100547046105930348

    assert isclose(takeoff_entry_vel[0], expected_vx)
    assert isclose(takeoff_entry_vel[1], expected_vy)

    takeoff = TakeoffSurface(skier, approach_ang, takeoff_ang, expected_speed,
                             init_pos=approach.end)

    takeoff_traj = skier.slide_on(takeoff, expected_speed)

    this_dir = os.path.dirname(os.path.realpath(__file__))
    expected_times = np.loadtxt(os.path.join(this_dir, 'slide-on-times.txt'),
                                delimiter=',')
    expected_traj = np.loadtxt(os.path.join(this_dir, 'slide-on-traj.txt'),
                               delimiter=',')

    np.testing.assert_allclose(takeoff_traj.t,
                               expected_times, rtol=1e-14)
    np.testing.assert_allclose(takeoff_traj.pos[:, 0],
                               expected_traj[0], rtol=1e-15)
    np.testing.assert_allclose(takeoff_traj.speed,
                               expected_traj[1], rtol=1e-14)
