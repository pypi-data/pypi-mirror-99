# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import eval_server_pb2 as eval__server__pb2


class ImageServiceStub(object):
    """service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetImageStream = channel.unary_stream(
                '/ImageService/GetImageStream',
                request_serializer=eval__server__pb2.String.SerializeToString,
                response_deserializer=eval__server__pb2.Frame.FromString,
                )
        self.GetShm = channel.unary_unary(
                '/ImageService/GetShm',
                request_serializer=eval__server__pb2.Empty.SerializeToString,
                response_deserializer=eval__server__pb2.String.FromString,
                )


class ImageServiceServicer(object):
    """service
    """

    def GetImageStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetShm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetImageStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetImageStream,
                    request_deserializer=eval__server__pb2.String.FromString,
                    response_serializer=eval__server__pb2.Frame.SerializeToString,
            ),
            'GetShm': grpc.unary_unary_rpc_method_handler(
                    servicer.GetShm,
                    request_deserializer=eval__server__pb2.Empty.FromString,
                    response_serializer=eval__server__pb2.String.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ImageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ImageService(object):
    """service
    """

    @staticmethod
    def GetImageStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ImageService/GetImageStream',
            eval__server__pb2.String.SerializeToString,
            eval__server__pb2.Frame.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetShm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImageService/GetShm',
            eval__server__pb2.Empty.SerializeToString,
            eval__server__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ResultServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SignalResultsReady = channel.unary_unary(
                '/ResultService/SignalResultsReady',
                request_serializer=eval__server__pb2.Result.SerializeToString,
                response_deserializer=eval__server__pb2.Empty.FromString,
                )
        self.FinishSequence = channel.unary_unary(
                '/ResultService/FinishSequence',
                request_serializer=eval__server__pb2.Empty.SerializeToString,
                response_deserializer=eval__server__pb2.Empty.FromString,
                )
        self.GenResults = channel.unary_unary(
                '/ResultService/GenResults',
                request_serializer=eval__server__pb2.String.SerializeToString,
                response_deserializer=eval__server__pb2.Empty.FromString,
                )
        self.GetShm = channel.unary_unary(
                '/ResultService/GetShm',
                request_serializer=eval__server__pb2.Empty.SerializeToString,
                response_deserializer=eval__server__pb2.String.FromString,
                )


class ResultServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SignalResultsReady(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinishSequence(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenResults(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetShm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ResultServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SignalResultsReady': grpc.unary_unary_rpc_method_handler(
                    servicer.SignalResultsReady,
                    request_deserializer=eval__server__pb2.Result.FromString,
                    response_serializer=eval__server__pb2.Empty.SerializeToString,
            ),
            'FinishSequence': grpc.unary_unary_rpc_method_handler(
                    servicer.FinishSequence,
                    request_deserializer=eval__server__pb2.Empty.FromString,
                    response_serializer=eval__server__pb2.Empty.SerializeToString,
            ),
            'GenResults': grpc.unary_unary_rpc_method_handler(
                    servicer.GenResults,
                    request_deserializer=eval__server__pb2.String.FromString,
                    response_serializer=eval__server__pb2.Empty.SerializeToString,
            ),
            'GetShm': grpc.unary_unary_rpc_method_handler(
                    servicer.GetShm,
                    request_deserializer=eval__server__pb2.Empty.FromString,
                    response_serializer=eval__server__pb2.String.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ResultService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ResultService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SignalResultsReady(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ResultService/SignalResultsReady',
            eval__server__pb2.Result.SerializeToString,
            eval__server__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinishSequence(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ResultService/FinishSequence',
            eval__server__pb2.Empty.SerializeToString,
            eval__server__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ResultService/GenResults',
            eval__server__pb2.String.SerializeToString,
            eval__server__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetShm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ResultService/GetShm',
            eval__server__pb2.Empty.SerializeToString,
            eval__server__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
