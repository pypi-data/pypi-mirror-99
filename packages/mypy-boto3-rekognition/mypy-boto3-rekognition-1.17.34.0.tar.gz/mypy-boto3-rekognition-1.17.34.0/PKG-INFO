Metadata-Version: 2.1
Name: mypy-boto3-rekognition
Version: 1.17.34.0
Summary: Type annotations for boto3.Rekognition 1.17.34 service, generated by mypy-boto3-buider 4.4.0
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Description: # mypy-boto3-rekognition
        
        [![PyPI - mypy-boto3-rekognition](https://img.shields.io/pypi/v/mypy-boto3-rekognition.svg?color=blue)](https://pypi.org/project/mypy-boto3-rekognition)
        [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-rekognition.svg?color=blue)](https://pypi.org/project/mypy-boto3-rekognition)
        [![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
        
        ![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/master/logo.png)
        
        Type annotations for
        [boto3.Rekognition 1.17.34](https://boto3.amazonaws.com/v1/documentation/api/1.17.34/reference/services/rekognition.html#Rekognition) service
        compatible with
        [VSCode](https://code.visualstudio.com/),
        [PyCharm](https://www.jetbrains.com/pycharm/),
        [Emacs](https://www.gnu.org/software/emacs/),
        [Sublime Text](https://www.sublimetext.com/),
        [mypy](https://github.com/python/mypy),
        [pyright](https://github.com/microsoft/pyright)
        and other tools.
        
        Generated by [mypy-boto3-buider 4.4.0](https://github.com/vemel/mypy_boto3_builder).
        
        More information can be found on [boto3-stubs](https://pypi.org/project/boto3-stubs/) page.
        
        See how it helps to find and fix potential bugs:
        
        ![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/master/demo.gif)
        
        - [mypy-boto3-rekognition](#mypy-boto3-rekognition)
          - [How to install](#how-to-install)
          - [Usage](#usage)
            - [VSCode](#vscode)
            - [PyCharm](#pycharm)
            - [Other IDEs](#other-ides)
            - [mypy](#mypy)
            - [pyright](#pyright)
          - [Explicit type annotations](#explicit-type-annotations)
            - [Client annotations](#client-annotations)
            - [Paginators annotations](#paginators-annotations)
            - [Waiters annotations](#waiters-annotations)
            - [Service Resource annotations](#service-resource-annotations)
            - [Other resources annotations](#other-resources-annotations)
            - [Collections annotations](#collections-annotations)
            - [Typed dictionations](#typed-dictionations)
        
        ## How to install
        
        Install `boto3-stubs` for `Rekognition` service.
        
        ```bash
        python -m pip install boto3-stubs[rekognition]
        ```
        
        ## Usage
        
        ### VSCode
        
        - Install [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
        - Install [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
        - Set `Pylance` as your Python Language Server
        - Install `boto-stubs[rekognition]` in your environment: `python -m pip install 'boto3-stubs[rekognition]'`
        
        Both type checking and auto-complete should work for `Rekognition` service.
        No explicit type annotations required, write your `boto3` code as usual.
        
        ### PyCharm
        
        - Install `boto-stubs[rekognition]` in your environment: `python -m pip install 'boto3-stubs[rekognition]'`
        
        Both type checking and auto-complete should work for `Rekognition` service.
        No explicit type annotations required, write your `boto3` code as usual.
        Auto-complete can be slow on big projects or if you have a lot of installed `boto3-stubs` submodules.
        
        ### Other IDEs
        
        Not tested, but as long as your IDE support `mypy` or `pyright`, everything should work.
        
        ### mypy
        
        - Install `mypy`: `python -m pip install mypy`
        - Install `boto-stubs[rekognition]` in your environment: `python -m pip install 'boto3-stubs[rekognition]'`
        - Run `mypy` as usual
        
        Type checking should work for `Rekognition` service.
        No explicit type annotations required, write your `boto3` code as usual.
        
        ### pyright
        
        - Install `pyright`: `yarn global add pyright`
        - Install `boto-stubs[rekognition]` in your environment: `python -m pip install 'boto3-stubs[rekognition]'`
        - Optionally, you can install `boto3-stubs` to `typings` folder.
        
        Type checking should work for `Rekognition` service.
        No explicit type annotations required, write your `boto3` code as usual.
        
        ## Explicit type annotations
        
        ### Client annotations
        
        `RekognitionClient` provides annotations for `boto3.client("rekognition")`.
        
        ```python
        import boto3
        
        from mypy_boto3_rekognition import RekognitionClient
        
        client: RekognitionClient = boto3.client("rekognition")
        
        # now client usage is checked by mypy and IDE should provide code auto-complete
        
        # works for session as well
        session = boto3.session.Session(region="us-west-1")
        session_client: RekognitionClient = session.client("rekognition")
        ```
        
        ### Paginators annotations
        
        `mypy_boto3_rekognition.paginator` module contains type annotations for all paginators.
        
        ```python
        from mypy_boto3_rekognition import RekognitionClient
        from mypy_boto3_rekognition.paginator import (
            DescribeProjectVersionsPaginator,
            DescribeProjectsPaginator,
            ListCollectionsPaginator,
            ListFacesPaginator,
            ListStreamProcessorsPaginator,
        )
        
        client: RekognitionClient = boto3.client("rekognition")
        
        # Explicit type annotations are optional here
        # Type should be correctly discovered by mypy and IDEs
        # VSCode requires explicit type annotations
        describe_project_versions_paginator: DescribeProjectVersionsPaginator = client.get_paginator("describe_project_versions")
        describe_projects_paginator: DescribeProjectsPaginator = client.get_paginator("describe_projects")
        list_collections_paginator: ListCollectionsPaginator = client.get_paginator("list_collections")
        list_faces_paginator: ListFacesPaginator = client.get_paginator("list_faces")
        list_stream_processors_paginator: ListStreamProcessorsPaginator = client.get_paginator("list_stream_processors")
        ```
        
        
        ### Waiters annotations
        
        `mypy_boto3_rekognition.waiter` module contains type annotations for all waiters.
        
        ```python
        from mypy_boto3_rekognition import RekognitionClient
        from mypy_boto3_rekognition.waiter import (
            ProjectVersionRunningWaiter,
            ProjectVersionTrainingCompletedWaiter,
        )
        
        client: RekognitionClient = boto3.client("rekognition")
        
        # Explicit type annotations are optional here
        # Type should be correctly discovered by mypy and IDEs
        # VSCode requires explicit type annotations
        project_version_running_waiter: ProjectVersionRunningWaiter = client.get_waiter("project_version_running")
        project_version_training_completed_waiter: ProjectVersionTrainingCompletedWaiter = client.get_waiter("project_version_training_completed")
        ```
        
        
        
        
        
        ### Typed dictionations
        
        `mypy_boto3_rekognition.type_defs` module contains structures and shapes assembled
        to typed dictionaries for additional type checking.
        
        ```python
        from mypy_boto3_rekognition.type_defs import (
            AgeRangeTypeDef,
            AssetTypeDef,
            AudioMetadataTypeDef,
            BeardTypeDef,
            BoundingBoxTypeDef,
            CelebrityDetailTypeDef,
            CelebrityRecognitionTypeDef,
            CelebrityTypeDef,
            CompareFacesMatchTypeDef,
            ComparedFaceTypeDef,
            ComparedSourceImageFaceTypeDef,
            ContentModerationDetectionTypeDef,
            CoversBodyPartTypeDef,
            CustomLabelTypeDef,
            DetectionFilterTypeDef,
            EmotionTypeDef,
            EquipmentDetectionTypeDef,
            EvaluationResultTypeDef,
            EyeOpenTypeDef,
            EyeglassesTypeDef,
            FaceDetailTypeDef,
            FaceDetectionTypeDef,
            FaceMatchTypeDef,
            FaceRecordTypeDef,
            FaceSearchSettingsTypeDef,
            FaceTypeDef,
            GenderTypeDef,
            GeometryTypeDef,
            GroundTruthManifestTypeDef,
            HumanLoopActivationOutputTypeDef,
            HumanLoopDataAttributesTypeDef,
            ImageQualityTypeDef,
            InstanceTypeDef,
            KinesisDataStreamTypeDef,
            KinesisVideoStreamTypeDef,
            LabelDetectionTypeDef,
            LabelTypeDef,
            LandmarkTypeDef,
            ModerationLabelTypeDef,
            MouthOpenTypeDef,
            MustacheTypeDef,
            OutputConfigTypeDef,
            ParentTypeDef,
            PersonDetailTypeDef,
            PersonDetectionTypeDef,
            PersonMatchTypeDef,
            PointTypeDef,
            PoseTypeDef,
            ProjectDescriptionTypeDef,
            ProjectVersionDescriptionTypeDef,
            ProtectiveEquipmentBodyPartTypeDef,
            ProtectiveEquipmentPersonTypeDef,
            ProtectiveEquipmentSummaryTypeDef,
            RegionOfInterestTypeDef,
            ResponseMetadata,
            S3ObjectTypeDef,
            SegmentDetectionTypeDef,
            SegmentTypeInfoTypeDef,
            ShotSegmentTypeDef,
            SmileTypeDef,
            StartShotDetectionFilterTypeDef,
            StartTechnicalCueDetectionFilterTypeDef,
            StreamProcessorInputTypeDef,
            StreamProcessorOutputTypeDef,
            StreamProcessorSettingsTypeDef,
            StreamProcessorTypeDef,
            SummaryTypeDef,
            SunglassesTypeDef,
            TechnicalCueSegmentTypeDef,
            TestingDataResultTypeDef,
            TestingDataTypeDef,
            TextDetectionResultTypeDef,
            TextDetectionTypeDef,
            TrainingDataResultTypeDef,
            TrainingDataTypeDef,
            UnindexedFaceTypeDef,
            ValidationDataTypeDef,
            VideoMetadataTypeDef,
            CompareFacesResponseTypeDef,
            CreateCollectionResponseTypeDef,
            CreateProjectResponseTypeDef,
            CreateProjectVersionResponseTypeDef,
            CreateStreamProcessorResponseTypeDef,
            DeleteCollectionResponseTypeDef,
            DeleteFacesResponseTypeDef,
            DeleteProjectResponseTypeDef,
            DeleteProjectVersionResponseTypeDef,
            DescribeCollectionResponseTypeDef,
            DescribeProjectVersionsResponseTypeDef,
            DescribeProjectsResponseTypeDef,
            DescribeStreamProcessorResponseTypeDef,
            DetectCustomLabelsResponseTypeDef,
            DetectFacesResponseTypeDef,
            DetectLabelsResponseTypeDef,
            DetectModerationLabelsResponseTypeDef,
            DetectProtectiveEquipmentResponseTypeDef,
            DetectTextFiltersTypeDef,
            DetectTextResponseTypeDef,
            GetCelebrityInfoResponseTypeDef,
            GetCelebrityRecognitionResponseTypeDef,
            GetContentModerationResponseTypeDef,
            GetFaceDetectionResponseTypeDef,
            GetFaceSearchResponseTypeDef,
            GetLabelDetectionResponseTypeDef,
            GetPersonTrackingResponseTypeDef,
            GetSegmentDetectionResponseTypeDef,
            GetTextDetectionResponseTypeDef,
            HumanLoopConfigTypeDef,
            ImageTypeDef,
            IndexFacesResponseTypeDef,
            ListCollectionsResponseTypeDef,
            ListFacesResponseTypeDef,
            ListStreamProcessorsResponseTypeDef,
            NotificationChannelTypeDef,
            PaginatorConfigTypeDef,
            ProtectiveEquipmentSummarizationAttributesTypeDef,
            RecognizeCelebritiesResponseTypeDef,
            SearchFacesByImageResponseTypeDef,
            SearchFacesResponseTypeDef,
            StartCelebrityRecognitionResponseTypeDef,
            StartContentModerationResponseTypeDef,
            StartFaceDetectionResponseTypeDef,
            StartFaceSearchResponseTypeDef,
            StartLabelDetectionResponseTypeDef,
            StartPersonTrackingResponseTypeDef,
            StartProjectVersionResponseTypeDef,
            StartSegmentDetectionFiltersTypeDef,
            StartSegmentDetectionResponseTypeDef,
            StartTextDetectionFiltersTypeDef,
            StartTextDetectionResponseTypeDef,
            StopProjectVersionResponseTypeDef,
            VideoTypeDef,
            WaiterConfigTypeDef,
        )
        
        def get_structure() -> AgeRangeTypeDef:
            return {
              ...
            }
        ```
        
Keywords: boto3 rekognition type-annotations boto3-stubs mypy typeshed autocomplete auto-generated
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
