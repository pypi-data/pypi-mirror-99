# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PyIndi
else:
    import _PyIndi

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyIndi.delete_SwigPyIterator

    def value(self):
        return _PyIndi.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PyIndi.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PyIndi.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PyIndi.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PyIndi.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PyIndi.SwigPyIterator_copy(self)

    def next(self):
        return _PyIndi.SwigPyIterator_next(self)

    def __next__(self):
        return _PyIndi.SwigPyIterator___next__(self)

    def previous(self):
        return _PyIndi.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PyIndi.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PyIndi.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PyIndi.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PyIndi.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PyIndi.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PyIndi.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PyIndi.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PyIndi:
_PyIndi.SwigPyIterator_swigregister(SwigPyIterator)

class BaseDeviceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyIndi.BaseDeviceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyIndi.BaseDeviceVector___nonzero__(self)

    def __bool__(self):
        return _PyIndi.BaseDeviceVector___bool__(self)

    def __len__(self):
        return _PyIndi.BaseDeviceVector___len__(self)

    def __getslice__(self, i, j):
        return _PyIndi.BaseDeviceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyIndi.BaseDeviceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyIndi.BaseDeviceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyIndi.BaseDeviceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyIndi.BaseDeviceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyIndi.BaseDeviceVector___setitem__(self, *args)

    def pop(self):
        return _PyIndi.BaseDeviceVector_pop(self)

    def append(self, x):
        return _PyIndi.BaseDeviceVector_append(self, x)

    def empty(self):
        return _PyIndi.BaseDeviceVector_empty(self)

    def size(self):
        return _PyIndi.BaseDeviceVector_size(self)

    def swap(self, v):
        return _PyIndi.BaseDeviceVector_swap(self, v)

    def begin(self):
        return _PyIndi.BaseDeviceVector_begin(self)

    def end(self):
        return _PyIndi.BaseDeviceVector_end(self)

    def rbegin(self):
        return _PyIndi.BaseDeviceVector_rbegin(self)

    def rend(self):
        return _PyIndi.BaseDeviceVector_rend(self)

    def clear(self):
        return _PyIndi.BaseDeviceVector_clear(self)

    def get_allocator(self):
        return _PyIndi.BaseDeviceVector_get_allocator(self)

    def pop_back(self):
        return _PyIndi.BaseDeviceVector_pop_back(self)

    def erase(self, *args):
        return _PyIndi.BaseDeviceVector_erase(self, *args)

    def __init__(self, *args):
        _PyIndi.BaseDeviceVector_swiginit(self, _PyIndi.new_BaseDeviceVector(*args))

    def push_back(self, x):
        return _PyIndi.BaseDeviceVector_push_back(self, x)

    def front(self):
        return _PyIndi.BaseDeviceVector_front(self)

    def back(self):
        return _PyIndi.BaseDeviceVector_back(self)

    def assign(self, n, x):
        return _PyIndi.BaseDeviceVector_assign(self, n, x)

    def resize(self, *args):
        return _PyIndi.BaseDeviceVector_resize(self, *args)

    def insert(self, *args):
        return _PyIndi.BaseDeviceVector_insert(self, *args)

    def reserve(self, n):
        return _PyIndi.BaseDeviceVector_reserve(self, n)

    def capacity(self):
        return _PyIndi.BaseDeviceVector_capacity(self)
    __swig_destroy__ = _PyIndi.delete_BaseDeviceVector

# Register BaseDeviceVector in _PyIndi:
_PyIndi.BaseDeviceVector_swigregister(BaseDeviceVector)

class PropertyVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyIndi.PropertyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyIndi.PropertyVector___nonzero__(self)

    def __bool__(self):
        return _PyIndi.PropertyVector___bool__(self)

    def __len__(self):
        return _PyIndi.PropertyVector___len__(self)

    def __getslice__(self, i, j):
        return _PyIndi.PropertyVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyIndi.PropertyVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyIndi.PropertyVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyIndi.PropertyVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyIndi.PropertyVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyIndi.PropertyVector___setitem__(self, *args)

    def pop(self):
        return _PyIndi.PropertyVector_pop(self)

    def append(self, x):
        return _PyIndi.PropertyVector_append(self, x)

    def empty(self):
        return _PyIndi.PropertyVector_empty(self)

    def size(self):
        return _PyIndi.PropertyVector_size(self)

    def swap(self, v):
        return _PyIndi.PropertyVector_swap(self, v)

    def begin(self):
        return _PyIndi.PropertyVector_begin(self)

    def end(self):
        return _PyIndi.PropertyVector_end(self)

    def rbegin(self):
        return _PyIndi.PropertyVector_rbegin(self)

    def rend(self):
        return _PyIndi.PropertyVector_rend(self)

    def clear(self):
        return _PyIndi.PropertyVector_clear(self)

    def get_allocator(self):
        return _PyIndi.PropertyVector_get_allocator(self)

    def pop_back(self):
        return _PyIndi.PropertyVector_pop_back(self)

    def erase(self, *args):
        return _PyIndi.PropertyVector_erase(self, *args)

    def __init__(self, *args):
        _PyIndi.PropertyVector_swiginit(self, _PyIndi.new_PropertyVector(*args))

    def push_back(self, x):
        return _PyIndi.PropertyVector_push_back(self, x)

    def front(self):
        return _PyIndi.PropertyVector_front(self)

    def back(self):
        return _PyIndi.PropertyVector_back(self)

    def assign(self, n, x):
        return _PyIndi.PropertyVector_assign(self, n, x)

    def resize(self, *args):
        return _PyIndi.PropertyVector_resize(self, *args)

    def insert(self, *args):
        return _PyIndi.PropertyVector_insert(self, *args)

    def reserve(self, n):
        return _PyIndi.PropertyVector_reserve(self, n)

    def capacity(self):
        return _PyIndi.PropertyVector_capacity(self)
    __swig_destroy__ = _PyIndi.delete_PropertyVector

# Register PropertyVector in _PyIndi:
_PyIndi.PropertyVector_swigregister(PropertyVector)

INDI_NUMBER = _PyIndi.INDI_NUMBER
INDI_SWITCH = _PyIndi.INDI_SWITCH
INDI_TEXT = _PyIndi.INDI_TEXT
INDI_LIGHT = _PyIndi.INDI_LIGHT
INDI_BLOB = _PyIndi.INDI_BLOB
INDI_UNKNOWN = _PyIndi.INDI_UNKNOWN
AXIS_RA = _PyIndi.AXIS_RA
AXIS_DE = _PyIndi.AXIS_DE
AXIS_AZ = _PyIndi.AXIS_AZ
AXIS_ALT = _PyIndi.AXIS_ALT
DIRECTION_NORTH = _PyIndi.DIRECTION_NORTH
DIRECTION_SOUTH = _PyIndi.DIRECTION_SOUTH
DIRECTION_WEST = _PyIndi.DIRECTION_WEST
DIRECTION_EAST = _PyIndi.DIRECTION_EAST
INDI_DEVICE_NOT_FOUND = _PyIndi.INDI_DEVICE_NOT_FOUND
INDI_PROPERTY_INVALID = _PyIndi.INDI_PROPERTY_INVALID
INDI_PROPERTY_DUPLICATED = _PyIndi.INDI_PROPERTY_DUPLICATED
INDI_DISPATCH_ERROR = _PyIndi.INDI_DISPATCH_ERROR
INDI_MONO = _PyIndi.INDI_MONO
INDI_BAYER_RGGB = _PyIndi.INDI_BAYER_RGGB
INDI_BAYER_GRBG = _PyIndi.INDI_BAYER_GRBG
INDI_BAYER_GBRG = _PyIndi.INDI_BAYER_GBRG
INDI_BAYER_BGGR = _PyIndi.INDI_BAYER_BGGR
INDI_BAYER_CYYM = _PyIndi.INDI_BAYER_CYYM
INDI_BAYER_YCMY = _PyIndi.INDI_BAYER_YCMY
INDI_BAYER_YMCY = _PyIndi.INDI_BAYER_YMCY
INDI_BAYER_MYYC = _PyIndi.INDI_BAYER_MYYC
INDI_RGB = _PyIndi.INDI_RGB
INDI_BGR = _PyIndi.INDI_BGR
INDI_JPG = _PyIndi.INDI_JPG
MAXRBUF = _PyIndi.MAXRBUF
class BaseMediator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def newDevice(self, dp):
        return _PyIndi.BaseMediator_newDevice(self, dp)

    def removeDevice(self, dp):
        return _PyIndi.BaseMediator_removeDevice(self, dp)

    def newProperty(self, property):
        return _PyIndi.BaseMediator_newProperty(self, property)

    def removeProperty(self, property):
        return _PyIndi.BaseMediator_removeProperty(self, property)

    def newBLOB(self, bp):
        return _PyIndi.BaseMediator_newBLOB(self, bp)

    def newSwitch(self, svp):
        return _PyIndi.BaseMediator_newSwitch(self, svp)

    def newNumber(self, nvp):
        return _PyIndi.BaseMediator_newNumber(self, nvp)

    def newText(self, tvp):
        return _PyIndi.BaseMediator_newText(self, tvp)

    def newLight(self, lvp):
        return _PyIndi.BaseMediator_newLight(self, lvp)

    def newMessage(self, dp, messageID):
        return _PyIndi.BaseMediator_newMessage(self, dp, messageID)

    def serverConnected(self):
        return _PyIndi.BaseMediator_serverConnected(self)

    def serverDisconnected(self, exit_code):
        return _PyIndi.BaseMediator_serverDisconnected(self, exit_code)
    __swig_destroy__ = _PyIndi.delete_BaseMediator

# Register BaseMediator in _PyIndi:
_PyIndi.BaseMediator_swigregister(BaseMediator)

INDIV = _PyIndi.INDIV
INDI_VERSION_MAJOR = _PyIndi.INDI_VERSION_MAJOR
INDI_VERSION_MINOR = _PyIndi.INDI_VERSION_MINOR
INDI_VERSION_RELEASE = _PyIndi.INDI_VERSION_RELEASE
ISS_OFF = _PyIndi.ISS_OFF
ISS_ON = _PyIndi.ISS_ON
IPS_IDLE = _PyIndi.IPS_IDLE
IPS_OK = _PyIndi.IPS_OK
IPS_BUSY = _PyIndi.IPS_BUSY
IPS_ALERT = _PyIndi.IPS_ALERT
ISR_1OFMANY = _PyIndi.ISR_1OFMANY
ISR_ATMOST1 = _PyIndi.ISR_ATMOST1
ISR_NOFMANY = _PyIndi.ISR_NOFMANY
IP_RO = _PyIndi.IP_RO
IP_WO = _PyIndi.IP_WO
IP_RW = _PyIndi.IP_RW
MAXINDINAME = _PyIndi.MAXINDINAME
MAXINDILABEL = _PyIndi.MAXINDILABEL
MAXINDIDEVICE = _PyIndi.MAXINDIDEVICE
MAXINDIGROUP = _PyIndi.MAXINDIGROUP
MAXINDIFORMAT = _PyIndi.MAXINDIFORMAT
MAXINDIBLOBFMT = _PyIndi.MAXINDIBLOBFMT
MAXINDITSTAMP = _PyIndi.MAXINDITSTAMP
MAXINDIMESSAGE = _PyIndi.MAXINDIMESSAGE
class IText(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_PyIndi.IText_name_get, _PyIndi.IText_name_set)
    label = property(_PyIndi.IText_label_get, _PyIndi.IText_label_set)
    text = property(_PyIndi.IText_text_get, _PyIndi.IText_text_set)
    tvp = property(_PyIndi.IText_tvp_get, _PyIndi.IText_tvp_set)
    aux0 = property(_PyIndi.IText_aux0_get, _PyIndi.IText_aux0_set)
    aux1 = property(_PyIndi.IText_aux1_get, _PyIndi.IText_aux1_set)

    def __init__(self):
        _PyIndi.IText_swiginit(self, _PyIndi.new_IText())
    __swig_destroy__ = _PyIndi.delete_IText

# Register IText in _PyIndi:
_PyIndi.IText_swigregister(IText)

class ITextVectorProperty(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    device = property(_PyIndi.ITextVectorProperty_device_get, _PyIndi.ITextVectorProperty_device_set)
    name = property(_PyIndi.ITextVectorProperty_name_get, _PyIndi.ITextVectorProperty_name_set)
    label = property(_PyIndi.ITextVectorProperty_label_get, _PyIndi.ITextVectorProperty_label_set)
    group = property(_PyIndi.ITextVectorProperty_group_get, _PyIndi.ITextVectorProperty_group_set)
    p = property(_PyIndi.ITextVectorProperty_p_get, _PyIndi.ITextVectorProperty_p_set)
    timeout = property(_PyIndi.ITextVectorProperty_timeout_get, _PyIndi.ITextVectorProperty_timeout_set)
    s = property(_PyIndi.ITextVectorProperty_s_get, _PyIndi.ITextVectorProperty_s_set)
    tp = property(_PyIndi.ITextVectorProperty_tp_get, _PyIndi.ITextVectorProperty_tp_set)
    ntp = property(_PyIndi.ITextVectorProperty_ntp_get, _PyIndi.ITextVectorProperty_ntp_set)
    timestamp = property(_PyIndi.ITextVectorProperty_timestamp_get, _PyIndi.ITextVectorProperty_timestamp_set)
    aux = property(_PyIndi.ITextVectorProperty_aux_get, _PyIndi.ITextVectorProperty_aux_set)

    def __getitem__(self, index):
        return _PyIndi.ITextVectorProperty___getitem__(self, index)

    def __len__(self):
        return _PyIndi.ITextVectorProperty___len__(self)

    def __init__(self):
        _PyIndi.ITextVectorProperty_swiginit(self, _PyIndi.new_ITextVectorProperty())
    __swig_destroy__ = _PyIndi.delete_ITextVectorProperty

# Register ITextVectorProperty in _PyIndi:
_PyIndi.ITextVectorProperty_swigregister(ITextVectorProperty)

class INumber(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_PyIndi.INumber_name_get, _PyIndi.INumber_name_set)
    label = property(_PyIndi.INumber_label_get, _PyIndi.INumber_label_set)
    format = property(_PyIndi.INumber_format_get, _PyIndi.INumber_format_set)
    min = property(_PyIndi.INumber_min_get, _PyIndi.INumber_min_set)
    max = property(_PyIndi.INumber_max_get, _PyIndi.INumber_max_set)
    step = property(_PyIndi.INumber_step_get, _PyIndi.INumber_step_set)
    value = property(_PyIndi.INumber_value_get, _PyIndi.INumber_value_set)
    nvp = property(_PyIndi.INumber_nvp_get, _PyIndi.INumber_nvp_set)
    aux0 = property(_PyIndi.INumber_aux0_get, _PyIndi.INumber_aux0_set)
    aux1 = property(_PyIndi.INumber_aux1_get, _PyIndi.INumber_aux1_set)

    def __init__(self):
        _PyIndi.INumber_swiginit(self, _PyIndi.new_INumber())
    __swig_destroy__ = _PyIndi.delete_INumber

# Register INumber in _PyIndi:
_PyIndi.INumber_swigregister(INumber)

class INumberVectorProperty(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    device = property(_PyIndi.INumberVectorProperty_device_get, _PyIndi.INumberVectorProperty_device_set)
    name = property(_PyIndi.INumberVectorProperty_name_get, _PyIndi.INumberVectorProperty_name_set)
    label = property(_PyIndi.INumberVectorProperty_label_get, _PyIndi.INumberVectorProperty_label_set)
    group = property(_PyIndi.INumberVectorProperty_group_get, _PyIndi.INumberVectorProperty_group_set)
    p = property(_PyIndi.INumberVectorProperty_p_get, _PyIndi.INumberVectorProperty_p_set)
    timeout = property(_PyIndi.INumberVectorProperty_timeout_get, _PyIndi.INumberVectorProperty_timeout_set)
    s = property(_PyIndi.INumberVectorProperty_s_get, _PyIndi.INumberVectorProperty_s_set)
    np = property(_PyIndi.INumberVectorProperty_np_get, _PyIndi.INumberVectorProperty_np_set)
    nnp = property(_PyIndi.INumberVectorProperty_nnp_get, _PyIndi.INumberVectorProperty_nnp_set)
    timestamp = property(_PyIndi.INumberVectorProperty_timestamp_get, _PyIndi.INumberVectorProperty_timestamp_set)
    aux = property(_PyIndi.INumberVectorProperty_aux_get, _PyIndi.INumberVectorProperty_aux_set)

    def __getitem__(self, index):
        return _PyIndi.INumberVectorProperty___getitem__(self, index)

    def __len__(self):
        return _PyIndi.INumberVectorProperty___len__(self)

    def __init__(self):
        _PyIndi.INumberVectorProperty_swiginit(self, _PyIndi.new_INumberVectorProperty())
    __swig_destroy__ = _PyIndi.delete_INumberVectorProperty

# Register INumberVectorProperty in _PyIndi:
_PyIndi.INumberVectorProperty_swigregister(INumberVectorProperty)

class ISwitch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_PyIndi.ISwitch_name_get, _PyIndi.ISwitch_name_set)
    label = property(_PyIndi.ISwitch_label_get, _PyIndi.ISwitch_label_set)
    s = property(_PyIndi.ISwitch_s_get, _PyIndi.ISwitch_s_set)
    svp = property(_PyIndi.ISwitch_svp_get, _PyIndi.ISwitch_svp_set)
    aux = property(_PyIndi.ISwitch_aux_get, _PyIndi.ISwitch_aux_set)

    def __init__(self):
        _PyIndi.ISwitch_swiginit(self, _PyIndi.new_ISwitch())
    __swig_destroy__ = _PyIndi.delete_ISwitch

# Register ISwitch in _PyIndi:
_PyIndi.ISwitch_swigregister(ISwitch)

class ISwitchVectorProperty(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    device = property(_PyIndi.ISwitchVectorProperty_device_get, _PyIndi.ISwitchVectorProperty_device_set)
    name = property(_PyIndi.ISwitchVectorProperty_name_get, _PyIndi.ISwitchVectorProperty_name_set)
    label = property(_PyIndi.ISwitchVectorProperty_label_get, _PyIndi.ISwitchVectorProperty_label_set)
    group = property(_PyIndi.ISwitchVectorProperty_group_get, _PyIndi.ISwitchVectorProperty_group_set)
    p = property(_PyIndi.ISwitchVectorProperty_p_get, _PyIndi.ISwitchVectorProperty_p_set)
    r = property(_PyIndi.ISwitchVectorProperty_r_get, _PyIndi.ISwitchVectorProperty_r_set)
    timeout = property(_PyIndi.ISwitchVectorProperty_timeout_get, _PyIndi.ISwitchVectorProperty_timeout_set)
    s = property(_PyIndi.ISwitchVectorProperty_s_get, _PyIndi.ISwitchVectorProperty_s_set)
    sp = property(_PyIndi.ISwitchVectorProperty_sp_get, _PyIndi.ISwitchVectorProperty_sp_set)
    nsp = property(_PyIndi.ISwitchVectorProperty_nsp_get, _PyIndi.ISwitchVectorProperty_nsp_set)
    timestamp = property(_PyIndi.ISwitchVectorProperty_timestamp_get, _PyIndi.ISwitchVectorProperty_timestamp_set)
    aux = property(_PyIndi.ISwitchVectorProperty_aux_get, _PyIndi.ISwitchVectorProperty_aux_set)

    def __getitem__(self, index):
        return _PyIndi.ISwitchVectorProperty___getitem__(self, index)

    def __len__(self):
        return _PyIndi.ISwitchVectorProperty___len__(self)

    def __init__(self):
        _PyIndi.ISwitchVectorProperty_swiginit(self, _PyIndi.new_ISwitchVectorProperty())
    __swig_destroy__ = _PyIndi.delete_ISwitchVectorProperty

# Register ISwitchVectorProperty in _PyIndi:
_PyIndi.ISwitchVectorProperty_swigregister(ISwitchVectorProperty)

class ILight(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_PyIndi.ILight_name_get, _PyIndi.ILight_name_set)
    label = property(_PyIndi.ILight_label_get, _PyIndi.ILight_label_set)
    s = property(_PyIndi.ILight_s_get, _PyIndi.ILight_s_set)
    lvp = property(_PyIndi.ILight_lvp_get, _PyIndi.ILight_lvp_set)
    aux = property(_PyIndi.ILight_aux_get, _PyIndi.ILight_aux_set)

    def __init__(self):
        _PyIndi.ILight_swiginit(self, _PyIndi.new_ILight())
    __swig_destroy__ = _PyIndi.delete_ILight

# Register ILight in _PyIndi:
_PyIndi.ILight_swigregister(ILight)

class ILightVectorProperty(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    device = property(_PyIndi.ILightVectorProperty_device_get, _PyIndi.ILightVectorProperty_device_set)
    name = property(_PyIndi.ILightVectorProperty_name_get, _PyIndi.ILightVectorProperty_name_set)
    label = property(_PyIndi.ILightVectorProperty_label_get, _PyIndi.ILightVectorProperty_label_set)
    group = property(_PyIndi.ILightVectorProperty_group_get, _PyIndi.ILightVectorProperty_group_set)
    s = property(_PyIndi.ILightVectorProperty_s_get, _PyIndi.ILightVectorProperty_s_set)
    lp = property(_PyIndi.ILightVectorProperty_lp_get, _PyIndi.ILightVectorProperty_lp_set)
    nlp = property(_PyIndi.ILightVectorProperty_nlp_get, _PyIndi.ILightVectorProperty_nlp_set)
    timestamp = property(_PyIndi.ILightVectorProperty_timestamp_get, _PyIndi.ILightVectorProperty_timestamp_set)
    aux = property(_PyIndi.ILightVectorProperty_aux_get, _PyIndi.ILightVectorProperty_aux_set)

    def __getitem__(self, index):
        return _PyIndi.ILightVectorProperty___getitem__(self, index)

    def __len__(self):
        return _PyIndi.ILightVectorProperty___len__(self)

    def __init__(self):
        _PyIndi.ILightVectorProperty_swiginit(self, _PyIndi.new_ILightVectorProperty())
    __swig_destroy__ = _PyIndi.delete_ILightVectorProperty

# Register ILightVectorProperty in _PyIndi:
_PyIndi.ILightVectorProperty_swigregister(ILightVectorProperty)

class IBLOB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_PyIndi.IBLOB_name_get, _PyIndi.IBLOB_name_set)
    label = property(_PyIndi.IBLOB_label_get, _PyIndi.IBLOB_label_set)
    format = property(_PyIndi.IBLOB_format_get, _PyIndi.IBLOB_format_set)
    blob = property(_PyIndi.IBLOB_blob_get, _PyIndi.IBLOB_blob_set)
    bloblen = property(_PyIndi.IBLOB_bloblen_get, _PyIndi.IBLOB_bloblen_set)
    size = property(_PyIndi.IBLOB_size_get, _PyIndi.IBLOB_size_set)
    bvp = property(_PyIndi.IBLOB_bvp_get, _PyIndi.IBLOB_bvp_set)
    aux0 = property(_PyIndi.IBLOB_aux0_get, _PyIndi.IBLOB_aux0_set)
    aux1 = property(_PyIndi.IBLOB_aux1_get, _PyIndi.IBLOB_aux1_set)
    aux2 = property(_PyIndi.IBLOB_aux2_get, _PyIndi.IBLOB_aux2_set)

    def getblobdata(self):
        return _PyIndi.IBLOB_getblobdata(self)

    def __init__(self):
        _PyIndi.IBLOB_swiginit(self, _PyIndi.new_IBLOB())
    __swig_destroy__ = _PyIndi.delete_IBLOB

# Register IBLOB in _PyIndi:
_PyIndi.IBLOB_swigregister(IBLOB)

class IBLOBVectorProperty(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    device = property(_PyIndi.IBLOBVectorProperty_device_get, _PyIndi.IBLOBVectorProperty_device_set)
    name = property(_PyIndi.IBLOBVectorProperty_name_get, _PyIndi.IBLOBVectorProperty_name_set)
    label = property(_PyIndi.IBLOBVectorProperty_label_get, _PyIndi.IBLOBVectorProperty_label_set)
    group = property(_PyIndi.IBLOBVectorProperty_group_get, _PyIndi.IBLOBVectorProperty_group_set)
    p = property(_PyIndi.IBLOBVectorProperty_p_get, _PyIndi.IBLOBVectorProperty_p_set)
    timeout = property(_PyIndi.IBLOBVectorProperty_timeout_get, _PyIndi.IBLOBVectorProperty_timeout_set)
    s = property(_PyIndi.IBLOBVectorProperty_s_get, _PyIndi.IBLOBVectorProperty_s_set)
    bp = property(_PyIndi.IBLOBVectorProperty_bp_get, _PyIndi.IBLOBVectorProperty_bp_set)
    nbp = property(_PyIndi.IBLOBVectorProperty_nbp_get, _PyIndi.IBLOBVectorProperty_nbp_set)
    timestamp = property(_PyIndi.IBLOBVectorProperty_timestamp_get, _PyIndi.IBLOBVectorProperty_timestamp_set)
    aux = property(_PyIndi.IBLOBVectorProperty_aux_get, _PyIndi.IBLOBVectorProperty_aux_set)

    def __getitem__(self, index):
        return _PyIndi.IBLOBVectorProperty___getitem__(self, index)

    def __len__(self):
        return _PyIndi.IBLOBVectorProperty___len__(self)

    def __init__(self):
        _PyIndi.IBLOBVectorProperty_swiginit(self, _PyIndi.new_IBLOBVectorProperty())
    __swig_destroy__ = _PyIndi.delete_IBLOBVectorProperty

# Register IBLOBVectorProperty in _PyIndi:
_PyIndi.IBLOBVectorProperty_swigregister(IBLOBVectorProperty)

class BaseClient(BaseMediator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == BaseClient:
            _self = None
        else:
            _self = self
        _PyIndi.BaseClient_swiginit(self, _PyIndi.new_BaseClient(_self, ))
    __swig_destroy__ = _PyIndi.delete_BaseClient

    def setServer(self, hostname, port):
        return _PyIndi.BaseClient_setServer(self, hostname, port)

    def watchDevice(self, deviceName):
        return _PyIndi.BaseClient_watchDevice(self, deviceName)

    def watchProperty(self, deviceName, propertyName):
        return _PyIndi.BaseClient_watchProperty(self, deviceName, propertyName)

    def connectServer(self):
        return _PyIndi.BaseClient_connectServer(self)

    def disconnectServer(self):
        return _PyIndi.BaseClient_disconnectServer(self)

    def isServerConnected(self):
        return _PyIndi.BaseClient_isServerConnected(self)

    def connectDevice(self, deviceName):
        return _PyIndi.BaseClient_connectDevice(self, deviceName)

    def disconnectDevice(self, deviceName):
        return _PyIndi.BaseClient_disconnectDevice(self, deviceName)

    def getDevice(self, deviceName):
        return _PyIndi.BaseClient_getDevice(self, deviceName)

    def getDevices(self, *args):
        return _PyIndi.BaseClient_getDevices(self, *args)

    def setBLOBMode(self, blobH, dev, prop=None):
        return _PyIndi.BaseClient_setBLOBMode(self, blobH, dev, prop)

    def getBLOBMode(self, dev, prop=None):
        return _PyIndi.BaseClient_getBLOBMode(self, dev, prop)

    @staticmethod
    def listenHelper(context):
        return _PyIndi.BaseClient_listenHelper(context)

    def getHost(self):
        return _PyIndi.BaseClient_getHost(self)

    def getPort(self):
        return _PyIndi.BaseClient_getPort(self)

    def sendNewText(self, *args):
        return _PyIndi.BaseClient_sendNewText(self, *args)

    def sendNewNumber(self, *args):
        return _PyIndi.BaseClient_sendNewNumber(self, *args)

    def sendNewSwitch(self, *args):
        return _PyIndi.BaseClient_sendNewSwitch(self, *args)

    def startBlob(self, devName, propName, timestamp):
        return _PyIndi.BaseClient_startBlob(self, devName, propName, timestamp)

    def sendOneBlob(self, *args):
        return _PyIndi.BaseClient_sendOneBlob(self, *args)

    def finishBlob(self):
        return _PyIndi.BaseClient_finishBlob(self)

    def setVerbose(self, enable):
        return _PyIndi.BaseClient_setVerbose(self, enable)

    def isVerbose(self):
        return _PyIndi.BaseClient_isVerbose(self)

    def setConnectionTimeout(self, seconds, microseconds):
        return _PyIndi.BaseClient_setConnectionTimeout(self, seconds, microseconds)

    def newUniversalMessage(self, message):
        return _PyIndi.BaseClient_newUniversalMessage(self, message)

    def sendOneBlobFromBuffer(self, name, type, data):
        return _PyIndi.BaseClient_sendOneBlobFromBuffer(self, name, type, data)
    def __disown__(self):
        self.this.disown()
        _PyIndi.disown_BaseClient(self)
        return weakref.proxy(self)

# Register BaseClient in _PyIndi:
_PyIndi.BaseClient_swigregister(BaseClient)

def BaseClient_listenHelper(context):
    return _PyIndi.BaseClient_listenHelper(context)

class BaseDevice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    INDI_DEVICE_NOT_FOUND = _PyIndi.BaseDevice_INDI_DEVICE_NOT_FOUND
    INDI_PROPERTY_INVALID = _PyIndi.BaseDevice_INDI_PROPERTY_INVALID
    INDI_PROPERTY_DUPLICATED = _PyIndi.BaseDevice_INDI_PROPERTY_DUPLICATED
    INDI_DISPATCH_ERROR = _PyIndi.BaseDevice_INDI_DISPATCH_ERROR
    INDI_ENABLED = _PyIndi.BaseDevice_INDI_ENABLED
    INDI_DISABLED = _PyIndi.BaseDevice_INDI_DISABLED
    GENERAL_INTERFACE = _PyIndi.BaseDevice_GENERAL_INTERFACE
    TELESCOPE_INTERFACE = _PyIndi.BaseDevice_TELESCOPE_INTERFACE
    CCD_INTERFACE = _PyIndi.BaseDevice_CCD_INTERFACE
    GUIDER_INTERFACE = _PyIndi.BaseDevice_GUIDER_INTERFACE
    FOCUSER_INTERFACE = _PyIndi.BaseDevice_FOCUSER_INTERFACE
    FILTER_INTERFACE = _PyIndi.BaseDevice_FILTER_INTERFACE
    DOME_INTERFACE = _PyIndi.BaseDevice_DOME_INTERFACE
    GPS_INTERFACE = _PyIndi.BaseDevice_GPS_INTERFACE
    WEATHER_INTERFACE = _PyIndi.BaseDevice_WEATHER_INTERFACE
    AO_INTERFACE = _PyIndi.BaseDevice_AO_INTERFACE
    DUSTCAP_INTERFACE = _PyIndi.BaseDevice_DUSTCAP_INTERFACE
    LIGHTBOX_INTERFACE = _PyIndi.BaseDevice_LIGHTBOX_INTERFACE
    DETECTOR_INTERFACE = _PyIndi.BaseDevice_DETECTOR_INTERFACE
    ROTATOR_INTERFACE = _PyIndi.BaseDevice_ROTATOR_INTERFACE
    SPECTROGRAPH_INTERFACE = _PyIndi.BaseDevice_SPECTROGRAPH_INTERFACE
    CORRELATOR_INTERFACE = _PyIndi.BaseDevice_CORRELATOR_INTERFACE
    AUX_INTERFACE = _PyIndi.BaseDevice_AUX_INTERFACE
    SENSOR_INTERFACE = _PyIndi.BaseDevice_SENSOR_INTERFACE

    def __init__(self):
        _PyIndi.BaseDevice_swiginit(self, _PyIndi.new_BaseDevice())
    __swig_destroy__ = _PyIndi.delete_BaseDevice

    def getNumber(self, name):
        return _PyIndi.BaseDevice_getNumber(self, name)

    def getText(self, name):
        return _PyIndi.BaseDevice_getText(self, name)

    def getSwitch(self, name):
        return _PyIndi.BaseDevice_getSwitch(self, name)

    def getLight(self, name):
        return _PyIndi.BaseDevice_getLight(self, name)

    def getBLOB(self, name):
        return _PyIndi.BaseDevice_getBLOB(self, name)

    def getPropertyState(self, name):
        return _PyIndi.BaseDevice_getPropertyState(self, name)

    def getPropertyPermission(self, name):
        return _PyIndi.BaseDevice_getPropertyPermission(self, name)

    def registerProperty(self, *args):
        return _PyIndi.BaseDevice_registerProperty(self, *args)

    def removeProperty(self, name, errmsg):
        return _PyIndi.BaseDevice_removeProperty(self, name, errmsg)

    def getRawProperty(self, name, type=INDI_UNKNOWN):
        return _PyIndi.BaseDevice_getRawProperty(self, name, type)

    def getProperty(self, name, type=INDI_UNKNOWN):
        return _PyIndi.BaseDevice_getProperty(self, name, type)

    def getProperties(self, *args):
        return _PyIndi.BaseDevice_getProperties(self, *args)

    def addMessage(self, msg):
        return _PyIndi.BaseDevice_addMessage(self, msg)

    def checkMessage(self, root):
        return _PyIndi.BaseDevice_checkMessage(self, root)

    def doMessage(self, msg):
        return _PyIndi.BaseDevice_doMessage(self, msg)

    def messageQueue(self, index):
        return _PyIndi.BaseDevice_messageQueue(self, index)

    def lastMessage(self):
        return _PyIndi.BaseDevice_lastMessage(self)

    def isConnected(self):
        return _PyIndi.BaseDevice_isConnected(self)

    def setMediator(self, mediator):
        return _PyIndi.BaseDevice_setMediator(self, mediator)

    def getMediator(self):
        return _PyIndi.BaseDevice_getMediator(self)

    def setDeviceName(self, dev):
        return _PyIndi.BaseDevice_setDeviceName(self, dev)

    def getDeviceName(self):
        return _PyIndi.BaseDevice_getDeviceName(self)

    def getDriverName(self):
        return _PyIndi.BaseDevice_getDriverName(self)

    def getDriverExec(self):
        return _PyIndi.BaseDevice_getDriverExec(self)

    def getDriverVersion(self):
        return _PyIndi.BaseDevice_getDriverVersion(self)

    def getDriverInterface(self):
        return _PyIndi.BaseDevice_getDriverInterface(self)

    def buildSkeleton(self, filename):
        return _PyIndi.BaseDevice_buildSkeleton(self, filename)

    def buildProp(self, root, errmsg):
        return _PyIndi.BaseDevice_buildProp(self, root, errmsg)

    def setValue(self, root, errmsg):
        return _PyIndi.BaseDevice_setValue(self, root, errmsg)

    def setBLOB(self, pp, root, errmsg):
        return _PyIndi.BaseDevice_setBLOB(self, pp, root, errmsg)

# Register BaseDevice in _PyIndi:
_PyIndi.BaseDevice_swigregister(BaseDevice)

class ITextPropertyview(ITextVectorProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyIndi.ITextPropertyview_swiginit(self, _PyIndi.new_ITextPropertyview())

    def setDeviceName(self, *args):
        return _PyIndi.ITextPropertyview_setDeviceName(self, *args)

    def setName(self, *args):
        return _PyIndi.ITextPropertyview_setName(self, *args)

    def setLabel(self, *args):
        return _PyIndi.ITextPropertyview_setLabel(self, *args)

    def setGroupName(self, *args):
        return _PyIndi.ITextPropertyview_setGroupName(self, *args)

    def setPermission(self, permission):
        return _PyIndi.ITextPropertyview_setPermission(self, permission)

    def setTimeout(self, timeout):
        return _PyIndi.ITextPropertyview_setTimeout(self, timeout)

    def setState(self, state):
        return _PyIndi.ITextPropertyview_setState(self, state)

    def setTimestamp(self, *args):
        return _PyIndi.ITextPropertyview_setTimestamp(self, *args)

    def setAux(self, user):
        return _PyIndi.ITextPropertyview_setAux(self, user)

    def setWidgets(self, w, count):
        return _PyIndi.ITextPropertyview_setWidgets(self, w, count)

    def setRule(self, *args):
        return _PyIndi.ITextPropertyview_setRule(self, *args)

    def getDeviceName(self):
        return _PyIndi.ITextPropertyview_getDeviceName(self)

    def getName(self):
        return _PyIndi.ITextPropertyview_getName(self)

    def getLabel(self):
        return _PyIndi.ITextPropertyview_getLabel(self)

    def getGroupName(self):
        return _PyIndi.ITextPropertyview_getGroupName(self)

    def getPermission(self):
        return _PyIndi.ITextPropertyview_getPermission(self)

    def getPermissionAsString(self):
        return _PyIndi.ITextPropertyview_getPermissionAsString(self)

    def getRule(self):
        return _PyIndi.ITextPropertyview_getRule(self)

    def getRuleAsString(self):
        return _PyIndi.ITextPropertyview_getRuleAsString(self)

    def getTimeout(self):
        return _PyIndi.ITextPropertyview_getTimeout(self)

    def getState(self):
        return _PyIndi.ITextPropertyview_getState(self)

    def getStateAsString(self):
        return _PyIndi.ITextPropertyview_getStateAsString(self)

    def getTimestamp(self):
        return _PyIndi.ITextPropertyview_getTimestamp(self)

    def getAux(self):
        return _PyIndi.ITextPropertyview_getAux(self)

    def count(self):
        return _PyIndi.ITextPropertyview_count(self)

    def widget(self):
        return _PyIndi.ITextPropertyview_widget(self)

    def findWidgetByName(self, name):
        return _PyIndi.ITextPropertyview_findWidgetByName(self, name)

    def isEmpty(self):
        return _PyIndi.ITextPropertyview_isEmpty(self)

    def isNameMatch(self, *args):
        return _PyIndi.ITextPropertyview_isNameMatch(self, *args)

    def isLabelMatch(self, *args):
        return _PyIndi.ITextPropertyview_isLabelMatch(self, *args)

    def save(self, f):
        return _PyIndi.ITextPropertyview_save(self, f)

    def begin(self):
        return _PyIndi.ITextPropertyview_begin(self)

    def end(self):
        return _PyIndi.ITextPropertyview_end(self)

    def at(self, index):
        return _PyIndi.ITextPropertyview_at(self, index)

    def clear(self):
        return _PyIndi.ITextPropertyview_clear(self)
    __swig_destroy__ = _PyIndi.delete_ITextPropertyview

# Register ITextPropertyview in _PyIndi:
_PyIndi.ITextPropertyview_swigregister(ITextPropertyview)

class INumberPropertyview(INumberVectorProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyIndi.INumberPropertyview_swiginit(self, _PyIndi.new_INumberPropertyview())

    def setDeviceName(self, *args):
        return _PyIndi.INumberPropertyview_setDeviceName(self, *args)

    def setName(self, *args):
        return _PyIndi.INumberPropertyview_setName(self, *args)

    def setLabel(self, *args):
        return _PyIndi.INumberPropertyview_setLabel(self, *args)

    def setGroupName(self, *args):
        return _PyIndi.INumberPropertyview_setGroupName(self, *args)

    def setPermission(self, permission):
        return _PyIndi.INumberPropertyview_setPermission(self, permission)

    def setTimeout(self, timeout):
        return _PyIndi.INumberPropertyview_setTimeout(self, timeout)

    def setState(self, state):
        return _PyIndi.INumberPropertyview_setState(self, state)

    def setTimestamp(self, *args):
        return _PyIndi.INumberPropertyview_setTimestamp(self, *args)

    def setAux(self, user):
        return _PyIndi.INumberPropertyview_setAux(self, user)

    def setWidgets(self, w, count):
        return _PyIndi.INumberPropertyview_setWidgets(self, w, count)

    def setRule(self, *args):
        return _PyIndi.INumberPropertyview_setRule(self, *args)

    def getDeviceName(self):
        return _PyIndi.INumberPropertyview_getDeviceName(self)

    def getName(self):
        return _PyIndi.INumberPropertyview_getName(self)

    def getLabel(self):
        return _PyIndi.INumberPropertyview_getLabel(self)

    def getGroupName(self):
        return _PyIndi.INumberPropertyview_getGroupName(self)

    def getPermission(self):
        return _PyIndi.INumberPropertyview_getPermission(self)

    def getPermissionAsString(self):
        return _PyIndi.INumberPropertyview_getPermissionAsString(self)

    def getRule(self):
        return _PyIndi.INumberPropertyview_getRule(self)

    def getRuleAsString(self):
        return _PyIndi.INumberPropertyview_getRuleAsString(self)

    def getTimeout(self):
        return _PyIndi.INumberPropertyview_getTimeout(self)

    def getState(self):
        return _PyIndi.INumberPropertyview_getState(self)

    def getStateAsString(self):
        return _PyIndi.INumberPropertyview_getStateAsString(self)

    def getTimestamp(self):
        return _PyIndi.INumberPropertyview_getTimestamp(self)

    def getAux(self):
        return _PyIndi.INumberPropertyview_getAux(self)

    def count(self):
        return _PyIndi.INumberPropertyview_count(self)

    def widget(self):
        return _PyIndi.INumberPropertyview_widget(self)

    def findWidgetByName(self, name):
        return _PyIndi.INumberPropertyview_findWidgetByName(self, name)

    def isEmpty(self):
        return _PyIndi.INumberPropertyview_isEmpty(self)

    def isNameMatch(self, *args):
        return _PyIndi.INumberPropertyview_isNameMatch(self, *args)

    def isLabelMatch(self, *args):
        return _PyIndi.INumberPropertyview_isLabelMatch(self, *args)

    def save(self, f):
        return _PyIndi.INumberPropertyview_save(self, f)

    def begin(self):
        return _PyIndi.INumberPropertyview_begin(self)

    def end(self):
        return _PyIndi.INumberPropertyview_end(self)

    def at(self, index):
        return _PyIndi.INumberPropertyview_at(self, index)

    def clear(self):
        return _PyIndi.INumberPropertyview_clear(self)
    __swig_destroy__ = _PyIndi.delete_INumberPropertyview

# Register INumberPropertyview in _PyIndi:
_PyIndi.INumberPropertyview_swigregister(INumberPropertyview)

class ISwitchPropertyview(ISwitchVectorProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyIndi.ISwitchPropertyview_swiginit(self, _PyIndi.new_ISwitchPropertyview())

    def setDeviceName(self, *args):
        return _PyIndi.ISwitchPropertyview_setDeviceName(self, *args)

    def setName(self, *args):
        return _PyIndi.ISwitchPropertyview_setName(self, *args)

    def setLabel(self, *args):
        return _PyIndi.ISwitchPropertyview_setLabel(self, *args)

    def setGroupName(self, *args):
        return _PyIndi.ISwitchPropertyview_setGroupName(self, *args)

    def setPermission(self, permission):
        return _PyIndi.ISwitchPropertyview_setPermission(self, permission)

    def setTimeout(self, timeout):
        return _PyIndi.ISwitchPropertyview_setTimeout(self, timeout)

    def setState(self, state):
        return _PyIndi.ISwitchPropertyview_setState(self, state)

    def setTimestamp(self, *args):
        return _PyIndi.ISwitchPropertyview_setTimestamp(self, *args)

    def setAux(self, user):
        return _PyIndi.ISwitchPropertyview_setAux(self, user)

    def setWidgets(self, w, count):
        return _PyIndi.ISwitchPropertyview_setWidgets(self, w, count)

    def setRule(self, *args):
        return _PyIndi.ISwitchPropertyview_setRule(self, *args)

    def getDeviceName(self):
        return _PyIndi.ISwitchPropertyview_getDeviceName(self)

    def getName(self):
        return _PyIndi.ISwitchPropertyview_getName(self)

    def getLabel(self):
        return _PyIndi.ISwitchPropertyview_getLabel(self)

    def getGroupName(self):
        return _PyIndi.ISwitchPropertyview_getGroupName(self)

    def getPermission(self):
        return _PyIndi.ISwitchPropertyview_getPermission(self)

    def getPermissionAsString(self):
        return _PyIndi.ISwitchPropertyview_getPermissionAsString(self)

    def getRule(self):
        return _PyIndi.ISwitchPropertyview_getRule(self)

    def getRuleAsString(self):
        return _PyIndi.ISwitchPropertyview_getRuleAsString(self)

    def getTimeout(self):
        return _PyIndi.ISwitchPropertyview_getTimeout(self)

    def getState(self):
        return _PyIndi.ISwitchPropertyview_getState(self)

    def getStateAsString(self):
        return _PyIndi.ISwitchPropertyview_getStateAsString(self)

    def getTimestamp(self):
        return _PyIndi.ISwitchPropertyview_getTimestamp(self)

    def getAux(self):
        return _PyIndi.ISwitchPropertyview_getAux(self)

    def count(self):
        return _PyIndi.ISwitchPropertyview_count(self)

    def widget(self):
        return _PyIndi.ISwitchPropertyview_widget(self)

    def findWidgetByName(self, name):
        return _PyIndi.ISwitchPropertyview_findWidgetByName(self, name)

    def isEmpty(self):
        return _PyIndi.ISwitchPropertyview_isEmpty(self)

    def isNameMatch(self, *args):
        return _PyIndi.ISwitchPropertyview_isNameMatch(self, *args)

    def isLabelMatch(self, *args):
        return _PyIndi.ISwitchPropertyview_isLabelMatch(self, *args)

    def save(self, f):
        return _PyIndi.ISwitchPropertyview_save(self, f)

    def begin(self):
        return _PyIndi.ISwitchPropertyview_begin(self)

    def end(self):
        return _PyIndi.ISwitchPropertyview_end(self)

    def at(self, index):
        return _PyIndi.ISwitchPropertyview_at(self, index)

    def clear(self):
        return _PyIndi.ISwitchPropertyview_clear(self)
    __swig_destroy__ = _PyIndi.delete_ISwitchPropertyview

# Register ISwitchPropertyview in _PyIndi:
_PyIndi.ISwitchPropertyview_swigregister(ISwitchPropertyview)

class ILightPropertyview(ILightVectorProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyIndi.ILightPropertyview_swiginit(self, _PyIndi.new_ILightPropertyview())

    def setDeviceName(self, *args):
        return _PyIndi.ILightPropertyview_setDeviceName(self, *args)

    def setName(self, *args):
        return _PyIndi.ILightPropertyview_setName(self, *args)

    def setLabel(self, *args):
        return _PyIndi.ILightPropertyview_setLabel(self, *args)

    def setGroupName(self, *args):
        return _PyIndi.ILightPropertyview_setGroupName(self, *args)

    def setPermission(self, permission):
        return _PyIndi.ILightPropertyview_setPermission(self, permission)

    def setTimeout(self, timeout):
        return _PyIndi.ILightPropertyview_setTimeout(self, timeout)

    def setState(self, state):
        return _PyIndi.ILightPropertyview_setState(self, state)

    def setTimestamp(self, *args):
        return _PyIndi.ILightPropertyview_setTimestamp(self, *args)

    def setAux(self, user):
        return _PyIndi.ILightPropertyview_setAux(self, user)

    def setWidgets(self, w, count):
        return _PyIndi.ILightPropertyview_setWidgets(self, w, count)

    def setRule(self, *args):
        return _PyIndi.ILightPropertyview_setRule(self, *args)

    def getDeviceName(self):
        return _PyIndi.ILightPropertyview_getDeviceName(self)

    def getName(self):
        return _PyIndi.ILightPropertyview_getName(self)

    def getLabel(self):
        return _PyIndi.ILightPropertyview_getLabel(self)

    def getGroupName(self):
        return _PyIndi.ILightPropertyview_getGroupName(self)

    def getPermission(self):
        return _PyIndi.ILightPropertyview_getPermission(self)

    def getPermissionAsString(self):
        return _PyIndi.ILightPropertyview_getPermissionAsString(self)

    def getRule(self):
        return _PyIndi.ILightPropertyview_getRule(self)

    def getRuleAsString(self):
        return _PyIndi.ILightPropertyview_getRuleAsString(self)

    def getTimeout(self):
        return _PyIndi.ILightPropertyview_getTimeout(self)

    def getState(self):
        return _PyIndi.ILightPropertyview_getState(self)

    def getStateAsString(self):
        return _PyIndi.ILightPropertyview_getStateAsString(self)

    def getTimestamp(self):
        return _PyIndi.ILightPropertyview_getTimestamp(self)

    def getAux(self):
        return _PyIndi.ILightPropertyview_getAux(self)

    def count(self):
        return _PyIndi.ILightPropertyview_count(self)

    def widget(self):
        return _PyIndi.ILightPropertyview_widget(self)

    def findWidgetByName(self, name):
        return _PyIndi.ILightPropertyview_findWidgetByName(self, name)

    def isEmpty(self):
        return _PyIndi.ILightPropertyview_isEmpty(self)

    def isNameMatch(self, *args):
        return _PyIndi.ILightPropertyview_isNameMatch(self, *args)

    def isLabelMatch(self, *args):
        return _PyIndi.ILightPropertyview_isLabelMatch(self, *args)

    def save(self, f):
        return _PyIndi.ILightPropertyview_save(self, f)

    def begin(self):
        return _PyIndi.ILightPropertyview_begin(self)

    def end(self):
        return _PyIndi.ILightPropertyview_end(self)

    def at(self, index):
        return _PyIndi.ILightPropertyview_at(self, index)

    def clear(self):
        return _PyIndi.ILightPropertyview_clear(self)
    __swig_destroy__ = _PyIndi.delete_ILightPropertyview

# Register ILightPropertyview in _PyIndi:
_PyIndi.ILightPropertyview_swigregister(ILightPropertyview)

class IBLOBPropertyview(IBLOBVectorProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyIndi.IBLOBPropertyview_swiginit(self, _PyIndi.new_IBLOBPropertyview())

    def setDeviceName(self, *args):
        return _PyIndi.IBLOBPropertyview_setDeviceName(self, *args)

    def setName(self, *args):
        return _PyIndi.IBLOBPropertyview_setName(self, *args)

    def setLabel(self, *args):
        return _PyIndi.IBLOBPropertyview_setLabel(self, *args)

    def setGroupName(self, *args):
        return _PyIndi.IBLOBPropertyview_setGroupName(self, *args)

    def setPermission(self, permission):
        return _PyIndi.IBLOBPropertyview_setPermission(self, permission)

    def setTimeout(self, timeout):
        return _PyIndi.IBLOBPropertyview_setTimeout(self, timeout)

    def setState(self, state):
        return _PyIndi.IBLOBPropertyview_setState(self, state)

    def setTimestamp(self, *args):
        return _PyIndi.IBLOBPropertyview_setTimestamp(self, *args)

    def setAux(self, user):
        return _PyIndi.IBLOBPropertyview_setAux(self, user)

    def setWidgets(self, w, count):
        return _PyIndi.IBLOBPropertyview_setWidgets(self, w, count)

    def setRule(self, *args):
        return _PyIndi.IBLOBPropertyview_setRule(self, *args)

    def getDeviceName(self):
        return _PyIndi.IBLOBPropertyview_getDeviceName(self)

    def getName(self):
        return _PyIndi.IBLOBPropertyview_getName(self)

    def getLabel(self):
        return _PyIndi.IBLOBPropertyview_getLabel(self)

    def getGroupName(self):
        return _PyIndi.IBLOBPropertyview_getGroupName(self)

    def getPermission(self):
        return _PyIndi.IBLOBPropertyview_getPermission(self)

    def getPermissionAsString(self):
        return _PyIndi.IBLOBPropertyview_getPermissionAsString(self)

    def getRule(self):
        return _PyIndi.IBLOBPropertyview_getRule(self)

    def getRuleAsString(self):
        return _PyIndi.IBLOBPropertyview_getRuleAsString(self)

    def getTimeout(self):
        return _PyIndi.IBLOBPropertyview_getTimeout(self)

    def getState(self):
        return _PyIndi.IBLOBPropertyview_getState(self)

    def getStateAsString(self):
        return _PyIndi.IBLOBPropertyview_getStateAsString(self)

    def getTimestamp(self):
        return _PyIndi.IBLOBPropertyview_getTimestamp(self)

    def getAux(self):
        return _PyIndi.IBLOBPropertyview_getAux(self)

    def count(self):
        return _PyIndi.IBLOBPropertyview_count(self)

    def widget(self):
        return _PyIndi.IBLOBPropertyview_widget(self)

    def findWidgetByName(self, name):
        return _PyIndi.IBLOBPropertyview_findWidgetByName(self, name)

    def isEmpty(self):
        return _PyIndi.IBLOBPropertyview_isEmpty(self)

    def isNameMatch(self, *args):
        return _PyIndi.IBLOBPropertyview_isNameMatch(self, *args)

    def isLabelMatch(self, *args):
        return _PyIndi.IBLOBPropertyview_isLabelMatch(self, *args)

    def save(self, f):
        return _PyIndi.IBLOBPropertyview_save(self, f)

    def begin(self):
        return _PyIndi.IBLOBPropertyview_begin(self)

    def end(self):
        return _PyIndi.IBLOBPropertyview_end(self)

    def at(self, index):
        return _PyIndi.IBLOBPropertyview_at(self, index)

    def clear(self):
        return _PyIndi.IBLOBPropertyview_clear(self)
    __swig_destroy__ = _PyIndi.delete_IBLOBPropertyview

# Register IBLOBPropertyview in _PyIndi:
_PyIndi.IBLOBPropertyview_swigregister(IBLOBPropertyview)

class Property(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyIndi.Property_swiginit(self, _PyIndi.new_Property(*args))
    __swig_destroy__ = _PyIndi.delete_Property

    def setProperty(self, arg2):
        return _PyIndi.Property_setProperty(self, arg2)

    def setType(self, t):
        return _PyIndi.Property_setType(self, t)

    def setRegistered(self, r):
        return _PyIndi.Property_setRegistered(self, r)

    def setDynamic(self, d):
        return _PyIndi.Property_setDynamic(self, d)

    def setBaseDevice(self, idp):
        return _PyIndi.Property_setBaseDevice(self, idp)

    def getProperty(self):
        return _PyIndi.Property_getProperty(self)

    def getType(self):
        return _PyIndi.Property_getType(self)

    def getRegistered(self):
        return _PyIndi.Property_getRegistered(self)

    def isDynamic(self):
        return _PyIndi.Property_isDynamic(self)

    def getBaseDevice(self):
        return _PyIndi.Property_getBaseDevice(self)

    def setName(self, name):
        return _PyIndi.Property_setName(self, name)

    def setLabel(self, label):
        return _PyIndi.Property_setLabel(self, label)

    def setGroupName(self, groupName):
        return _PyIndi.Property_setGroupName(self, groupName)

    def setDeviceName(self, deviceName):
        return _PyIndi.Property_setDeviceName(self, deviceName)

    def setTimestamp(self, timestamp):
        return _PyIndi.Property_setTimestamp(self, timestamp)

    def setState(self, state):
        return _PyIndi.Property_setState(self, state)

    def setPermission(self, permission):
        return _PyIndi.Property_setPermission(self, permission)

    def setTimeout(self, timeout):
        return _PyIndi.Property_setTimeout(self, timeout)

    def getName(self):
        return _PyIndi.Property_getName(self)

    def getLabel(self):
        return _PyIndi.Property_getLabel(self)

    def getGroupName(self):
        return _PyIndi.Property_getGroupName(self)

    def getDeviceName(self):
        return _PyIndi.Property_getDeviceName(self)

    def getTimestamp(self):
        return _PyIndi.Property_getTimestamp(self)

    def getState(self):
        return _PyIndi.Property_getState(self)

    def getPermission(self):
        return _PyIndi.Property_getPermission(self)

    def isEmpty(self):
        return _PyIndi.Property_isEmpty(self)

    def isNameMatch(self, *args):
        return _PyIndi.Property_isNameMatch(self, *args)

    def isLabelMatch(self, *args):
        return _PyIndi.Property_isLabelMatch(self, *args)

    def save(self, fp):
        return _PyIndi.Property_save(self, fp)

    def getNumber(self):
        return _PyIndi.Property_getNumber(self)

    def getText(self):
        return _PyIndi.Property_getText(self)

    def getSwitch(self):
        return _PyIndi.Property_getSwitch(self)

    def getLight(self):
        return _PyIndi.Property_getLight(self)

    def getBLOB(self):
        return _PyIndi.Property_getBLOB(self)

# Register Property in _PyIndi:
_PyIndi.Property_swigregister(Property)

B_NEVER = _PyIndi.B_NEVER
B_ALSO = _PyIndi.B_ALSO
B_ONLY = _PyIndi.B_ONLY


