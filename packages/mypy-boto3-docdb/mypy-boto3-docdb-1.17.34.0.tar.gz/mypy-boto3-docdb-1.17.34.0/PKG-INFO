Metadata-Version: 2.1
Name: mypy-boto3-docdb
Version: 1.17.34.0
Summary: Type annotations for boto3.DocDB 1.17.34 service, generated by mypy-boto3-buider 4.4.0
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Description: # mypy-boto3-docdb
        
        [![PyPI - mypy-boto3-docdb](https://img.shields.io/pypi/v/mypy-boto3-docdb.svg?color=blue)](https://pypi.org/project/mypy-boto3-docdb)
        [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-docdb.svg?color=blue)](https://pypi.org/project/mypy-boto3-docdb)
        [![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
        
        ![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/master/logo.png)
        
        Type annotations for
        [boto3.DocDB 1.17.34](https://boto3.amazonaws.com/v1/documentation/api/1.17.34/reference/services/docdb.html#DocDB) service
        compatible with
        [VSCode](https://code.visualstudio.com/),
        [PyCharm](https://www.jetbrains.com/pycharm/),
        [Emacs](https://www.gnu.org/software/emacs/),
        [Sublime Text](https://www.sublimetext.com/),
        [mypy](https://github.com/python/mypy),
        [pyright](https://github.com/microsoft/pyright)
        and other tools.
        
        Generated by [mypy-boto3-buider 4.4.0](https://github.com/vemel/mypy_boto3_builder).
        
        More information can be found on [boto3-stubs](https://pypi.org/project/boto3-stubs/) page.
        
        See how it helps to find and fix potential bugs:
        
        ![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/master/demo.gif)
        
        - [mypy-boto3-docdb](#mypy-boto3-docdb)
          - [How to install](#how-to-install)
          - [Usage](#usage)
            - [VSCode](#vscode)
            - [PyCharm](#pycharm)
            - [Other IDEs](#other-ides)
            - [mypy](#mypy)
            - [pyright](#pyright)
          - [Explicit type annotations](#explicit-type-annotations)
            - [Client annotations](#client-annotations)
            - [Paginators annotations](#paginators-annotations)
            - [Waiters annotations](#waiters-annotations)
            - [Service Resource annotations](#service-resource-annotations)
            - [Other resources annotations](#other-resources-annotations)
            - [Collections annotations](#collections-annotations)
            - [Typed dictionations](#typed-dictionations)
        
        ## How to install
        
        Install `boto3-stubs` for `DocDB` service.
        
        ```bash
        python -m pip install boto3-stubs[docdb]
        ```
        
        ## Usage
        
        ### VSCode
        
        - Install [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
        - Install [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
        - Set `Pylance` as your Python Language Server
        - Install `boto-stubs[docdb]` in your environment: `python -m pip install 'boto3-stubs[docdb]'`
        
        Both type checking and auto-complete should work for `DocDB` service.
        No explicit type annotations required, write your `boto3` code as usual.
        
        ### PyCharm
        
        - Install `boto-stubs[docdb]` in your environment: `python -m pip install 'boto3-stubs[docdb]'`
        
        Both type checking and auto-complete should work for `DocDB` service.
        No explicit type annotations required, write your `boto3` code as usual.
        Auto-complete can be slow on big projects or if you have a lot of installed `boto3-stubs` submodules.
        
        ### Other IDEs
        
        Not tested, but as long as your IDE support `mypy` or `pyright`, everything should work.
        
        ### mypy
        
        - Install `mypy`: `python -m pip install mypy`
        - Install `boto-stubs[docdb]` in your environment: `python -m pip install 'boto3-stubs[docdb]'`
        - Run `mypy` as usual
        
        Type checking should work for `DocDB` service.
        No explicit type annotations required, write your `boto3` code as usual.
        
        ### pyright
        
        - Install `pyright`: `yarn global add pyright`
        - Install `boto-stubs[docdb]` in your environment: `python -m pip install 'boto3-stubs[docdb]'`
        - Optionally, you can install `boto3-stubs` to `typings` folder.
        
        Type checking should work for `DocDB` service.
        No explicit type annotations required, write your `boto3` code as usual.
        
        ## Explicit type annotations
        
        ### Client annotations
        
        `DocDBClient` provides annotations for `boto3.client("docdb")`.
        
        ```python
        import boto3
        
        from mypy_boto3_docdb import DocDBClient
        
        client: DocDBClient = boto3.client("docdb")
        
        # now client usage is checked by mypy and IDE should provide code auto-complete
        
        # works for session as well
        session = boto3.session.Session(region="us-west-1")
        session_client: DocDBClient = session.client("docdb")
        ```
        
        ### Paginators annotations
        
        `mypy_boto3_docdb.paginator` module contains type annotations for all paginators.
        
        ```python
        from mypy_boto3_docdb import DocDBClient
        from mypy_boto3_docdb.paginator import (
            DescribeCertificatesPaginator,
            DescribeDBClusterParameterGroupsPaginator,
            DescribeDBClusterParametersPaginator,
            DescribeDBClusterSnapshotsPaginator,
            DescribeDBClustersPaginator,
            DescribeDBEngineVersionsPaginator,
            DescribeDBInstancesPaginator,
            DescribeDBSubnetGroupsPaginator,
            DescribeEventsPaginator,
            DescribeOrderableDBInstanceOptionsPaginator,
            DescribePendingMaintenanceActionsPaginator,
        )
        
        client: DocDBClient = boto3.client("docdb")
        
        # Explicit type annotations are optional here
        # Type should be correctly discovered by mypy and IDEs
        # VSCode requires explicit type annotations
        describe_certificates_paginator: DescribeCertificatesPaginator = client.get_paginator("describe_certificates")
        describe_db_cluster_parameter_groups_paginator: DescribeDBClusterParameterGroupsPaginator = client.get_paginator("describe_db_cluster_parameter_groups")
        describe_db_cluster_parameters_paginator: DescribeDBClusterParametersPaginator = client.get_paginator("describe_db_cluster_parameters")
        describe_db_cluster_snapshots_paginator: DescribeDBClusterSnapshotsPaginator = client.get_paginator("describe_db_cluster_snapshots")
        describe_db_clusters_paginator: DescribeDBClustersPaginator = client.get_paginator("describe_db_clusters")
        describe_db_engine_versions_paginator: DescribeDBEngineVersionsPaginator = client.get_paginator("describe_db_engine_versions")
        describe_db_instances_paginator: DescribeDBInstancesPaginator = client.get_paginator("describe_db_instances")
        describe_db_subnet_groups_paginator: DescribeDBSubnetGroupsPaginator = client.get_paginator("describe_db_subnet_groups")
        describe_events_paginator: DescribeEventsPaginator = client.get_paginator("describe_events")
        describe_orderable_db_instance_options_paginator: DescribeOrderableDBInstanceOptionsPaginator = client.get_paginator("describe_orderable_db_instance_options")
        describe_pending_maintenance_actions_paginator: DescribePendingMaintenanceActionsPaginator = client.get_paginator("describe_pending_maintenance_actions")
        ```
        
        
        ### Waiters annotations
        
        `mypy_boto3_docdb.waiter` module contains type annotations for all waiters.
        
        ```python
        from mypy_boto3_docdb import DocDBClient
        from mypy_boto3_docdb.waiter import (
            DBInstanceAvailableWaiter,
            DBInstanceDeletedWaiter,
        )
        
        client: DocDBClient = boto3.client("docdb")
        
        # Explicit type annotations are optional here
        # Type should be correctly discovered by mypy and IDEs
        # VSCode requires explicit type annotations
        db_instance_available_waiter: DBInstanceAvailableWaiter = client.get_waiter("db_instance_available")
        db_instance_deleted_waiter: DBInstanceDeletedWaiter = client.get_waiter("db_instance_deleted")
        ```
        
        
        
        
        
        ### Typed dictionations
        
        `mypy_boto3_docdb.type_defs` module contains structures and shapes assembled
        to typed dictionaries for additional type checking.
        
        ```python
        from mypy_boto3_docdb.type_defs import (
            AvailabilityZoneTypeDef,
            CertificateTypeDef,
            DBClusterMemberTypeDef,
            DBClusterParameterGroupTypeDef,
            DBClusterRoleTypeDef,
            DBClusterSnapshotAttributeTypeDef,
            DBClusterSnapshotAttributesResultTypeDef,
            DBClusterSnapshotTypeDef,
            DBClusterTypeDef,
            DBEngineVersionTypeDef,
            DBInstanceStatusInfoTypeDef,
            DBInstanceTypeDef,
            DBSubnetGroupTypeDef,
            EndpointTypeDef,
            EngineDefaultsTypeDef,
            EventCategoriesMapTypeDef,
            EventTypeDef,
            OrderableDBInstanceOptionTypeDef,
            ParameterTypeDef,
            PendingCloudwatchLogsExportsTypeDef,
            PendingMaintenanceActionTypeDef,
            PendingModifiedValuesTypeDef,
            ResourcePendingMaintenanceActionsTypeDef,
            SubnetTypeDef,
            TagTypeDef,
            UpgradeTargetTypeDef,
            VpcSecurityGroupMembershipTypeDef,
            ApplyPendingMaintenanceActionResultTypeDef,
            CertificateMessageTypeDef,
            CloudwatchLogsExportConfigurationTypeDef,
            CopyDBClusterParameterGroupResultTypeDef,
            CopyDBClusterSnapshotResultTypeDef,
            CreateDBClusterParameterGroupResultTypeDef,
            CreateDBClusterResultTypeDef,
            CreateDBClusterSnapshotResultTypeDef,
            CreateDBInstanceResultTypeDef,
            CreateDBSubnetGroupResultTypeDef,
            DBClusterMessageTypeDef,
            DBClusterParameterGroupDetailsTypeDef,
            DBClusterParameterGroupNameMessageTypeDef,
            DBClusterParameterGroupsMessageTypeDef,
            DBClusterSnapshotMessageTypeDef,
            DBEngineVersionMessageTypeDef,
            DBInstanceMessageTypeDef,
            DBSubnetGroupMessageTypeDef,
            DeleteDBClusterResultTypeDef,
            DeleteDBClusterSnapshotResultTypeDef,
            DeleteDBInstanceResultTypeDef,
            DescribeDBClusterSnapshotAttributesResultTypeDef,
            DescribeEngineDefaultClusterParametersResultTypeDef,
            EventCategoriesMessageTypeDef,
            EventsMessageTypeDef,
            FailoverDBClusterResultTypeDef,
            FilterTypeDef,
            ModifyDBClusterResultTypeDef,
            ModifyDBClusterSnapshotAttributeResultTypeDef,
            ModifyDBInstanceResultTypeDef,
            ModifyDBSubnetGroupResultTypeDef,
            OrderableDBInstanceOptionsMessageTypeDef,
            PaginatorConfigTypeDef,
            PendingMaintenanceActionsMessageTypeDef,
            RebootDBInstanceResultTypeDef,
            RestoreDBClusterFromSnapshotResultTypeDef,
            RestoreDBClusterToPointInTimeResultTypeDef,
            StartDBClusterResultTypeDef,
            StopDBClusterResultTypeDef,
            TagListMessageTypeDef,
            WaiterConfigTypeDef,
        )
        
        def get_structure() -> AvailabilityZoneTypeDef:
            return {
              ...
            }
        ```
        
Keywords: boto3 docdb type-annotations boto3-stubs mypy typeshed autocomplete auto-generated
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
