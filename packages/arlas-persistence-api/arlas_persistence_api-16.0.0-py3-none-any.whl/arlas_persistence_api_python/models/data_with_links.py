# coding: utf-8

"""
    ARLAS persistence API

    persistence REST services

    OpenAPI spec version: 13.0.0-beta.3
    Contact: contact@gisaia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DataWithLinks(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'doc_key': 'str',
        'doc_zone': 'str',
        'last_update_date': 'datetime',
        'doc_value': 'str',
        'doc_owner': 'str',
        'doc_organization': 'str',
        'doc_entities': 'list[str]',
        'doc_writers': 'list[str]',
        'doc_readers': 'list[str]',
        'links': 'dict(str, Link)',
        'updatable': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'doc_key': 'doc_key',
        'doc_zone': 'doc_zone',
        'last_update_date': 'last_update_date',
        'doc_value': 'doc_value',
        'doc_owner': 'doc_owner',
        'doc_organization': 'doc_organization',
        'doc_entities': 'doc_entities',
        'doc_writers': 'doc_writers',
        'doc_readers': 'doc_readers',
        'links': '_links',
        'updatable': 'updatable'
    }

    def __init__(self, id=None, doc_key=None, doc_zone=None, last_update_date=None, doc_value=None, doc_owner=None, doc_organization=None, doc_entities=None, doc_writers=None, doc_readers=None, links=None, updatable=None):
        """
        DataWithLinks - a model defined in Swagger
        """

        self._id = None
        self._doc_key = None
        self._doc_zone = None
        self._last_update_date = None
        self._doc_value = None
        self._doc_owner = None
        self._doc_organization = None
        self._doc_entities = None
        self._doc_writers = None
        self._doc_readers = None
        self._links = None
        self._updatable = None

        if id is not None:
          self.id = id
        self.doc_key = doc_key
        self.doc_zone = doc_zone
        self.last_update_date = last_update_date
        self.doc_value = doc_value
        self.doc_owner = doc_owner
        self.doc_organization = doc_organization
        if doc_entities is not None:
          self.doc_entities = doc_entities
        if doc_writers is not None:
          self.doc_writers = doc_writers
        if doc_readers is not None:
          self.doc_readers = doc_readers
        if links is not None:
          self.links = links
        if updatable is not None:
          self.updatable = updatable

    @property
    def id(self):
        """
        Gets the id of this DataWithLinks.

        :return: The id of this DataWithLinks.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DataWithLinks.

        :param id: The id of this DataWithLinks.
        :type: str
        """

        self._id = id

    @property
    def doc_key(self):
        """
        Gets the doc_key of this DataWithLinks.

        :return: The doc_key of this DataWithLinks.
        :rtype: str
        """
        return self._doc_key

    @doc_key.setter
    def doc_key(self, doc_key):
        """
        Sets the doc_key of this DataWithLinks.

        :param doc_key: The doc_key of this DataWithLinks.
        :type: str
        """
        if doc_key is None:
            raise ValueError("Invalid value for `doc_key`, must not be `None`")

        self._doc_key = doc_key

    @property
    def doc_zone(self):
        """
        Gets the doc_zone of this DataWithLinks.

        :return: The doc_zone of this DataWithLinks.
        :rtype: str
        """
        return self._doc_zone

    @doc_zone.setter
    def doc_zone(self, doc_zone):
        """
        Sets the doc_zone of this DataWithLinks.

        :param doc_zone: The doc_zone of this DataWithLinks.
        :type: str
        """
        if doc_zone is None:
            raise ValueError("Invalid value for `doc_zone`, must not be `None`")

        self._doc_zone = doc_zone

    @property
    def last_update_date(self):
        """
        Gets the last_update_date of this DataWithLinks.

        :return: The last_update_date of this DataWithLinks.
        :rtype: datetime
        """
        return self._last_update_date

    @last_update_date.setter
    def last_update_date(self, last_update_date):
        """
        Sets the last_update_date of this DataWithLinks.

        :param last_update_date: The last_update_date of this DataWithLinks.
        :type: datetime
        """
        if last_update_date is None:
            raise ValueError("Invalid value for `last_update_date`, must not be `None`")

        self._last_update_date = last_update_date

    @property
    def doc_value(self):
        """
        Gets the doc_value of this DataWithLinks.

        :return: The doc_value of this DataWithLinks.
        :rtype: str
        """
        return self._doc_value

    @doc_value.setter
    def doc_value(self, doc_value):
        """
        Sets the doc_value of this DataWithLinks.

        :param doc_value: The doc_value of this DataWithLinks.
        :type: str
        """
        if doc_value is None:
            raise ValueError("Invalid value for `doc_value`, must not be `None`")

        self._doc_value = doc_value

    @property
    def doc_owner(self):
        """
        Gets the doc_owner of this DataWithLinks.

        :return: The doc_owner of this DataWithLinks.
        :rtype: str
        """
        return self._doc_owner

    @doc_owner.setter
    def doc_owner(self, doc_owner):
        """
        Sets the doc_owner of this DataWithLinks.

        :param doc_owner: The doc_owner of this DataWithLinks.
        :type: str
        """
        if doc_owner is None:
            raise ValueError("Invalid value for `doc_owner`, must not be `None`")

        self._doc_owner = doc_owner

    @property
    def doc_organization(self):
        """
        Gets the doc_organization of this DataWithLinks.

        :return: The doc_organization of this DataWithLinks.
        :rtype: str
        """
        return self._doc_organization

    @doc_organization.setter
    def doc_organization(self, doc_organization):
        """
        Sets the doc_organization of this DataWithLinks.

        :param doc_organization: The doc_organization of this DataWithLinks.
        :type: str
        """
        if doc_organization is None:
            raise ValueError("Invalid value for `doc_organization`, must not be `None`")

        self._doc_organization = doc_organization

    @property
    def doc_entities(self):
        """
        Gets the doc_entities of this DataWithLinks.

        :return: The doc_entities of this DataWithLinks.
        :rtype: list[str]
        """
        return self._doc_entities

    @doc_entities.setter
    def doc_entities(self, doc_entities):
        """
        Sets the doc_entities of this DataWithLinks.

        :param doc_entities: The doc_entities of this DataWithLinks.
        :type: list[str]
        """

        self._doc_entities = doc_entities

    @property
    def doc_writers(self):
        """
        Gets the doc_writers of this DataWithLinks.

        :return: The doc_writers of this DataWithLinks.
        :rtype: list[str]
        """
        return self._doc_writers

    @doc_writers.setter
    def doc_writers(self, doc_writers):
        """
        Sets the doc_writers of this DataWithLinks.

        :param doc_writers: The doc_writers of this DataWithLinks.
        :type: list[str]
        """

        self._doc_writers = doc_writers

    @property
    def doc_readers(self):
        """
        Gets the doc_readers of this DataWithLinks.

        :return: The doc_readers of this DataWithLinks.
        :rtype: list[str]
        """
        return self._doc_readers

    @doc_readers.setter
    def doc_readers(self, doc_readers):
        """
        Sets the doc_readers of this DataWithLinks.

        :param doc_readers: The doc_readers of this DataWithLinks.
        :type: list[str]
        """

        self._doc_readers = doc_readers

    @property
    def links(self):
        """
        Gets the links of this DataWithLinks.

        :return: The links of this DataWithLinks.
        :rtype: dict(str, Link)
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this DataWithLinks.

        :param links: The links of this DataWithLinks.
        :type: dict(str, Link)
        """

        self._links = links

    @property
    def updatable(self):
        """
        Gets the updatable of this DataWithLinks.

        :return: The updatable of this DataWithLinks.
        :rtype: bool
        """
        return self._updatable

    @updatable.setter
    def updatable(self, updatable):
        """
        Sets the updatable of this DataWithLinks.

        :param updatable: The updatable of this DataWithLinks.
        :type: bool
        """

        self._updatable = updatable

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DataWithLinks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
