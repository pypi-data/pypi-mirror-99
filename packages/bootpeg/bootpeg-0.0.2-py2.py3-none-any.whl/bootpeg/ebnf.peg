digit:
    | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
alpha:
    | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
symbol:
    | "!" | "#" | "$" | "%" | "&" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | "<" | "=" | ">" | "?" | "@" | "[" | "\" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~"
spaces:
    | " "* {}

literal:
    | '"' ~ ( alpha | digit | symbol | " " | "'" )+ ~ '"' { Regex(re.escape(.*)) }
    | "'" ~ ( alpha | digit | symbol | " " | "'" )+ ~ "'" { Regex(re.escape(.*)) }
regex:
    | "r" ~ '"' ~ ( alpha | digit | symbol | " " | "'" )+ ~ '"' { Regex(.*) }
    | "r" ~ "'" ~ ( alpha | digit | symbol | " " | "'" )+ ~ "'" { Regex(.*) }

choice:
    | first=expr spaces "|" spaces then=expr { .first | .then }
group:
    | expr spaces expr { .0 + .2 }
option:
    | "[" spaces ~ base=expr spaces ~ "]" { Maybe(.base) }
repeat:
    | expr spaces "*" { .0[0:] }
    | expr spaces "+" { .0[1:] }
require:
    | "~" spaces ~ expr { ~.0 }
capture:
    | alpha* spaces "=" spaces ~ expr { Capture(.0, .1) }
reference:
    | alpha* { ForwardReference(.0) }
rule:
    | "|" spaces ~ expr spaces action spaces ENDLINE
    | "|" spaces ~ expr spaces ENDLINE

action:
    | "{" spaces ~ body=r"[^}]+" spaces ~ "}" { Action(body) }
