/**
\page Parameters

This page describes how to change parameters and thus influence the result of the programm.

One the one hand there 

\section ParamPre ...via preprocessor defines

At least two basic preprocessor defines should be set, either at the beginning
of the ProblemCreator classes or inside the CMakeFile.txt.

-# `GRIDTYPE`: Choose an available grid manager, i.e.
    -# `YASPGRID`
    -# `ALBERTAGRID` (alberta grid needed)
    -# `ALUGRID_SIMPLEX`, `ALUGRID_CUBE` (dune-alugrid module needed)
    -# ... 
-# `GRIDDIM`: Choose a grid dimension, usually
    -# `1`
    -# `2`
    -# `3`

\warning Please always check whether features (adaptivity, parallization, grid dimension) are supported by your
grid manager or not.

\section ParamFile ...via parameter file(s)


\section ParamTypedef ...via typedefs and enums

Of course, it is possible to exchange all the existing typedefs inside ProblemCreator
and to write user specific operators and algorithms.

\section ParamOther ...via other mechanisms

Some features of the progamm will need another treatment.

\subsection Codegeneration Automatic code generation

Codegeneration is a technique to speedup the execution time of a programm via automatic C++ code generation.
To reach this goal all needed basisfunctions are written ("loop unrolling") to header files inside
the directory autogeneratedcode and included via an autogeneratedcode.hh header file internally.

The code generation can be separated into two steps: 
-# generation of automatic code
    -# compilation of codegeneration programm
    -# executation of the above programm and thus code generation
-# Running the automatic code
    -# Compilation of the usual programm using the above generated code
    -# Execution

To enable this feature the CMakeList.txt has to contain the line
\code
add_code_generate_targets(<target>)
\endcode
where `<target>` is a placeholder for an existing target.

\warning Please make sure that `<target>` is completely set up in your `CMakeLists.txt`, i.e.
compile definitions etc. are already added at this moment.

To use this feature, just type
\code
make <target>_generate
\endcode

All steps will be excuted.

\note This is an explanation for the cmake build system.

\note This feature should pay out for higher dim ranges.

\subsection Parallelization

To enable parallelization, type
\code
  mpiexec -np <np> <target>
\endcode

where `<np>` is the number of processors and `<target>` is the target name.

\note Please make sure that an mpi compiler is already installed on your system.

*/
