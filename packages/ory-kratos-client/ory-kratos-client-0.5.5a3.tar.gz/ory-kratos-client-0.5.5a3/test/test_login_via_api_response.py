# coding: utf-8

"""
    Ory Kratos

    Welcome to the ORY Kratos HTTP API documentation!  # noqa: E501

    The version of the OpenAPI document: v0.5.0-alpha.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import ory_kratos_client
from ory_kratos_client.models.login_via_api_response import LoginViaApiResponse  # noqa: E501
from ory_kratos_client.rest import ApiException

class TestLoginViaApiResponse(unittest.TestCase):
    """LoginViaApiResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test LoginViaApiResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = ory_kratos_client.models.login_via_api_response.LoginViaApiResponse()  # noqa: E501
        if include_optional :
            return LoginViaApiResponse(
                session = ory_kratos_client.models.session.session(
                    active = True, 
                    authenticated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    id = '0', 
                    identity = ory_kratos_client.models.identity.Identity(
                        id = '0', 
                        recovery_addresses = [
                            ory_kratos_client.models.recovery_address.RecoveryAddress(
                                id = '0', 
                                value = '0', 
                                via = '0', )
                            ], 
                        schema_id = '0', 
                        schema_url = '0', 
                        traits = ory_kratos_client.models.traits.traits(), 
                        verifiable_addresses = [
                            ory_kratos_client.models.verifiable_address.VerifiableAddress(
                                id = '0', 
                                status = '0', 
                                value = '0', 
                                verified = True, 
                                verified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                via = '0', )
                            ], ), 
                    issued_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                session_token = '0'
            )
        else :
            return LoginViaApiResponse(
                session = ory_kratos_client.models.session.session(
                    active = True, 
                    authenticated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    id = '0', 
                    identity = ory_kratos_client.models.identity.Identity(
                        id = '0', 
                        recovery_addresses = [
                            ory_kratos_client.models.recovery_address.RecoveryAddress(
                                id = '0', 
                                value = '0', 
                                via = '0', )
                            ], 
                        schema_id = '0', 
                        schema_url = '0', 
                        traits = ory_kratos_client.models.traits.traits(), 
                        verifiable_addresses = [
                            ory_kratos_client.models.verifiable_address.VerifiableAddress(
                                id = '0', 
                                status = '0', 
                                value = '0', 
                                verified = True, 
                                verified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                via = '0', )
                            ], ), 
                    issued_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                session_token = '0',
        )

    def testLoginViaApiResponse(self):
        """Test LoginViaApiResponse"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
