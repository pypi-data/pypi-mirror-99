# coding: utf-8

"""
    Ory Kratos

    Welcome to the ORY Kratos HTTP API documentation!  # noqa: E501

    The version of the OpenAPI document: v0.4.6-alpha.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ory_kratos_client.configuration import Configuration


class VerificationRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'expires_at': 'datetime',
        'form': 'Form',
        'id': 'str',
        'issued_at': 'datetime',
        'messages': 'list[Message]',
        'request_url': 'str',
        'success': 'bool',
        'via': 'str'
    }

    attribute_map = {
        'expires_at': 'expires_at',
        'form': 'form',
        'id': 'id',
        'issued_at': 'issued_at',
        'messages': 'messages',
        'request_url': 'request_url',
        'success': 'success',
        'via': 'via'
    }

    def __init__(self, expires_at=None, form=None, id=None, issued_at=None, messages=None, request_url=None, success=None, via=None, local_vars_configuration=None):  # noqa: E501
        """VerificationRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._expires_at = None
        self._form = None
        self._id = None
        self._issued_at = None
        self._messages = None
        self._request_url = None
        self._success = None
        self._via = None
        self.discriminator = None

        if expires_at is not None:
            self.expires_at = expires_at
        if form is not None:
            self.form = form
        if id is not None:
            self.id = id
        if issued_at is not None:
            self.issued_at = issued_at
        if messages is not None:
            self.messages = messages
        if request_url is not None:
            self.request_url = request_url
        if success is not None:
            self.success = success
        if via is not None:
            self.via = via

    @property
    def expires_at(self):
        """Gets the expires_at of this VerificationRequest.  # noqa: E501

        ExpiresAt is the time (UTC) when the request expires. If the user still wishes to verify the address, a new request has to be initiated.  # noqa: E501

        :return: The expires_at of this VerificationRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this VerificationRequest.

        ExpiresAt is the time (UTC) when the request expires. If the user still wishes to verify the address, a new request has to be initiated.  # noqa: E501

        :param expires_at: The expires_at of this VerificationRequest.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def form(self):
        """Gets the form of this VerificationRequest.  # noqa: E501


        :return: The form of this VerificationRequest.  # noqa: E501
        :rtype: Form
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this VerificationRequest.


        :param form: The form of this VerificationRequest.  # noqa: E501
        :type: Form
        """

        self._form = form

    @property
    def id(self):
        """Gets the id of this VerificationRequest.  # noqa: E501


        :return: The id of this VerificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VerificationRequest.


        :param id: The id of this VerificationRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def issued_at(self):
        """Gets the issued_at of this VerificationRequest.  # noqa: E501

        IssuedAt is the time (UTC) when the request occurred.  # noqa: E501

        :return: The issued_at of this VerificationRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._issued_at

    @issued_at.setter
    def issued_at(self, issued_at):
        """Sets the issued_at of this VerificationRequest.

        IssuedAt is the time (UTC) when the request occurred.  # noqa: E501

        :param issued_at: The issued_at of this VerificationRequest.  # noqa: E501
        :type: datetime
        """

        self._issued_at = issued_at

    @property
    def messages(self):
        """Gets the messages of this VerificationRequest.  # noqa: E501


        :return: The messages of this VerificationRequest.  # noqa: E501
        :rtype: list[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this VerificationRequest.


        :param messages: The messages of this VerificationRequest.  # noqa: E501
        :type: list[Message]
        """

        self._messages = messages

    @property
    def request_url(self):
        """Gets the request_url of this VerificationRequest.  # noqa: E501

        RequestURL is the initial URL that was requested from ORY Kratos. It can be used to forward information contained in the URL's path or query for example.  # noqa: E501

        :return: The request_url of this VerificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._request_url

    @request_url.setter
    def request_url(self, request_url):
        """Sets the request_url of this VerificationRequest.

        RequestURL is the initial URL that was requested from ORY Kratos. It can be used to forward information contained in the URL's path or query for example.  # noqa: E501

        :param request_url: The request_url of this VerificationRequest.  # noqa: E501
        :type: str
        """

        self._request_url = request_url

    @property
    def success(self):
        """Gets the success of this VerificationRequest.  # noqa: E501

        Success, if true, implies that the request was completed successfully.  # noqa: E501

        :return: The success of this VerificationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this VerificationRequest.

        Success, if true, implies that the request was completed successfully.  # noqa: E501

        :param success: The success of this VerificationRequest.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def via(self):
        """Gets the via of this VerificationRequest.  # noqa: E501


        :return: The via of this VerificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._via

    @via.setter
    def via(self, via):
        """Sets the via of this VerificationRequest.


        :param via: The via of this VerificationRequest.  # noqa: E501
        :type: str
        """

        self._via = via

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerificationRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VerificationRequest):
            return True

        return self.to_dict() != other.to_dict()
