# Copyright 2011-2020 Wason Technology, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is automatically generated. Do not edit.

from __future__ import absolute_import

from . import RobotRaconteurPython
import threading
import string


class RobotRaconteurException(Exception):
    __slots__ = ["errorcode","errorname","message","errorsubname","errorparam"]
    def __init__(self,errorcode,errorname,errormessage,errorsubname=None,errorparam=None):
        self.errorcode=errorcode
        self.errorname=errorname
        self.message=errormessage
        self.errorsubname=errorsubname
        self.errorparam=errorparam
    def __str__(self):
        return self.errorname + " " + self.message


class ConnectionException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(ConnectionException,self).__init__(RobotRaconteurPython.MessageErrorType_ConnectionError, "RobotRaconteur.ConnectionError",message,subname,param_)

class ProtocolException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(ProtocolException,self).__init__(RobotRaconteurPython.MessageErrorType_ProtocolError, "RobotRaconteur.ProtocolError",message,subname,param_)

class ServiceNotFoundException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(ServiceNotFoundException,self).__init__(RobotRaconteurPython.MessageErrorType_ServiceNotFound, "RobotRaconteur.ServiceNotFound",message,subname,param_)

class ObjectNotFoundException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(ObjectNotFoundException,self).__init__(RobotRaconteurPython.MessageErrorType_ObjectNotFound, "RobotRaconteur.ObjectNotFound",message,subname,param_)

class InvalidEndpointException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(InvalidEndpointException,self).__init__(RobotRaconteurPython.MessageErrorType_InvalidEndpoint, "RobotRaconteur.InvalidEndpoint",message,subname,param_)

class EndpointCommunicationFatalException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(EndpointCommunicationFatalException,self).__init__(RobotRaconteurPython.MessageErrorType_EndpointCommunicationFatalError, "RobotRaconteur.EndpointCommunicationFatalError",message,subname,param_)

class NodeNotFoundException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(NodeNotFoundException,self).__init__(RobotRaconteurPython.MessageErrorType_NodeNotFound, "RobotRaconteur.NodeNotFound",message,subname,param_)

class ServiceException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(ServiceException,self).__init__(RobotRaconteurPython.MessageErrorType_ServiceError, "RobotRaconteur.ServiceError",message,subname,param_)

class MemberNotFoundException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(MemberNotFoundException,self).__init__(RobotRaconteurPython.MessageErrorType_MemberNotFound, "RobotRaconteur.MemberNotFound",message,subname,param_)

class MemberFormatMismatchException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(MemberFormatMismatchException,self).__init__(RobotRaconteurPython.MessageErrorType_MemberFormatMismatch, "RobotRaconteur.MemberFormatMismatch",message,subname,param_)

class DataTypeMismatchException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(DataTypeMismatchException,self).__init__(RobotRaconteurPython.MessageErrorType_DataTypeMismatch, "RobotRaconteur.DataTypeMismatch",message,subname,param_)

class DataTypeException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(DataTypeException,self).__init__(RobotRaconteurPython.MessageErrorType_DataTypeError, "RobotRaconteur.DataTypeError",message,subname,param_)

class DataSerializationException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(DataSerializationException,self).__init__(RobotRaconteurPython.MessageErrorType_DataSerializationError, "RobotRaconteur.DataSerializationError",message,subname,param_)

class MessageEntryNotFoundException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(MessageEntryNotFoundException,self).__init__(RobotRaconteurPython.MessageErrorType_MessageEntryNotFound, "RobotRaconteur.MessageEntryNotFound",message,subname,param_)

class MessageElementNotFoundException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(MessageElementNotFoundException,self).__init__(RobotRaconteurPython.MessageErrorType_MessageElementNotFound, "RobotRaconteur.MessageElementNotFound",message,subname,param_)

class UnknownException(RobotRaconteurException):
    def __init__(self,name,message,subname=None,param_=None):
        super(UnknownException,self).__init__(RobotRaconteurPython.MessageErrorType_UnknownError, name,message,subname,param_)

class InvalidOperationException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(InvalidOperationException,self).__init__(RobotRaconteurPython.MessageErrorType_InvalidOperation, "RobotRaconteur.InvalidOperation",message,subname,param_)

class InvalidArgumentException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(InvalidArgumentException,self).__init__(RobotRaconteurPython.MessageErrorType_InvalidArgument, "RobotRaconteur.InvalidArgument",message,subname,param_)

class OperationFailedException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(OperationFailedException,self).__init__(RobotRaconteurPython.MessageErrorType_OperationFailed, "RobotRaconteur.OperationFailed",message,subname,param_)

class NullValueException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(NullValueException,self).__init__(RobotRaconteurPython.MessageErrorType_NullValue, "RobotRaconteur.NullValue",message,subname,param_)

class InternalErrorException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(InternalErrorException,self).__init__(RobotRaconteurPython.MessageErrorType_InternalError, "RobotRaconteur.InternalError",message,subname,param_)

class SystemResourcePermissionDeniedException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(SystemResourcePermissionDeniedException,self).__init__(RobotRaconteurPython.MessageErrorType_SystemResourcePermissionDenied, "RobotRaconteur.SystemResourcePermissionDenied",message,subname,param_)

class OutOfSystemResourceException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(OutOfSystemResourceException,self).__init__(RobotRaconteurPython.MessageErrorType_OutOfSystemResource, "RobotRaconteur.OutOfSystemResource",message,subname,param_)

class SystemResourceException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(SystemResourceException,self).__init__(RobotRaconteurPython.MessageErrorType_SystemResourceError, "RobotRaconteur.SystemResourceError",message,subname,param_)

class ResourceNotFoundException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(ResourceNotFoundException,self).__init__(RobotRaconteurPython.MessageErrorType_ResourceNotFound, "RobotRaconteur.ResourceNotFound",message,subname,param_)

class IOException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(IOException,self).__init__(RobotRaconteurPython.MessageErrorType_IOError, "RobotRaconteur.IOError",message,subname,param_)

class BufferLimitViolationException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(BufferLimitViolationException,self).__init__(RobotRaconteurPython.MessageErrorType_BufferLimitViolation, "RobotRaconteur.BufferLimitViolation",message,subname,param_)

class ServiceDefinitionException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(ServiceDefinitionException,self).__init__(RobotRaconteurPython.MessageErrorType_ServiceDefinitionError, "RobotRaconteur.ServiceDefinitionError",message,subname,param_)

class OutOfRangeException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(OutOfRangeException,self).__init__(RobotRaconteurPython.MessageErrorType_OutOfRange, "RobotRaconteur.OutOfRange",message,subname,param_)

class KeyNotFoundException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(KeyNotFoundException,self).__init__(RobotRaconteurPython.MessageErrorType_KeyNotFound, "RobotRaconteur.KeyNotFound",message,subname,param_)

class InvalidConfigurationException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(InvalidConfigurationException,self).__init__(RobotRaconteurPython.MessageErrorType_InvalidConfiguration, "RobotRaconteur.InvalidConfiguration",message,subname,param_)

class InvalidStateException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(InvalidStateException,self).__init__(RobotRaconteurPython.MessageErrorType_InvalidState, "RobotRaconteur.InvalidState",message,subname,param_)

class RobotRaconteurRemoteException(RobotRaconteurException):
    def __init__(self,name,message,subname=None,param_=None):
        super(RobotRaconteurRemoteException,self).__init__(RobotRaconteurPython.MessageErrorType_RemoteError, name,message,subname,param_)

class RequestTimeoutException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(RequestTimeoutException,self).__init__(RobotRaconteurPython.MessageErrorType_RequestTimeout, "RobotRaconteur.RequestTimeout",message,subname,param_)

class ReadOnlyMemberException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(ReadOnlyMemberException,self).__init__(RobotRaconteurPython.MessageErrorType_ReadOnlyMember, "RobotRaconteur.ReadOnlyMember",message,subname,param_)

class WriteOnlyMemberException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(WriteOnlyMemberException,self).__init__(RobotRaconteurPython.MessageErrorType_WriteOnlyMember, "RobotRaconteur.WriteOnlyMember",message,subname,param_)

class NotImplementedException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(NotImplementedException,self).__init__(RobotRaconteurPython.MessageErrorType_NotImplementedError, "RobotRaconteur.NotImplementedError",message,subname,param_)

class MemberBusyException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(MemberBusyException,self).__init__(RobotRaconteurPython.MessageErrorType_MemberBusy, "RobotRaconteur.MemberBusy",message,subname,param_)

class ValueNotSetException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(ValueNotSetException,self).__init__(RobotRaconteurPython.MessageErrorType_ValueNotSet, "RobotRaconteur.ValueNotSet",message,subname,param_)

class AuthenticationException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(AuthenticationException,self).__init__(RobotRaconteurPython.MessageErrorType_AuthenticationError, "RobotRaconteur.AuthenticationError",message,subname,param_)

class ObjectLockedException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(ObjectLockedException,self).__init__(RobotRaconteurPython.MessageErrorType_ObjectLockedError, "RobotRaconteur.ObjectLockedError",message,subname,param_)

class PermissionDeniedException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(PermissionDeniedException,self).__init__(RobotRaconteurPython.MessageErrorType_PermissionDenied, "RobotRaconteur.PermissionDenied",message,subname,param_)

class AbortOperationException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(AbortOperationException,self).__init__(RobotRaconteurPython.MessageErrorType_AbortOperation, "RobotRaconteur.AbortOperation",message,subname,param_)

class OperationAbortedException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(OperationAbortedException,self).__init__(RobotRaconteurPython.MessageErrorType_OperationAborted, "RobotRaconteur.OperationAborted",message,subname,param_)

class StopIterationException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(StopIterationException,self).__init__(RobotRaconteurPython.MessageErrorType_StopIteration, "RobotRaconteur.StopIteration",message,subname,param_)

class OperationTimeoutException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(OperationTimeoutException,self).__init__(RobotRaconteurPython.MessageErrorType_OperationTimeout, "RobotRaconteur.OperationTimeout",message,subname,param_)

class OperationCancelledException(RobotRaconteurException):
    def __init__(self,message="",subname=None,param_=None):
        super(OperationCancelledException,self).__init__(RobotRaconteurPython.MessageErrorType_OperationCancelled, "RobotRaconteur.OperationCancelled",message,subname,param_)


class RobotRaconteurExceptionUtil:

    @staticmethod
    def ExceptionToErrorCode(exception):

        if (isinstance(exception,RobotRaconteurException)):
            return exception.errorcode, exception.errorname, exception.message, exception.errorsubname, exception.errorparam
        else:
            return RobotRaconteurPython.MessageErrorType_RemoteError, type(exception).__name__, str(exception), None, None

    @staticmethod
    def ErrorCodeToException(code,name,errstr,subname,param_):
        param2 = None
        if (param_ is not None):
            from .RobotRaconteurPythonUtil import UnpackMessageElement
            param2 = UnpackMessageElement(param_,"varvalue")
        if subname is not None and len(subname) == 0:
            subname = None
        if (code==RobotRaconteurPython.MessageErrorType_RemoteError):
            e= GetExceptionType(name)
            return e(errstr,subname,param2)


        if (code==RobotRaconteurPython.MessageErrorType_ConnectionError):
            return ConnectionException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_ProtocolError):
            return ProtocolException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_ServiceNotFound):
            return ServiceNotFoundException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_ObjectNotFound):
            return ObjectNotFoundException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_InvalidEndpoint):
            return InvalidEndpointException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_EndpointCommunicationFatalError):
            return EndpointCommunicationFatalException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_NodeNotFound):
            return NodeNotFoundException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_ServiceError):
            return ServiceException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_MemberNotFound):
            return MemberNotFoundException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_MemberFormatMismatch):
            return MemberFormatMismatchException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_DataTypeMismatch):
            return DataTypeMismatchException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_DataTypeError):
            return DataTypeException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_DataSerializationError):
            return DataSerializationException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_MessageEntryNotFound):
            return MessageEntryNotFoundException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_MessageElementNotFound):
            return MessageElementNotFoundException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_UnknownError):
            return UnknownException(name,errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_InvalidOperation):
            return InvalidOperationException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_InvalidArgument):
            return InvalidArgumentException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_OperationFailed):
            return OperationFailedException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_NullValue):
            return NullValueException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_InternalError):
            return InternalErrorException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_SystemResourcePermissionDenied):
            return SystemResourcePermissionDeniedException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_OutOfSystemResource):
            return OutOfSystemResourceException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_SystemResourceError):
            return SystemResourceException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_ResourceNotFound):
            return ResourceNotFoundException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_IOError):
            return IOException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_BufferLimitViolation):
            return BufferLimitViolationException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_ServiceDefinitionError):
            return ServiceDefinitionException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_OutOfRange):
            return OutOfRangeException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_KeyNotFound):
            return KeyNotFoundException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_InvalidConfiguration):
            return InvalidConfigurationException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_InvalidState):
            return InvalidStateException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_RemoteError):
            return RobotRaconteurRemoteException(name,errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_RequestTimeout):
            return RequestTimeoutException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_ReadOnlyMember):
            return ReadOnlyMemberException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_WriteOnlyMember):
            return WriteOnlyMemberException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_NotImplementedError):
            return NotImplementedException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_MemberBusy):
            return MemberBusyException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_ValueNotSet):
            return ValueNotSetException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_AuthenticationError):
            return AuthenticationException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_ObjectLockedError):
            return ObjectLockedException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_PermissionDenied):
            return PermissionDeniedException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_AbortOperation):
            return AbortOperationException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_OperationAborted):
            return OperationAbortedException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_StopIteration):
            return StopIterationException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_OperationTimeout):
            return OperationTimeoutException(errstr,subname,param2)

        if (code==RobotRaconteurPython.MessageErrorType_OperationCancelled):
            return OperationCancelledException(errstr,subname,param2)

        return RobotRaconteurException(code,name,errstr,subname,param2)

    @staticmethod
    def ErrorInfoToException(error_info):
        return RobotRaconteurExceptionUtil.ErrorCodeToException(error_info.error_code, error_info.errorname, error_info.errormessage, error_info.errorsubname, error_info.param_)

    @staticmethod
    def ExceptionToErrorInfo(exp):
        error_code, errorname, message, errorsubname, errorparam = RobotRaconteurExceptionUtil.ExceptionToErrorCode(exp)
        error_info = RobotRaconteurPython.HandlerErrorInfo()
        error_info.error_code = error_code
        error_info.errorname = errorname
        if message is not None:
            error_info.errormessage = message
        if errorsubname is not None:
            error_info.errorsubname = errorsubname
        if errorparam is not None:
            from .RobotRaconteurPythonUtil import PackMessageElement
            param2 = PackMessageElement(errorparam,"varvalue")
            error_info.errorparam = param2

        return error_info

_generated_exceptions=dict()
_generated_exceptions_lock=threading.Lock()

def _ExceptionFactory(name):
    def __init__(self,message,subname=None,param_=None):
        super(self.__class__,self).__init__(name,message,subname,param_)
    return type(name, (RobotRaconteurRemoteException,), {"__init__": __init__})

def GetExceptionType(exception_name):
    if (not (isinstance(exception_name,str) or isinstance(exception_name,unicode))):
        return Exception
    ex1=exception_name.replace('.','__')
    ex2=''.join([x for x in ex1 if x in (string.ascii_letters + string.digits + "_")])
    with _generated_exceptions_lock:
        if (exception_name in _generated_exceptions):
            return _generated_exceptions[exception_name]
        else:
            newexp=_ExceptionFactory(exception_name)
            _generated_exceptions[exception_name]=newexp
            return newexp
