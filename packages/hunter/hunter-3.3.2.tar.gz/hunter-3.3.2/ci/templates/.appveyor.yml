version: '{branch}-{build}'
build: off
image: Visual Studio 2019
environment:
  global:
    TWINE_USERNAME: ionel
  matrix:
    - TOXENV: check
      TOXPYTHON: C:\Python36\python.exe
      PYTHON_HOME: C:\Python36
      PYTHON_VERSION: '3.6'
      PYTHON_ARCH: '32'
{% for env in tox_environments %}
{% if env.startswith(('py2', 'py3')) %}
    - TOXENV: {{ env }}{% if env.endswith('-cover') %},codecov{% endif %}{{ "" }}
      TOXPYTHON: C:\Python{{ env[2:4] }}\python.exe
      PYTHON_HOME: C:\Python{{ env[2:4] }}
      PYTHON_VERSION: '{{ env[2] }}.{{ env[3] }}'
      PYTHON_ARCH: '32'
{% if "cython-nocov" in env %}
      WHEEL_PATH: .tox/dist
{% endif %}
    - TOXENV: {{ env }}{% if env.endswith('-cover') %},codecov{% endif %}{{ '' }}
      TOXPYTHON: C:\Python{{ env[2:4] }}-x64\python.exe
      PYTHON_HOME: C:\Python{{ env[2:4] }}-x64
      PYTHON_VERSION: '{{ env[2] }}.{{ env[3] }}'
      PYTHON_ARCH: '64'
{% if "cython-nocov" in env %}
      WHEEL_PATH: .tox/dist
{% endif %}
{% endif %}{% endfor %}
init:
  - ps: echo $env:TOXENV
  - ps: ls C:\Python*
install:
  - ps: |
      Set-PSDebug -Trace 1
      if ($Env:TOXENV.StartsWith("py38")) {
        if ($Env:PYTHON_ARCH -eq "64") {
          iex "choco install python3 --version=3.8 --no-progress --params /InstallDir:$Env:PYTHON_HOME"
        } else {
          iex "choco install python3 --version=3.8 --no-progress --params /InstallDir:$Env:PYTHON_HOME --x86"
        }
      }
  - '%PYTHON_HOME%\python -mpip install --progress-bar=off twine tox-wheel -rci/requirements.txt'
  - '%PYTHON_HOME%\Scripts\virtualenv --version'
  - '%PYTHON_HOME%\Scripts\easy_install --version'
  - '%PYTHON_HOME%\Scripts\pip --version'
  - '%PYTHON_HOME%\Scripts\tox --version'
test_script:
  - ps: |
      Set-PSDebug -Trace 1
      if ($Env:WHEEL_PATH) {
        cmd /E:ON /V:ON /C .\ci\appveyor-with-compiler.cmd $Env:PYTHON_HOME\Scripts\tox --wheel
        if ($LastExitCode -eq 0) {
          $ErrorActionPreference = "Stop"
          iex "$Env:PYTHON_HOME\Scripts\twine check $Env:WHEEL_PATH/*.whl"
          iex "$Env:PYTHON_HOME\Scripts\twine upload --repository-url https://test.pypi.org/legacy/ --skip-existing $Env:WHEEL_PATH/*.whl"
        }
      } else {
        cmd /E:ON /V:ON /C .\ci\appveyor-with-compiler.cmd $Env:PYTHON_HOME\Scripts\tox
      }
      $result = $LastExitCode
      if ($result -ne 0) {
        Get-ChildItem Env:
        Get-Content .tox\*\log\*
        exit $result
      }


### To enable remote debugging uncomment this (also, see: http://www.appveyor.com/docs/how-to/rdp-to-build-worker):
# on_finish:
#   - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
