# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pulpcore.client.pulp_container.configuration import Configuration


class ManifestCopy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'source_repository': 'str',
        'source_repository_version': 'str',
        'digests': 'list[object]',
        'media_types': 'list[str]'
    }

    attribute_map = {
        'source_repository': 'source_repository',
        'source_repository_version': 'source_repository_version',
        'digests': 'digests',
        'media_types': 'media_types'
    }

    def __init__(self, source_repository=None, source_repository_version=None, digests=None, media_types=None, local_vars_configuration=None):  # noqa: E501
        """ManifestCopy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._source_repository = None
        self._source_repository_version = None
        self._digests = None
        self._media_types = None
        self.discriminator = None

        if source_repository is not None:
            self.source_repository = source_repository
        if source_repository_version is not None:
            self.source_repository_version = source_repository_version
        if digests is not None:
            self.digests = digests
        if media_types is not None:
            self.media_types = media_types

    @property
    def source_repository(self):
        """Gets the source_repository of this ManifestCopy.  # noqa: E501

        A URI of the repository to copy content from.  # noqa: E501

        :return: The source_repository of this ManifestCopy.  # noqa: E501
        :rtype: str
        """
        return self._source_repository

    @source_repository.setter
    def source_repository(self, source_repository):
        """Sets the source_repository of this ManifestCopy.

        A URI of the repository to copy content from.  # noqa: E501

        :param source_repository: The source_repository of this ManifestCopy.  # noqa: E501
        :type: str
        """

        self._source_repository = source_repository

    @property
    def source_repository_version(self):
        """Gets the source_repository_version of this ManifestCopy.  # noqa: E501

        A URI of the repository version to copy content from.  # noqa: E501

        :return: The source_repository_version of this ManifestCopy.  # noqa: E501
        :rtype: str
        """
        return self._source_repository_version

    @source_repository_version.setter
    def source_repository_version(self, source_repository_version):
        """Sets the source_repository_version of this ManifestCopy.

        A URI of the repository version to copy content from.  # noqa: E501

        :param source_repository_version: The source_repository_version of this ManifestCopy.  # noqa: E501
        :type: str
        """

        self._source_repository_version = source_repository_version

    @property
    def digests(self):
        """Gets the digests of this ManifestCopy.  # noqa: E501

        A list of manifest digests to copy.  # noqa: E501

        :return: The digests of this ManifestCopy.  # noqa: E501
        :rtype: list[object]
        """
        return self._digests

    @digests.setter
    def digests(self, digests):
        """Sets the digests of this ManifestCopy.

        A list of manifest digests to copy.  # noqa: E501

        :param digests: The digests of this ManifestCopy.  # noqa: E501
        :type: list[object]
        """

        self._digests = digests

    @property
    def media_types(self):
        """Gets the media_types of this ManifestCopy.  # noqa: E501

        A list of media_types to copy.  # noqa: E501

        :return: The media_types of this ManifestCopy.  # noqa: E501
        :rtype: list[str]
        """
        return self._media_types

    @media_types.setter
    def media_types(self, media_types):
        """Sets the media_types of this ManifestCopy.

        A list of media_types to copy.  # noqa: E501

        :param media_types: The media_types of this ManifestCopy.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["application/vnd.docker.distribution.manifest.v1+json", "application/vnd.docker.distribution.manifest.v2+json", "application/vnd.docker.distribution.manifest.list.v2+json", "application/vnd.oci.image.manifest.v1+json", "application/vnd.oci.image.index.v1+json"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(media_types).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `media_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(media_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._media_types = media_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManifestCopy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ManifestCopy):
            return True

        return self.to_dict() != other.to_dict()
