# coding: utf-8

"""
    AristaFlowREST/ResModelManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_res_model_manager.models.ilm_exception import IlmException  # noqa: F401,E501

class InvalidActivityStateException(IlmException):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activity_state': 'str',
        'agent': 'QualifiedAgent'
    }
    if hasattr(IlmException, "swagger_types"):
        swagger_types.update(IlmException.swagger_types)

    attribute_map = {
        'activity_state': 'activityState',
        'agent': 'agent'
    }
    if hasattr(IlmException, "attribute_map"):
        attribute_map.update(IlmException.attribute_map)

    def __init__(self, activity_state=None, agent=None, *args, **kwargs):  # noqa: E501
        """InvalidActivityStateException - a model defined in Swagger"""  # noqa: E501
        self._activity_state = None
        self._agent = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        if activity_state is not None:
            self.activity_state = activity_state
        if agent is not None:
            self.agent = agent
        IlmException.__init__(self, *args, **kwargs)

    @property
    def activity_state(self):
        """Gets the activity_state of this InvalidActivityStateException.  # noqa: E501


        :return: The activity_state of this InvalidActivityStateException.  # noqa: E501
        :rtype: str
        """
        return self._activity_state

    @activity_state.setter
    def activity_state(self, activity_state):
        """Sets the activity_state of this InvalidActivityStateException.


        :param activity_state: The activity_state of this InvalidActivityStateException.  # noqa: E501
        :type: str
        """
        allowed_values = ["NS_NOT_ACTIVATED", "NS_ACTIVATED", "NS_SELECTED", "NS_RUNNING", "NS_SUSPENDED", "NS_ENQUIRED", "NS_COMPLETED", "NS_FAILED", "NS_SKIPPED", "NS_ACTIVATED_SUPPR", "NS_SELECTED_SUPPR", "NS_SUSPENDED_SUPPR"]  # noqa: E501
        if activity_state not in allowed_values:
            raise ValueError(
                "Invalid value for `activity_state` ({0}), must be one of {1}"  # noqa: E501
                .format(activity_state, allowed_values)
            )

        self._activity_state = activity_state

    @property
    def agent(self):
        """Gets the agent of this InvalidActivityStateException.  # noqa: E501


        :return: The agent of this InvalidActivityStateException.  # noqa: E501
        :rtype: QualifiedAgent
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this InvalidActivityStateException.


        :param agent: The agent of this InvalidActivityStateException.  # noqa: E501
        :type: QualifiedAgent
        """

        self._agent = agent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvalidActivityStateException, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvalidActivityStateException):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
