# coding: utf-8

"""
    AristaFlowREST/ResModelManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from af_res_model_manager.api_client import ApiClient


class ResModelChangeOperationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_or_update_udt(self, body, t_id, **kwargs):  # noqa: E501
        """add_or_update_udt  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_or_update_udt(body, t_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UdtValue body: (required)
        :param str t_id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_or_update_udt_with_http_info(body, t_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_or_update_udt_with_http_info(body, t_id, **kwargs)  # noqa: E501
            return data

    def add_or_update_udt_with_http_info(self, body, t_id, **kwargs):  # noqa: E501
        """add_or_update_udt  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_or_update_udt_with_http_info(body, t_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UdtValue body: (required)
        :param str t_id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 't_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_or_update_udt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_or_update_udt`")  # noqa: E501
        # verify the required parameter 't_id' is set
        if ('t_id' not in params or
                params['t_id'] is None):
            raise ValueError("Missing the required parameter `t_id` when calling `add_or_update_udt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 't_id' in params:
            path_params['tId'] = params['t_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ResModelChangeOperations/udt/{tId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_resource_to(self, body, t_id, **kwargs):  # noqa: E501
        """add_resource_to  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_resource_to(body, t_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResWithParent body: (required)
        :param str t_id: (required)
        :return: Resource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_resource_to_with_http_info(body, t_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_resource_to_with_http_info(body, t_id, **kwargs)  # noqa: E501
            return data

    def add_resource_to_with_http_info(self, body, t_id, **kwargs):  # noqa: E501
        """add_resource_to  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_resource_to_with_http_info(body, t_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResWithParent body: (required)
        :param str t_id: (required)
        :return: Resource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 't_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_resource_to" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_resource_to`")  # noqa: E501
        # verify the required parameter 't_id' is set
        if ('t_id' not in params or
                params['t_id'] is None):
            raise ValueError("Missing the required parameter `t_id` when calling `add_resource_to`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 't_id' in params:
            path_params['tId'] = params['t_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ResModelChangeOperations/resource/{tId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Resource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def commit_change_transaction(self, t_id, **kwargs):  # noqa: E501
        """commit_change_transaction  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commit_change_transaction(t_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commit_change_transaction_with_http_info(t_id, **kwargs)  # noqa: E501
        else:
            (data) = self.commit_change_transaction_with_http_info(t_id, **kwargs)  # noqa: E501
            return data

    def commit_change_transaction_with_http_info(self, t_id, **kwargs):  # noqa: E501
        """commit_change_transaction  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commit_change_transaction_with_http_info(t_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['t_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commit_change_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 't_id' is set
        if ('t_id' not in params or
                params['t_id'] is None):
            raise ValueError("Missing the required parameter `t_id` when calling `commit_change_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 't_id' in params:
            path_params['tId'] = params['t_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ResModelChangeOperations/transaction/{tId}/commit', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def move_resource(self, t_id, res_id, **kwargs):  # noqa: E501
        """move_resource  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_resource(t_id, res_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t_id: (required)
        :param str res_id: (required)
        :param str body:
        :return: Resource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.move_resource_with_http_info(t_id, res_id, **kwargs)  # noqa: E501
        else:
            (data) = self.move_resource_with_http_info(t_id, res_id, **kwargs)  # noqa: E501
            return data

    def move_resource_with_http_info(self, t_id, res_id, **kwargs):  # noqa: E501
        """move_resource  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_resource_with_http_info(t_id, res_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t_id: (required)
        :param str res_id: (required)
        :param str body:
        :return: Resource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['t_id', 'res_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method move_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 't_id' is set
        if ('t_id' not in params or
                params['t_id'] is None):
            raise ValueError("Missing the required parameter `t_id` when calling `move_resource`")  # noqa: E501
        # verify the required parameter 'res_id' is set
        if ('res_id' not in params or
                params['res_id'] is None):
            raise ValueError("Missing the required parameter `res_id` when calling `move_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 't_id' in params:
            path_params['tId'] = params['t_id']  # noqa: E501
        if 'res_id' in params:
            path_params['resId'] = params['res_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ResModelChangeOperations/resource/{tId}/{resId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Resource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_resource(self, t_id, res_id, **kwargs):  # noqa: E501
        """remove_resource  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_resource(t_id, res_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t_id: (required)
        :param str res_id: (required)
        :return: Resource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_resource_with_http_info(t_id, res_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_resource_with_http_info(t_id, res_id, **kwargs)  # noqa: E501
            return data

    def remove_resource_with_http_info(self, t_id, res_id, **kwargs):  # noqa: E501
        """remove_resource  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_resource_with_http_info(t_id, res_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t_id: (required)
        :param str res_id: (required)
        :return: Resource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['t_id', 'res_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 't_id' is set
        if ('t_id' not in params or
                params['t_id'] is None):
            raise ValueError("Missing the required parameter `t_id` when calling `remove_resource`")  # noqa: E501
        # verify the required parameter 'res_id' is set
        if ('res_id' not in params or
                params['res_id'] is None):
            raise ValueError("Missing the required parameter `res_id` when calling `remove_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 't_id' in params:
            path_params['tId'] = params['t_id']  # noqa: E501
        if 'res_id' in params:
            path_params['resId'] = params['res_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ResModelChangeOperations/resource/{tId}/{resId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Resource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_udt(self, t_id, udt_id, **kwargs):  # noqa: E501
        """remove_udt  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_udt(t_id, udt_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t_id: (required)
        :param str udt_id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_udt_with_http_info(t_id, udt_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_udt_with_http_info(t_id, udt_id, **kwargs)  # noqa: E501
            return data

    def remove_udt_with_http_info(self, t_id, udt_id, **kwargs):  # noqa: E501
        """remove_udt  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_udt_with_http_info(t_id, udt_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t_id: (required)
        :param str udt_id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['t_id', 'udt_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_udt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 't_id' is set
        if ('t_id' not in params or
                params['t_id'] is None):
            raise ValueError("Missing the required parameter `t_id` when calling `remove_udt`")  # noqa: E501
        # verify the required parameter 'udt_id' is set
        if ('udt_id' not in params or
                params['udt_id'] is None):
            raise ValueError("Missing the required parameter `udt_id` when calling `remove_udt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 't_id' in params:
            path_params['tId'] = params['t_id']  # noqa: E501
        if 'udt_id' in params:
            path_params['udtId'] = params['udt_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ResModelChangeOperations/udt/{tId}/{udtId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rollback_change_transaction(self, t_id, **kwargs):  # noqa: E501
        """rollback_change_transaction  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rollback_change_transaction(t_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rollback_change_transaction_with_http_info(t_id, **kwargs)  # noqa: E501
        else:
            (data) = self.rollback_change_transaction_with_http_info(t_id, **kwargs)  # noqa: E501
            return data

    def rollback_change_transaction_with_http_info(self, t_id, **kwargs):  # noqa: E501
        """rollback_change_transaction  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rollback_change_transaction_with_http_info(t_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['t_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rollback_change_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 't_id' is set
        if ('t_id' not in params or
                params['t_id'] is None):
            raise ValueError("Missing the required parameter `t_id` when calling `rollback_change_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 't_id' in params:
            path_params['tId'] = params['t_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ResModelChangeOperations/transaction/{tId}/rollback', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_change_transaction(self, **kwargs):  # noqa: E501
        """start_change_transaction  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_change_transaction(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_change_transaction_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.start_change_transaction_with_http_info(**kwargs)  # noqa: E501
            return data

    def start_change_transaction_with_http_info(self, **kwargs):  # noqa: E501
        """start_change_transaction  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_change_transaction_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_change_transaction" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ResModelChangeOperations/transaction/start', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_resource_attributes(self, body, t_id, **kwargs):  # noqa: E501
        """update_resource_attributes  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_resource_attributes(body, t_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Resource body: (required)
        :param str t_id: (required)
        :return: Resource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_resource_attributes_with_http_info(body, t_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_resource_attributes_with_http_info(body, t_id, **kwargs)  # noqa: E501
            return data

    def update_resource_attributes_with_http_info(self, body, t_id, **kwargs):  # noqa: E501
        """update_resource_attributes  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_resource_attributes_with_http_info(body, t_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Resource body: (required)
        :param str t_id: (required)
        :return: Resource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 't_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_resource_attributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_resource_attributes`")  # noqa: E501
        # verify the required parameter 't_id' is set
        if ('t_id' not in params or
                params['t_id'] is None):
            raise ValueError("Missing the required parameter `t_id` when calling `update_resource_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 't_id' in params:
            path_params['tId'] = params['t_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ResModelChangeOperations/resource/{tId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Resource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
