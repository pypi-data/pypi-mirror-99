# coding: utf-8

"""
    AristaFlowREST/ResModelManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_res_model_manager.models.ilm_exception import IlmException  # noqa: F401,E501

class WrongAgentException(IlmException):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'calling_agent': 'QualifiedAgent',
        'expected_agent': 'QualifiedAgent',
        'expected_sar': 'str'
    }
    if hasattr(IlmException, "swagger_types"):
        swagger_types.update(IlmException.swagger_types)

    attribute_map = {
        'calling_agent': 'callingAgent',
        'expected_agent': 'expectedAgent',
        'expected_sar': 'expectedSar'
    }
    if hasattr(IlmException, "attribute_map"):
        attribute_map.update(IlmException.attribute_map)

    def __init__(self, calling_agent=None, expected_agent=None, expected_sar=None, *args, **kwargs):  # noqa: E501
        """WrongAgentException - a model defined in Swagger"""  # noqa: E501
        self._calling_agent = None
        self._expected_agent = None
        self._expected_sar = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.calling_agent = calling_agent
        if expected_agent is not None:
            self.expected_agent = expected_agent
        if expected_sar is not None:
            self.expected_sar = expected_sar
        IlmException.__init__(self, *args, **kwargs)

    @property
    def calling_agent(self):
        """Gets the calling_agent of this WrongAgentException.  # noqa: E501


        :return: The calling_agent of this WrongAgentException.  # noqa: E501
        :rtype: QualifiedAgent
        """
        return self._calling_agent

    @calling_agent.setter
    def calling_agent(self, calling_agent):
        """Sets the calling_agent of this WrongAgentException.


        :param calling_agent: The calling_agent of this WrongAgentException.  # noqa: E501
        :type: QualifiedAgent
        """
        if calling_agent is None:
            raise ValueError("Invalid value for `calling_agent`, must not be `None`")  # noqa: E501

        self._calling_agent = calling_agent

    @property
    def expected_agent(self):
        """Gets the expected_agent of this WrongAgentException.  # noqa: E501


        :return: The expected_agent of this WrongAgentException.  # noqa: E501
        :rtype: QualifiedAgent
        """
        return self._expected_agent

    @expected_agent.setter
    def expected_agent(self, expected_agent):
        """Sets the expected_agent of this WrongAgentException.


        :param expected_agent: The expected_agent of this WrongAgentException.  # noqa: E501
        :type: QualifiedAgent
        """

        self._expected_agent = expected_agent

    @property
    def expected_sar(self):
        """Gets the expected_sar of this WrongAgentException.  # noqa: E501


        :return: The expected_sar of this WrongAgentException.  # noqa: E501
        :rtype: str
        """
        return self._expected_sar

    @expected_sar.setter
    def expected_sar(self, expected_sar):
        """Sets the expected_sar of this WrongAgentException.


        :param expected_sar: The expected_sar of this WrongAgentException.  # noqa: E501
        :type: str
        """

        self._expected_sar = expected_sar

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WrongAgentException, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WrongAgentException):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
