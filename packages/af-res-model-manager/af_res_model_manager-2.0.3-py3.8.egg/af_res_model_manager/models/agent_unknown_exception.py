# coding: utf-8

"""
    AristaFlowREST/ResModelManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_res_model_manager.models.ilm_exception import IlmException  # noqa: F401,E501

class AgentUnknownException(IlmException):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent': 'QualifiedAgent',
        'runtime_mgr': 'list[str]'
    }
    if hasattr(IlmException, "swagger_types"):
        swagger_types.update(IlmException.swagger_types)

    attribute_map = {
        'agent': 'agent',
        'runtime_mgr': 'runtimeMgr'
    }
    if hasattr(IlmException, "attribute_map"):
        attribute_map.update(IlmException.attribute_map)

    def __init__(self, agent=None, runtime_mgr=None, *args, **kwargs):  # noqa: E501
        """AgentUnknownException - a model defined in Swagger"""  # noqa: E501
        self._agent = None
        self._runtime_mgr = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.agent = agent
        if runtime_mgr is not None:
            self.runtime_mgr = runtime_mgr
        IlmException.__init__(self, *args, **kwargs)

    @property
    def agent(self):
        """Gets the agent of this AgentUnknownException.  # noqa: E501


        :return: The agent of this AgentUnknownException.  # noqa: E501
        :rtype: QualifiedAgent
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this AgentUnknownException.


        :param agent: The agent of this AgentUnknownException.  # noqa: E501
        :type: QualifiedAgent
        """
        if agent is None:
            raise ValueError("Invalid value for `agent`, must not be `None`")  # noqa: E501

        self._agent = agent

    @property
    def runtime_mgr(self):
        """Gets the runtime_mgr of this AgentUnknownException.  # noqa: E501


        :return: The runtime_mgr of this AgentUnknownException.  # noqa: E501
        :rtype: list[str]
        """
        return self._runtime_mgr

    @runtime_mgr.setter
    def runtime_mgr(self, runtime_mgr):
        """Sets the runtime_mgr of this AgentUnknownException.


        :param runtime_mgr: The runtime_mgr of this AgentUnknownException.  # noqa: E501
        :type: list[str]
        """

        self._runtime_mgr = runtime_mgr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AgentUnknownException, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgentUnknownException):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
