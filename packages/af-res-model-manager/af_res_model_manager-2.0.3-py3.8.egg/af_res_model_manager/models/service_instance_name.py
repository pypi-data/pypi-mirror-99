# coding: utf-8

"""
    AristaFlowREST/ResModelManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceInstanceName(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_name': 'str',
        'node_name': 'str',
        'instance_name': 'str'
    }

    attribute_map = {
        'cluster_name': 'clusterName',
        'node_name': 'nodeName',
        'instance_name': 'instanceName'
    }

    def __init__(self, cluster_name=None, node_name=None, instance_name=None):  # noqa: E501
        """ServiceInstanceName - a model defined in Swagger"""  # noqa: E501
        self._cluster_name = None
        self._node_name = None
        self._instance_name = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        if cluster_name is not None:
            self.cluster_name = cluster_name
        self.node_name = node_name
        self.instance_name = instance_name

    @property
    def cluster_name(self):
        """Gets the cluster_name of this ServiceInstanceName.  # noqa: E501


        :return: The cluster_name of this ServiceInstanceName.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this ServiceInstanceName.


        :param cluster_name: The cluster_name of this ServiceInstanceName.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def node_name(self):
        """Gets the node_name of this ServiceInstanceName.  # noqa: E501


        :return: The node_name of this ServiceInstanceName.  # noqa: E501
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this ServiceInstanceName.


        :param node_name: The node_name of this ServiceInstanceName.  # noqa: E501
        :type: str
        """
        if node_name is None:
            raise ValueError("Invalid value for `node_name`, must not be `None`")  # noqa: E501

        self._node_name = node_name

    @property
    def instance_name(self):
        """Gets the instance_name of this ServiceInstanceName.  # noqa: E501


        :return: The instance_name of this ServiceInstanceName.  # noqa: E501
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this ServiceInstanceName.


        :param instance_name: The instance_name of this ServiceInstanceName.  # noqa: E501
        :type: str
        """
        if instance_name is None:
            raise ValueError("Invalid value for `instance_name`, must not be `None`")  # noqa: E501

        self._instance_name = instance_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceInstanceName, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceInstanceName):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
