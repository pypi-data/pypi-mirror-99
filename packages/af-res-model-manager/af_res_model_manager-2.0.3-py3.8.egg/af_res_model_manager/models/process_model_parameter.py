# coding: utf-8

"""
    AristaFlowREST/ResModelManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_res_model_manager.models.simple_parameter import SimpleParameter  # noqa: F401,E501

class ProcessModelParameter(SimpleParameter):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'loc_name': 'dict(str, str)',
        'desc': 'str',
        'loc_desc': 'dict(str, str)',
        'identifier_id': 'str',
        'optional': 'bool',
        'virtual': 'bool',
        'failure': 'bool',
        'default_value': 'str',
        'conf': 'ActivityConfiguration',
        'user_attributes': 'dict(str, str)'
    }
    if hasattr(SimpleParameter, "swagger_types"):
        swagger_types.update(SimpleParameter.swagger_types)

    attribute_map = {
        'loc_name': 'locName',
        'desc': 'desc',
        'loc_desc': 'locDesc',
        'identifier_id': 'identifierId',
        'optional': 'optional',
        'virtual': 'virtual',
        'failure': 'failure',
        'default_value': 'defaultValue',
        'conf': 'conf',
        'user_attributes': 'userAttributes'
    }
    if hasattr(SimpleParameter, "attribute_map"):
        attribute_map.update(SimpleParameter.attribute_map)

    discriminator_value_class_map = {
          'AccessedProcessModelParameter': 'AccessedProcessModelParameter'    }

    def __init__(self, loc_name=None, desc=None, loc_desc=None, identifier_id=None, optional=None, virtual=None, failure=None, default_value=None, conf=None, user_attributes=None, *args, **kwargs):  # noqa: E501
        """ProcessModelParameter - a model defined in Swagger"""  # noqa: E501
        self._loc_name = None
        self._desc = None
        self._loc_desc = None
        self._identifier_id = None
        self._optional = None
        self._virtual = None
        self._failure = None
        self._default_value = None
        self._conf = None
        self._user_attributes = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = 'sub_class'
        if loc_name is not None:
            self.loc_name = loc_name
        self.desc = desc
        if loc_desc is not None:
            self.loc_desc = loc_desc
        if identifier_id is not None:
            self.identifier_id = identifier_id
        self.optional = optional
        self.virtual = virtual
        self.failure = failure
        if default_value is not None:
            self.default_value = default_value
        if conf is not None:
            self.conf = conf
        if user_attributes is not None:
            self.user_attributes = user_attributes
        SimpleParameter.__init__(self, *args, **kwargs)

    @property
    def loc_name(self):
        """Gets the loc_name of this ProcessModelParameter.  # noqa: E501


        :return: The loc_name of this ProcessModelParameter.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._loc_name

    @loc_name.setter
    def loc_name(self, loc_name):
        """Sets the loc_name of this ProcessModelParameter.


        :param loc_name: The loc_name of this ProcessModelParameter.  # noqa: E501
        :type: dict(str, str)
        """

        self._loc_name = loc_name

    @property
    def desc(self):
        """Gets the desc of this ProcessModelParameter.  # noqa: E501


        :return: The desc of this ProcessModelParameter.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this ProcessModelParameter.


        :param desc: The desc of this ProcessModelParameter.  # noqa: E501
        :type: str
        """
        if desc is None:
            raise ValueError("Invalid value for `desc`, must not be `None`")  # noqa: E501

        self._desc = desc

    @property
    def loc_desc(self):
        """Gets the loc_desc of this ProcessModelParameter.  # noqa: E501


        :return: The loc_desc of this ProcessModelParameter.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._loc_desc

    @loc_desc.setter
    def loc_desc(self, loc_desc):
        """Sets the loc_desc of this ProcessModelParameter.


        :param loc_desc: The loc_desc of this ProcessModelParameter.  # noqa: E501
        :type: dict(str, str)
        """

        self._loc_desc = loc_desc

    @property
    def identifier_id(self):
        """Gets the identifier_id of this ProcessModelParameter.  # noqa: E501


        :return: The identifier_id of this ProcessModelParameter.  # noqa: E501
        :rtype: str
        """
        return self._identifier_id

    @identifier_id.setter
    def identifier_id(self, identifier_id):
        """Sets the identifier_id of this ProcessModelParameter.


        :param identifier_id: The identifier_id of this ProcessModelParameter.  # noqa: E501
        :type: str
        """

        self._identifier_id = identifier_id

    @property
    def optional(self):
        """Gets the optional of this ProcessModelParameter.  # noqa: E501


        :return: The optional of this ProcessModelParameter.  # noqa: E501
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this ProcessModelParameter.


        :param optional: The optional of this ProcessModelParameter.  # noqa: E501
        :type: bool
        """
        if optional is None:
            raise ValueError("Invalid value for `optional`, must not be `None`")  # noqa: E501

        self._optional = optional

    @property
    def virtual(self):
        """Gets the virtual of this ProcessModelParameter.  # noqa: E501


        :return: The virtual of this ProcessModelParameter.  # noqa: E501
        :rtype: bool
        """
        return self._virtual

    @virtual.setter
    def virtual(self, virtual):
        """Sets the virtual of this ProcessModelParameter.


        :param virtual: The virtual of this ProcessModelParameter.  # noqa: E501
        :type: bool
        """
        if virtual is None:
            raise ValueError("Invalid value for `virtual`, must not be `None`")  # noqa: E501

        self._virtual = virtual

    @property
    def failure(self):
        """Gets the failure of this ProcessModelParameter.  # noqa: E501


        :return: The failure of this ProcessModelParameter.  # noqa: E501
        :rtype: bool
        """
        return self._failure

    @failure.setter
    def failure(self, failure):
        """Sets the failure of this ProcessModelParameter.


        :param failure: The failure of this ProcessModelParameter.  # noqa: E501
        :type: bool
        """
        if failure is None:
            raise ValueError("Invalid value for `failure`, must not be `None`")  # noqa: E501

        self._failure = failure

    @property
    def default_value(self):
        """Gets the default_value of this ProcessModelParameter.  # noqa: E501


        :return: The default_value of this ProcessModelParameter.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this ProcessModelParameter.


        :param default_value: The default_value of this ProcessModelParameter.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def conf(self):
        """Gets the conf of this ProcessModelParameter.  # noqa: E501


        :return: The conf of this ProcessModelParameter.  # noqa: E501
        :rtype: ActivityConfiguration
        """
        return self._conf

    @conf.setter
    def conf(self, conf):
        """Sets the conf of this ProcessModelParameter.


        :param conf: The conf of this ProcessModelParameter.  # noqa: E501
        :type: ActivityConfiguration
        """

        self._conf = conf

    @property
    def user_attributes(self):
        """Gets the user_attributes of this ProcessModelParameter.  # noqa: E501


        :return: The user_attributes of this ProcessModelParameter.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this ProcessModelParameter.


        :param user_attributes: The user_attributes of this ProcessModelParameter.  # noqa: E501
        :type: dict(str, str)
        """

        self._user_attributes = user_attributes

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.attribute_map[self.discriminator]]
        return discriminator_value if not(self.__class__.__name__ == discriminator_value) else None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProcessModelParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessModelParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
