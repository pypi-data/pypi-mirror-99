# coding: utf-8

"""
    AristaFlowREST/ResModelManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourceInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'list[str]',
        'name': 'str',
        'desc': 'str',
        'sub_res': 'list[Resource]',
        'all_attributes': 'list[Attribute]'
    }

    attribute_map = {
        'path': 'path',
        'name': 'name',
        'desc': 'desc',
        'sub_res': 'subRes',
        'all_attributes': 'allAttributes'
    }

    def __init__(self, path=None, name=None, desc=None, sub_res=None, all_attributes=None):  # noqa: E501
        """ResourceInstance - a model defined in Swagger"""  # noqa: E501
        self._path = None
        self._name = None
        self._desc = None
        self._sub_res = None
        self._all_attributes = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.path = path
        self.name = name
        if desc is not None:
            self.desc = desc
        if sub_res is not None:
            self.sub_res = sub_res
        if all_attributes is not None:
            self.all_attributes = all_attributes

    @property
    def path(self):
        """Gets the path of this ResourceInstance.  # noqa: E501


        :return: The path of this ResourceInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ResourceInstance.


        :param path: The path of this ResourceInstance.  # noqa: E501
        :type: list[str]
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def name(self):
        """Gets the name of this ResourceInstance.  # noqa: E501


        :return: The name of this ResourceInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceInstance.


        :param name: The name of this ResourceInstance.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def desc(self):
        """Gets the desc of this ResourceInstance.  # noqa: E501


        :return: The desc of this ResourceInstance.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this ResourceInstance.


        :param desc: The desc of this ResourceInstance.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def sub_res(self):
        """Gets the sub_res of this ResourceInstance.  # noqa: E501


        :return: The sub_res of this ResourceInstance.  # noqa: E501
        :rtype: list[Resource]
        """
        return self._sub_res

    @sub_res.setter
    def sub_res(self, sub_res):
        """Sets the sub_res of this ResourceInstance.


        :param sub_res: The sub_res of this ResourceInstance.  # noqa: E501
        :type: list[Resource]
        """

        self._sub_res = sub_res

    @property
    def all_attributes(self):
        """Gets the all_attributes of this ResourceInstance.  # noqa: E501


        :return: The all_attributes of this ResourceInstance.  # noqa: E501
        :rtype: list[Attribute]
        """
        return self._all_attributes

    @all_attributes.setter
    def all_attributes(self, all_attributes):
        """Sets the all_attributes of this ResourceInstance.


        :param all_attributes: The all_attributes of this ResourceInstance.  # noqa: E501
        :type: list[Attribute]
        """

        self._all_attributes = all_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
