# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .l7_policy_v2 import *
from .l7_rule_v2 import *
from .listener import *
from .load_balancer import *
from .member import *
from .member_v1 import *
from .members import *
from .monitor import *
from .monitor_v1 import *
from .pool import *
from .pool_v1 import *
from .quota import *
from .vip import *
from ._inputs import *
from . import outputs

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "openstack:loadbalancer/l7PolicyV2:L7PolicyV2":
                return L7PolicyV2(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "openstack:loadbalancer/l7RuleV2:L7RuleV2":
                return L7RuleV2(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "openstack:loadbalancer/listener:Listener":
                return Listener(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "openstack:loadbalancer/loadBalancer:LoadBalancer":
                return LoadBalancer(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "openstack:loadbalancer/member:Member":
                return Member(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "openstack:loadbalancer/memberV1:MemberV1":
                return MemberV1(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "openstack:loadbalancer/members:Members":
                return Members(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "openstack:loadbalancer/monitor:Monitor":
                return Monitor(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "openstack:loadbalancer/monitorV1:MonitorV1":
                return MonitorV1(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "openstack:loadbalancer/pool:Pool":
                return Pool(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "openstack:loadbalancer/poolV1:PoolV1":
                return PoolV1(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "openstack:loadbalancer/quota:Quota":
                return Quota(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "openstack:loadbalancer/vip:Vip":
                return Vip(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("openstack", "loadbalancer/l7PolicyV2", _module_instance)
    pulumi.runtime.register_resource_module("openstack", "loadbalancer/l7RuleV2", _module_instance)
    pulumi.runtime.register_resource_module("openstack", "loadbalancer/listener", _module_instance)
    pulumi.runtime.register_resource_module("openstack", "loadbalancer/loadBalancer", _module_instance)
    pulumi.runtime.register_resource_module("openstack", "loadbalancer/member", _module_instance)
    pulumi.runtime.register_resource_module("openstack", "loadbalancer/memberV1", _module_instance)
    pulumi.runtime.register_resource_module("openstack", "loadbalancer/members", _module_instance)
    pulumi.runtime.register_resource_module("openstack", "loadbalancer/monitor", _module_instance)
    pulumi.runtime.register_resource_module("openstack", "loadbalancer/monitorV1", _module_instance)
    pulumi.runtime.register_resource_module("openstack", "loadbalancer/pool", _module_instance)
    pulumi.runtime.register_resource_module("openstack", "loadbalancer/poolV1", _module_instance)
    pulumi.runtime.register_resource_module("openstack", "loadbalancer/quota", _module_instance)
    pulumi.runtime.register_resource_module("openstack", "loadbalancer/vip", _module_instance)

_register_module()
