{"version":3,"sources":["python/labbox_ephys/extensions/common/MarkdownCodeBlock.tsx","python/labbox_ephys/extensions/common/Markdown.tsx","python/labbox_ephys/extensions/pythonsnippets/LoadSortingPythonSnippet/LoadSortingPythonSnippet.tsx","python/labbox_ephys/extensions/pythonsnippets/LoadSortingPythonSnippet/load_sorting.md.gen.ts","python/labbox_ephys/extensions/pythonsnippets/pythonsnippets.tsx"],"names":["MarkdownCodeBlock","value","language","undefined","style","coy","doSubstitute","x","s","y","k","split","join","Markdown","source","substitute","source2","className","renderers","code","sizeMe","size","sorting","recording","md","ret","replace","sortingPath","activate","context","registerPlugin","type","name","label","priority","component","LoadSortingPythonSnippet","singleton","icon"],"mappings":"mLAiBeA,EARqC,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,MAA+B,IAAxBC,gBAAwB,WAAfC,EAAe,EACnF,OACE,cAAC,IAAD,CAAmBD,SAAUA,EAAUE,MAAOC,IAA9C,SACGJ,KCUDK,EAAe,SAACC,EAAWC,GAC7B,IAAIC,EAAIF,EACR,IAAK,IAAIG,KAAKF,EACVC,EAAIA,EAAEE,MAAF,WAAYD,EAAZ,MAAkBE,KAAKJ,EAAEE,IAAM,IAEvC,OAAOD,GAGII,IApB4B,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,WAC3CC,EAAUD,EAAaT,EAAaQ,EAAQC,GAAcD,EAChE,OACI,qBAAKG,UAAU,gBAAf,SACI,cAAC,IAAD,CACIH,OAAQE,EACRE,UAAW,CAAEC,KAAMnB,S,iJCIpBoB,SAbqE,SAAC,GAAiC,EAA/BC,KAAgC,IAA1BC,EAAyB,EAAzBA,QAAyB,EAAhBC,UAMlG,OACI,cAACV,EAAA,EAAD,CACIC,OAPW,SAACU,GAChB,IAAIC,EAAMD,EAEV,OADAC,EAAMA,EAAIC,QAAQ,iBAAkBJ,EAAQK,aAKhCZ,CCfC,opCCQd,SAASa,EAASC,GACrBA,EAAQC,eAAe,CACnBC,KAAM,cACNC,KAAM,sBACNC,MAAO,yBACPC,SAAU,EACVC,UAAWC,EACXC,WAAW,EACXC,KAAM,cAAC,IAAD","file":"static/js/24.1d2469b2.chunk.js","sourcesContent":["import React, { FunctionComponent } from \"react\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { coy } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\ninterface Props {\n  value: string\n  language: string | undefined\n}\n\nconst MarkdownCodeBlock: FunctionComponent<Props> = ({value, language=undefined}) => {\n  return (\n    <SyntaxHighlighter language={language} style={coy}>\n      {value}\n    </SyntaxHighlighter>\n  )\n}\n\nexport default MarkdownCodeBlock;","import 'github-markdown-css'\nimport React, { FunctionComponent } from 'react'\nimport ReactMarkdown from \"react-markdown\"\nimport MarkdownCodeBlock from \"./MarkdownCodeBlock\"\n\ninterface Props {\n    source: string\n    substitute?: {[key: string]: string | undefined | null}\n}\n\nconst Markdown: FunctionComponent<Props> = ({source, substitute}) => {\n    const source2 = substitute ? doSubstitute(source, substitute) : source\n    return (\n        <div className='markdown-body'>\n            <ReactMarkdown\n                source={source2}\n                renderers={{ code: MarkdownCodeBlock }}\n            />\n        </div>\n    );\n}\n\nconst doSubstitute = (x: string, s: {[key: string]: string | undefined | null}) => {\n    let y = x\n    for (let k in s) {\n        y = y.split(`{${k}}`).join(s[k] || '')\n    }\n    return y\n}\n\nexport default Markdown","import React, { FunctionComponent } from 'react';\nimport sizeMe, { SizeMeProps } from 'react-sizeme';\nimport Markdown from '../../common/Markdown';\nimport { SortingViewProps } from \"../../pluginInterface\";\nimport snippetMd from './load_sorting.md.gen';\n\n\nconst LoadSortingPythonSnippet: FunctionComponent<SortingViewProps & SizeMeProps> = ({ size, sorting, recording }) => {\n    const substitute = (md: string) => {\n        let ret = md;\n        ret = ret.replace('<SORTING_PATH>', sorting.sortingPath);\n        return ret;\n    }\n    return (\n        <Markdown\n            source={substitute(snippetMd)}\n        />\n    )\n}\n\nexport default sizeMe()(LoadSortingPythonSnippet)","const text: string = \"# Load this sorting using Python\\n\\n**See below for prerequisites**\\n\\n## Loading into a SpikeInterface sorting extractor\\n\\n```python\\nimport labbox_ephys as le\\n\\nsorting_path = '<SORTING_PATH>'\\n\\nsorting = le.LabboxEphysSortingExtractor(sorting_path)\\n\\n# sorting is a SpikeInterface sorting extractor\\n# print the unit IDs\\nunit_ids = sorting.get_unit_ids()\\nprint(f'Unit IDs: {unit_ids}\\\\n')\\n\\n# get a spike train for the first unit\\nunit_id = unit_ids[0]\\nspike_train = sorting.get_unit_spike_train(unit_id=unit_id)\\nprint(f'Unit {unit_id} has {len(spike_train)} events\\\\n')\\n```\\n\\n## Prerequisites\\n\\n### kachery-p2p daemon\\n\\nIn order to retrieve the data from the distributed network you must have a kachery-p2p daemon running\\nand be connected to the appropriate channel. See [kachery-p2p](https://github.com/flatironinstitute/kachery-p2p).\\n\\n\\n### Labbox-ephys Python package\\n\\nInstall the labbox-ephys Python package from source\\n\\n```bash\\ngit clone https://github.com/laboratorybox/labbox-ephys\\ncd labbox-ephys/python\\npip install -e .\\n```\\n\\nFor subsequent updates:\\n\\n```bash\\ncd labbox-ephys\\ngit pull\\ncd python\\npip install -e .\\n```\\n\\n\"\n\nexport default text","// LABBOX-EXTENSION: pythonsnippets\n// LABBOX-EXTENSION-TAGS:\n\nimport SubjectIcon from '@material-ui/icons/Subject';\nimport React from 'react';\nimport { LabboxExtensionContext } from \"../pluginInterface\";\nimport LoadSortingPythonSnippet from './LoadSortingPythonSnippet/LoadSortingPythonSnippet';\n\nexport function activate(context: LabboxExtensionContext) {\n    context.registerPlugin({\n        type: 'SortingView',\n        name: 'LoadSortingInPython',\n        label: 'Load sorting in Python',\n        priority: 0,\n        component: LoadSortingPythonSnippet,\n        singleton: true,\n        icon: <SubjectIcon />\n    })\n}"],"sourceRoot":""}