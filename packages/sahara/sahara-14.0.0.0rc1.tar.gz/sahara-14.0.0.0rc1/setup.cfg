[metadata]
name = sahara
summary = Sahara project
description-file = README.rst
license = Apache Software License
python-requires = >=3.6
classifiers = 
	Programming Language :: Python
	Programming Language :: Python :: 3
	Programming Language :: Python :: 3.6
	Programming Language :: Python :: 3.7
	Programming Language :: Python :: 3.8
	Environment :: OpenStack
	Intended Audience :: Information Technology
	Intended Audience :: System Administrators
	License :: OSI Approved :: Apache Software License
	Operating System :: POSIX :: Linux
author = OpenStack
author-email = openstack-discuss@lists.openstack.org
home-page = https://docs.openstack.org/sahara/latest/

[files]
packages = 
	sahara
data_files = 
	etc/sahara =
	etc/sahara/api-paste.ini
	etc/sahara/rootwrap.conf
	etc/sahara/rootwrap.d = etc/sahara/rootwrap.d/*

[entry_points]
console_scripts = 
	sahara-all = sahara.cli.sahara_all:main
	sahara-api = sahara.cli.sahara_api:main
	sahara-engine = sahara.cli.sahara_engine:main
	sahara-db-manage = sahara.db.migration.cli:main
	sahara-rootwrap = oslo_rootwrap.cmd:main
	_sahara-subprocess = sahara.cli.sahara_subprocess:main
	sahara-templates = sahara.db.templates.cli:main
	sahara-image-pack = sahara.cli.image_pack.cli:main
	sahara-status = sahara.cli.sahara_status:main
wsgi_scripts = 
	sahara-wsgi-api = sahara.cli.sahara_api:setup_api
sahara.cluster.plugins = 
	fake = sahara.plugins.fake.plugin:FakePluginProvider
sahara.data_source.types = 
	hdfs = sahara.service.edp.data_sources.hdfs.implementation:HDFSType
	manila = sahara.service.edp.data_sources.manila.implementation:ManilaType
	maprfs = sahara.service.edp.data_sources.maprfs.implementation:MapRFSType
	swift = sahara.service.edp.data_sources.swift.implementation:SwiftType
	s3 = sahara.service.edp.data_sources.s3.implementation:S3Type
sahara.job_binary.types = 
	internal-db = sahara.service.edp.job_binaries.internal_db.implementation:InternalDBType
	manila = sahara.service.edp.job_binaries.manila.implementation:ManilaType
	swift = sahara.service.edp.job_binaries.swift.implementation:SwiftType
	s3 = sahara.service.edp.job_binaries.s3.implementation:S3Type
sahara.infrastructure.engine = 
	heat = sahara.service.heat.heat_engine:HeatEngine
sahara.remote = 
	ssh = sahara.utils.ssh_remote:SshRemoteDriver
sahara.run.mode = 
	all-in-one = sahara.service.ops:LocalOps
	distributed = sahara.service.ops:RemoteOps
oslo.config.opts = 
	sahara.config = sahara.config:list_opts
oslo.config.opts.defaults = 
	sahara.config = sahara.common.config:set_cors_middleware_defaults
oslo.policy.policies = 
	sahara = sahara.common.policies:list_rules

[egg_info]
tag_build = 
tag_date = 0

