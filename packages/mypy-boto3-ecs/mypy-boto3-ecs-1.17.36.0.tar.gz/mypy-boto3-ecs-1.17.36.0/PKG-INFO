Metadata-Version: 2.1
Name: mypy-boto3-ecs
Version: 1.17.36.0
Summary: Type annotations for boto3.ECS 1.17.36 service, generated by mypy-boto3-buider 4.4.0
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Description: # mypy-boto3-ecs
        
        [![PyPI - mypy-boto3-ecs](https://img.shields.io/pypi/v/mypy-boto3-ecs.svg?color=blue)](https://pypi.org/project/mypy-boto3-ecs)
        [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-ecs.svg?color=blue)](https://pypi.org/project/mypy-boto3-ecs)
        [![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
        
        ![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/master/logo.png)
        
        Type annotations for
        [boto3.ECS 1.17.36](https://boto3.amazonaws.com/v1/documentation/api/1.17.36/reference/services/ecs.html#ECS) service
        compatible with
        [VSCode](https://code.visualstudio.com/),
        [PyCharm](https://www.jetbrains.com/pycharm/),
        [Emacs](https://www.gnu.org/software/emacs/),
        [Sublime Text](https://www.sublimetext.com/),
        [mypy](https://github.com/python/mypy),
        [pyright](https://github.com/microsoft/pyright)
        and other tools.
        
        Generated by [mypy-boto3-buider 4.4.0](https://github.com/vemel/mypy_boto3_builder).
        
        More information can be found on [boto3-stubs](https://pypi.org/project/boto3-stubs/) page.
        
        See how it helps to find and fix potential bugs:
        
        ![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/master/demo.gif)
        
        - [mypy-boto3-ecs](#mypy-boto3-ecs)
          - [How to install](#how-to-install)
          - [Usage](#usage)
            - [VSCode](#vscode)
            - [PyCharm](#pycharm)
            - [Other IDEs](#other-ides)
            - [mypy](#mypy)
            - [pyright](#pyright)
          - [Explicit type annotations](#explicit-type-annotations)
            - [Client annotations](#client-annotations)
            - [Paginators annotations](#paginators-annotations)
            - [Waiters annotations](#waiters-annotations)
            - [Service Resource annotations](#service-resource-annotations)
            - [Other resources annotations](#other-resources-annotations)
            - [Collections annotations](#collections-annotations)
            - [Typed dictionations](#typed-dictionations)
        
        ## How to install
        
        Install `boto3-stubs` for `ECS` service.
        
        ```bash
        python -m pip install boto3-stubs[ecs]
        ```
        
        ## Usage
        
        ### VSCode
        
        - Install [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
        - Install [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
        - Set `Pylance` as your Python Language Server
        - Install `boto-stubs[ecs]` in your environment: `python -m pip install 'boto3-stubs[ecs]'`
        
        Both type checking and auto-complete should work for `ECS` service.
        No explicit type annotations required, write your `boto3` code as usual.
        
        ### PyCharm
        
        - Install `boto-stubs[ecs]` in your environment: `python -m pip install 'boto3-stubs[ecs]'`
        
        Both type checking and auto-complete should work for `ECS` service.
        No explicit type annotations required, write your `boto3` code as usual.
        Auto-complete can be slow on big projects or if you have a lot of installed `boto3-stubs` submodules.
        
        ### Other IDEs
        
        Not tested, but as long as your IDE support `mypy` or `pyright`, everything should work.
        
        ### mypy
        
        - Install `mypy`: `python -m pip install mypy`
        - Install `boto-stubs[ecs]` in your environment: `python -m pip install 'boto3-stubs[ecs]'`
        - Run `mypy` as usual
        
        Type checking should work for `ECS` service.
        No explicit type annotations required, write your `boto3` code as usual.
        
        ### pyright
        
        - Install `pyright`: `yarn global add pyright`
        - Install `boto-stubs[ecs]` in your environment: `python -m pip install 'boto3-stubs[ecs]'`
        - Optionally, you can install `boto3-stubs` to `typings` folder.
        
        Type checking should work for `ECS` service.
        No explicit type annotations required, write your `boto3` code as usual.
        
        ## Explicit type annotations
        
        ### Client annotations
        
        `ECSClient` provides annotations for `boto3.client("ecs")`.
        
        ```python
        import boto3
        
        from mypy_boto3_ecs import ECSClient
        
        client: ECSClient = boto3.client("ecs")
        
        # now client usage is checked by mypy and IDE should provide code auto-complete
        
        # works for session as well
        session = boto3.session.Session(region="us-west-1")
        session_client: ECSClient = session.client("ecs")
        ```
        
        ### Paginators annotations
        
        `mypy_boto3_ecs.paginator` module contains type annotations for all paginators.
        
        ```python
        from mypy_boto3_ecs import ECSClient
        from mypy_boto3_ecs.paginator import (
            ListAccountSettingsPaginator,
            ListAttributesPaginator,
            ListClustersPaginator,
            ListContainerInstancesPaginator,
            ListServicesPaginator,
            ListTaskDefinitionFamiliesPaginator,
            ListTaskDefinitionsPaginator,
            ListTasksPaginator,
        )
        
        client: ECSClient = boto3.client("ecs")
        
        # Explicit type annotations are optional here
        # Type should be correctly discovered by mypy and IDEs
        # VSCode requires explicit type annotations
        list_account_settings_paginator: ListAccountSettingsPaginator = client.get_paginator("list_account_settings")
        list_attributes_paginator: ListAttributesPaginator = client.get_paginator("list_attributes")
        list_clusters_paginator: ListClustersPaginator = client.get_paginator("list_clusters")
        list_container_instances_paginator: ListContainerInstancesPaginator = client.get_paginator("list_container_instances")
        list_services_paginator: ListServicesPaginator = client.get_paginator("list_services")
        list_task_definition_families_paginator: ListTaskDefinitionFamiliesPaginator = client.get_paginator("list_task_definition_families")
        list_task_definitions_paginator: ListTaskDefinitionsPaginator = client.get_paginator("list_task_definitions")
        list_tasks_paginator: ListTasksPaginator = client.get_paginator("list_tasks")
        ```
        
        
        ### Waiters annotations
        
        `mypy_boto3_ecs.waiter` module contains type annotations for all waiters.
        
        ```python
        from mypy_boto3_ecs import ECSClient
        from mypy_boto3_ecs.waiter import (
            ServicesInactiveWaiter,
            ServicesStableWaiter,
            TasksRunningWaiter,
            TasksStoppedWaiter,
        )
        
        client: ECSClient = boto3.client("ecs")
        
        # Explicit type annotations are optional here
        # Type should be correctly discovered by mypy and IDEs
        # VSCode requires explicit type annotations
        services_inactive_waiter: ServicesInactiveWaiter = client.get_waiter("services_inactive")
        services_stable_waiter: ServicesStableWaiter = client.get_waiter("services_stable")
        tasks_running_waiter: TasksRunningWaiter = client.get_waiter("tasks_running")
        tasks_stopped_waiter: TasksStoppedWaiter = client.get_waiter("tasks_stopped")
        ```
        
        
        
        
        
        ### Typed dictionations
        
        `mypy_boto3_ecs.type_defs` module contains structures and shapes assembled
        to typed dictionaries for additional type checking.
        
        ```python
        from mypy_boto3_ecs.type_defs import (
            AttachmentTypeDef,
            AttributeTypeDef,
            AutoScalingGroupProviderTypeDef,
            AwsVpcConfigurationTypeDef,
            CapacityProviderStrategyItemTypeDef,
            CapacityProviderTypeDef,
            ClusterConfigurationTypeDef,
            ClusterSettingTypeDef,
            ClusterTypeDef,
            ContainerDefinitionTypeDef,
            ContainerDependencyTypeDef,
            ContainerInstanceTypeDef,
            ContainerOverrideTypeDef,
            ContainerTypeDef,
            DeploymentCircuitBreakerTypeDef,
            DeploymentConfigurationTypeDef,
            DeploymentControllerTypeDef,
            DeploymentTypeDef,
            DeviceTypeDef,
            DockerVolumeConfigurationTypeDef,
            EFSAuthorizationConfigTypeDef,
            EFSVolumeConfigurationTypeDef,
            EnvironmentFileTypeDef,
            ExecuteCommandConfigurationTypeDef,
            ExecuteCommandLogConfigurationTypeDef,
            FSxWindowsFileServerAuthorizationConfigTypeDef,
            FSxWindowsFileServerVolumeConfigurationTypeDef,
            FailureTypeDef,
            FirelensConfigurationTypeDef,
            HealthCheckTypeDef,
            HostEntryTypeDef,
            HostVolumePropertiesTypeDef,
            InferenceAcceleratorOverrideTypeDef,
            InferenceAcceleratorTypeDef,
            KernelCapabilitiesTypeDef,
            KeyValuePairTypeDef,
            LinuxParametersTypeDef,
            LoadBalancerTypeDef,
            LogConfigurationTypeDef,
            ManagedAgentTypeDef,
            ManagedScalingTypeDef,
            MountPointTypeDef,
            NetworkBindingTypeDef,
            NetworkConfigurationTypeDef,
            NetworkInterfaceTypeDef,
            PlacementConstraintTypeDef,
            PlacementStrategyTypeDef,
            PortMappingTypeDef,
            ProxyConfigurationTypeDef,
            RepositoryCredentialsTypeDef,
            ResourceRequirementTypeDef,
            ResourceTypeDef,
            ScaleTypeDef,
            SecretTypeDef,
            ServiceEventTypeDef,
            ServiceRegistryTypeDef,
            ServiceTypeDef,
            SessionTypeDef,
            SettingTypeDef,
            SystemControlTypeDef,
            TagTypeDef,
            TaskDefinitionPlacementConstraintTypeDef,
            TaskDefinitionTypeDef,
            TaskOverrideTypeDef,
            TaskSetTypeDef,
            TaskTypeDef,
            TmpfsTypeDef,
            UlimitTypeDef,
            VersionInfoTypeDef,
            VolumeFromTypeDef,
            VolumeTypeDef,
            AttachmentStateChangeTypeDef,
            AutoScalingGroupProviderUpdateTypeDef,
            ContainerStateChangeTypeDef,
            CreateCapacityProviderResponseTypeDef,
            CreateClusterResponseTypeDef,
            CreateServiceResponseTypeDef,
            CreateTaskSetResponseTypeDef,
            DeleteAccountSettingResponseTypeDef,
            DeleteAttributesResponseTypeDef,
            DeleteCapacityProviderResponseTypeDef,
            DeleteClusterResponseTypeDef,
            DeleteServiceResponseTypeDef,
            DeleteTaskSetResponseTypeDef,
            DeregisterContainerInstanceResponseTypeDef,
            DeregisterTaskDefinitionResponseTypeDef,
            DescribeCapacityProvidersResponseTypeDef,
            DescribeClustersResponseTypeDef,
            DescribeContainerInstancesResponseTypeDef,
            DescribeServicesResponseTypeDef,
            DescribeTaskDefinitionResponseTypeDef,
            DescribeTaskSetsResponseTypeDef,
            DescribeTasksResponseTypeDef,
            DiscoverPollEndpointResponseTypeDef,
            ExecuteCommandResponseTypeDef,
            ListAccountSettingsResponseTypeDef,
            ListAttributesResponseTypeDef,
            ListClustersResponseTypeDef,
            ListContainerInstancesResponseTypeDef,
            ListServicesResponseTypeDef,
            ListTagsForResourceResponseTypeDef,
            ListTaskDefinitionFamiliesResponseTypeDef,
            ListTaskDefinitionsResponseTypeDef,
            ListTasksResponseTypeDef,
            ManagedAgentStateChangeTypeDef,
            PaginatorConfigTypeDef,
            PlatformDeviceTypeDef,
            PutAccountSettingDefaultResponseTypeDef,
            PutAccountSettingResponseTypeDef,
            PutAttributesResponseTypeDef,
            PutClusterCapacityProvidersResponseTypeDef,
            RegisterContainerInstanceResponseTypeDef,
            RegisterTaskDefinitionResponseTypeDef,
            RunTaskResponseTypeDef,
            StartTaskResponseTypeDef,
            StopTaskResponseTypeDef,
            SubmitAttachmentStateChangesResponseTypeDef,
            SubmitContainerStateChangeResponseTypeDef,
            SubmitTaskStateChangeResponseTypeDef,
            UpdateCapacityProviderResponseTypeDef,
            UpdateClusterResponseTypeDef,
            UpdateClusterSettingsResponseTypeDef,
            UpdateContainerAgentResponseTypeDef,
            UpdateContainerInstancesStateResponseTypeDef,
            UpdateServicePrimaryTaskSetResponseTypeDef,
            UpdateServiceResponseTypeDef,
            UpdateTaskSetResponseTypeDef,
            WaiterConfigTypeDef,
        )
        
        def get_structure() -> AttachmentTypeDef:
            return {
              ...
            }
        ```
        
Keywords: boto3 ecs type-annotations boto3-stubs mypy typeshed autocomplete auto-generated
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
