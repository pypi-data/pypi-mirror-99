#!/usr/bin/python
from XnatUploadToolDicom import XnatUploadToolDicom
import configargparse

parser = configargparse.ArgumentParser(
    default_config_files=['~/.xnatupload.cnf', './xnatupload.cnf', '/etc/xnatupload.cnf'],
    description='Xnat dcim upload script, takes a single directory of dicm files, recurses the structure, analyzes'
                'dcim headets and uploads appropriately to xnat site.\n\n'
                'If a single file is specifed rather than a directory, it is assumed to be non-dicom. This '
                'functionality requires the specification of other datatypes. This method is single threaded.'
)

parser.add_argument('-c', '--config', is_config_file=True, help='Config file path')
parser.add_argument('--username', default=None,
                    help='Username, if not set will pull from XNATCREDS env variable as USERNAME:PASSWORD')
parser.add_argument('--password', default=None,
                    help='Password, if not set will pull from XNATCREDS env variable as USERNAME:PASSWORD')
parser.add_argument('--logfile',
                    help='File to log upload events to, if not set use stdout',
                    default=None)
parser.add_argument('-v', '--verbose', action='store_true',
                    help='Produce verbose logging')
parser.add_argument('-t', '--timeout',
                    type=int,
                    help='Read timeout in seconds, set to higher values if uploads are failing due to timeout',
                    default=120)
parser.add_argument('-s', '--sessiontimeout',
                    type=int,
                    help='Session timeout for xnat site in minutes, to determine session refresh frequency',
                    default=15)
parser.add_argument('-j', '--jobs',
                    type=int,
                    help='Run in X parallel processes to take advantage of multiple cores',
                    default=None)

parser.add_argument('-g', '--gradual',
                    action='store_true',
                    help='Use gradual importer, done file by file. Severely impacts performance, useful when large '
                         'sessions time-out.')

parser.add_argument('--host', required=True,
                    help='URL of xnat host')
parser.add_argument('--project', default=None,
                    help='Project to upload to (used as a default when tag is empty)')
parser.add_argument('--subject', default=None,
                    help='Subject to upload to (used as a default when tag is empty')
parser.add_argument('--projectlabel', default=None,
                    help='Project to upload to, if no static project is declared. Can be string or in dicom tag format '
                         '(0000,0000)')
parser.add_argument('--subjectlabel', default='(0010,0020)',
                    help='Subject to upload to, can be string or in dicom tag format (0010,0020)')
parser.add_argument('--sessionlabel', default='(0010,0010)',
                    help='Session name to use for upload, can be string or in dicom tag format (0010,0010)')
parser.add_argument('--scanlabel', default='(0020,0011)',
                    help='Scan name to use for upload, can be string or in dicom tag format (0020,0011)')

parser.add_argument('--splitlabel', default=None,
                    help='Special tag handling. Dicom tag stores "project:subject" in that format,'
                         'in dicom tag format (0020,0011)')
parser.add_argument('--splitsample', action='store_true',
                    help='Pull sample dicom object from first found file with splitlabel, for debugging')

parser.add_argument('--sessiondate', default='(0008,0020)',
                    help='Session date tag in format (0008,0020)')
parser.add_argument('--scandate', default='(0008,0021)',
                    help='Session date tag in format (0008,0021)')

parser.add_argument('--pulltag', default=None,
                    help='Pull single dicom tag from file, in format (0018,9073)')

parser.add_argument('--deletesessions', action='store_true',
                    help='Delete existing sessions prior to upload of new data')

parser.add_argument('-u', '--uploadnondicom', default=None,
                    help='Store non-dicom data in (project/subject/session) level resource specified here. Level '
                         'determined by static settings in command. Example: if --session is specified as string '
                         '(not tag) then project will be uploaded as session level resource')

parser.add_argument('--dumpmap', default=None,
                    help='File path to dump json map of all scans, do not create/upload any data on server')
parser.add_argument('--tmpdir', default='/tmp',
                    help='Temp directory for zipping files for batch upload')
parser.add_argument('--progress', default=None,
                    help='Report progress every X file uploads')
parser.add_argument('--note', default='',
                    help='Notes for debug metrics')
parser.add_argument('--benchmark', '-b', action='store_true',
                    help="Produce benchmark output to standard out")

parser.add_argument('target',
                    help='Target upload directory')
mytool = XnatUploadToolDicom(**vars(parser.parse_args()))
mytool.start_upload()
exit(0)
