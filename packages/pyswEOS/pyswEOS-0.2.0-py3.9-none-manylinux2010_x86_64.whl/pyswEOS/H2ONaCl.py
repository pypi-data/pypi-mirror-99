# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_H2ONaCl')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_H2ONaCl')
    _H2ONaCl = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_H2ONaCl', [dirname(__file__)])
        except ImportError:
            import _H2ONaCl
            return _H2ONaCl
        try:
            _mod = imp.load_module('_H2ONaCl', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _H2ONaCl = swig_import_helper()
    del swig_import_helper
else:
    import _H2ONaCl
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _H2ONaCl.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _H2ONaCl.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _H2ONaCl.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _H2ONaCl.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _H2ONaCl.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _H2ONaCl.SwigPyIterator_equal(self, x)

    def copy(self):
        return _H2ONaCl.SwigPyIterator_copy(self)

    def next(self):
        return _H2ONaCl.SwigPyIterator_next(self)

    def __next__(self):
        return _H2ONaCl.SwigPyIterator___next__(self)

    def previous(self):
        return _H2ONaCl.SwigPyIterator_previous(self)

    def advance(self, n):
        return _H2ONaCl.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _H2ONaCl.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _H2ONaCl.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _H2ONaCl.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _H2ONaCl.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _H2ONaCl.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _H2ONaCl.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _H2ONaCl.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.IntVector___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.IntVector___bool__(self)

    def __len__(self):
        return _H2ONaCl.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _H2ONaCl.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2ONaCl.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2ONaCl.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2ONaCl.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2ONaCl.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2ONaCl.IntVector___setitem__(self, *args)

    def pop(self):
        return _H2ONaCl.IntVector_pop(self)

    def append(self, x):
        return _H2ONaCl.IntVector_append(self, x)

    def empty(self):
        return _H2ONaCl.IntVector_empty(self)

    def size(self):
        return _H2ONaCl.IntVector_size(self)

    def swap(self, v):
        return _H2ONaCl.IntVector_swap(self, v)

    def begin(self):
        return _H2ONaCl.IntVector_begin(self)

    def end(self):
        return _H2ONaCl.IntVector_end(self)

    def rbegin(self):
        return _H2ONaCl.IntVector_rbegin(self)

    def rend(self):
        return _H2ONaCl.IntVector_rend(self)

    def clear(self):
        return _H2ONaCl.IntVector_clear(self)

    def get_allocator(self):
        return _H2ONaCl.IntVector_get_allocator(self)

    def pop_back(self):
        return _H2ONaCl.IntVector_pop_back(self)

    def erase(self, *args):
        return _H2ONaCl.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _H2ONaCl.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _H2ONaCl.IntVector_push_back(self, x)

    def front(self):
        return _H2ONaCl.IntVector_front(self)

    def back(self):
        return _H2ONaCl.IntVector_back(self)

    def assign(self, n, x):
        return _H2ONaCl.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _H2ONaCl.IntVector_resize(self, *args)

    def insert(self, *args):
        return _H2ONaCl.IntVector_insert(self, *args)

    def reserve(self, n):
        return _H2ONaCl.IntVector_reserve(self, n)

    def capacity(self):
        return _H2ONaCl.IntVector_capacity(self)
    __swig_destroy__ = _H2ONaCl.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _H2ONaCl.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.DoubleVector___bool__(self)

    def __len__(self):
        return _H2ONaCl.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _H2ONaCl.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2ONaCl.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2ONaCl.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2ONaCl.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2ONaCl.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2ONaCl.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _H2ONaCl.DoubleVector_pop(self)

    def append(self, x):
        return _H2ONaCl.DoubleVector_append(self, x)

    def empty(self):
        return _H2ONaCl.DoubleVector_empty(self)

    def size(self):
        return _H2ONaCl.DoubleVector_size(self)

    def swap(self, v):
        return _H2ONaCl.DoubleVector_swap(self, v)

    def begin(self):
        return _H2ONaCl.DoubleVector_begin(self)

    def end(self):
        return _H2ONaCl.DoubleVector_end(self)

    def rbegin(self):
        return _H2ONaCl.DoubleVector_rbegin(self)

    def rend(self):
        return _H2ONaCl.DoubleVector_rend(self)

    def clear(self):
        return _H2ONaCl.DoubleVector_clear(self)

    def get_allocator(self):
        return _H2ONaCl.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _H2ONaCl.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _H2ONaCl.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _H2ONaCl.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _H2ONaCl.DoubleVector_push_back(self, x)

    def front(self):
        return _H2ONaCl.DoubleVector_front(self)

    def back(self):
        return _H2ONaCl.DoubleVector_back(self)

    def assign(self, n, x):
        return _H2ONaCl.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _H2ONaCl.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _H2ONaCl.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _H2ONaCl.DoubleVector_reserve(self, n)

    def capacity(self):
        return _H2ONaCl.DoubleVector_capacity(self)
    __swig_destroy__ = _H2ONaCl.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _H2ONaCl.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.StringVector___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.StringVector___bool__(self)

    def __len__(self):
        return _H2ONaCl.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _H2ONaCl.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2ONaCl.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2ONaCl.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2ONaCl.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2ONaCl.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2ONaCl.StringVector___setitem__(self, *args)

    def pop(self):
        return _H2ONaCl.StringVector_pop(self)

    def append(self, x):
        return _H2ONaCl.StringVector_append(self, x)

    def empty(self):
        return _H2ONaCl.StringVector_empty(self)

    def size(self):
        return _H2ONaCl.StringVector_size(self)

    def swap(self, v):
        return _H2ONaCl.StringVector_swap(self, v)

    def begin(self):
        return _H2ONaCl.StringVector_begin(self)

    def end(self):
        return _H2ONaCl.StringVector_end(self)

    def rbegin(self):
        return _H2ONaCl.StringVector_rbegin(self)

    def rend(self):
        return _H2ONaCl.StringVector_rend(self)

    def clear(self):
        return _H2ONaCl.StringVector_clear(self)

    def get_allocator(self):
        return _H2ONaCl.StringVector_get_allocator(self)

    def pop_back(self):
        return _H2ONaCl.StringVector_pop_back(self)

    def erase(self, *args):
        return _H2ONaCl.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _H2ONaCl.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _H2ONaCl.StringVector_push_back(self, x)

    def front(self):
        return _H2ONaCl.StringVector_front(self)

    def back(self):
        return _H2ONaCl.StringVector_back(self)

    def assign(self, n, x):
        return _H2ONaCl.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _H2ONaCl.StringVector_resize(self, *args)

    def insert(self, *args):
        return _H2ONaCl.StringVector_insert(self, *args)

    def reserve(self, n):
        return _H2ONaCl.StringVector_reserve(self, n)

    def capacity(self):
        return _H2ONaCl.StringVector_capacity(self)
    __swig_destroy__ = _H2ONaCl.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _H2ONaCl.StringVector_swigregister
StringVector_swigregister(StringVector)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.ConstCharVector___bool__(self)

    def __len__(self):
        return _H2ONaCl.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _H2ONaCl.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2ONaCl.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2ONaCl.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2ONaCl.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2ONaCl.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2ONaCl.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _H2ONaCl.ConstCharVector_pop(self)

    def append(self, x):
        return _H2ONaCl.ConstCharVector_append(self, x)

    def empty(self):
        return _H2ONaCl.ConstCharVector_empty(self)

    def size(self):
        return _H2ONaCl.ConstCharVector_size(self)

    def swap(self, v):
        return _H2ONaCl.ConstCharVector_swap(self, v)

    def begin(self):
        return _H2ONaCl.ConstCharVector_begin(self)

    def end(self):
        return _H2ONaCl.ConstCharVector_end(self)

    def rbegin(self):
        return _H2ONaCl.ConstCharVector_rbegin(self)

    def rend(self):
        return _H2ONaCl.ConstCharVector_rend(self)

    def clear(self):
        return _H2ONaCl.ConstCharVector_clear(self)

    def get_allocator(self):
        return _H2ONaCl.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _H2ONaCl.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _H2ONaCl.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _H2ONaCl.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _H2ONaCl.ConstCharVector_push_back(self, x)

    def front(self):
        return _H2ONaCl.ConstCharVector_front(self)

    def back(self):
        return _H2ONaCl.ConstCharVector_back(self)

    def assign(self, n, x):
        return _H2ONaCl.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _H2ONaCl.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _H2ONaCl.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _H2ONaCl.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _H2ONaCl.ConstCharVector_capacity(self)
    __swig_destroy__ = _H2ONaCl.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _H2ONaCl.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

fmt_vtk = _H2ONaCl.fmt_vtk
fmt_dat = _H2ONaCl.fmt_dat
SinglePhase_L = _H2ONaCl.SinglePhase_L
TwoPhase_L_V_X0 = _H2ONaCl.TwoPhase_L_V_X0
SinglePhase_V = _H2ONaCl.SinglePhase_V
TwoPhase_L_H = _H2ONaCl.TwoPhase_L_H
TwoPhase_V_H = _H2ONaCl.TwoPhase_V_H
ThreePhase_V_L_H = _H2ONaCl.ThreePhase_V_L_H
TwoPhase_V_L_L = _H2ONaCl.TwoPhase_V_L_L
TwoPhase_V_L_V = _H2ONaCl.TwoPhase_V_L_V
class PROP_H2ONaCl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PROP_H2ONaCl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PROP_H2ONaCl, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Region"] = _H2ONaCl.PROP_H2ONaCl_Region_set
    __swig_getmethods__["Region"] = _H2ONaCl.PROP_H2ONaCl_Region_get
    if _newclass:
        Region = _swig_property(_H2ONaCl.PROP_H2ONaCl_Region_get, _H2ONaCl.PROP_H2ONaCl_Region_set)
    __swig_setmethods__["T"] = _H2ONaCl.PROP_H2ONaCl_T_set
    __swig_getmethods__["T"] = _H2ONaCl.PROP_H2ONaCl_T_get
    if _newclass:
        T = _swig_property(_H2ONaCl.PROP_H2ONaCl_T_get, _H2ONaCl.PROP_H2ONaCl_T_set)
    __swig_setmethods__["H"] = _H2ONaCl.PROP_H2ONaCl_H_set
    __swig_getmethods__["H"] = _H2ONaCl.PROP_H2ONaCl_H_get
    if _newclass:
        H = _swig_property(_H2ONaCl.PROP_H2ONaCl_H_get, _H2ONaCl.PROP_H2ONaCl_H_set)
    __swig_setmethods__["Rho"] = _H2ONaCl.PROP_H2ONaCl_Rho_set
    __swig_getmethods__["Rho"] = _H2ONaCl.PROP_H2ONaCl_Rho_get
    if _newclass:
        Rho = _swig_property(_H2ONaCl.PROP_H2ONaCl_Rho_get, _H2ONaCl.PROP_H2ONaCl_Rho_set)
    __swig_setmethods__["Mu"] = _H2ONaCl.PROP_H2ONaCl_Mu_set
    __swig_getmethods__["Mu"] = _H2ONaCl.PROP_H2ONaCl_Mu_get
    if _newclass:
        Mu = _swig_property(_H2ONaCl.PROP_H2ONaCl_Mu_get, _H2ONaCl.PROP_H2ONaCl_Mu_set)
    __swig_setmethods__["Rho_l"] = _H2ONaCl.PROP_H2ONaCl_Rho_l_set
    __swig_getmethods__["Rho_l"] = _H2ONaCl.PROP_H2ONaCl_Rho_l_get
    if _newclass:
        Rho_l = _swig_property(_H2ONaCl.PROP_H2ONaCl_Rho_l_get, _H2ONaCl.PROP_H2ONaCl_Rho_l_set)
    __swig_setmethods__["Rho_v"] = _H2ONaCl.PROP_H2ONaCl_Rho_v_set
    __swig_getmethods__["Rho_v"] = _H2ONaCl.PROP_H2ONaCl_Rho_v_get
    if _newclass:
        Rho_v = _swig_property(_H2ONaCl.PROP_H2ONaCl_Rho_v_get, _H2ONaCl.PROP_H2ONaCl_Rho_v_set)
    __swig_setmethods__["Rho_h"] = _H2ONaCl.PROP_H2ONaCl_Rho_h_set
    __swig_getmethods__["Rho_h"] = _H2ONaCl.PROP_H2ONaCl_Rho_h_get
    if _newclass:
        Rho_h = _swig_property(_H2ONaCl.PROP_H2ONaCl_Rho_h_get, _H2ONaCl.PROP_H2ONaCl_Rho_h_set)
    __swig_setmethods__["H_l"] = _H2ONaCl.PROP_H2ONaCl_H_l_set
    __swig_getmethods__["H_l"] = _H2ONaCl.PROP_H2ONaCl_H_l_get
    if _newclass:
        H_l = _swig_property(_H2ONaCl.PROP_H2ONaCl_H_l_get, _H2ONaCl.PROP_H2ONaCl_H_l_set)
    __swig_setmethods__["H_v"] = _H2ONaCl.PROP_H2ONaCl_H_v_set
    __swig_getmethods__["H_v"] = _H2ONaCl.PROP_H2ONaCl_H_v_get
    if _newclass:
        H_v = _swig_property(_H2ONaCl.PROP_H2ONaCl_H_v_get, _H2ONaCl.PROP_H2ONaCl_H_v_set)
    __swig_setmethods__["H_h"] = _H2ONaCl.PROP_H2ONaCl_H_h_set
    __swig_getmethods__["H_h"] = _H2ONaCl.PROP_H2ONaCl_H_h_get
    if _newclass:
        H_h = _swig_property(_H2ONaCl.PROP_H2ONaCl_H_h_get, _H2ONaCl.PROP_H2ONaCl_H_h_set)
    __swig_setmethods__["S_l"] = _H2ONaCl.PROP_H2ONaCl_S_l_set
    __swig_getmethods__["S_l"] = _H2ONaCl.PROP_H2ONaCl_S_l_get
    if _newclass:
        S_l = _swig_property(_H2ONaCl.PROP_H2ONaCl_S_l_get, _H2ONaCl.PROP_H2ONaCl_S_l_set)
    __swig_setmethods__["S_v"] = _H2ONaCl.PROP_H2ONaCl_S_v_set
    __swig_getmethods__["S_v"] = _H2ONaCl.PROP_H2ONaCl_S_v_get
    if _newclass:
        S_v = _swig_property(_H2ONaCl.PROP_H2ONaCl_S_v_get, _H2ONaCl.PROP_H2ONaCl_S_v_set)
    __swig_setmethods__["S_h"] = _H2ONaCl.PROP_H2ONaCl_S_h_set
    __swig_getmethods__["S_h"] = _H2ONaCl.PROP_H2ONaCl_S_h_get
    if _newclass:
        S_h = _swig_property(_H2ONaCl.PROP_H2ONaCl_S_h_get, _H2ONaCl.PROP_H2ONaCl_S_h_set)
    __swig_setmethods__["X_l"] = _H2ONaCl.PROP_H2ONaCl_X_l_set
    __swig_getmethods__["X_l"] = _H2ONaCl.PROP_H2ONaCl_X_l_get
    if _newclass:
        X_l = _swig_property(_H2ONaCl.PROP_H2ONaCl_X_l_get, _H2ONaCl.PROP_H2ONaCl_X_l_set)
    __swig_setmethods__["X_v"] = _H2ONaCl.PROP_H2ONaCl_X_v_set
    __swig_getmethods__["X_v"] = _H2ONaCl.PROP_H2ONaCl_X_v_get
    if _newclass:
        X_v = _swig_property(_H2ONaCl.PROP_H2ONaCl_X_v_get, _H2ONaCl.PROP_H2ONaCl_X_v_set)
    __swig_setmethods__["Mu_l"] = _H2ONaCl.PROP_H2ONaCl_Mu_l_set
    __swig_getmethods__["Mu_l"] = _H2ONaCl.PROP_H2ONaCl_Mu_l_get
    if _newclass:
        Mu_l = _swig_property(_H2ONaCl.PROP_H2ONaCl_Mu_l_get, _H2ONaCl.PROP_H2ONaCl_Mu_l_set)
    __swig_setmethods__["Mu_v"] = _H2ONaCl.PROP_H2ONaCl_Mu_v_set
    __swig_getmethods__["Mu_v"] = _H2ONaCl.PROP_H2ONaCl_Mu_v_get
    if _newclass:
        Mu_v = _swig_property(_H2ONaCl.PROP_H2ONaCl_Mu_v_get, _H2ONaCl.PROP_H2ONaCl_Mu_v_set)

    def __init__(self):
        this = _H2ONaCl.new_PROP_H2ONaCl()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _H2ONaCl.delete_PROP_H2ONaCl
    __del__ = lambda self: None
PROP_H2ONaCl_swigregister = _H2ONaCl.PROP_H2ONaCl_swigregister
PROP_H2ONaCl_swigregister(PROP_H2ONaCl)

class MP_STRUCT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MP_STRUCT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MP_STRUCT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["b1"] = _H2ONaCl.MP_STRUCT_b1_set
    __swig_getmethods__["b1"] = _H2ONaCl.MP_STRUCT_b1_get
    if _newclass:
        b1 = _swig_property(_H2ONaCl.MP_STRUCT_b1_get, _H2ONaCl.MP_STRUCT_b1_set)
    __swig_setmethods__["b1t"] = _H2ONaCl.MP_STRUCT_b1t_set
    __swig_getmethods__["b1t"] = _H2ONaCl.MP_STRUCT_b1t_get
    if _newclass:
        b1t = _swig_property(_H2ONaCl.MP_STRUCT_b1t_get, _H2ONaCl.MP_STRUCT_b1t_set)
    __swig_setmethods__["b1tt"] = _H2ONaCl.MP_STRUCT_b1tt_set
    __swig_getmethods__["b1tt"] = _H2ONaCl.MP_STRUCT_b1tt_get
    if _newclass:
        b1tt = _swig_property(_H2ONaCl.MP_STRUCT_b1tt_get, _H2ONaCl.MP_STRUCT_b1tt_set)
    __swig_setmethods__["b2"] = _H2ONaCl.MP_STRUCT_b2_set
    __swig_getmethods__["b2"] = _H2ONaCl.MP_STRUCT_b2_get
    if _newclass:
        b2 = _swig_property(_H2ONaCl.MP_STRUCT_b2_get, _H2ONaCl.MP_STRUCT_b2_set)
    __swig_setmethods__["b2t"] = _H2ONaCl.MP_STRUCT_b2t_set
    __swig_getmethods__["b2t"] = _H2ONaCl.MP_STRUCT_b2t_get
    if _newclass:
        b2t = _swig_property(_H2ONaCl.MP_STRUCT_b2t_get, _H2ONaCl.MP_STRUCT_b2t_set)
    __swig_setmethods__["b2tt"] = _H2ONaCl.MP_STRUCT_b2tt_set
    __swig_getmethods__["b2tt"] = _H2ONaCl.MP_STRUCT_b2tt_get
    if _newclass:
        b2tt = _swig_property(_H2ONaCl.MP_STRUCT_b2tt_get, _H2ONaCl.MP_STRUCT_b2tt_set)

    def __init__(self):
        this = _H2ONaCl.new_MP_STRUCT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _H2ONaCl.delete_MP_STRUCT
    __del__ = lambda self: None
MP_STRUCT_swigregister = _H2ONaCl.MP_STRUCT_swigregister
MP_STRUCT_swigregister(MP_STRUCT)

class ID_STRUCT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ID_STRUCT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ID_STRUCT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _H2ONaCl.ID_STRUCT_f_set
    __swig_getmethods__["f"] = _H2ONaCl.ID_STRUCT_f_get
    if _newclass:
        f = _swig_property(_H2ONaCl.ID_STRUCT_f_get, _H2ONaCl.ID_STRUCT_f_set)
    __swig_setmethods__["ft"] = _H2ONaCl.ID_STRUCT_ft_set
    __swig_getmethods__["ft"] = _H2ONaCl.ID_STRUCT_ft_get
    if _newclass:
        ft = _swig_property(_H2ONaCl.ID_STRUCT_ft_get, _H2ONaCl.ID_STRUCT_ft_set)
    __swig_setmethods__["ftt"] = _H2ONaCl.ID_STRUCT_ftt_set
    __swig_getmethods__["ftt"] = _H2ONaCl.ID_STRUCT_ftt_get
    if _newclass:
        ftt = _swig_property(_H2ONaCl.ID_STRUCT_ftt_get, _H2ONaCl.ID_STRUCT_ftt_set)

    def __init__(self):
        this = _H2ONaCl.new_ID_STRUCT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _H2ONaCl.delete_ID_STRUCT
    __del__ = lambda self: None
ID_STRUCT_swigregister = _H2ONaCl.ID_STRUCT_swigregister
ID_STRUCT_swigregister(ID_STRUCT)

class TWOPHASEPROP_STRUCT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TWOPHASEPROP_STRUCT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TWOPHASEPROP_STRUCT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _H2ONaCl.TWOPHASEPROP_STRUCT_f_set
    __swig_getmethods__["f"] = _H2ONaCl.TWOPHASEPROP_STRUCT_f_get
    if _newclass:
        f = _swig_property(_H2ONaCl.TWOPHASEPROP_STRUCT_f_get, _H2ONaCl.TWOPHASEPROP_STRUCT_f_set)
    __swig_setmethods__["p"] = _H2ONaCl.TWOPHASEPROP_STRUCT_p_set
    __swig_getmethods__["p"] = _H2ONaCl.TWOPHASEPROP_STRUCT_p_get
    if _newclass:
        p = _swig_property(_H2ONaCl.TWOPHASEPROP_STRUCT_p_get, _H2ONaCl.TWOPHASEPROP_STRUCT_p_set)
    __swig_setmethods__["s"] = _H2ONaCl.TWOPHASEPROP_STRUCT_s_set
    __swig_getmethods__["s"] = _H2ONaCl.TWOPHASEPROP_STRUCT_s_get
    if _newclass:
        s = _swig_property(_H2ONaCl.TWOPHASEPROP_STRUCT_s_get, _H2ONaCl.TWOPHASEPROP_STRUCT_s_set)
    __swig_setmethods__["g"] = _H2ONaCl.TWOPHASEPROP_STRUCT_g_set
    __swig_getmethods__["g"] = _H2ONaCl.TWOPHASEPROP_STRUCT_g_get
    if _newclass:
        g = _swig_property(_H2ONaCl.TWOPHASEPROP_STRUCT_g_get, _H2ONaCl.TWOPHASEPROP_STRUCT_g_set)
    __swig_setmethods__["u"] = _H2ONaCl.TWOPHASEPROP_STRUCT_u_set
    __swig_getmethods__["u"] = _H2ONaCl.TWOPHASEPROP_STRUCT_u_get
    if _newclass:
        u = _swig_property(_H2ONaCl.TWOPHASEPROP_STRUCT_u_get, _H2ONaCl.TWOPHASEPROP_STRUCT_u_set)
    __swig_setmethods__["h"] = _H2ONaCl.TWOPHASEPROP_STRUCT_h_set
    __swig_getmethods__["h"] = _H2ONaCl.TWOPHASEPROP_STRUCT_h_get
    if _newclass:
        h = _swig_property(_H2ONaCl.TWOPHASEPROP_STRUCT_h_get, _H2ONaCl.TWOPHASEPROP_STRUCT_h_set)
    __swig_setmethods__["dpd"] = _H2ONaCl.TWOPHASEPROP_STRUCT_dpd_set
    __swig_getmethods__["dpd"] = _H2ONaCl.TWOPHASEPROP_STRUCT_dpd_get
    if _newclass:
        dpd = _swig_property(_H2ONaCl.TWOPHASEPROP_STRUCT_dpd_get, _H2ONaCl.TWOPHASEPROP_STRUCT_dpd_set)
    __swig_setmethods__["dpt"] = _H2ONaCl.TWOPHASEPROP_STRUCT_dpt_set
    __swig_getmethods__["dpt"] = _H2ONaCl.TWOPHASEPROP_STRUCT_dpt_get
    if _newclass:
        dpt = _swig_property(_H2ONaCl.TWOPHASEPROP_STRUCT_dpt_get, _H2ONaCl.TWOPHASEPROP_STRUCT_dpt_set)
    __swig_setmethods__["cv"] = _H2ONaCl.TWOPHASEPROP_STRUCT_cv_set
    __swig_getmethods__["cv"] = _H2ONaCl.TWOPHASEPROP_STRUCT_cv_get
    if _newclass:
        cv = _swig_property(_H2ONaCl.TWOPHASEPROP_STRUCT_cv_get, _H2ONaCl.TWOPHASEPROP_STRUCT_cv_set)
    __swig_setmethods__["x"] = _H2ONaCl.TWOPHASEPROP_STRUCT_x_set
    __swig_getmethods__["x"] = _H2ONaCl.TWOPHASEPROP_STRUCT_x_get
    if _newclass:
        x = _swig_property(_H2ONaCl.TWOPHASEPROP_STRUCT_x_get, _H2ONaCl.TWOPHASEPROP_STRUCT_x_set)

    def __init__(self):
        this = _H2ONaCl.new_TWOPHASEPROP_STRUCT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _H2ONaCl.delete_TWOPHASEPROP_STRUCT
    __del__ = lambda self: None
TWOPHASEPROP_STRUCT_swigregister = _H2ONaCl.TWOPHASEPROP_STRUCT_swigregister
TWOPHASEPROP_STRUCT_swigregister(TWOPHASEPROP_STRUCT)

class BS_STRUCT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BS_STRUCT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BS_STRUCT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _H2ONaCl.BS_STRUCT_x_set
    __swig_getmethods__["x"] = _H2ONaCl.BS_STRUCT_x_get
    if _newclass:
        x = _swig_property(_H2ONaCl.BS_STRUCT_x_get, _H2ONaCl.BS_STRUCT_x_set)
    __swig_setmethods__["f"] = _H2ONaCl.BS_STRUCT_f_set
    __swig_getmethods__["f"] = _H2ONaCl.BS_STRUCT_f_get
    if _newclass:
        f = _swig_property(_H2ONaCl.BS_STRUCT_f_get, _H2ONaCl.BS_STRUCT_f_set)
    __swig_setmethods__["fd"] = _H2ONaCl.BS_STRUCT_fd_set
    __swig_getmethods__["fd"] = _H2ONaCl.BS_STRUCT_fd_get
    if _newclass:
        fd = _swig_property(_H2ONaCl.BS_STRUCT_fd_get, _H2ONaCl.BS_STRUCT_fd_set)
    __swig_setmethods__["fdd"] = _H2ONaCl.BS_STRUCT_fdd_set
    __swig_getmethods__["fdd"] = _H2ONaCl.BS_STRUCT_fdd_get
    if _newclass:
        fdd = _swig_property(_H2ONaCl.BS_STRUCT_fdd_get, _H2ONaCl.BS_STRUCT_fdd_set)
    __swig_setmethods__["ft"] = _H2ONaCl.BS_STRUCT_ft_set
    __swig_getmethods__["ft"] = _H2ONaCl.BS_STRUCT_ft_get
    if _newclass:
        ft = _swig_property(_H2ONaCl.BS_STRUCT_ft_get, _H2ONaCl.BS_STRUCT_ft_set)
    __swig_setmethods__["ftd"] = _H2ONaCl.BS_STRUCT_ftd_set
    __swig_getmethods__["ftd"] = _H2ONaCl.BS_STRUCT_ftd_get
    if _newclass:
        ftd = _swig_property(_H2ONaCl.BS_STRUCT_ftd_get, _H2ONaCl.BS_STRUCT_ftd_set)
    __swig_setmethods__["ftt"] = _H2ONaCl.BS_STRUCT_ftt_set
    __swig_getmethods__["ftt"] = _H2ONaCl.BS_STRUCT_ftt_get
    if _newclass:
        ftt = _swig_property(_H2ONaCl.BS_STRUCT_ftt_get, _H2ONaCl.BS_STRUCT_ftt_set)

    def __init__(self):
        this = _H2ONaCl.new_BS_STRUCT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _H2ONaCl.delete_BS_STRUCT
    __del__ = lambda self: None
BS_STRUCT_swigregister = _H2ONaCl.BS_STRUCT_swigregister
BS_STRUCT_swigregister(BS_STRUCT)

class RS_STRUCT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RS_STRUCT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RS_STRUCT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _H2ONaCl.RS_STRUCT_f_set
    __swig_getmethods__["f"] = _H2ONaCl.RS_STRUCT_f_get
    if _newclass:
        f = _swig_property(_H2ONaCl.RS_STRUCT_f_get, _H2ONaCl.RS_STRUCT_f_set)
    __swig_setmethods__["ft"] = _H2ONaCl.RS_STRUCT_ft_set
    __swig_getmethods__["ft"] = _H2ONaCl.RS_STRUCT_ft_get
    if _newclass:
        ft = _swig_property(_H2ONaCl.RS_STRUCT_ft_get, _H2ONaCl.RS_STRUCT_ft_set)
    __swig_setmethods__["ftd"] = _H2ONaCl.RS_STRUCT_ftd_set
    __swig_getmethods__["ftd"] = _H2ONaCl.RS_STRUCT_ftd_get
    if _newclass:
        ftd = _swig_property(_H2ONaCl.RS_STRUCT_ftd_get, _H2ONaCl.RS_STRUCT_ftd_set)
    __swig_setmethods__["fd"] = _H2ONaCl.RS_STRUCT_fd_set
    __swig_getmethods__["fd"] = _H2ONaCl.RS_STRUCT_fd_get
    if _newclass:
        fd = _swig_property(_H2ONaCl.RS_STRUCT_fd_get, _H2ONaCl.RS_STRUCT_fd_set)
    __swig_setmethods__["fdd"] = _H2ONaCl.RS_STRUCT_fdd_set
    __swig_getmethods__["fdd"] = _H2ONaCl.RS_STRUCT_fdd_get
    if _newclass:
        fdd = _swig_property(_H2ONaCl.RS_STRUCT_fdd_get, _H2ONaCl.RS_STRUCT_fdd_set)
    __swig_setmethods__["ftt"] = _H2ONaCl.RS_STRUCT_ftt_set
    __swig_getmethods__["ftt"] = _H2ONaCl.RS_STRUCT_ftt_get
    if _newclass:
        ftt = _swig_property(_H2ONaCl.RS_STRUCT_ftt_get, _H2ONaCl.RS_STRUCT_ftt_set)

    def __init__(self):
        this = _H2ONaCl.new_RS_STRUCT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _H2ONaCl.delete_RS_STRUCT
    __del__ = lambda self: None
RS_STRUCT_swigregister = _H2ONaCl.RS_STRUCT_swigregister
RS_STRUCT_swigregister(RS_STRUCT)

class Cr_STRUCT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cr_STRUCT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cr_STRUCT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["g"] = _H2ONaCl.Cr_STRUCT_g_set
    __swig_getmethods__["g"] = _H2ONaCl.Cr_STRUCT_g_get
    if _newclass:
        g = _swig_property(_H2ONaCl.Cr_STRUCT_g_get, _H2ONaCl.Cr_STRUCT_g_set)
    __swig_setmethods__["k"] = _H2ONaCl.Cr_STRUCT_k_set
    __swig_getmethods__["k"] = _H2ONaCl.Cr_STRUCT_k_get
    if _newclass:
        k = _swig_property(_H2ONaCl.Cr_STRUCT_k_get, _H2ONaCl.Cr_STRUCT_k_set)
    __swig_setmethods__["l"] = _H2ONaCl.Cr_STRUCT_l_set
    __swig_getmethods__["l"] = _H2ONaCl.Cr_STRUCT_l_get
    if _newclass:
        l = _swig_property(_H2ONaCl.Cr_STRUCT_l_get, _H2ONaCl.Cr_STRUCT_l_set)
    __swig_setmethods__["gg"] = _H2ONaCl.Cr_STRUCT_gg_set
    __swig_getmethods__["gg"] = _H2ONaCl.Cr_STRUCT_gg_get
    if _newclass:
        gg = _swig_property(_H2ONaCl.Cr_STRUCT_gg_get, _H2ONaCl.Cr_STRUCT_gg_set)
    __swig_setmethods__["t"] = _H2ONaCl.Cr_STRUCT_t_set
    __swig_getmethods__["t"] = _H2ONaCl.Cr_STRUCT_t_get
    if _newclass:
        t = _swig_property(_H2ONaCl.Cr_STRUCT_t_get, _H2ONaCl.Cr_STRUCT_t_set)
    __swig_setmethods__["d"] = _H2ONaCl.Cr_STRUCT_d_set
    __swig_getmethods__["d"] = _H2ONaCl.Cr_STRUCT_d_get
    if _newclass:
        d = _swig_property(_H2ONaCl.Cr_STRUCT_d_get, _H2ONaCl.Cr_STRUCT_d_set)
    __swig_setmethods__["a"] = _H2ONaCl.Cr_STRUCT_a_set
    __swig_getmethods__["a"] = _H2ONaCl.Cr_STRUCT_a_get
    if _newclass:
        a = _swig_property(_H2ONaCl.Cr_STRUCT_a_get, _H2ONaCl.Cr_STRUCT_a_set)
    __swig_setmethods__["b"] = _H2ONaCl.Cr_STRUCT_b_set
    __swig_getmethods__["b"] = _H2ONaCl.Cr_STRUCT_b_get
    if _newclass:
        b = _swig_property(_H2ONaCl.Cr_STRUCT_b_get, _H2ONaCl.Cr_STRUCT_b_set)

    def __init__(self):
        this = _H2ONaCl.new_Cr_STRUCT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _H2ONaCl.delete_Cr_STRUCT
    __del__ = lambda self: None
Cr_STRUCT_swigregister = _H2ONaCl.Cr_STRUCT_swigregister
Cr_STRUCT_swigregister(Cr_STRUCT)

class f_STRUCT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, f_STRUCT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, f_STRUCT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _H2ONaCl.f_STRUCT_f_set
    __swig_getmethods__["f"] = _H2ONaCl.f_STRUCT_f_get
    if _newclass:
        f = _swig_property(_H2ONaCl.f_STRUCT_f_get, _H2ONaCl.f_STRUCT_f_set)
    __swig_setmethods__["sum_f10"] = _H2ONaCl.f_STRUCT_sum_f10_set
    __swig_getmethods__["sum_f10"] = _H2ONaCl.f_STRUCT_sum_f10_get
    if _newclass:
        sum_f10 = _swig_property(_H2ONaCl.f_STRUCT_sum_f10_get, _H2ONaCl.f_STRUCT_sum_f10_set)

    def __init__(self):
        this = _H2ONaCl.new_f_STRUCT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _H2ONaCl.delete_f_STRUCT
    __del__ = lambda self: None
f_STRUCT_swigregister = _H2ONaCl.f_STRUCT_swigregister
f_STRUCT_swigregister(f_STRUCT)

class cH2ONaCl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cH2ONaCl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cH2ONaCl, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _H2ONaCl.new_cH2ONaCl()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _H2ONaCl.delete_cH2ONaCl
    __del__ = lambda self: None
    __swig_setmethods__["m_water"] = _H2ONaCl.cH2ONaCl_m_water_set
    __swig_getmethods__["m_water"] = _H2ONaCl.cH2ONaCl_m_water_get
    if _newclass:
        m_water = _swig_property(_H2ONaCl.cH2ONaCl_m_water_get, _H2ONaCl.cH2ONaCl_m_water_set)
    __swig_setmethods__["m_NaCl"] = _H2ONaCl.cH2ONaCl_m_NaCl_set
    __swig_getmethods__["m_NaCl"] = _H2ONaCl.cH2ONaCl_m_NaCl_get
    if _newclass:
        m_NaCl = _swig_property(_H2ONaCl.cH2ONaCl_m_NaCl_get, _H2ONaCl.cH2ONaCl_m_NaCl_set)
    __swig_setmethods__["m_phaseRegion_name"] = _H2ONaCl.cH2ONaCl_m_phaseRegion_name_set
    __swig_getmethods__["m_phaseRegion_name"] = _H2ONaCl.cH2ONaCl_m_phaseRegion_name_get
    if _newclass:
        m_phaseRegion_name = _swig_property(_H2ONaCl.cH2ONaCl_m_phaseRegion_name_get, _H2ONaCl.cH2ONaCl_m_phaseRegion_name_set)
    __swig_setmethods__["m_prop"] = _H2ONaCl.cH2ONaCl_m_prop_set
    __swig_getmethods__["m_prop"] = _H2ONaCl.cH2ONaCl_m_prop_get
    if _newclass:
        m_prop = _swig_property(_H2ONaCl.cH2ONaCl_m_prop_get, _H2ONaCl.cH2ONaCl_m_prop_set)

    def getPhaseRegionName(self, regionID):
        return _H2ONaCl.cH2ONaCl_getPhaseRegionName(self, regionID)

    def prop_pTX(self, p, T_K, X_wt, visc_on=True):
        return _H2ONaCl.cH2ONaCl_prop_pTX(self, p, T_K, X_wt, visc_on)

    def prop_pHX(self, p, H, X_wt):
        return _H2ONaCl.cH2ONaCl_prop_pHX(self, p, H, X_wt)

    def rho_pTX(self, p, T_K, X_wt):
        return _H2ONaCl.cH2ONaCl_rho_pTX(self, p, T_K, X_wt)

    def rho_l_pTX(self, p, T_K, X_wt):
        return _H2ONaCl.cH2ONaCl_rho_l_pTX(self, p, T_K, X_wt)

    def mu_l_pTX(self, p, T_K, X_wt):
        return _H2ONaCl.cH2ONaCl_mu_l_pTX(self, p, T_K, X_wt)

    def mu_pTX(self, p, T_K, X_wt):
        return _H2ONaCl.cH2ONaCl_mu_pTX(self, p, T_K, X_wt)

    def writeProps2VTK(self, *args):
        return _H2ONaCl.cH2ONaCl_writeProps2VTK(self, *args)

    def writeProps2xyz(self, *args):
        return _H2ONaCl.cH2ONaCl_writeProps2xyz(self, *args)

    def setColorPrint(self, colorPrint):
        return _H2ONaCl.cH2ONaCl_setColorPrint(self, colorPrint)

    def checkTemperatureRange(self, temperature_C):
        return _H2ONaCl.cH2ONaCl_checkTemperatureRange(self, temperature_C)

    def checkPressureRange(self, pressure_bar):
        return _H2ONaCl.cH2ONaCl_checkPressureRange(self, pressure_bar)

    def checkSalinityRange(self, salinity):
        return _H2ONaCl.cH2ONaCl_checkSalinityRange(self, salinity)

    def CheckRange_H(self, H0, P0, X0):
        return _H2ONaCl.cH2ONaCl_CheckRange_H(self, H0, P0, X0)

    def CheckRanges_H_PX(self, HMIN0, HMAX0, PXrange):
        return _H2ONaCl.cH2ONaCl_CheckRanges_H_PX(self, HMIN0, HMAX0, PXrange)

    def CheckRanges_H_P(self, HMIN0, HMAX0, Prange, X0):
        return _H2ONaCl.cH2ONaCl_CheckRanges_H_P(self, HMIN0, HMAX0, Prange, X0)

    def CheckRanges_H_X(self, HMIN0, HMAX0, Xrange, P0):
        return _H2ONaCl.cH2ONaCl_CheckRanges_H_X(self, HMIN0, HMAX0, Xrange, P0)

    def P_X_Critical(self, T):
        return _H2ONaCl.cH2ONaCl_P_X_Critical(self, T)

    def T_X_Critical(self, P):
        return _H2ONaCl.cH2ONaCl_T_X_Critical(self, P)

    def writeCriticalCurve(self, *args):
        return _H2ONaCl.cH2ONaCl_writeCriticalCurve(self, *args)

    def writeNaClMeltingCurve(self, *args):
        return _H2ONaCl.cH2ONaCl_writeNaClMeltingCurve(self, *args)

    def writeVaporLiquidHalite_V_L_H_Curve(self, *args):
        return _H2ONaCl.cH2ONaCl_writeVaporLiquidHalite_V_L_H_Curve(self, *args)

    def writeH2OBoilingCurve(self, *args):
        return _H2ONaCl.cH2ONaCl_writeH2OBoilingCurve(self, *args)

    def X_HaliteLiquidus(self, *args):
        return _H2ONaCl.cH2ONaCl_X_HaliteLiquidus(self, *args)

    def writeHaliteLiquidusSurface(self, *args):
        return _H2ONaCl.cH2ONaCl_writeHaliteLiquidusSurface(self, *args)

    def X_VaporHaliteCoexist(self, T, P):
        return _H2ONaCl.cH2ONaCl_X_VaporHaliteCoexist(self, T, P)

    def P_VaporLiquidHaliteCoexist(self, T):
        return _H2ONaCl.cH2ONaCl_P_VaporLiquidHaliteCoexist(self, T)

    def HX_VaporLiquidHaliteCoexist(self, P):
        return _H2ONaCl.cH2ONaCl_HX_VaporLiquidHaliteCoexist(self, P)

    def Pmax_VaporLiquidHaliteCoexist(self):
        return _H2ONaCl.cH2ONaCl_Pmax_VaporLiquidHaliteCoexist(self)

    def T_VaporLiquidHaliteCoexist(self, P):
        return _H2ONaCl.cH2ONaCl_T_VaporLiquidHaliteCoexist(self, P)

    def writeVaporLiquidHaliteCoexistSurface(self, *args):
        return _H2ONaCl.cH2ONaCl_writeVaporLiquidHaliteCoexistSurface(self, *args)

    def X_VaporLiquidCoexistSurface_LiquidBranch(self, *args):
        return _H2ONaCl.cH2ONaCl_X_VaporLiquidCoexistSurface_LiquidBranch(self, *args)

    def X_VaporLiquidCoexistSurface_VaporBranch(self, *args):
        return _H2ONaCl.cH2ONaCl_X_VaporLiquidCoexistSurface_VaporBranch(self, *args)

    def writeVaporLiquidCoexistSurface(self, *args):
        return _H2ONaCl.cH2ONaCl_writeVaporLiquidCoexistSurface(self, *args)

    def T_star_V(self, T, P, X):
        return _H2ONaCl.cH2ONaCl_T_star_V(self, T, P, X)

    def V_extrapol(self, T, P, X):
        return _H2ONaCl.cH2ONaCl_V_extrapol(self, T, P, X)

    def Wt2Mol(self, X_wt):
        return _H2ONaCl.cH2ONaCl_Wt2Mol(self, X_wt)

    def Mol2Wt(self, *args):
        return _H2ONaCl.cH2ONaCl_Mol2Wt(self, *args)

    def Rho_Br_for_V_extrapol(self, T, P, X):
        return _H2ONaCl.cH2ONaCl_Rho_Br_for_V_extrapol(self, T, P, X)

    def Rho_brine(self, T, P, X):
        return _H2ONaCl.cH2ONaCl_Rho_brine(self, T, P, X)

    def findPhaseRegion(self, T, P, X_wt, Xl_all, Xv_all):
        return _H2ONaCl.cH2ONaCl_findPhaseRegion(self, T, P, X_wt, Xl_all, Xv_all)

    def writePhaseSurface_XHP(self, *args):
        return _H2ONaCl.cH2ONaCl_writePhaseSurface_XHP(self, *args)
cH2ONaCl_swigregister = _H2ONaCl.cH2ONaCl_swigregister
cH2ONaCl_swigregister(cH2ONaCl)
cvar = _H2ONaCl.cvar
PMIN = cvar.PMIN
PMAX = cvar.PMAX
TMIN = cvar.TMIN
TMAX = cvar.TMAX
TMIN_K = cvar.TMIN_K
TMAX_K = cvar.TMAX_K
TMIN_C = cvar.TMIN_C
TMAX_C = cvar.TMAX_C
XMIN = cvar.XMIN
XMAX = cvar.XMAX
HMAX = cvar.HMAX

# This file is compatible with both classic and new-style classes.


