# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _H2ONaCl
else:
    import _H2ONaCl

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _H2ONaCl.delete_SwigPyIterator

    def value(self):
        return _H2ONaCl.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _H2ONaCl.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _H2ONaCl.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _H2ONaCl.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _H2ONaCl.SwigPyIterator_equal(self, x)

    def copy(self):
        return _H2ONaCl.SwigPyIterator_copy(self)

    def next(self):
        return _H2ONaCl.SwigPyIterator_next(self)

    def __next__(self):
        return _H2ONaCl.SwigPyIterator___next__(self)

    def previous(self):
        return _H2ONaCl.SwigPyIterator_previous(self)

    def advance(self, n):
        return _H2ONaCl.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _H2ONaCl.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _H2ONaCl.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _H2ONaCl.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _H2ONaCl.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _H2ONaCl.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _H2ONaCl.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _H2ONaCl:
_H2ONaCl.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.IntVector___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.IntVector___bool__(self)

    def __len__(self):
        return _H2ONaCl.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _H2ONaCl.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2ONaCl.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2ONaCl.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2ONaCl.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2ONaCl.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2ONaCl.IntVector___setitem__(self, *args)

    def pop(self):
        return _H2ONaCl.IntVector_pop(self)

    def append(self, x):
        return _H2ONaCl.IntVector_append(self, x)

    def empty(self):
        return _H2ONaCl.IntVector_empty(self)

    def size(self):
        return _H2ONaCl.IntVector_size(self)

    def swap(self, v):
        return _H2ONaCl.IntVector_swap(self, v)

    def begin(self):
        return _H2ONaCl.IntVector_begin(self)

    def end(self):
        return _H2ONaCl.IntVector_end(self)

    def rbegin(self):
        return _H2ONaCl.IntVector_rbegin(self)

    def rend(self):
        return _H2ONaCl.IntVector_rend(self)

    def clear(self):
        return _H2ONaCl.IntVector_clear(self)

    def get_allocator(self):
        return _H2ONaCl.IntVector_get_allocator(self)

    def pop_back(self):
        return _H2ONaCl.IntVector_pop_back(self)

    def erase(self, *args):
        return _H2ONaCl.IntVector_erase(self, *args)

    def __init__(self, *args):
        _H2ONaCl.IntVector_swiginit(self, _H2ONaCl.new_IntVector(*args))

    def push_back(self, x):
        return _H2ONaCl.IntVector_push_back(self, x)

    def front(self):
        return _H2ONaCl.IntVector_front(self)

    def back(self):
        return _H2ONaCl.IntVector_back(self)

    def assign(self, n, x):
        return _H2ONaCl.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _H2ONaCl.IntVector_resize(self, *args)

    def insert(self, *args):
        return _H2ONaCl.IntVector_insert(self, *args)

    def reserve(self, n):
        return _H2ONaCl.IntVector_reserve(self, n)

    def capacity(self):
        return _H2ONaCl.IntVector_capacity(self)
    __swig_destroy__ = _H2ONaCl.delete_IntVector

# Register IntVector in _H2ONaCl:
_H2ONaCl.IntVector_swigregister(IntVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.DoubleVector___bool__(self)

    def __len__(self):
        return _H2ONaCl.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _H2ONaCl.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2ONaCl.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2ONaCl.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2ONaCl.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2ONaCl.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2ONaCl.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _H2ONaCl.DoubleVector_pop(self)

    def append(self, x):
        return _H2ONaCl.DoubleVector_append(self, x)

    def empty(self):
        return _H2ONaCl.DoubleVector_empty(self)

    def size(self):
        return _H2ONaCl.DoubleVector_size(self)

    def swap(self, v):
        return _H2ONaCl.DoubleVector_swap(self, v)

    def begin(self):
        return _H2ONaCl.DoubleVector_begin(self)

    def end(self):
        return _H2ONaCl.DoubleVector_end(self)

    def rbegin(self):
        return _H2ONaCl.DoubleVector_rbegin(self)

    def rend(self):
        return _H2ONaCl.DoubleVector_rend(self)

    def clear(self):
        return _H2ONaCl.DoubleVector_clear(self)

    def get_allocator(self):
        return _H2ONaCl.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _H2ONaCl.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _H2ONaCl.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _H2ONaCl.DoubleVector_swiginit(self, _H2ONaCl.new_DoubleVector(*args))

    def push_back(self, x):
        return _H2ONaCl.DoubleVector_push_back(self, x)

    def front(self):
        return _H2ONaCl.DoubleVector_front(self)

    def back(self):
        return _H2ONaCl.DoubleVector_back(self)

    def assign(self, n, x):
        return _H2ONaCl.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _H2ONaCl.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _H2ONaCl.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _H2ONaCl.DoubleVector_reserve(self, n)

    def capacity(self):
        return _H2ONaCl.DoubleVector_capacity(self)
    __swig_destroy__ = _H2ONaCl.delete_DoubleVector

# Register DoubleVector in _H2ONaCl:
_H2ONaCl.DoubleVector_swigregister(DoubleVector)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.StringVector___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.StringVector___bool__(self)

    def __len__(self):
        return _H2ONaCl.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _H2ONaCl.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2ONaCl.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2ONaCl.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2ONaCl.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2ONaCl.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2ONaCl.StringVector___setitem__(self, *args)

    def pop(self):
        return _H2ONaCl.StringVector_pop(self)

    def append(self, x):
        return _H2ONaCl.StringVector_append(self, x)

    def empty(self):
        return _H2ONaCl.StringVector_empty(self)

    def size(self):
        return _H2ONaCl.StringVector_size(self)

    def swap(self, v):
        return _H2ONaCl.StringVector_swap(self, v)

    def begin(self):
        return _H2ONaCl.StringVector_begin(self)

    def end(self):
        return _H2ONaCl.StringVector_end(self)

    def rbegin(self):
        return _H2ONaCl.StringVector_rbegin(self)

    def rend(self):
        return _H2ONaCl.StringVector_rend(self)

    def clear(self):
        return _H2ONaCl.StringVector_clear(self)

    def get_allocator(self):
        return _H2ONaCl.StringVector_get_allocator(self)

    def pop_back(self):
        return _H2ONaCl.StringVector_pop_back(self)

    def erase(self, *args):
        return _H2ONaCl.StringVector_erase(self, *args)

    def __init__(self, *args):
        _H2ONaCl.StringVector_swiginit(self, _H2ONaCl.new_StringVector(*args))

    def push_back(self, x):
        return _H2ONaCl.StringVector_push_back(self, x)

    def front(self):
        return _H2ONaCl.StringVector_front(self)

    def back(self):
        return _H2ONaCl.StringVector_back(self)

    def assign(self, n, x):
        return _H2ONaCl.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _H2ONaCl.StringVector_resize(self, *args)

    def insert(self, *args):
        return _H2ONaCl.StringVector_insert(self, *args)

    def reserve(self, n):
        return _H2ONaCl.StringVector_reserve(self, n)

    def capacity(self):
        return _H2ONaCl.StringVector_capacity(self)
    __swig_destroy__ = _H2ONaCl.delete_StringVector

# Register StringVector in _H2ONaCl:
_H2ONaCl.StringVector_swigregister(StringVector)

class ConstCharVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.ConstCharVector___bool__(self)

    def __len__(self):
        return _H2ONaCl.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _H2ONaCl.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2ONaCl.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2ONaCl.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2ONaCl.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2ONaCl.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2ONaCl.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _H2ONaCl.ConstCharVector_pop(self)

    def append(self, x):
        return _H2ONaCl.ConstCharVector_append(self, x)

    def empty(self):
        return _H2ONaCl.ConstCharVector_empty(self)

    def size(self):
        return _H2ONaCl.ConstCharVector_size(self)

    def swap(self, v):
        return _H2ONaCl.ConstCharVector_swap(self, v)

    def begin(self):
        return _H2ONaCl.ConstCharVector_begin(self)

    def end(self):
        return _H2ONaCl.ConstCharVector_end(self)

    def rbegin(self):
        return _H2ONaCl.ConstCharVector_rbegin(self)

    def rend(self):
        return _H2ONaCl.ConstCharVector_rend(self)

    def clear(self):
        return _H2ONaCl.ConstCharVector_clear(self)

    def get_allocator(self):
        return _H2ONaCl.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _H2ONaCl.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _H2ONaCl.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        _H2ONaCl.ConstCharVector_swiginit(self, _H2ONaCl.new_ConstCharVector(*args))

    def push_back(self, x):
        return _H2ONaCl.ConstCharVector_push_back(self, x)

    def front(self):
        return _H2ONaCl.ConstCharVector_front(self)

    def back(self):
        return _H2ONaCl.ConstCharVector_back(self)

    def assign(self, n, x):
        return _H2ONaCl.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _H2ONaCl.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _H2ONaCl.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _H2ONaCl.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _H2ONaCl.ConstCharVector_capacity(self)
    __swig_destroy__ = _H2ONaCl.delete_ConstCharVector

# Register ConstCharVector in _H2ONaCl:
_H2ONaCl.ConstCharVector_swigregister(ConstCharVector)

fmt_vtk = _H2ONaCl.fmt_vtk
fmt_dat = _H2ONaCl.fmt_dat
SinglePhase_L = _H2ONaCl.SinglePhase_L
TwoPhase_L_V_X0 = _H2ONaCl.TwoPhase_L_V_X0
SinglePhase_V = _H2ONaCl.SinglePhase_V
TwoPhase_L_H = _H2ONaCl.TwoPhase_L_H
TwoPhase_V_H = _H2ONaCl.TwoPhase_V_H
ThreePhase_V_L_H = _H2ONaCl.ThreePhase_V_L_H
TwoPhase_V_L_L = _H2ONaCl.TwoPhase_V_L_L
TwoPhase_V_L_V = _H2ONaCl.TwoPhase_V_L_V
class PROP_H2ONaCl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Region = property(_H2ONaCl.PROP_H2ONaCl_Region_get, _H2ONaCl.PROP_H2ONaCl_Region_set)
    T = property(_H2ONaCl.PROP_H2ONaCl_T_get, _H2ONaCl.PROP_H2ONaCl_T_set)
    H = property(_H2ONaCl.PROP_H2ONaCl_H_get, _H2ONaCl.PROP_H2ONaCl_H_set)
    Rho = property(_H2ONaCl.PROP_H2ONaCl_Rho_get, _H2ONaCl.PROP_H2ONaCl_Rho_set)
    Mu = property(_H2ONaCl.PROP_H2ONaCl_Mu_get, _H2ONaCl.PROP_H2ONaCl_Mu_set)
    Rho_l = property(_H2ONaCl.PROP_H2ONaCl_Rho_l_get, _H2ONaCl.PROP_H2ONaCl_Rho_l_set)
    Rho_v = property(_H2ONaCl.PROP_H2ONaCl_Rho_v_get, _H2ONaCl.PROP_H2ONaCl_Rho_v_set)
    Rho_h = property(_H2ONaCl.PROP_H2ONaCl_Rho_h_get, _H2ONaCl.PROP_H2ONaCl_Rho_h_set)
    H_l = property(_H2ONaCl.PROP_H2ONaCl_H_l_get, _H2ONaCl.PROP_H2ONaCl_H_l_set)
    H_v = property(_H2ONaCl.PROP_H2ONaCl_H_v_get, _H2ONaCl.PROP_H2ONaCl_H_v_set)
    H_h = property(_H2ONaCl.PROP_H2ONaCl_H_h_get, _H2ONaCl.PROP_H2ONaCl_H_h_set)
    S_l = property(_H2ONaCl.PROP_H2ONaCl_S_l_get, _H2ONaCl.PROP_H2ONaCl_S_l_set)
    S_v = property(_H2ONaCl.PROP_H2ONaCl_S_v_get, _H2ONaCl.PROP_H2ONaCl_S_v_set)
    S_h = property(_H2ONaCl.PROP_H2ONaCl_S_h_get, _H2ONaCl.PROP_H2ONaCl_S_h_set)
    X_l = property(_H2ONaCl.PROP_H2ONaCl_X_l_get, _H2ONaCl.PROP_H2ONaCl_X_l_set)
    X_v = property(_H2ONaCl.PROP_H2ONaCl_X_v_get, _H2ONaCl.PROP_H2ONaCl_X_v_set)
    Mu_l = property(_H2ONaCl.PROP_H2ONaCl_Mu_l_get, _H2ONaCl.PROP_H2ONaCl_Mu_l_set)
    Mu_v = property(_H2ONaCl.PROP_H2ONaCl_Mu_v_get, _H2ONaCl.PROP_H2ONaCl_Mu_v_set)

    def __init__(self):
        _H2ONaCl.PROP_H2ONaCl_swiginit(self, _H2ONaCl.new_PROP_H2ONaCl())
    __swig_destroy__ = _H2ONaCl.delete_PROP_H2ONaCl

# Register PROP_H2ONaCl in _H2ONaCl:
_H2ONaCl.PROP_H2ONaCl_swigregister(PROP_H2ONaCl)

class MP_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    b1 = property(_H2ONaCl.MP_STRUCT_b1_get, _H2ONaCl.MP_STRUCT_b1_set)
    b1t = property(_H2ONaCl.MP_STRUCT_b1t_get, _H2ONaCl.MP_STRUCT_b1t_set)
    b1tt = property(_H2ONaCl.MP_STRUCT_b1tt_get, _H2ONaCl.MP_STRUCT_b1tt_set)
    b2 = property(_H2ONaCl.MP_STRUCT_b2_get, _H2ONaCl.MP_STRUCT_b2_set)
    b2t = property(_H2ONaCl.MP_STRUCT_b2t_get, _H2ONaCl.MP_STRUCT_b2t_set)
    b2tt = property(_H2ONaCl.MP_STRUCT_b2tt_get, _H2ONaCl.MP_STRUCT_b2tt_set)

    def __init__(self):
        _H2ONaCl.MP_STRUCT_swiginit(self, _H2ONaCl.new_MP_STRUCT())
    __swig_destroy__ = _H2ONaCl.delete_MP_STRUCT

# Register MP_STRUCT in _H2ONaCl:
_H2ONaCl.MP_STRUCT_swigregister(MP_STRUCT)

class ID_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    f = property(_H2ONaCl.ID_STRUCT_f_get, _H2ONaCl.ID_STRUCT_f_set)
    ft = property(_H2ONaCl.ID_STRUCT_ft_get, _H2ONaCl.ID_STRUCT_ft_set)
    ftt = property(_H2ONaCl.ID_STRUCT_ftt_get, _H2ONaCl.ID_STRUCT_ftt_set)

    def __init__(self):
        _H2ONaCl.ID_STRUCT_swiginit(self, _H2ONaCl.new_ID_STRUCT())
    __swig_destroy__ = _H2ONaCl.delete_ID_STRUCT

# Register ID_STRUCT in _H2ONaCl:
_H2ONaCl.ID_STRUCT_swigregister(ID_STRUCT)

class TWOPHASEPROP_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    f = property(_H2ONaCl.TWOPHASEPROP_STRUCT_f_get, _H2ONaCl.TWOPHASEPROP_STRUCT_f_set)
    p = property(_H2ONaCl.TWOPHASEPROP_STRUCT_p_get, _H2ONaCl.TWOPHASEPROP_STRUCT_p_set)
    s = property(_H2ONaCl.TWOPHASEPROP_STRUCT_s_get, _H2ONaCl.TWOPHASEPROP_STRUCT_s_set)
    g = property(_H2ONaCl.TWOPHASEPROP_STRUCT_g_get, _H2ONaCl.TWOPHASEPROP_STRUCT_g_set)
    u = property(_H2ONaCl.TWOPHASEPROP_STRUCT_u_get, _H2ONaCl.TWOPHASEPROP_STRUCT_u_set)
    h = property(_H2ONaCl.TWOPHASEPROP_STRUCT_h_get, _H2ONaCl.TWOPHASEPROP_STRUCT_h_set)
    dpd = property(_H2ONaCl.TWOPHASEPROP_STRUCT_dpd_get, _H2ONaCl.TWOPHASEPROP_STRUCT_dpd_set)
    dpt = property(_H2ONaCl.TWOPHASEPROP_STRUCT_dpt_get, _H2ONaCl.TWOPHASEPROP_STRUCT_dpt_set)
    cv = property(_H2ONaCl.TWOPHASEPROP_STRUCT_cv_get, _H2ONaCl.TWOPHASEPROP_STRUCT_cv_set)
    x = property(_H2ONaCl.TWOPHASEPROP_STRUCT_x_get, _H2ONaCl.TWOPHASEPROP_STRUCT_x_set)

    def __init__(self):
        _H2ONaCl.TWOPHASEPROP_STRUCT_swiginit(self, _H2ONaCl.new_TWOPHASEPROP_STRUCT())
    __swig_destroy__ = _H2ONaCl.delete_TWOPHASEPROP_STRUCT

# Register TWOPHASEPROP_STRUCT in _H2ONaCl:
_H2ONaCl.TWOPHASEPROP_STRUCT_swigregister(TWOPHASEPROP_STRUCT)

class BS_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_H2ONaCl.BS_STRUCT_x_get, _H2ONaCl.BS_STRUCT_x_set)
    f = property(_H2ONaCl.BS_STRUCT_f_get, _H2ONaCl.BS_STRUCT_f_set)
    fd = property(_H2ONaCl.BS_STRUCT_fd_get, _H2ONaCl.BS_STRUCT_fd_set)
    fdd = property(_H2ONaCl.BS_STRUCT_fdd_get, _H2ONaCl.BS_STRUCT_fdd_set)
    ft = property(_H2ONaCl.BS_STRUCT_ft_get, _H2ONaCl.BS_STRUCT_ft_set)
    ftd = property(_H2ONaCl.BS_STRUCT_ftd_get, _H2ONaCl.BS_STRUCT_ftd_set)
    ftt = property(_H2ONaCl.BS_STRUCT_ftt_get, _H2ONaCl.BS_STRUCT_ftt_set)

    def __init__(self):
        _H2ONaCl.BS_STRUCT_swiginit(self, _H2ONaCl.new_BS_STRUCT())
    __swig_destroy__ = _H2ONaCl.delete_BS_STRUCT

# Register BS_STRUCT in _H2ONaCl:
_H2ONaCl.BS_STRUCT_swigregister(BS_STRUCT)

class RS_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    f = property(_H2ONaCl.RS_STRUCT_f_get, _H2ONaCl.RS_STRUCT_f_set)
    ft = property(_H2ONaCl.RS_STRUCT_ft_get, _H2ONaCl.RS_STRUCT_ft_set)
    ftd = property(_H2ONaCl.RS_STRUCT_ftd_get, _H2ONaCl.RS_STRUCT_ftd_set)
    fd = property(_H2ONaCl.RS_STRUCT_fd_get, _H2ONaCl.RS_STRUCT_fd_set)
    fdd = property(_H2ONaCl.RS_STRUCT_fdd_get, _H2ONaCl.RS_STRUCT_fdd_set)
    ftt = property(_H2ONaCl.RS_STRUCT_ftt_get, _H2ONaCl.RS_STRUCT_ftt_set)

    def __init__(self):
        _H2ONaCl.RS_STRUCT_swiginit(self, _H2ONaCl.new_RS_STRUCT())
    __swig_destroy__ = _H2ONaCl.delete_RS_STRUCT

# Register RS_STRUCT in _H2ONaCl:
_H2ONaCl.RS_STRUCT_swigregister(RS_STRUCT)

class Cr_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    g = property(_H2ONaCl.Cr_STRUCT_g_get, _H2ONaCl.Cr_STRUCT_g_set)
    k = property(_H2ONaCl.Cr_STRUCT_k_get, _H2ONaCl.Cr_STRUCT_k_set)
    l = property(_H2ONaCl.Cr_STRUCT_l_get, _H2ONaCl.Cr_STRUCT_l_set)
    gg = property(_H2ONaCl.Cr_STRUCT_gg_get, _H2ONaCl.Cr_STRUCT_gg_set)
    t = property(_H2ONaCl.Cr_STRUCT_t_get, _H2ONaCl.Cr_STRUCT_t_set)
    d = property(_H2ONaCl.Cr_STRUCT_d_get, _H2ONaCl.Cr_STRUCT_d_set)
    a = property(_H2ONaCl.Cr_STRUCT_a_get, _H2ONaCl.Cr_STRUCT_a_set)
    b = property(_H2ONaCl.Cr_STRUCT_b_get, _H2ONaCl.Cr_STRUCT_b_set)

    def __init__(self):
        _H2ONaCl.Cr_STRUCT_swiginit(self, _H2ONaCl.new_Cr_STRUCT())
    __swig_destroy__ = _H2ONaCl.delete_Cr_STRUCT

# Register Cr_STRUCT in _H2ONaCl:
_H2ONaCl.Cr_STRUCT_swigregister(Cr_STRUCT)

class f_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    f = property(_H2ONaCl.f_STRUCT_f_get, _H2ONaCl.f_STRUCT_f_set)
    sum_f10 = property(_H2ONaCl.f_STRUCT_sum_f10_get, _H2ONaCl.f_STRUCT_sum_f10_set)

    def __init__(self):
        _H2ONaCl.f_STRUCT_swiginit(self, _H2ONaCl.new_f_STRUCT())
    __swig_destroy__ = _H2ONaCl.delete_f_STRUCT

# Register f_STRUCT in _H2ONaCl:
_H2ONaCl.f_STRUCT_swigregister(f_STRUCT)

class cH2ONaCl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _H2ONaCl.cH2ONaCl_swiginit(self, _H2ONaCl.new_cH2ONaCl())
    __swig_destroy__ = _H2ONaCl.delete_cH2ONaCl
    m_water = property(_H2ONaCl.cH2ONaCl_m_water_get, _H2ONaCl.cH2ONaCl_m_water_set)
    m_NaCl = property(_H2ONaCl.cH2ONaCl_m_NaCl_get, _H2ONaCl.cH2ONaCl_m_NaCl_set)
    m_phaseRegion_name = property(_H2ONaCl.cH2ONaCl_m_phaseRegion_name_get, _H2ONaCl.cH2ONaCl_m_phaseRegion_name_set)
    m_prop = property(_H2ONaCl.cH2ONaCl_m_prop_get, _H2ONaCl.cH2ONaCl_m_prop_set)

    def getPhaseRegionName(self, regionID):
        return _H2ONaCl.cH2ONaCl_getPhaseRegionName(self, regionID)

    def prop_pTX(self, p, T_K, X_wt, visc_on=True):
        return _H2ONaCl.cH2ONaCl_prop_pTX(self, p, T_K, X_wt, visc_on)

    def prop_pHX(self, p, H, X_wt):
        return _H2ONaCl.cH2ONaCl_prop_pHX(self, p, H, X_wt)

    def rho_pTX(self, p, T_K, X_wt):
        return _H2ONaCl.cH2ONaCl_rho_pTX(self, p, T_K, X_wt)

    def rho_l_pTX(self, p, T_K, X_wt):
        return _H2ONaCl.cH2ONaCl_rho_l_pTX(self, p, T_K, X_wt)

    def mu_l_pTX(self, p, T_K, X_wt):
        return _H2ONaCl.cH2ONaCl_mu_l_pTX(self, p, T_K, X_wt)

    def mu_pTX(self, p, T_K, X_wt):
        return _H2ONaCl.cH2ONaCl_mu_pTX(self, p, T_K, X_wt)

    def writeProps2VTK(self, *args):
        return _H2ONaCl.cH2ONaCl_writeProps2VTK(self, *args)

    def writeProps2xyz(self, *args):
        return _H2ONaCl.cH2ONaCl_writeProps2xyz(self, *args)

    def setColorPrint(self, colorPrint):
        return _H2ONaCl.cH2ONaCl_setColorPrint(self, colorPrint)

    def checkTemperatureRange(self, temperature_C):
        return _H2ONaCl.cH2ONaCl_checkTemperatureRange(self, temperature_C)

    def checkPressureRange(self, pressure_bar):
        return _H2ONaCl.cH2ONaCl_checkPressureRange(self, pressure_bar)

    def checkSalinityRange(self, salinity):
        return _H2ONaCl.cH2ONaCl_checkSalinityRange(self, salinity)

    def CheckRange_H(self, H0, P0, X0):
        return _H2ONaCl.cH2ONaCl_CheckRange_H(self, H0, P0, X0)

    def CheckRanges_H_PX(self, HMIN0, HMAX0, PXrange):
        return _H2ONaCl.cH2ONaCl_CheckRanges_H_PX(self, HMIN0, HMAX0, PXrange)

    def CheckRanges_H_P(self, HMIN0, HMAX0, Prange, X0):
        return _H2ONaCl.cH2ONaCl_CheckRanges_H_P(self, HMIN0, HMAX0, Prange, X0)

    def CheckRanges_H_X(self, HMIN0, HMAX0, Xrange, P0):
        return _H2ONaCl.cH2ONaCl_CheckRanges_H_X(self, HMIN0, HMAX0, Xrange, P0)

    def P_X_Critical(self, T):
        return _H2ONaCl.cH2ONaCl_P_X_Critical(self, T)

    def T_X_Critical(self, P):
        return _H2ONaCl.cH2ONaCl_T_X_Critical(self, P)

    def writeCriticalCurve(self, *args):
        return _H2ONaCl.cH2ONaCl_writeCriticalCurve(self, *args)

    def writeNaClMeltingCurve(self, *args):
        return _H2ONaCl.cH2ONaCl_writeNaClMeltingCurve(self, *args)

    def writeVaporLiquidHalite_V_L_H_Curve(self, *args):
        return _H2ONaCl.cH2ONaCl_writeVaporLiquidHalite_V_L_H_Curve(self, *args)

    def writeH2OBoilingCurve(self, *args):
        return _H2ONaCl.cH2ONaCl_writeH2OBoilingCurve(self, *args)

    def X_HaliteLiquidus(self, *args):
        return _H2ONaCl.cH2ONaCl_X_HaliteLiquidus(self, *args)

    def writeHaliteLiquidusSurface(self, *args):
        return _H2ONaCl.cH2ONaCl_writeHaliteLiquidusSurface(self, *args)

    def X_VaporHaliteCoexist(self, T, P):
        return _H2ONaCl.cH2ONaCl_X_VaporHaliteCoexist(self, T, P)

    def P_VaporLiquidHaliteCoexist(self, T):
        return _H2ONaCl.cH2ONaCl_P_VaporLiquidHaliteCoexist(self, T)

    def HX_VaporLiquidHaliteCoexist(self, P):
        return _H2ONaCl.cH2ONaCl_HX_VaporLiquidHaliteCoexist(self, P)

    def Pmax_VaporLiquidHaliteCoexist(self):
        return _H2ONaCl.cH2ONaCl_Pmax_VaporLiquidHaliteCoexist(self)

    def T_VaporLiquidHaliteCoexist(self, P):
        return _H2ONaCl.cH2ONaCl_T_VaporLiquidHaliteCoexist(self, P)

    def writeVaporLiquidHaliteCoexistSurface(self, *args):
        return _H2ONaCl.cH2ONaCl_writeVaporLiquidHaliteCoexistSurface(self, *args)

    def X_VaporLiquidCoexistSurface_LiquidBranch(self, *args):
        return _H2ONaCl.cH2ONaCl_X_VaporLiquidCoexistSurface_LiquidBranch(self, *args)

    def X_VaporLiquidCoexistSurface_VaporBranch(self, *args):
        return _H2ONaCl.cH2ONaCl_X_VaporLiquidCoexistSurface_VaporBranch(self, *args)

    def writeVaporLiquidCoexistSurface(self, *args):
        return _H2ONaCl.cH2ONaCl_writeVaporLiquidCoexistSurface(self, *args)

    def T_star_V(self, T, P, X):
        return _H2ONaCl.cH2ONaCl_T_star_V(self, T, P, X)

    def V_extrapol(self, T, P, X):
        return _H2ONaCl.cH2ONaCl_V_extrapol(self, T, P, X)

    def Wt2Mol(self, X_wt):
        return _H2ONaCl.cH2ONaCl_Wt2Mol(self, X_wt)

    def Mol2Wt(self, *args):
        return _H2ONaCl.cH2ONaCl_Mol2Wt(self, *args)

    def Rho_Br_for_V_extrapol(self, T, P, X):
        return _H2ONaCl.cH2ONaCl_Rho_Br_for_V_extrapol(self, T, P, X)

    def Rho_brine(self, T, P, X):
        return _H2ONaCl.cH2ONaCl_Rho_brine(self, T, P, X)

    def findPhaseRegion(self, T, P, X_wt, Xl_all, Xv_all):
        return _H2ONaCl.cH2ONaCl_findPhaseRegion(self, T, P, X_wt, Xl_all, Xv_all)

    def writePhaseSurface_XHP(self, *args):
        return _H2ONaCl.cH2ONaCl_writePhaseSurface_XHP(self, *args)

# Register cH2ONaCl in _H2ONaCl:
_H2ONaCl.cH2ONaCl_swigregister(cH2ONaCl)
cvar = _H2ONaCl.cvar
PMIN = cvar.PMIN
PMAX = cvar.PMAX
TMIN = cvar.TMIN
TMAX = cvar.TMAX
TMIN_K = cvar.TMIN_K
TMAX_K = cvar.TMAX_K
TMIN_C = cvar.TMIN_C
TMAX_C = cvar.TMAX_C
XMIN = cvar.XMIN
XMAX = cvar.XMAX
HMAX = cvar.HMAX



