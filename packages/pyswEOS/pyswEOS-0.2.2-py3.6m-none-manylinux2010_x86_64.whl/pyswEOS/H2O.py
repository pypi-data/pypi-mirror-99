# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_H2O')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_H2O')
    _H2O = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_H2O', [dirname(__file__)])
        except ImportError:
            import _H2O
            return _H2O
        try:
            _mod = imp.load_module('_H2O', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _H2O = swig_import_helper()
    del swig_import_helper
else:
    import _H2O
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Table62(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Table62, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Table62, name)
    __repr__ = _swig_repr
    numCoeff = _H2O.Table62_numCoeff
    __swig_setmethods__["c"] = _H2O.Table62_c_set
    __swig_getmethods__["c"] = _H2O.Table62_c_get
    if _newclass:
        c = _swig_property(_H2O.Table62_c_get, _H2O.Table62_c_set)
    __swig_setmethods__["d"] = _H2O.Table62_d_set
    __swig_getmethods__["d"] = _H2O.Table62_d_get
    if _newclass:
        d = _swig_property(_H2O.Table62_d_get, _H2O.Table62_d_set)
    __swig_setmethods__["t"] = _H2O.Table62_t_set
    __swig_getmethods__["t"] = _H2O.Table62_t_get
    if _newclass:
        t = _swig_property(_H2O.Table62_t_get, _H2O.Table62_t_set)
    __swig_setmethods__["n"] = _H2O.Table62_n_set
    __swig_getmethods__["n"] = _H2O.Table62_n_get
    if _newclass:
        n = _swig_property(_H2O.Table62_n_get, _H2O.Table62_n_set)
    __swig_setmethods__["alpha"] = _H2O.Table62_alpha_set
    __swig_getmethods__["alpha"] = _H2O.Table62_alpha_get
    if _newclass:
        alpha = _swig_property(_H2O.Table62_alpha_get, _H2O.Table62_alpha_set)
    __swig_setmethods__["beta"] = _H2O.Table62_beta_set
    __swig_getmethods__["beta"] = _H2O.Table62_beta_get
    if _newclass:
        beta = _swig_property(_H2O.Table62_beta_get, _H2O.Table62_beta_set)
    __swig_setmethods__["gamma"] = _H2O.Table62_gamma_set
    __swig_getmethods__["gamma"] = _H2O.Table62_gamma_get
    if _newclass:
        gamma = _swig_property(_H2O.Table62_gamma_get, _H2O.Table62_gamma_set)
    __swig_setmethods__["epsilon"] = _H2O.Table62_epsilon_set
    __swig_getmethods__["epsilon"] = _H2O.Table62_epsilon_get
    if _newclass:
        epsilon = _swig_property(_H2O.Table62_epsilon_get, _H2O.Table62_epsilon_set)
    __swig_setmethods__["a"] = _H2O.Table62_a_set
    __swig_getmethods__["a"] = _H2O.Table62_a_get
    if _newclass:
        a = _swig_property(_H2O.Table62_a_get, _H2O.Table62_a_set)
    __swig_setmethods__["b"] = _H2O.Table62_b_set
    __swig_getmethods__["b"] = _H2O.Table62_b_get
    if _newclass:
        b = _swig_property(_H2O.Table62_b_get, _H2O.Table62_b_set)
    __swig_setmethods__["A"] = _H2O.Table62_A_set
    __swig_getmethods__["A"] = _H2O.Table62_A_get
    if _newclass:
        A = _swig_property(_H2O.Table62_A_get, _H2O.Table62_A_set)
    __swig_setmethods__["B"] = _H2O.Table62_B_set
    __swig_getmethods__["B"] = _H2O.Table62_B_get
    if _newclass:
        B = _swig_property(_H2O.Table62_B_get, _H2O.Table62_B_set)
    __swig_setmethods__["C"] = _H2O.Table62_C_set
    __swig_getmethods__["C"] = _H2O.Table62_C_get
    if _newclass:
        C = _swig_property(_H2O.Table62_C_get, _H2O.Table62_C_set)
    __swig_setmethods__["D"] = _H2O.Table62_D_set
    __swig_getmethods__["D"] = _H2O.Table62_D_get
    if _newclass:
        D = _swig_property(_H2O.Table62_D_get, _H2O.Table62_D_set)

    def __init__(self):
        this = _H2O.new_Table62()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _H2O.delete_Table62
    __del__ = lambda self: None
Table62_swigregister = _H2O.Table62_swigregister
Table62_swigregister(Table62)

class Table61(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Table61, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Table61, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n0"] = _H2O.Table61_n0_set
    __swig_getmethods__["n0"] = _H2O.Table61_n0_get
    if _newclass:
        n0 = _swig_property(_H2O.Table61_n0_get, _H2O.Table61_n0_set)
    __swig_setmethods__["gamma0"] = _H2O.Table61_gamma0_set
    __swig_getmethods__["gamma0"] = _H2O.Table61_gamma0_get
    if _newclass:
        gamma0 = _swig_property(_H2O.Table61_gamma0_get, _H2O.Table61_gamma0_set)

    def __init__(self):
        this = _H2O.new_Table61()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _H2O.delete_Table61
    __del__ = lambda self: None
Table61_swigregister = _H2O.Table61_swigregister
Table61_swigregister(Table61)

iceI = _H2O.iceI
iceIII = _H2O.iceIII
iceV = _H2O.iceV
iceVI = _H2O.iceVI
iceVII = _H2O.iceVII
class cH2O(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cH2O, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cH2O, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _H2O.new_cH2O()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _H2O.delete_cH2O
    __del__ = lambda self: None

    def P_Boiling(self, T):
        return _H2O.cH2O_P_Boiling(self, T)

    def T_Boiling(self, P):
        return _H2O.cH2O_T_Boiling(self, P)

    def Rho_Liquid_Saturated(self, T):
        return _H2O.cH2O_Rho_Liquid_Saturated(self, T)

    def Rho_Vapor_Saturated(self, T):
        return _H2O.cH2O_Rho_Vapor_Saturated(self, T)

    def Rho(self, T, P):
        return _H2O.cH2O_Rho(self, T, P)

    def Phi_r_delta(self, delta, tau):
        return _H2O.cH2O_Phi_r_delta(self, delta, tau)

    def Phi_o_tau(self, delta, tau):
        return _H2O.cH2O_Phi_o_tau(self, delta, tau)

    def Phi_r_tau(self, delta, tau):
        return _H2O.cH2O_Phi_r_tau(self, delta, tau)

    def Pressure_T_Rho(self, T, Rho):
        return _H2O.cH2O_Pressure_T_Rho(self, T, Rho)

    def SublimationCurve(self, T):
        return _H2O.cH2O_SublimationCurve(self, T)

    def BoilingCurve(self, T):
        return _H2O.cH2O_BoilingCurve(self, T)

    def MeltingCurve(self, T, isIceI=False):
        return _H2O.cH2O_MeltingCurve(self, T, isIceI)

    def SpecificEnthalpy_T_Rho(self, T, Rho):
        return _H2O.cH2O_SpecificEnthalpy_T_Rho(self, T, Rho)

    def SpecificEnthalpy(self, T, P):
        return _H2O.cH2O_SpecificEnthalpy(self, T, P)
cH2O_swigregister = _H2O.cH2O_swigregister
cH2O_swigregister(cH2O)
cvar = _H2O.cvar
PMIN = cvar.PMIN
PMAX = cvar.PMAX
TMIN = cvar.TMIN
TMAX = cvar.TMAX
T_Critic_K = cvar.T_Critic_K
P_Critic = cvar.P_Critic
T_Critic = cvar.T_Critic
Rho_Critic = cvar.Rho_Critic
MolarMass = cvar.MolarMass
T_Triple_K = cvar.T_Triple_K
T_Triple = cvar.T_Triple
P_Triple = cvar.P_Triple
Rho_Triple_liquid = cvar.Rho_Triple_liquid
Rho_Triple_vapor = cvar.Rho_Triple_vapor
T_K_ice_min = cvar.T_K_ice_min
T_K_ice_max = cvar.T_K_ice_max
R_const = cvar.R_const

# This file is compatible with both classic and new-style classes.


