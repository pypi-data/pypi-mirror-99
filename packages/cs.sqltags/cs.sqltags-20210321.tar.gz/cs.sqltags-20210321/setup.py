#!/usr/bin/env python
from setuptools import setup
setup(
  name = 'cs.sqltags',
  author = 'Cameron Simpson',
  author_email = 'cs@cskk.id.au',
  version = '20210321',
  url = 'https://bitbucket.org/cameron_simpson/css/commits/all',
  description =
    ('Simple SQL based tagging and the associated `sqltags` command line script, '    
 'supporting both tagged named objects and tagged timestamped log entries.'),
  long_description =
    ('Simple SQL based tagging\n'    
 'and the associated `sqltags` command line script,\n'    
 'supporting both tagged named objects and tagged timestamped log entries.\n'    
 '\n'    
 '*Latest release 20210321*:\n'    
 'Drop logic now merged with cs.sqlalchemy_utils, use the new default session '    
 'stuff.\n'    
 '\n'    
 'Compared to `cs.fstags` and its associated `fstags` command,\n'    
 'this is oriented towards large numbers of items\n'    
 'not naturally associated with filesystem objects.\n'    
 'My initial use case is an activity log,\n'    
 "but I'm probably going to use it for ontologies as well.\n"    
 '\n'    
 'Many basic tasks can be performed with the `sqltags` command line utility,\n'    
 'documented under the `SQLTagsCommand` class below.\n'    
 '\n'    
 '## Class '    
 '`BaseSQLTagsCommand(cs.cmdutils.BaseCommand,cs.tagset.TagsCommandMixin)`\n'    
 '\n'    
 'Common features for commands oriented around an `SQLTags` database.\n'    
 '\n'    
 '### `BaseSQLTagsCommand.TAGSETS_CLASS`\n'    
 '\n'    
 '### `BaseSQLTagsCommand.TAGSET_CRITERION_CLASS`\n'    
 '\n'    
 '### `BaseSQLTagsCommand.TAG_BASED_TEST_CLASS`\n'    
 '\n'    
 '### Method `BaseSQLTagsCommand.apply_defaults(self)`\n'    
 '\n'    
 'Set up the default values in `options`.\n'    
 '\n'    
 '### Method `BaseSQLTagsCommand.apply_opt(self, opt, val)`\n'    
 '\n'    
 'Apply a command line option.\n'    
 '\n'    
 '### Method `BaseSQLTagsCommand.cmd_edit(self, argv)`\n'    
 '\n'    
 'Usage: edit criteria...\n'    
 'Edit the entities specified by criteria.\n'    
 '\n'    
 '### Method `BaseSQLTagsCommand.cmd_export(self, argv)`\n'    
 '\n'    
 'Usage: {cmd} {{tag[=value]|-tag}}...\n'    
 'Export entities matching all the constraints.\n'    
 'The output format is CSV data with the following columns:\n'    
 '* `unixtime`: the entity unixtime, a float\n'    
 '* `id`: the entity database row id, an integer\n'    
 '* `name`: the entity name\n'    
 '* `tags`: a column per `Tag`\n'    
 '\n'    
 '### Method `BaseSQLTagsCommand.cmd_find(self, argv)`\n'    
 '\n'    
 'Usage: {cmd} [-o output_format] {{tag[=value]|-tag}}...\n'    
 'List entities matching all the constraints.\n'    
 '-o output_format\n'    
 '            Use output_format as a Python format string to lay out\n'    
 '            the listing.\n'    
 '            Default: {FIND_OUTPUT_FORMAT_DEFAULT}\n'    
 '\n'    
 '### Method `BaseSQLTagsCommand.cmd_import(self, argv)`\n'    
 '\n'    
 'Usage: {cmd} [{{-u|--update}}] {{-|srcpath}}...\n'    
 '  Import CSV data in the format emitted by "export".\n'    
 '  Each argument is a file path or "-", indicating standard input.\n'    
 '  -u, --update  If a named entity already exists then update its tags.\n'    
 '                Otherwise this will be seen as a conflict\n'    
 '                and the import aborted.\n'    
 '\n'    
 'TODO: should this be a transaction so that an import is all or nothing?\n'    
 '\n'    
 '### Method `BaseSQLTagsCommand.cmd_init(self, argv)`\n'    
 '\n'    
 'Usage: {cmd}\n'    
 'Initialise the database.\n'    
 'This includes defining the schema and making the root metanode.\n'    
 '\n'    
 '### Method `BaseSQLTagsCommand.cmd_log(self, argv)`\n'    
 '\n'    
 'Record a log entry.\n'    
 '\n'    
 'Usage: {cmd} [-c category,...] [-d when] [-D strptime] {{-|headline}} '    
 '[tags...]\n'    
 '  Record entries into the database.\n'    
 "  If headline is '-', read headlines from standard input.\n"    
 '  -c categories\n'    
 '    Specify the categories for this log entry.\n'    
 '    The default is to recognise a leading CAT,CAT,...: prefix.\n'    
 '  -d when\n'    
 '    Use when, an ISO8601 date, as the log entry timestamp.\n'    
 '  -D strptime\n'    
 '    Read the time from the start of the headline\n'    
 '    according to the provided strptime specification.\n'    
 '\n'    
 '### Method `BaseSQLTagsCommand.cmd_tag(self, argv)`\n'    
 '\n'    
 'Usage: {cmd} {{-|entity-name}} {{tag[=value]|-tag}}...\n'    
 'Tag an entity with multiple tags.\n'    
 'With the form "-tag", remove that tag from the direct tags.\n'    
 'A entity-name named "-" indicates that entity-names should\n'    
 'be read from the standard input.\n'    
 '\n'    
 '### Method `BaseSQLTagsCommand.parse_tagset_criterion(arg, '    
 'tag_based_test_class=None)`\n'    
 '\n'    
 'Parse tag criteria from `argv`.\n'    
 '\n'    
 'The criteria may be either:\n'    
 '* an integer specifying a `Tag` id\n'    
 '* a sequence of tag criteria\n'    
 '\n'    
 '### Method `BaseSQLTagsCommand.run_context(self)`\n'    
 '\n'    
 'Prepare the `SQLTags` around each command invocation.\n'    
 '\n'    
 '## Function `glob2like(glob: str) -> str`\n'    
 '\n'    
 'Convert a filename glob to an SQL LIKE pattern.\n'    
 '\n'    
 '## Function `main(argv=None)`\n'    
 '\n'    
 'Command line mode.\n'    
 '\n'    
 "## Function `prefix2like(prefix: str, esc='\\\\') -> str`\n"    
 '\n'    
 'Convert a prefix string to an SQL LIKE pattern.\n'    
 '\n'    
 '## Class `SQLParameters(SQLParameters,builtins.tuple)`\n'    
 '\n'    
 'The parameters required for constructing queries\n'    
 'or extending queries with JOINs.\n'    
 '\n'    
 'Attributes:\n'    
 '* `criterion`: the source criterion, usually an `SQTCriterion` subinstance\n'    
 '* `alias`: an alias of the source table for use in queries\n'    
 '* `entity_id_column`: the `entities` id column,\n'    
 '  `alias.id` if the alias is of `entities`,\n'    
 '  `alias.entity_id` if the alias is of `tags`\n'    
 '* `constraint`: a filter query based on `alias`\n'    
 '\n'    
 '## Class '    
 '`SQLTagBasedTest(cs.tagset.TagBasedTest,cs.tagset.TagBasedTest,builtins.tuple,SQTCriterion,cs.tagset.TagSetCriterion)`\n'    
 '\n'    
 'A `cs.tagset.TagBasedTest` extended with a `.sql_parameters` method.\n'    
 '\n'    
 '### Method `SQLTagBasedTest.match_tagged_entity(self, te: cs.tagset.TagSet) '    
 '-> bool`\n'    
 '\n'    
 'Match this criterion against `te`.\n'    
 '\n'    
 '## Class `SQLTagProxies`\n'    
 '\n'    
 'A proxy for the tags supporting Python comparison => `SQLParameters`.\n'    
 '\n'    
 'Example:\n'    
 '\n'    
 "    sqltags.tags.dotted.name.here == 'foo'\n"    
 '\n'    
 '## Class `SQLTagProxy`\n'    
 '\n'    
 'An object based on a `Tag` name\n'    
 'which produces an `SQLParameters` when compared with some value.\n'    
 '\n'    
 'Example:\n'    
 '\n'    
 "    >>> sqltags = SQLTags('sqlite://')\n"    
 '    >>> sqltags.init()\n'    
 "    >>> # make a SQLParameters for testing the tag 'name.thing'==5\n"    
 '    >>> sqlp = sqltags.tags.name.thing == 5\n'    
 '    >>> str(sqlp.constraint)\n'    
 "    'tags_1.name = :name_1 AND tags_1.float_value = :float_value_1'\n"    
 "    >>> sqlp = sqltags.tags.name.thing == 'foo'\n"    
 '    >>> str(sqlp.constraint)\n'    
 "    'tags_1.name = :name_1 AND tags_1.string_value = :string_value_1'\n"    
 '\n'    
 '### Method `SQLTagProxy.__eq__(self, other, alias=None) -> '    
 'cs.sqltags.SQLParameters`\n'    
 '\n'    
 'Return an SQL `=` test `SQLParameters`.\n'    
 '\n'    
 'Example:\n'    
 '\n'    
 "    >>> sqlp = SQLTags('sqlite://').tags.name.thing == 'foo'\n"    
 '    >>> str(sqlp.constraint)\n'    
 "    'tags_1.name = :name_1 AND tags_1.string_value = :string_value_1'\n"    
 '\n'    
 '### Method `SQLTagProxy.__ge__(self, other)`\n'    
 '\n'    
 'Return an SQL `>=` test `SQLParameters`.\n'    
 '\n'    
 'Example:\n'    
 '\n'    
 "    >>> sqlp = SQLTags('sqlite://').tags.name.thing >= 'foo'\n"    
 '    >>> str(sqlp.constraint)\n'    
 "    'tags_1.name = :name_1 AND tags_1.string_value >= :string_value_1'\n"    
 '\n'    
 '### Method `SQLTagProxy.__getattr__(self, sub_tag_name)`\n'    
 '\n'    
 'Magic access to dotted tag names: produce a new `SQLTagProxy` from ourself.\n'    
 '\n'    
 '### Method `SQLTagProxy.__gt__(self, other)`\n'    
 '\n'    
 'Return an SQL `>` test `SQLParameters`.\n'    
 '\n'    
 'Example:\n'    
 '\n'    
 "    >>> sqlp = SQLTags('sqlite://').tags.name.thing > 'foo'\n"    
 '    >>> str(sqlp.constraint)\n'    
 "    'tags_1.name = :name_1 AND tags_1.string_value > :string_value_1'\n"    
 '\n'    
 '### Method `SQLTagProxy.__le__(self, other)`\n'    
 '\n'    
 'Return an SQL `<=` test `SQLParameters`.\n'    
 '\n'    
 'Example:\n'    
 '\n'    
 "    >>> sqlp = SQLTags('sqlite://').tags.name.thing <= 'foo'\n"    
 '    >>> str(sqlp.constraint)\n'    
 "    'tags_1.name = :name_1 AND tags_1.string_value <= :string_value_1'\n"    
 '\n'    
 '### Method `SQLTagProxy.__lt__(self, other)`\n'    
 '\n'    
 'Return an SQL `<` test `SQLParameters`.\n'    
 '\n'    
 'Example:\n'    
 '\n'    
 "    >>> sqlp = SQLTags('sqlite://').tags.name.thing < 'foo'\n"    
 '    >>> str(sqlp.constraint)\n'    
 "    'tags_1.name = :name_1 AND tags_1.string_value < :string_value_1'\n"    
 '\n'    
 '### Method `SQLTagProxy.__ne__(self, other, alias=None) -> '    
 'cs.sqltags.SQLParameters`\n'    
 '\n'    
 'Return an SQL `<>` test `SQLParameters`.\n'    
 '\n'    
 'Example:\n'    
 '\n'    
 "    >>> sqlp = SQLTags('sqlite://').tags.name.thing != 'foo'\n"    
 '    >>> str(sqlp.constraint)\n'    
 "    'tags_1.name = :name_1 AND tags_1.string_value != :string_value_1'\n"    
 '\n'    
 '### Method `SQLTagProxy.by_op_text(self, op_text, other, alias=None)`\n'    
 '\n'    
 "Return an `SQLParameters` based on the comparison's text representation.\n"    
 '\n'    
 'Parameters:\n'    
 '* `op_text`: the comparsion operation text, one of:\n'    
 "  `'='`, `'<='`, `'<'`, `'>='`, `'>'`, `'~'`.\n"    
 '* `other`: the other value for the comparison,\n'    
 '  used to infer the SQL column name\n'    
 '  and kept to provide the SQL value parameter\n'    
 '* `alias`: optional SQLAlchemy table alias\n'    
 '\n'    
 '### Method `SQLTagProxy.likeglob(self, globptn: str) -> '    
 'cs.sqltags.SQLParameters`\n'    
 '\n'    
 'Return an SQL LIKE test approximating a glob as an `SQLParameters`.\n'    
 '\n'    
 'Example:\n'    
 '\n'    
 "    >>> sqlp = SQLTags('sqlite://').tags.name.thing.likeglob('foo*')\n"    
 '    >>> str(sqlp.constraint)\n'    
 '    "tags_1.name = :name_1 AND tags_1.string_value LIKE :string_value_1 '    
 'ESCAPE \'\\\\\'"\n'    
 '\n'    
 '### Method `SQLTagProxy.startswith(self, prefix: str) -> '    
 'cs.sqltags.SQLParameters`\n'    
 '\n'    
 'Return an SQL LIKE prefix test `SQLParameters`.\n'    
 '\n'    
 'Example:\n'    
 '\n'    
 "    >>> sqlp = SQLTags('sqlite://').tags.name.thing.startswith('foo')\n"    
 '    >>> str(sqlp.constraint)\n'    
 '    "tags_1.name = :name_1 AND tags_1.string_value LIKE :string_value_1 '    
 'ESCAPE \'\\\\\'"\n'    
 '\n'    
 '## Class `SQLTags(cs.tagset.TagSets,cs.resources.MultiOpenMixin)`\n'    
 '\n'    
 'A class using an SQL database to store its `TagSet`s.\n'    
 '\n'    
 '### `SQLTags.TagSetClass`\n'    
 '\n'    
 '### Method `SQLTags.__getitem__(self, *a, **kw)`\n'    
 '\n'    
 'Return an `SQLTagSet` for `index` (an `int` or `str`).\n'    
 '\n'    
 '### Method `SQLTags.__setitem__(self, *a, **kw)`\n'    
 '\n'    
 'Dummy `__setitem__` which checks `te` against the db by type\n'    
 'because the factory inserts it into the database.\n'    
 '\n'    
 '### Method `SQLTags.db_entity(self, index)`\n'    
 '\n'    
 'Return the `Entities` instance for `index` or `None`.\n'    
 '\n'    
 '### Method `SQLTags.db_session(self, *, new=False, session=None)`\n'    
 '\n'    
 'Context manager to obtain a db session if required,\n'    
 'just a shim for `self.orm.session()`.\n'    
 '\n'    
 '### Property `SQLTags.default_db_session`\n'    
 '\n'    
 'The current per-`Thread` SQLAlchemy Session.\n'    
 '\n'    
 "### Method `SQLTags.default_factory(self, name: [<class 'str'>, None], *, "    
 'unixtime=None, tags=None)`\n'    
 '\n'    
 'Fetch or create an `SQLTagSet` for `name`.\n'    
 '\n'    
 'Note that `name` may be `None` to create a new "log" entry.\n'    
 '\n'    
 '### Method `SQLTags.find(self, criteria)`\n'    
 '\n'    
 'Generate and run a query derived from `criteria`\n'    
 'yielding `SQLTagSet` instances.\n'    
 '\n'    
 'Parameters:\n'    
 '* `criteria`: an iterable of search criteria\n'    
 '  which should be `SQTCriterion`s\n'    
 '  or a `str` suitable for `SQTCriterion.from_str`.\n'    
 '  A string may also be supplied, suitable for `SQTCriterion.from_str`.\n'    
 '\n'    
 '### Method `SQLTags.flush(self)`\n'    
 '\n'    
 'Flush the current session state to the database.\n'    
 '\n'    
 '### Method `SQLTags.get(self, index, default=None)`\n'    
 '\n'    
 'Return an `SQLTagSet` matching `index`, or `None` if there is no such '    
 'entity.\n'    
 '\n'    
 '### Method `SQLTags.import_csv_file(self, f, *, update_mode=False)`\n'    
 '\n'    
 'Import CSV data from the file `f`.\n'    
 '\n'    
 'If `update_mode` is true\n'    
 'named records which already exist will update from the data,\n'    
 'otherwise the conflict will raise a `ValueError`.\n'    
 '\n'    
 '### Method `SQLTags.import_tagged_entity(self, te, *, update_mode=False) -> '    
 'None`\n'    
 '\n'    
 'Import the `TagSet` `te`.\n'    
 '\n'    
 'This updates the database with the contents of the supplied `TagSet`,\n'    
 'which has no inherent relationship to the database.\n'    
 '\n'    
 'If `update_mode` is true\n'    
 'named records which already exist will update from `te`,\n'    
 'otherwise the conflict will raise a `ValueError`.\n'    
 '\n'    
 '### Method `SQLTags.infer_db_url(envvar=None, default_path=None)`\n'    
 '\n'    
 'Infer the database URL.\n'    
 '\n'    
 'Parameters:\n'    
 '* `envvar`: environment variable to specify a default,\n'    
 '  default from `DBURL_ENVVAR` (`SQLTAGS_DBURL`).\n'    
 '\n'    
 '### Method `SQLTags.init(self)`\n'    
 '\n'    
 'Initialise the database.\n'    
 '\n'    
 '### Method `SQLTags.items(self, *, prefix=None)`\n'    
 '\n'    
 'Return an iterable of `(tagset_name,TagSet)`.\n'    
 'Excludes unnamed `TagSet`s.\n'    
 '\n'    
 'Constrain the names to those starting with `prefix`\n'    
 'if not `None`.\n'    
 '\n'    
 '### Method `SQLTags.keys(self, *, prefix=None)`\n'    
 '\n'    
 'Yield all the nonNULL names.\n'    
 '\n'    
 'Constrain the names to those starting with `prefix`\n'    
 'if not `None`.\n'    
 '\n'    
 '### Property `SQLTags.metanode`\n'    
 '\n'    
 'The metadata node.\n'    
 '\n'    
 '### Method `SQLTags.values(self, *, prefix=None)`\n'    
 '\n'    
 'Return an iterable of the named `TagSet`s.\n'    
 'Excludes unnamed `TagSet`s.\n'    
 '\n'    
 'Constrain the names to those starting with `prefix`\n'    
 'if not `None`.\n'    
 '\n'    
 '## Class '    
 '`SQLTagsCommand(BaseSQLTagsCommand,cs.cmdutils.BaseCommand,cs.tagset.TagsCommandMixin)`\n'    
 '\n'    
 '`sqltags` main command line utility.\n'    
 '\n'    
 '\n'    
 'Command line usage:\n'    
 '\n'    
 '    Usage: SQLTagsCommand [-f db_url] subcommand [...]\n'    
 '      -f db_url SQLAlchemy database URL or filename.\n'    
 '                Default from $SQLTAGS_DBURL (default '    
 "'~/var/sqltags.sqlite').\n"    
 '      Subcommands:\n'    
 '        edit criteria...\n'    
 '          Edit the entities specified by criteria.\n'    
 '        export {tag[=value]|-tag}...\n'    
 '          Export entities matching all the constraints.\n'    
 '          The output format is CSV data with the following columns:\n'    
 '          * `unixtime`: the entity unixtime, a float\n'    
 '          * `id`: the entity database row id, an integer\n'    
 '          * `name`: the entity name\n'    
 '          * `tags`: a column per `Tag`\n'    
 '        find [-o output_format] {tag[=value]|-tag}...\n'    
 '          List entities matching all the constraints.\n'    
 '          -o output_format\n'    
 '                      Use output_format as a Python format string to lay '    
 'out\n'    
 '                      the listing.\n'    
 '                      Default: {entity.isodatetime} {headline}\n'    
 '        help [subcommand-names...]\n'    
 '          Print the help for the named subcommands,\n'    
 '          or for all subcommands if no names are specified.\n'    
 '        import [{-u|--update}] {-|srcpath}...\n'    
 '          Import CSV data in the format emitted by "export".\n'    
 '          Each argument is a file path or "-", indicating standard input.\n'    
 '          -u, --update  If a named entity already exists then update its '    
 'tags.\n'    
 '                        Otherwise this will be seen as a conflict\n'    
 '                        and the import aborted.\n'    
 '        init\n'    
 '          Initialise the database.\n'    
 '          This includes defining the schema and making the root metanode.\n'    
 '        log [-c category,...] [-d when] [-D strptime] {-|headline} '    
 '[tags...]\n'    
 '          Record entries into the database.\n'    
 "          If headline is '-', read headlines from standard input.\n"    
 '          -c categories\n'    
 '            Specify the categories for this log entry.\n'    
 '            The default is to recognise a leading CAT,CAT,...: prefix.\n'    
 '          -d when\n'    
 '            Use when, an ISO8601 date, as the log entry timestamp.\n'    
 '          -D strptime\n'    
 '            Read the time from the start of the headline\n'    
 '            according to the provided strptime specification.\n'    
 '        ns entity-names...\n'    
 '          List entities and their tags.\n'    
 '        tag {-|entity-name} {tag[=value]|-tag}...\n'    
 '          Tag an entity with multiple tags.\n'    
 '          With the form "-tag", remove that tag from the direct tags.\n'    
 '          A entity-name named "-" indicates that entity-names should\n'    
 '          be read from the standard input.\n'    
 '\n'    
 '### Method `SQLTagsCommand.cmd_ns(self, argv)`\n'    
 '\n'    
 'Usage: {cmd} entity-names...\n'    
 'List entities and their tags.\n'    
 '\n'    
 '## Class '    
 '`SQLTagSet(cs.obj.SingletonMixin,cs.tagset.TagSet,builtins.dict,cs.lex.FormatableMixin,cs.mappings.AttrableMappingMixin)`\n'    
 '\n'    
 'A singleton `TagSet` attached to an `SQLTags` instance.\n'    
 '\n'    
 '### Method `SQLTagSet.add_db_tag(self, *a, **kw)`\n'    
 '\n'    
 'Add a tag to the database.\n'    
 '\n'    
 "### Method `SQLTagSet.child_tagsets(self, tag_name='parent')`\n"    
 '\n'    
 'Return the child `TagSet`s as defined by their parent `Tag`,\n'    
 "by default the `Tag` named `'parent'`.\n"    
 '\n'    
 '### Method `SQLTagSet.db_session(self, *, session=None)`\n'    
 '\n'    
 'Context manager to obtain a new session if required,\n'    
 'just a shim for `self.sqltags.db_session`.\n'    
 '\n'    
 '### Method `SQLTagSet.discard(self, name, value=None, *a, **kw)`\n'    
 '\n'    
 'pylint: disable=keyword-arg-before-vararg\n'    
 '\n'    
 '### Method `SQLTagSet.discard_db_tag(self, tag_name, value=None)`\n'    
 '\n'    
 'Discard a tag from the database.\n'    
 '\n'    
 '### Property `SQLTagSet.name`\n'    
 '\n'    
 'Return the `.name`.\n'    
 '\n'    
 "### Method `SQLTagSet.parent_tagset(self, tag_name='parent')`\n"    
 '\n'    
 'Return the parent `TagSet` as defined by a `Tag`,\n'    
 "by default the `Tag` named `'parent'`.\n"    
 '\n'    
 '### Method `SQLTagSet.set(self, name, value=None, *a, **kw)`\n'    
 '\n'    
 'pylint: disable=keyword-arg-before-vararg\n'    
 '\n'    
 '## Class '    
 '`SQLTagsORM(cs.sqlalchemy_utils.ORM,cs.resources.MultiOpenMixin,cs.dateutils.UNIXTimeMixin)`\n'    
 '\n'    
 'The ORM for an `SQLTags`.\n'    
 '\n'    
 '### Method `SQLTagsORM.declare_schema(self)`\n'    
 '\n'    
 'Define the database schema / ORM mapping.\n'    
 '\n'    
 '### Method `SQLTagsORM.define_schema(self)`\n'    
 '\n'    
 'Instantiate the schema and define the root metanode.\n'    
 '\n'    
 '### Method `SQLTagsORM.prepare_metanode(self, *, session)`\n'    
 '\n'    
 'Ensure row id 0, the metanode, exists.\n'    
 '\n'    
 '### Method `SQLTagsORM.search(self, *a, **kw)`\n'    
 '\n'    
 'Construct a query to match `Entity` rows\n'    
 'matching the supplied `criteria` iterable.\n'    
 'Return an SQLAlchemy `Query`.\n'    
 '\n'    
 'The `mode` parameter has the following values:\n'    
 "* `'id'`: the query only yields entity ids\n"    
 "* `'entity'`: (default) the query yields entities without tags\n"    
 "* `'tagged'`: (default) the query yields entities left\n"    
 'outer joined with their matching tags\n'    
 '\n'    
 "Note that the `'tagged'` result produces multiple rows for any\n"    
 'entity with multiple tags, and that this requires the caller to\n'    
 'fold entities with multiple tags together.\n'    
 '\n'    
 '*Note*:\n'    
 'due to implementation limitations\n'    
 'the SQL query itself may not apply all the criteria,\n'    
 'so every criterion must still be applied\n'    
 'to the results\n'    
 'using its `.match_entity` method.\n'    
 '\n'    
 'If `name` is omitted or `None` the query will match log entities\n'    
 'otherwise the entity with the specified `name`.\n'    
 '\n'    
 'The `criteria` should be an iterable of `SQTCriterion` instances\n'    
 'used to construct the query.\n'    
 '\n'    
 '## Class `SQTCriterion(cs.tagset.TagSetCriterion)`\n'    
 '\n'    
 'Subclass of `TagSetCriterion` requiring an `.sql_parameters` method\n'    
 'which returns an `SQLParameters` providing the information required\n'    
 'to construct an sqlalchemy query.\n'    
 'It also resets `.CRITERION_PARSE_CLASSES`, which will pick up\n'    
 'the SQL capable criterion classes below.\n'    
 '\n'    
 '### `SQTCriterion.TAG_BASED_TEST_CLASS`\n'    
 '\n'    
 '### Method `SQTCriterion.match_tagged_entity(self, te: cs.tagset.TagSet) -> '    
 'bool`\n'    
 '\n'    
 'Perform the criterion test on the Python object directly.\n'    
 'This is used at the end of a query to implement tests which\n'    
 'cannot be sufficiently implemented in SQL.\n'    
 'If `self.SQL_COMPLETE` it is not necessary to call this method.\n'    
 '\n'    
 '### Method `SQTCriterion.sql_parameters(self, orm) -> '    
 'cs.sqltags.SQLParameters`\n'    
 '\n'    
 'Subclasses must return am `SQLParameters` instance\n'    
 'parameterising the SQL queries that follow.\n'    
 '\n'    
 '## Class `SQTEntityIdTest(SQTCriterion,cs.tagset.TagSetCriterion)`\n'    
 '\n'    
 'A test on `entity.id`.\n'    
 '\n'    
 '### Method `SQTEntityIdTest.match_tagged_entity(self, te: cs.tagset.TagSet) '    
 '-> bool`\n'    
 '\n'    
 'Test the `TagSet` `te` against `self.entity_ids`.\n'    
 '\n'    
 '### Method `SQTEntityIdTest.parse(s, offset=0, delim=None)`\n'    
 '\n'    
 'Parse a decimal entity id from `s`.\n'    
 '\n'    
 '## Function `verbose(msg, *a)`\n'    
 '\n'    
 'Emit message if in verbose mode.\n'    
 '\n'    
 '# Release Log\n'    
 '\n'    
 '\n'    
 '\n'    
 '*Release 20210321*:\n'    
 'Drop logic now merged with cs.sqlalchemy_utils, use the new default session '    
 'stuff.\n'    
 '\n'    
 '*Release 20210306.1*:\n'    
 'Docstring updates.\n'    
 '\n'    
 '*Release 20210306*:\n'    
 'Initial release.'),
  classifiers = ['Programming Language :: Python', 'Programming Language :: Python :: 3', 'Development Status :: 4 - Beta', 'Intended Audience :: Developers', 'Operating System :: OS Independent', 'Topic :: Software Development :: Libraries :: Python Modules', 'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)'],
  entry_points = {'console_scripts': ['sqltags = cs.sqltags:main']},
  install_requires = ['cs.cmdutils', 'cs.context', 'cs.dateutils', 'cs.deco', 'cs.lex', 'cs.logutils', 'cs.obj', 'cs.pfx', 'cs.sqlalchemy_utils>=20210321', 'cs.tagset', 'cs.threads>=20201025', 'cs.upd', 'icontract', 'sqlalchemy', 'typeguard'],
  keywords = ['python3'],
  license = 'GNU General Public License v3 or later (GPLv3+)',
  long_description_content_type = 'text/markdown',
  package_dir = {'': 'lib/python'},
  py_modules = ['cs.sqltags'],
)
