{% from 'tf1x_utils.j2' import build_output_dict, check_input_vars %}
{% from 'controlflow.j2' import indented_if %}


{% macro layer_tf2x_grayscale(layer_spec, graph_spec) %}
class {{layer_spec.sanitized_name}}Keras(tf.keras.layers.Layer):
    def call(self, inputs, training=True):
        """ Takes a tensor and change it to a grayscale """
        {{ check_input_vars(layer_spec, ['input'])|indent(width=8)}}                
        input_ = inputs['input']

        channels = input_.get_shape().as_list()[-1]

        # Only grayscale if tensor is rank 3 or above
        if channels % 3 == 0:
            if channels > 3:
                channel_splits = tf.split(input_, int(channels/3), -1)
                images = []

                for channel_split in channel_splits:
                    images.append(tf.image.rgb_to_grayscale(channel_split))
                
                y = tf.squeeze(tf.stack(images, -1), -2)
            else:
                y = tf.image.rgb_to_grayscale(input_)
        else:
            y = input_


        {{ build_output_dict(
            'self._outputs',
            {'output': 'y', 'preview': 'y'},
            ['output', 'preview'])|indent(width=8)
        }}
        return self._outputs
	
    def get_config(self):
        """Any variables belonging to this layer that should be rendered in the frontend.
        
        Returns:
            A dictionary with tensor names for keys and picklable for values.
        """
        return {}
        

class {{layer_spec.sanitized_name}}(Tf2xLayer):
    def __init__(self):
        super().__init__(
            keras_class={{layer_spec.sanitized_name}}Keras
        )        
    
{% endmacro %}

