{% from 'tf1x_utils.j2' import build_output_dict, check_input_vars %}
{% from 'controlflow.j2' import indented_if %}


{% macro layer_tf2x_reshape(layer_spec, graph_spec) %}
class {{layer_spec.sanitized_name}}Keras(tf.keras.layers.Layer):
    def call(self, inputs, training=True):
        """ Takes a tensor and one-hot encodes it """
        {{ check_input_vars(layer_spec, ['input'])|indent(width=8)}}                
        input_ = inputs['input']
        output = self.reshape(input_)
        {% call indented_if(len(layer_spec.shape) == len(layer_spec.permutation)) %}
            output = self.permute(output)
        {% endcall %}

        {{ build_output_dict(
            'self._outputs',
            {'output': 'output', 'preview': 'output'},
            ['output', 'preview'])|indent(width=8)
        }}
        return self._outputs

    def build(self, input_shape):
        """ Called by the Keras framework upon the first invocation of the call method """
	{% call indented_if(len(layer_spec.shape) == len(layer_spec.permutation)) %}
            self.permute = tf.keras.layers.Permute(dims={{layer_spec.get_permutation(indexing='one')}})
	{% endcall %}
        self.reshape = tf.keras.layers.Reshape(target_shape={{layer_spec.get_shape()}})
	
    def get_config(self):
        """Any variables belonging to this layer that should be rendered in the frontend.
        
        Returns:
            A dictionary with tensor names for keys and picklable for values.
        """
        return {}
        

class {{layer_spec.sanitized_name}}(Tf2xLayer):
    def __init__(self):
        super().__init__(
            keras_class={{layer_spec.sanitized_name}}Keras
        )        
    
{% endmacro %}

