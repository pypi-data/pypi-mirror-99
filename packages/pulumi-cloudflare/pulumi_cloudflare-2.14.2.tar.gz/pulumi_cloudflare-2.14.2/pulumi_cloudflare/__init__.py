# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .access_application import *
from .access_group import *
from .access_identity_provider import *
from .access_mutual_tls_certificate import *
from .access_policy import *
from .access_rule import *
from .access_service_token import *
from .account_member import *
from .api_token import *
from .argo import *
from .argo_tunnel import *
from .authenticated_origin_pulls import *
from .authenticated_origin_pulls_certificate import *
from .byo_ip_prefix import *
from .certificate_pack import *
from .custom_hostname import *
from .custom_hostname_fallback_origin import *
from .custom_pages import *
from .custom_ssl import *
from .filter import *
from .firewall_rule import *
from .get_api_token_permission_groups import *
from .get_ip_ranges import *
from .get_waf_groups import *
from .get_waf_packages import *
from .get_waf_rules import *
from .get_zone_dnssec import *
from .get_zones import *
from .healthcheck import *
from .ip_list import *
from .load_balancer import *
from .load_balancer_monitor import *
from .load_balancer_pool import *
from .log_push_ownership_challenge import *
from .logpull_retention import *
from .logpush_job import *
from .magic_firewall_ruleset import *
from .origin_ca_certificate import *
from .page_rule import *
from .provider import *
from .rate_limit import *
from .record import *
from .spectrum_application import *
from .waf_group import *
from .waf_override import *
from .waf_package import *
from .waf_rule import *
from .worker_cron_trigger import *
from .worker_route import *
from .worker_script import *
from .workers_kv import *
from .workers_kv_namespace import *
from .zone import *
from .zone_dnssec import *
from .zone_lockdown import *
from .zone_settings_override import *
from ._inputs import *
from . import outputs

# Make subpackages available:
from . import (
    config,
)

def _register_module():
    import pulumi
    from . import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "cloudflare:index/accessApplication:AccessApplication":
                return AccessApplication(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/accessGroup:AccessGroup":
                return AccessGroup(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/accessIdentityProvider:AccessIdentityProvider":
                return AccessIdentityProvider(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/accessMutualTlsCertificate:AccessMutualTlsCertificate":
                return AccessMutualTlsCertificate(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/accessPolicy:AccessPolicy":
                return AccessPolicy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/accessRule:AccessRule":
                return AccessRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/accessServiceToken:AccessServiceToken":
                return AccessServiceToken(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/accountMember:AccountMember":
                return AccountMember(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/apiToken:ApiToken":
                return ApiToken(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/argo:Argo":
                return Argo(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/argoTunnel:ArgoTunnel":
                return ArgoTunnel(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/authenticatedOriginPulls:AuthenticatedOriginPulls":
                return AuthenticatedOriginPulls(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/authenticatedOriginPullsCertificate:AuthenticatedOriginPullsCertificate":
                return AuthenticatedOriginPullsCertificate(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/byoIpPrefix:ByoIpPrefix":
                return ByoIpPrefix(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/certificatePack:CertificatePack":
                return CertificatePack(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/customHostname:CustomHostname":
                return CustomHostname(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/customHostnameFallbackOrigin:CustomHostnameFallbackOrigin":
                return CustomHostnameFallbackOrigin(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/customPages:CustomPages":
                return CustomPages(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/customSsl:CustomSsl":
                return CustomSsl(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/filter:Filter":
                return Filter(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/firewallRule:FirewallRule":
                return FirewallRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/healthcheck:Healthcheck":
                return Healthcheck(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/ipList:IpList":
                return IpList(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/loadBalancer:LoadBalancer":
                return LoadBalancer(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/loadBalancerMonitor:LoadBalancerMonitor":
                return LoadBalancerMonitor(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/loadBalancerPool:LoadBalancerPool":
                return LoadBalancerPool(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/logPushOwnershipChallenge:LogPushOwnershipChallenge":
                return LogPushOwnershipChallenge(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/logpullRetention:LogpullRetention":
                return LogpullRetention(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/logpushJob:LogpushJob":
                return LogpushJob(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/magicFirewallRuleset:MagicFirewallRuleset":
                return MagicFirewallRuleset(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/originCaCertificate:OriginCaCertificate":
                return OriginCaCertificate(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/pageRule:PageRule":
                return PageRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/rateLimit:RateLimit":
                return RateLimit(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/record:Record":
                return Record(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/spectrumApplication:SpectrumApplication":
                return SpectrumApplication(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/wafGroup:WafGroup":
                return WafGroup(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/wafOverride:WafOverride":
                return WafOverride(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/wafPackage:WafPackage":
                return WafPackage(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/wafRule:WafRule":
                return WafRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/workerCronTrigger:WorkerCronTrigger":
                return WorkerCronTrigger(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/workerRoute:WorkerRoute":
                return WorkerRoute(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/workerScript:WorkerScript":
                return WorkerScript(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/workersKv:WorkersKv":
                return WorkersKv(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/workersKvNamespace:WorkersKvNamespace":
                return WorkersKvNamespace(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/zone:Zone":
                return Zone(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/zoneDnssec:ZoneDnssec":
                return ZoneDnssec(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/zoneLockdown:ZoneLockdown":
                return ZoneLockdown(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "cloudflare:index/zoneSettingsOverride:ZoneSettingsOverride":
                return ZoneSettingsOverride(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("cloudflare", "index/accessApplication", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/accessGroup", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/accessIdentityProvider", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/accessMutualTlsCertificate", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/accessPolicy", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/accessRule", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/accessServiceToken", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/accountMember", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/apiToken", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/argo", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/argoTunnel", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/authenticatedOriginPulls", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/authenticatedOriginPullsCertificate", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/byoIpPrefix", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/certificatePack", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/customHostname", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/customHostnameFallbackOrigin", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/customPages", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/customSsl", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/filter", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/firewallRule", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/healthcheck", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/ipList", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/loadBalancer", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/loadBalancerMonitor", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/loadBalancerPool", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/logPushOwnershipChallenge", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/logpullRetention", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/logpushJob", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/magicFirewallRuleset", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/originCaCertificate", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/pageRule", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/rateLimit", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/record", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/spectrumApplication", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/wafGroup", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/wafOverride", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/wafPackage", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/wafRule", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/workerCronTrigger", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/workerRoute", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/workerScript", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/workersKv", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/workersKvNamespace", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/zone", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/zoneDnssec", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/zoneLockdown", _module_instance)
    pulumi.runtime.register_resource_module("cloudflare", "index/zoneSettingsOverride", _module_instance)


    class Package(pulumi.runtime.ResourcePackage):
        _version = _utilities.get_semver_version()

        def version(self):
            return Package._version

        def construct_provider(self, name: str, typ: str, urn: str) -> pulumi.ProviderResource:
            if typ != "pulumi:providers:cloudflare":
                raise Exception(f"unknown provider type {typ}")
            return Provider(name, pulumi.ResourceOptions(urn=urn))


    pulumi.runtime.register_resource_package("cloudflare", Package())

_register_module()
