# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ModelWorkspaceEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'default_kernel_cluster': 'ModelKernelCluster',
        'default_storage': 'ModelStorage',
        'default_volume': 'ModelVolume',
        'notification_configs': 'list[ModelNotificationConfig]',
        'primary_owner': 'ModelUser',
        'user_workspace': 'list[ModelUserWorkspace]'
    }

    attribute_map = {
        'default_kernel_cluster': 'default_kernel_cluster',
        'default_storage': 'default_storage',
        'default_volume': 'default_volume',
        'notification_configs': 'notification_configs',
        'primary_owner': 'primary_owner',
        'user_workspace': 'user_workspace'
    }

    def __init__(self, default_kernel_cluster=None, default_storage=None, default_volume=None, notification_configs=None, primary_owner=None, user_workspace=None, local_vars_configuration=None):  # noqa: E501
        """ModelWorkspaceEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._default_kernel_cluster = None
        self._default_storage = None
        self._default_volume = None
        self._notification_configs = None
        self._primary_owner = None
        self._user_workspace = None
        self.discriminator = None

        if default_kernel_cluster is not None:
            self.default_kernel_cluster = default_kernel_cluster
        if default_storage is not None:
            self.default_storage = default_storage
        if default_volume is not None:
            self.default_volume = default_volume
        if notification_configs is not None:
            self.notification_configs = notification_configs
        if primary_owner is not None:
            self.primary_owner = primary_owner
        if user_workspace is not None:
            self.user_workspace = user_workspace

    @property
    def default_kernel_cluster(self):
        """Gets the default_kernel_cluster of this ModelWorkspaceEdges.  # noqa: E501


        :return: The default_kernel_cluster of this ModelWorkspaceEdges.  # noqa: E501
        :rtype: ModelKernelCluster
        """
        return self._default_kernel_cluster

    @default_kernel_cluster.setter
    def default_kernel_cluster(self, default_kernel_cluster):
        """Sets the default_kernel_cluster of this ModelWorkspaceEdges.


        :param default_kernel_cluster: The default_kernel_cluster of this ModelWorkspaceEdges.  # noqa: E501
        :type default_kernel_cluster: ModelKernelCluster
        """

        self._default_kernel_cluster = default_kernel_cluster

    @property
    def default_storage(self):
        """Gets the default_storage of this ModelWorkspaceEdges.  # noqa: E501


        :return: The default_storage of this ModelWorkspaceEdges.  # noqa: E501
        :rtype: ModelStorage
        """
        return self._default_storage

    @default_storage.setter
    def default_storage(self, default_storage):
        """Sets the default_storage of this ModelWorkspaceEdges.


        :param default_storage: The default_storage of this ModelWorkspaceEdges.  # noqa: E501
        :type default_storage: ModelStorage
        """

        self._default_storage = default_storage

    @property
    def default_volume(self):
        """Gets the default_volume of this ModelWorkspaceEdges.  # noqa: E501


        :return: The default_volume of this ModelWorkspaceEdges.  # noqa: E501
        :rtype: ModelVolume
        """
        return self._default_volume

    @default_volume.setter
    def default_volume(self, default_volume):
        """Sets the default_volume of this ModelWorkspaceEdges.


        :param default_volume: The default_volume of this ModelWorkspaceEdges.  # noqa: E501
        :type default_volume: ModelVolume
        """

        self._default_volume = default_volume

    @property
    def notification_configs(self):
        """Gets the notification_configs of this ModelWorkspaceEdges.  # noqa: E501


        :return: The notification_configs of this ModelWorkspaceEdges.  # noqa: E501
        :rtype: list[ModelNotificationConfig]
        """
        return self._notification_configs

    @notification_configs.setter
    def notification_configs(self, notification_configs):
        """Sets the notification_configs of this ModelWorkspaceEdges.


        :param notification_configs: The notification_configs of this ModelWorkspaceEdges.  # noqa: E501
        :type notification_configs: list[ModelNotificationConfig]
        """

        self._notification_configs = notification_configs

    @property
    def primary_owner(self):
        """Gets the primary_owner of this ModelWorkspaceEdges.  # noqa: E501


        :return: The primary_owner of this ModelWorkspaceEdges.  # noqa: E501
        :rtype: ModelUser
        """
        return self._primary_owner

    @primary_owner.setter
    def primary_owner(self, primary_owner):
        """Sets the primary_owner of this ModelWorkspaceEdges.


        :param primary_owner: The primary_owner of this ModelWorkspaceEdges.  # noqa: E501
        :type primary_owner: ModelUser
        """

        self._primary_owner = primary_owner

    @property
    def user_workspace(self):
        """Gets the user_workspace of this ModelWorkspaceEdges.  # noqa: E501


        :return: The user_workspace of this ModelWorkspaceEdges.  # noqa: E501
        :rtype: list[ModelUserWorkspace]
        """
        return self._user_workspace

    @user_workspace.setter
    def user_workspace(self, user_workspace):
        """Sets the user_workspace of this ModelWorkspaceEdges.


        :param user_workspace: The user_workspace of this ModelWorkspaceEdges.  # noqa: E501
        :type user_workspace: list[ModelUserWorkspace]
        """

        self._user_workspace = user_workspace

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelWorkspaceEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelWorkspaceEdges):
            return True

        return self.to_dict() != other.to_dict()
