# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class GithubUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'avatar_url': 'str',
        'bio': 'str',
        'blog': 'str',
        'collaborators': 'int',
        'company': 'str',
        'created_at': 'object',
        'disk_usage': 'int',
        'email': 'str',
        'events_url': 'str',
        'followers': 'int',
        'followers_url': 'str',
        'following': 'int',
        'following_url': 'str',
        'gists_url': 'str',
        'gravatar_id': 'str',
        'hireable': 'bool',
        'html_url': 'str',
        'id': 'int',
        'ldap_dn': 'str',
        'location': 'str',
        'login': 'str',
        'name': 'str',
        'node_id': 'str',
        'organizations_url': 'str',
        'owned_private_repos': 'int',
        'permissions': 'dict(str, bool)',
        'plan': 'GithubPlan',
        'private_gists': 'int',
        'public_gists': 'int',
        'public_repos': 'int',
        'received_events_url': 'str',
        'repos_url': 'str',
        'site_admin': 'bool',
        'starred_url': 'str',
        'subscriptions_url': 'str',
        'suspended_at': 'object',
        'text_matches': 'list[GithubTextMatch]',
        'total_private_repos': 'int',
        'twitter_username': 'str',
        'two_factor_authentication': 'bool',
        'type': 'str',
        'updated_at': 'object',
        'url': 'str'
    }

    attribute_map = {
        'avatar_url': 'avatar_url',
        'bio': 'bio',
        'blog': 'blog',
        'collaborators': 'collaborators',
        'company': 'company',
        'created_at': 'created_at',
        'disk_usage': 'disk_usage',
        'email': 'email',
        'events_url': 'events_url',
        'followers': 'followers',
        'followers_url': 'followers_url',
        'following': 'following',
        'following_url': 'following_url',
        'gists_url': 'gists_url',
        'gravatar_id': 'gravatar_id',
        'hireable': 'hireable',
        'html_url': 'html_url',
        'id': 'id',
        'ldap_dn': 'ldap_dn',
        'location': 'location',
        'login': 'login',
        'name': 'name',
        'node_id': 'node_id',
        'organizations_url': 'organizations_url',
        'owned_private_repos': 'owned_private_repos',
        'permissions': 'permissions',
        'plan': 'plan',
        'private_gists': 'private_gists',
        'public_gists': 'public_gists',
        'public_repos': 'public_repos',
        'received_events_url': 'received_events_url',
        'repos_url': 'repos_url',
        'site_admin': 'site_admin',
        'starred_url': 'starred_url',
        'subscriptions_url': 'subscriptions_url',
        'suspended_at': 'suspended_at',
        'text_matches': 'text_matches',
        'total_private_repos': 'total_private_repos',
        'twitter_username': 'twitter_username',
        'two_factor_authentication': 'two_factor_authentication',
        'type': 'type',
        'updated_at': 'updated_at',
        'url': 'url'
    }

    def __init__(self, avatar_url=None, bio=None, blog=None, collaborators=None, company=None, created_at=None, disk_usage=None, email=None, events_url=None, followers=None, followers_url=None, following=None, following_url=None, gists_url=None, gravatar_id=None, hireable=None, html_url=None, id=None, ldap_dn=None, location=None, login=None, name=None, node_id=None, organizations_url=None, owned_private_repos=None, permissions=None, plan=None, private_gists=None, public_gists=None, public_repos=None, received_events_url=None, repos_url=None, site_admin=None, starred_url=None, subscriptions_url=None, suspended_at=None, text_matches=None, total_private_repos=None, twitter_username=None, two_factor_authentication=None, type=None, updated_at=None, url=None, local_vars_configuration=None):  # noqa: E501
        """GithubUser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._avatar_url = None
        self._bio = None
        self._blog = None
        self._collaborators = None
        self._company = None
        self._created_at = None
        self._disk_usage = None
        self._email = None
        self._events_url = None
        self._followers = None
        self._followers_url = None
        self._following = None
        self._following_url = None
        self._gists_url = None
        self._gravatar_id = None
        self._hireable = None
        self._html_url = None
        self._id = None
        self._ldap_dn = None
        self._location = None
        self._login = None
        self._name = None
        self._node_id = None
        self._organizations_url = None
        self._owned_private_repos = None
        self._permissions = None
        self._plan = None
        self._private_gists = None
        self._public_gists = None
        self._public_repos = None
        self._received_events_url = None
        self._repos_url = None
        self._site_admin = None
        self._starred_url = None
        self._subscriptions_url = None
        self._suspended_at = None
        self._text_matches = None
        self._total_private_repos = None
        self._twitter_username = None
        self._two_factor_authentication = None
        self._type = None
        self._updated_at = None
        self._url = None
        self.discriminator = None

        self.avatar_url = avatar_url
        self.bio = bio
        self.blog = blog
        self.collaborators = collaborators
        self.company = company
        if created_at is not None:
            self.created_at = created_at
        self.disk_usage = disk_usage
        self.email = email
        self.events_url = events_url
        self.followers = followers
        self.followers_url = followers_url
        self.following = following
        self.following_url = following_url
        self.gists_url = gists_url
        self.gravatar_id = gravatar_id
        self.hireable = hireable
        self.html_url = html_url
        self.id = id
        self.ldap_dn = ldap_dn
        self.location = location
        self.login = login
        self.name = name
        self.node_id = node_id
        self.organizations_url = organizations_url
        self.owned_private_repos = owned_private_repos
        if permissions is not None:
            self.permissions = permissions
        if plan is not None:
            self.plan = plan
        self.private_gists = private_gists
        self.public_gists = public_gists
        self.public_repos = public_repos
        self.received_events_url = received_events_url
        self.repos_url = repos_url
        self.site_admin = site_admin
        self.starred_url = starred_url
        self.subscriptions_url = subscriptions_url
        if suspended_at is not None:
            self.suspended_at = suspended_at
        if text_matches is not None:
            self.text_matches = text_matches
        self.total_private_repos = total_private_repos
        self.twitter_username = twitter_username
        self.two_factor_authentication = two_factor_authentication
        self.type = type
        if updated_at is not None:
            self.updated_at = updated_at
        self.url = url

    @property
    def avatar_url(self):
        """Gets the avatar_url of this GithubUser.  # noqa: E501


        :return: The avatar_url of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this GithubUser.


        :param avatar_url: The avatar_url of this GithubUser.  # noqa: E501
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def bio(self):
        """Gets the bio of this GithubUser.  # noqa: E501


        :return: The bio of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this GithubUser.


        :param bio: The bio of this GithubUser.  # noqa: E501
        :type bio: str
        """

        self._bio = bio

    @property
    def blog(self):
        """Gets the blog of this GithubUser.  # noqa: E501


        :return: The blog of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._blog

    @blog.setter
    def blog(self, blog):
        """Sets the blog of this GithubUser.


        :param blog: The blog of this GithubUser.  # noqa: E501
        :type blog: str
        """

        self._blog = blog

    @property
    def collaborators(self):
        """Gets the collaborators of this GithubUser.  # noqa: E501


        :return: The collaborators of this GithubUser.  # noqa: E501
        :rtype: int
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """Sets the collaborators of this GithubUser.


        :param collaborators: The collaborators of this GithubUser.  # noqa: E501
        :type collaborators: int
        """

        self._collaborators = collaborators

    @property
    def company(self):
        """Gets the company of this GithubUser.  # noqa: E501


        :return: The company of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this GithubUser.


        :param company: The company of this GithubUser.  # noqa: E501
        :type company: str
        """

        self._company = company

    @property
    def created_at(self):
        """Gets the created_at of this GithubUser.  # noqa: E501


        :return: The created_at of this GithubUser.  # noqa: E501
        :rtype: object
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GithubUser.


        :param created_at: The created_at of this GithubUser.  # noqa: E501
        :type created_at: object
        """

        self._created_at = created_at

    @property
    def disk_usage(self):
        """Gets the disk_usage of this GithubUser.  # noqa: E501


        :return: The disk_usage of this GithubUser.  # noqa: E501
        :rtype: int
        """
        return self._disk_usage

    @disk_usage.setter
    def disk_usage(self, disk_usage):
        """Sets the disk_usage of this GithubUser.


        :param disk_usage: The disk_usage of this GithubUser.  # noqa: E501
        :type disk_usage: int
        """

        self._disk_usage = disk_usage

    @property
    def email(self):
        """Gets the email of this GithubUser.  # noqa: E501


        :return: The email of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GithubUser.


        :param email: The email of this GithubUser.  # noqa: E501
        :type email: str
        """

        self._email = email

    @property
    def events_url(self):
        """Gets the events_url of this GithubUser.  # noqa: E501


        :return: The events_url of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._events_url

    @events_url.setter
    def events_url(self, events_url):
        """Sets the events_url of this GithubUser.


        :param events_url: The events_url of this GithubUser.  # noqa: E501
        :type events_url: str
        """

        self._events_url = events_url

    @property
    def followers(self):
        """Gets the followers of this GithubUser.  # noqa: E501


        :return: The followers of this GithubUser.  # noqa: E501
        :rtype: int
        """
        return self._followers

    @followers.setter
    def followers(self, followers):
        """Sets the followers of this GithubUser.


        :param followers: The followers of this GithubUser.  # noqa: E501
        :type followers: int
        """

        self._followers = followers

    @property
    def followers_url(self):
        """Gets the followers_url of this GithubUser.  # noqa: E501


        :return: The followers_url of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._followers_url

    @followers_url.setter
    def followers_url(self, followers_url):
        """Sets the followers_url of this GithubUser.


        :param followers_url: The followers_url of this GithubUser.  # noqa: E501
        :type followers_url: str
        """

        self._followers_url = followers_url

    @property
    def following(self):
        """Gets the following of this GithubUser.  # noqa: E501


        :return: The following of this GithubUser.  # noqa: E501
        :rtype: int
        """
        return self._following

    @following.setter
    def following(self, following):
        """Sets the following of this GithubUser.


        :param following: The following of this GithubUser.  # noqa: E501
        :type following: int
        """

        self._following = following

    @property
    def following_url(self):
        """Gets the following_url of this GithubUser.  # noqa: E501


        :return: The following_url of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._following_url

    @following_url.setter
    def following_url(self, following_url):
        """Sets the following_url of this GithubUser.


        :param following_url: The following_url of this GithubUser.  # noqa: E501
        :type following_url: str
        """

        self._following_url = following_url

    @property
    def gists_url(self):
        """Gets the gists_url of this GithubUser.  # noqa: E501


        :return: The gists_url of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._gists_url

    @gists_url.setter
    def gists_url(self, gists_url):
        """Sets the gists_url of this GithubUser.


        :param gists_url: The gists_url of this GithubUser.  # noqa: E501
        :type gists_url: str
        """

        self._gists_url = gists_url

    @property
    def gravatar_id(self):
        """Gets the gravatar_id of this GithubUser.  # noqa: E501


        :return: The gravatar_id of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._gravatar_id

    @gravatar_id.setter
    def gravatar_id(self, gravatar_id):
        """Sets the gravatar_id of this GithubUser.


        :param gravatar_id: The gravatar_id of this GithubUser.  # noqa: E501
        :type gravatar_id: str
        """

        self._gravatar_id = gravatar_id

    @property
    def hireable(self):
        """Gets the hireable of this GithubUser.  # noqa: E501


        :return: The hireable of this GithubUser.  # noqa: E501
        :rtype: bool
        """
        return self._hireable

    @hireable.setter
    def hireable(self, hireable):
        """Sets the hireable of this GithubUser.


        :param hireable: The hireable of this GithubUser.  # noqa: E501
        :type hireable: bool
        """

        self._hireable = hireable

    @property
    def html_url(self):
        """Gets the html_url of this GithubUser.  # noqa: E501


        :return: The html_url of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this GithubUser.


        :param html_url: The html_url of this GithubUser.  # noqa: E501
        :type html_url: str
        """

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this GithubUser.  # noqa: E501


        :return: The id of this GithubUser.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GithubUser.


        :param id: The id of this GithubUser.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def ldap_dn(self):
        """Gets the ldap_dn of this GithubUser.  # noqa: E501


        :return: The ldap_dn of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._ldap_dn

    @ldap_dn.setter
    def ldap_dn(self, ldap_dn):
        """Sets the ldap_dn of this GithubUser.


        :param ldap_dn: The ldap_dn of this GithubUser.  # noqa: E501
        :type ldap_dn: str
        """

        self._ldap_dn = ldap_dn

    @property
    def location(self):
        """Gets the location of this GithubUser.  # noqa: E501


        :return: The location of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this GithubUser.


        :param location: The location of this GithubUser.  # noqa: E501
        :type location: str
        """

        self._location = location

    @property
    def login(self):
        """Gets the login of this GithubUser.  # noqa: E501


        :return: The login of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this GithubUser.


        :param login: The login of this GithubUser.  # noqa: E501
        :type login: str
        """

        self._login = login

    @property
    def name(self):
        """Gets the name of this GithubUser.  # noqa: E501


        :return: The name of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GithubUser.


        :param name: The name of this GithubUser.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this GithubUser.  # noqa: E501


        :return: The node_id of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this GithubUser.


        :param node_id: The node_id of this GithubUser.  # noqa: E501
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def organizations_url(self):
        """Gets the organizations_url of this GithubUser.  # noqa: E501


        :return: The organizations_url of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._organizations_url

    @organizations_url.setter
    def organizations_url(self, organizations_url):
        """Sets the organizations_url of this GithubUser.


        :param organizations_url: The organizations_url of this GithubUser.  # noqa: E501
        :type organizations_url: str
        """

        self._organizations_url = organizations_url

    @property
    def owned_private_repos(self):
        """Gets the owned_private_repos of this GithubUser.  # noqa: E501


        :return: The owned_private_repos of this GithubUser.  # noqa: E501
        :rtype: int
        """
        return self._owned_private_repos

    @owned_private_repos.setter
    def owned_private_repos(self, owned_private_repos):
        """Sets the owned_private_repos of this GithubUser.


        :param owned_private_repos: The owned_private_repos of this GithubUser.  # noqa: E501
        :type owned_private_repos: int
        """

        self._owned_private_repos = owned_private_repos

    @property
    def permissions(self):
        """Gets the permissions of this GithubUser.  # noqa: E501


        :return: The permissions of this GithubUser.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this GithubUser.


        :param permissions: The permissions of this GithubUser.  # noqa: E501
        :type permissions: dict(str, bool)
        """

        self._permissions = permissions

    @property
    def plan(self):
        """Gets the plan of this GithubUser.  # noqa: E501


        :return: The plan of this GithubUser.  # noqa: E501
        :rtype: GithubPlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this GithubUser.


        :param plan: The plan of this GithubUser.  # noqa: E501
        :type plan: GithubPlan
        """

        self._plan = plan

    @property
    def private_gists(self):
        """Gets the private_gists of this GithubUser.  # noqa: E501


        :return: The private_gists of this GithubUser.  # noqa: E501
        :rtype: int
        """
        return self._private_gists

    @private_gists.setter
    def private_gists(self, private_gists):
        """Sets the private_gists of this GithubUser.


        :param private_gists: The private_gists of this GithubUser.  # noqa: E501
        :type private_gists: int
        """

        self._private_gists = private_gists

    @property
    def public_gists(self):
        """Gets the public_gists of this GithubUser.  # noqa: E501


        :return: The public_gists of this GithubUser.  # noqa: E501
        :rtype: int
        """
        return self._public_gists

    @public_gists.setter
    def public_gists(self, public_gists):
        """Sets the public_gists of this GithubUser.


        :param public_gists: The public_gists of this GithubUser.  # noqa: E501
        :type public_gists: int
        """

        self._public_gists = public_gists

    @property
    def public_repos(self):
        """Gets the public_repos of this GithubUser.  # noqa: E501


        :return: The public_repos of this GithubUser.  # noqa: E501
        :rtype: int
        """
        return self._public_repos

    @public_repos.setter
    def public_repos(self, public_repos):
        """Sets the public_repos of this GithubUser.


        :param public_repos: The public_repos of this GithubUser.  # noqa: E501
        :type public_repos: int
        """

        self._public_repos = public_repos

    @property
    def received_events_url(self):
        """Gets the received_events_url of this GithubUser.  # noqa: E501


        :return: The received_events_url of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._received_events_url

    @received_events_url.setter
    def received_events_url(self, received_events_url):
        """Sets the received_events_url of this GithubUser.


        :param received_events_url: The received_events_url of this GithubUser.  # noqa: E501
        :type received_events_url: str
        """

        self._received_events_url = received_events_url

    @property
    def repos_url(self):
        """Gets the repos_url of this GithubUser.  # noqa: E501


        :return: The repos_url of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._repos_url

    @repos_url.setter
    def repos_url(self, repos_url):
        """Sets the repos_url of this GithubUser.


        :param repos_url: The repos_url of this GithubUser.  # noqa: E501
        :type repos_url: str
        """

        self._repos_url = repos_url

    @property
    def site_admin(self):
        """Gets the site_admin of this GithubUser.  # noqa: E501


        :return: The site_admin of this GithubUser.  # noqa: E501
        :rtype: bool
        """
        return self._site_admin

    @site_admin.setter
    def site_admin(self, site_admin):
        """Sets the site_admin of this GithubUser.


        :param site_admin: The site_admin of this GithubUser.  # noqa: E501
        :type site_admin: bool
        """

        self._site_admin = site_admin

    @property
    def starred_url(self):
        """Gets the starred_url of this GithubUser.  # noqa: E501


        :return: The starred_url of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._starred_url

    @starred_url.setter
    def starred_url(self, starred_url):
        """Sets the starred_url of this GithubUser.


        :param starred_url: The starred_url of this GithubUser.  # noqa: E501
        :type starred_url: str
        """

        self._starred_url = starred_url

    @property
    def subscriptions_url(self):
        """Gets the subscriptions_url of this GithubUser.  # noqa: E501


        :return: The subscriptions_url of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._subscriptions_url

    @subscriptions_url.setter
    def subscriptions_url(self, subscriptions_url):
        """Sets the subscriptions_url of this GithubUser.


        :param subscriptions_url: The subscriptions_url of this GithubUser.  # noqa: E501
        :type subscriptions_url: str
        """

        self._subscriptions_url = subscriptions_url

    @property
    def suspended_at(self):
        """Gets the suspended_at of this GithubUser.  # noqa: E501


        :return: The suspended_at of this GithubUser.  # noqa: E501
        :rtype: object
        """
        return self._suspended_at

    @suspended_at.setter
    def suspended_at(self, suspended_at):
        """Sets the suspended_at of this GithubUser.


        :param suspended_at: The suspended_at of this GithubUser.  # noqa: E501
        :type suspended_at: object
        """

        self._suspended_at = suspended_at

    @property
    def text_matches(self):
        """Gets the text_matches of this GithubUser.  # noqa: E501


        :return: The text_matches of this GithubUser.  # noqa: E501
        :rtype: list[GithubTextMatch]
        """
        return self._text_matches

    @text_matches.setter
    def text_matches(self, text_matches):
        """Sets the text_matches of this GithubUser.


        :param text_matches: The text_matches of this GithubUser.  # noqa: E501
        :type text_matches: list[GithubTextMatch]
        """

        self._text_matches = text_matches

    @property
    def total_private_repos(self):
        """Gets the total_private_repos of this GithubUser.  # noqa: E501


        :return: The total_private_repos of this GithubUser.  # noqa: E501
        :rtype: int
        """
        return self._total_private_repos

    @total_private_repos.setter
    def total_private_repos(self, total_private_repos):
        """Sets the total_private_repos of this GithubUser.


        :param total_private_repos: The total_private_repos of this GithubUser.  # noqa: E501
        :type total_private_repos: int
        """

        self._total_private_repos = total_private_repos

    @property
    def twitter_username(self):
        """Gets the twitter_username of this GithubUser.  # noqa: E501


        :return: The twitter_username of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._twitter_username

    @twitter_username.setter
    def twitter_username(self, twitter_username):
        """Sets the twitter_username of this GithubUser.


        :param twitter_username: The twitter_username of this GithubUser.  # noqa: E501
        :type twitter_username: str
        """

        self._twitter_username = twitter_username

    @property
    def two_factor_authentication(self):
        """Gets the two_factor_authentication of this GithubUser.  # noqa: E501


        :return: The two_factor_authentication of this GithubUser.  # noqa: E501
        :rtype: bool
        """
        return self._two_factor_authentication

    @two_factor_authentication.setter
    def two_factor_authentication(self, two_factor_authentication):
        """Sets the two_factor_authentication of this GithubUser.


        :param two_factor_authentication: The two_factor_authentication of this GithubUser.  # noqa: E501
        :type two_factor_authentication: bool
        """

        self._two_factor_authentication = two_factor_authentication

    @property
    def type(self):
        """Gets the type of this GithubUser.  # noqa: E501


        :return: The type of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GithubUser.


        :param type: The type of this GithubUser.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this GithubUser.  # noqa: E501


        :return: The updated_at of this GithubUser.  # noqa: E501
        :rtype: object
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GithubUser.


        :param updated_at: The updated_at of this GithubUser.  # noqa: E501
        :type updated_at: object
        """

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this GithubUser.  # noqa: E501


        :return: The url of this GithubUser.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GithubUser.


        :param url: The url of this GithubUser.  # noqa: E501
        :type url: str
        """

        self._url = url

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GithubUser):
            return True

        return self.to_dict() != other.to_dict()
