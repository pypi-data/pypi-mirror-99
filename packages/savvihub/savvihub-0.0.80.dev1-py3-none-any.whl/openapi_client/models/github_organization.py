# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class GithubOrganization(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'avatar_url': 'str',
        'billing_email': 'str',
        'blog': 'str',
        'collaborators': 'int',
        'company': 'str',
        'created_at': 'datetime',
        'default_repository_permission': 'str',
        'default_repository_settings': 'str',
        'description': 'str',
        'disk_usage': 'int',
        'email': 'str',
        'events_url': 'str',
        'followers': 'int',
        'following': 'int',
        'has_organization_projects': 'bool',
        'has_repository_projects': 'bool',
        'hooks_url': 'str',
        'html_url': 'str',
        'id': 'int',
        'is_verified': 'bool',
        'issues_url': 'str',
        'location': 'str',
        'login': 'str',
        'members_allowed_repository_creation_type': 'str',
        'members_can_create_internal_repositories': 'bool',
        'members_can_create_private_repositories': 'bool',
        'members_can_create_public_repositories': 'bool',
        'members_can_create_repositories': 'bool',
        'members_url': 'str',
        'name': 'str',
        'node_id': 'str',
        'owned_private_repos': 'int',
        'plan': 'GithubPlan',
        'private_gists': 'int',
        'public_gists': 'int',
        'public_members_url': 'str',
        'public_repos': 'int',
        'repos_url': 'str',
        'total_private_repos': 'int',
        'twitter_username': 'str',
        'two_factor_requirement_enabled': 'bool',
        'type': 'str',
        'updated_at': 'datetime',
        'url': 'str'
    }

    attribute_map = {
        'avatar_url': 'avatar_url',
        'billing_email': 'billing_email',
        'blog': 'blog',
        'collaborators': 'collaborators',
        'company': 'company',
        'created_at': 'created_at',
        'default_repository_permission': 'default_repository_permission',
        'default_repository_settings': 'default_repository_settings',
        'description': 'description',
        'disk_usage': 'disk_usage',
        'email': 'email',
        'events_url': 'events_url',
        'followers': 'followers',
        'following': 'following',
        'has_organization_projects': 'has_organization_projects',
        'has_repository_projects': 'has_repository_projects',
        'hooks_url': 'hooks_url',
        'html_url': 'html_url',
        'id': 'id',
        'is_verified': 'is_verified',
        'issues_url': 'issues_url',
        'location': 'location',
        'login': 'login',
        'members_allowed_repository_creation_type': 'members_allowed_repository_creation_type',
        'members_can_create_internal_repositories': 'members_can_create_internal_repositories',
        'members_can_create_private_repositories': 'members_can_create_private_repositories',
        'members_can_create_public_repositories': 'members_can_create_public_repositories',
        'members_can_create_repositories': 'members_can_create_repositories',
        'members_url': 'members_url',
        'name': 'name',
        'node_id': 'node_id',
        'owned_private_repos': 'owned_private_repos',
        'plan': 'plan',
        'private_gists': 'private_gists',
        'public_gists': 'public_gists',
        'public_members_url': 'public_members_url',
        'public_repos': 'public_repos',
        'repos_url': 'repos_url',
        'total_private_repos': 'total_private_repos',
        'twitter_username': 'twitter_username',
        'two_factor_requirement_enabled': 'two_factor_requirement_enabled',
        'type': 'type',
        'updated_at': 'updated_at',
        'url': 'url'
    }

    def __init__(self, avatar_url=None, billing_email=None, blog=None, collaborators=None, company=None, created_at=None, default_repository_permission=None, default_repository_settings=None, description=None, disk_usage=None, email=None, events_url=None, followers=None, following=None, has_organization_projects=None, has_repository_projects=None, hooks_url=None, html_url=None, id=None, is_verified=None, issues_url=None, location=None, login=None, members_allowed_repository_creation_type=None, members_can_create_internal_repositories=None, members_can_create_private_repositories=None, members_can_create_public_repositories=None, members_can_create_repositories=None, members_url=None, name=None, node_id=None, owned_private_repos=None, plan=None, private_gists=None, public_gists=None, public_members_url=None, public_repos=None, repos_url=None, total_private_repos=None, twitter_username=None, two_factor_requirement_enabled=None, type=None, updated_at=None, url=None, local_vars_configuration=None):  # noqa: E501
        """GithubOrganization - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._avatar_url = None
        self._billing_email = None
        self._blog = None
        self._collaborators = None
        self._company = None
        self._created_at = None
        self._default_repository_permission = None
        self._default_repository_settings = None
        self._description = None
        self._disk_usage = None
        self._email = None
        self._events_url = None
        self._followers = None
        self._following = None
        self._has_organization_projects = None
        self._has_repository_projects = None
        self._hooks_url = None
        self._html_url = None
        self._id = None
        self._is_verified = None
        self._issues_url = None
        self._location = None
        self._login = None
        self._members_allowed_repository_creation_type = None
        self._members_can_create_internal_repositories = None
        self._members_can_create_private_repositories = None
        self._members_can_create_public_repositories = None
        self._members_can_create_repositories = None
        self._members_url = None
        self._name = None
        self._node_id = None
        self._owned_private_repos = None
        self._plan = None
        self._private_gists = None
        self._public_gists = None
        self._public_members_url = None
        self._public_repos = None
        self._repos_url = None
        self._total_private_repos = None
        self._twitter_username = None
        self._two_factor_requirement_enabled = None
        self._type = None
        self._updated_at = None
        self._url = None
        self.discriminator = None

        self.avatar_url = avatar_url
        self.billing_email = billing_email
        self.blog = blog
        self.collaborators = collaborators
        self.company = company
        self.created_at = created_at
        self.default_repository_permission = default_repository_permission
        self.default_repository_settings = default_repository_settings
        self.description = description
        self.disk_usage = disk_usage
        self.email = email
        self.events_url = events_url
        self.followers = followers
        self.following = following
        self.has_organization_projects = has_organization_projects
        self.has_repository_projects = has_repository_projects
        self.hooks_url = hooks_url
        self.html_url = html_url
        self.id = id
        self.is_verified = is_verified
        self.issues_url = issues_url
        self.location = location
        self.login = login
        self.members_allowed_repository_creation_type = members_allowed_repository_creation_type
        self.members_can_create_internal_repositories = members_can_create_internal_repositories
        self.members_can_create_private_repositories = members_can_create_private_repositories
        self.members_can_create_public_repositories = members_can_create_public_repositories
        self.members_can_create_repositories = members_can_create_repositories
        self.members_url = members_url
        self.name = name
        self.node_id = node_id
        self.owned_private_repos = owned_private_repos
        if plan is not None:
            self.plan = plan
        self.private_gists = private_gists
        self.public_gists = public_gists
        self.public_members_url = public_members_url
        self.public_repos = public_repos
        self.repos_url = repos_url
        self.total_private_repos = total_private_repos
        self.twitter_username = twitter_username
        self.two_factor_requirement_enabled = two_factor_requirement_enabled
        self.type = type
        self.updated_at = updated_at
        self.url = url

    @property
    def avatar_url(self):
        """Gets the avatar_url of this GithubOrganization.  # noqa: E501


        :return: The avatar_url of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this GithubOrganization.


        :param avatar_url: The avatar_url of this GithubOrganization.  # noqa: E501
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def billing_email(self):
        """Gets the billing_email of this GithubOrganization.  # noqa: E501


        :return: The billing_email of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._billing_email

    @billing_email.setter
    def billing_email(self, billing_email):
        """Sets the billing_email of this GithubOrganization.


        :param billing_email: The billing_email of this GithubOrganization.  # noqa: E501
        :type billing_email: str
        """

        self._billing_email = billing_email

    @property
    def blog(self):
        """Gets the blog of this GithubOrganization.  # noqa: E501


        :return: The blog of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._blog

    @blog.setter
    def blog(self, blog):
        """Sets the blog of this GithubOrganization.


        :param blog: The blog of this GithubOrganization.  # noqa: E501
        :type blog: str
        """

        self._blog = blog

    @property
    def collaborators(self):
        """Gets the collaborators of this GithubOrganization.  # noqa: E501


        :return: The collaborators of this GithubOrganization.  # noqa: E501
        :rtype: int
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """Sets the collaborators of this GithubOrganization.


        :param collaborators: The collaborators of this GithubOrganization.  # noqa: E501
        :type collaborators: int
        """

        self._collaborators = collaborators

    @property
    def company(self):
        """Gets the company of this GithubOrganization.  # noqa: E501


        :return: The company of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this GithubOrganization.


        :param company: The company of this GithubOrganization.  # noqa: E501
        :type company: str
        """

        self._company = company

    @property
    def created_at(self):
        """Gets the created_at of this GithubOrganization.  # noqa: E501


        :return: The created_at of this GithubOrganization.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GithubOrganization.


        :param created_at: The created_at of this GithubOrganization.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def default_repository_permission(self):
        """Gets the default_repository_permission of this GithubOrganization.  # noqa: E501


        :return: The default_repository_permission of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._default_repository_permission

    @default_repository_permission.setter
    def default_repository_permission(self, default_repository_permission):
        """Sets the default_repository_permission of this GithubOrganization.


        :param default_repository_permission: The default_repository_permission of this GithubOrganization.  # noqa: E501
        :type default_repository_permission: str
        """

        self._default_repository_permission = default_repository_permission

    @property
    def default_repository_settings(self):
        """Gets the default_repository_settings of this GithubOrganization.  # noqa: E501


        :return: The default_repository_settings of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._default_repository_settings

    @default_repository_settings.setter
    def default_repository_settings(self, default_repository_settings):
        """Sets the default_repository_settings of this GithubOrganization.


        :param default_repository_settings: The default_repository_settings of this GithubOrganization.  # noqa: E501
        :type default_repository_settings: str
        """

        self._default_repository_settings = default_repository_settings

    @property
    def description(self):
        """Gets the description of this GithubOrganization.  # noqa: E501


        :return: The description of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GithubOrganization.


        :param description: The description of this GithubOrganization.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def disk_usage(self):
        """Gets the disk_usage of this GithubOrganization.  # noqa: E501


        :return: The disk_usage of this GithubOrganization.  # noqa: E501
        :rtype: int
        """
        return self._disk_usage

    @disk_usage.setter
    def disk_usage(self, disk_usage):
        """Sets the disk_usage of this GithubOrganization.


        :param disk_usage: The disk_usage of this GithubOrganization.  # noqa: E501
        :type disk_usage: int
        """

        self._disk_usage = disk_usage

    @property
    def email(self):
        """Gets the email of this GithubOrganization.  # noqa: E501


        :return: The email of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GithubOrganization.


        :param email: The email of this GithubOrganization.  # noqa: E501
        :type email: str
        """

        self._email = email

    @property
    def events_url(self):
        """Gets the events_url of this GithubOrganization.  # noqa: E501


        :return: The events_url of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._events_url

    @events_url.setter
    def events_url(self, events_url):
        """Sets the events_url of this GithubOrganization.


        :param events_url: The events_url of this GithubOrganization.  # noqa: E501
        :type events_url: str
        """

        self._events_url = events_url

    @property
    def followers(self):
        """Gets the followers of this GithubOrganization.  # noqa: E501


        :return: The followers of this GithubOrganization.  # noqa: E501
        :rtype: int
        """
        return self._followers

    @followers.setter
    def followers(self, followers):
        """Sets the followers of this GithubOrganization.


        :param followers: The followers of this GithubOrganization.  # noqa: E501
        :type followers: int
        """

        self._followers = followers

    @property
    def following(self):
        """Gets the following of this GithubOrganization.  # noqa: E501


        :return: The following of this GithubOrganization.  # noqa: E501
        :rtype: int
        """
        return self._following

    @following.setter
    def following(self, following):
        """Sets the following of this GithubOrganization.


        :param following: The following of this GithubOrganization.  # noqa: E501
        :type following: int
        """

        self._following = following

    @property
    def has_organization_projects(self):
        """Gets the has_organization_projects of this GithubOrganization.  # noqa: E501


        :return: The has_organization_projects of this GithubOrganization.  # noqa: E501
        :rtype: bool
        """
        return self._has_organization_projects

    @has_organization_projects.setter
    def has_organization_projects(self, has_organization_projects):
        """Sets the has_organization_projects of this GithubOrganization.


        :param has_organization_projects: The has_organization_projects of this GithubOrganization.  # noqa: E501
        :type has_organization_projects: bool
        """

        self._has_organization_projects = has_organization_projects

    @property
    def has_repository_projects(self):
        """Gets the has_repository_projects of this GithubOrganization.  # noqa: E501


        :return: The has_repository_projects of this GithubOrganization.  # noqa: E501
        :rtype: bool
        """
        return self._has_repository_projects

    @has_repository_projects.setter
    def has_repository_projects(self, has_repository_projects):
        """Sets the has_repository_projects of this GithubOrganization.


        :param has_repository_projects: The has_repository_projects of this GithubOrganization.  # noqa: E501
        :type has_repository_projects: bool
        """

        self._has_repository_projects = has_repository_projects

    @property
    def hooks_url(self):
        """Gets the hooks_url of this GithubOrganization.  # noqa: E501


        :return: The hooks_url of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._hooks_url

    @hooks_url.setter
    def hooks_url(self, hooks_url):
        """Sets the hooks_url of this GithubOrganization.


        :param hooks_url: The hooks_url of this GithubOrganization.  # noqa: E501
        :type hooks_url: str
        """

        self._hooks_url = hooks_url

    @property
    def html_url(self):
        """Gets the html_url of this GithubOrganization.  # noqa: E501


        :return: The html_url of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this GithubOrganization.


        :param html_url: The html_url of this GithubOrganization.  # noqa: E501
        :type html_url: str
        """

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this GithubOrganization.  # noqa: E501


        :return: The id of this GithubOrganization.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GithubOrganization.


        :param id: The id of this GithubOrganization.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def is_verified(self):
        """Gets the is_verified of this GithubOrganization.  # noqa: E501


        :return: The is_verified of this GithubOrganization.  # noqa: E501
        :rtype: bool
        """
        return self._is_verified

    @is_verified.setter
    def is_verified(self, is_verified):
        """Sets the is_verified of this GithubOrganization.


        :param is_verified: The is_verified of this GithubOrganization.  # noqa: E501
        :type is_verified: bool
        """

        self._is_verified = is_verified

    @property
    def issues_url(self):
        """Gets the issues_url of this GithubOrganization.  # noqa: E501


        :return: The issues_url of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._issues_url

    @issues_url.setter
    def issues_url(self, issues_url):
        """Sets the issues_url of this GithubOrganization.


        :param issues_url: The issues_url of this GithubOrganization.  # noqa: E501
        :type issues_url: str
        """

        self._issues_url = issues_url

    @property
    def location(self):
        """Gets the location of this GithubOrganization.  # noqa: E501


        :return: The location of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this GithubOrganization.


        :param location: The location of this GithubOrganization.  # noqa: E501
        :type location: str
        """

        self._location = location

    @property
    def login(self):
        """Gets the login of this GithubOrganization.  # noqa: E501


        :return: The login of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this GithubOrganization.


        :param login: The login of this GithubOrganization.  # noqa: E501
        :type login: str
        """

        self._login = login

    @property
    def members_allowed_repository_creation_type(self):
        """Gets the members_allowed_repository_creation_type of this GithubOrganization.  # noqa: E501


        :return: The members_allowed_repository_creation_type of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._members_allowed_repository_creation_type

    @members_allowed_repository_creation_type.setter
    def members_allowed_repository_creation_type(self, members_allowed_repository_creation_type):
        """Sets the members_allowed_repository_creation_type of this GithubOrganization.


        :param members_allowed_repository_creation_type: The members_allowed_repository_creation_type of this GithubOrganization.  # noqa: E501
        :type members_allowed_repository_creation_type: str
        """

        self._members_allowed_repository_creation_type = members_allowed_repository_creation_type

    @property
    def members_can_create_internal_repositories(self):
        """Gets the members_can_create_internal_repositories of this GithubOrganization.  # noqa: E501


        :return: The members_can_create_internal_repositories of this GithubOrganization.  # noqa: E501
        :rtype: bool
        """
        return self._members_can_create_internal_repositories

    @members_can_create_internal_repositories.setter
    def members_can_create_internal_repositories(self, members_can_create_internal_repositories):
        """Sets the members_can_create_internal_repositories of this GithubOrganization.


        :param members_can_create_internal_repositories: The members_can_create_internal_repositories of this GithubOrganization.  # noqa: E501
        :type members_can_create_internal_repositories: bool
        """

        self._members_can_create_internal_repositories = members_can_create_internal_repositories

    @property
    def members_can_create_private_repositories(self):
        """Gets the members_can_create_private_repositories of this GithubOrganization.  # noqa: E501


        :return: The members_can_create_private_repositories of this GithubOrganization.  # noqa: E501
        :rtype: bool
        """
        return self._members_can_create_private_repositories

    @members_can_create_private_repositories.setter
    def members_can_create_private_repositories(self, members_can_create_private_repositories):
        """Sets the members_can_create_private_repositories of this GithubOrganization.


        :param members_can_create_private_repositories: The members_can_create_private_repositories of this GithubOrganization.  # noqa: E501
        :type members_can_create_private_repositories: bool
        """

        self._members_can_create_private_repositories = members_can_create_private_repositories

    @property
    def members_can_create_public_repositories(self):
        """Gets the members_can_create_public_repositories of this GithubOrganization.  # noqa: E501


        :return: The members_can_create_public_repositories of this GithubOrganization.  # noqa: E501
        :rtype: bool
        """
        return self._members_can_create_public_repositories

    @members_can_create_public_repositories.setter
    def members_can_create_public_repositories(self, members_can_create_public_repositories):
        """Sets the members_can_create_public_repositories of this GithubOrganization.


        :param members_can_create_public_repositories: The members_can_create_public_repositories of this GithubOrganization.  # noqa: E501
        :type members_can_create_public_repositories: bool
        """

        self._members_can_create_public_repositories = members_can_create_public_repositories

    @property
    def members_can_create_repositories(self):
        """Gets the members_can_create_repositories of this GithubOrganization.  # noqa: E501


        :return: The members_can_create_repositories of this GithubOrganization.  # noqa: E501
        :rtype: bool
        """
        return self._members_can_create_repositories

    @members_can_create_repositories.setter
    def members_can_create_repositories(self, members_can_create_repositories):
        """Sets the members_can_create_repositories of this GithubOrganization.


        :param members_can_create_repositories: The members_can_create_repositories of this GithubOrganization.  # noqa: E501
        :type members_can_create_repositories: bool
        """

        self._members_can_create_repositories = members_can_create_repositories

    @property
    def members_url(self):
        """Gets the members_url of this GithubOrganization.  # noqa: E501


        :return: The members_url of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._members_url

    @members_url.setter
    def members_url(self, members_url):
        """Sets the members_url of this GithubOrganization.


        :param members_url: The members_url of this GithubOrganization.  # noqa: E501
        :type members_url: str
        """

        self._members_url = members_url

    @property
    def name(self):
        """Gets the name of this GithubOrganization.  # noqa: E501


        :return: The name of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GithubOrganization.


        :param name: The name of this GithubOrganization.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this GithubOrganization.  # noqa: E501


        :return: The node_id of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this GithubOrganization.


        :param node_id: The node_id of this GithubOrganization.  # noqa: E501
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def owned_private_repos(self):
        """Gets the owned_private_repos of this GithubOrganization.  # noqa: E501


        :return: The owned_private_repos of this GithubOrganization.  # noqa: E501
        :rtype: int
        """
        return self._owned_private_repos

    @owned_private_repos.setter
    def owned_private_repos(self, owned_private_repos):
        """Sets the owned_private_repos of this GithubOrganization.


        :param owned_private_repos: The owned_private_repos of this GithubOrganization.  # noqa: E501
        :type owned_private_repos: int
        """

        self._owned_private_repos = owned_private_repos

    @property
    def plan(self):
        """Gets the plan of this GithubOrganization.  # noqa: E501


        :return: The plan of this GithubOrganization.  # noqa: E501
        :rtype: GithubPlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this GithubOrganization.


        :param plan: The plan of this GithubOrganization.  # noqa: E501
        :type plan: GithubPlan
        """

        self._plan = plan

    @property
    def private_gists(self):
        """Gets the private_gists of this GithubOrganization.  # noqa: E501


        :return: The private_gists of this GithubOrganization.  # noqa: E501
        :rtype: int
        """
        return self._private_gists

    @private_gists.setter
    def private_gists(self, private_gists):
        """Sets the private_gists of this GithubOrganization.


        :param private_gists: The private_gists of this GithubOrganization.  # noqa: E501
        :type private_gists: int
        """

        self._private_gists = private_gists

    @property
    def public_gists(self):
        """Gets the public_gists of this GithubOrganization.  # noqa: E501


        :return: The public_gists of this GithubOrganization.  # noqa: E501
        :rtype: int
        """
        return self._public_gists

    @public_gists.setter
    def public_gists(self, public_gists):
        """Sets the public_gists of this GithubOrganization.


        :param public_gists: The public_gists of this GithubOrganization.  # noqa: E501
        :type public_gists: int
        """

        self._public_gists = public_gists

    @property
    def public_members_url(self):
        """Gets the public_members_url of this GithubOrganization.  # noqa: E501


        :return: The public_members_url of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._public_members_url

    @public_members_url.setter
    def public_members_url(self, public_members_url):
        """Sets the public_members_url of this GithubOrganization.


        :param public_members_url: The public_members_url of this GithubOrganization.  # noqa: E501
        :type public_members_url: str
        """

        self._public_members_url = public_members_url

    @property
    def public_repos(self):
        """Gets the public_repos of this GithubOrganization.  # noqa: E501


        :return: The public_repos of this GithubOrganization.  # noqa: E501
        :rtype: int
        """
        return self._public_repos

    @public_repos.setter
    def public_repos(self, public_repos):
        """Sets the public_repos of this GithubOrganization.


        :param public_repos: The public_repos of this GithubOrganization.  # noqa: E501
        :type public_repos: int
        """

        self._public_repos = public_repos

    @property
    def repos_url(self):
        """Gets the repos_url of this GithubOrganization.  # noqa: E501


        :return: The repos_url of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._repos_url

    @repos_url.setter
    def repos_url(self, repos_url):
        """Sets the repos_url of this GithubOrganization.


        :param repos_url: The repos_url of this GithubOrganization.  # noqa: E501
        :type repos_url: str
        """

        self._repos_url = repos_url

    @property
    def total_private_repos(self):
        """Gets the total_private_repos of this GithubOrganization.  # noqa: E501


        :return: The total_private_repos of this GithubOrganization.  # noqa: E501
        :rtype: int
        """
        return self._total_private_repos

    @total_private_repos.setter
    def total_private_repos(self, total_private_repos):
        """Sets the total_private_repos of this GithubOrganization.


        :param total_private_repos: The total_private_repos of this GithubOrganization.  # noqa: E501
        :type total_private_repos: int
        """

        self._total_private_repos = total_private_repos

    @property
    def twitter_username(self):
        """Gets the twitter_username of this GithubOrganization.  # noqa: E501


        :return: The twitter_username of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._twitter_username

    @twitter_username.setter
    def twitter_username(self, twitter_username):
        """Sets the twitter_username of this GithubOrganization.


        :param twitter_username: The twitter_username of this GithubOrganization.  # noqa: E501
        :type twitter_username: str
        """

        self._twitter_username = twitter_username

    @property
    def two_factor_requirement_enabled(self):
        """Gets the two_factor_requirement_enabled of this GithubOrganization.  # noqa: E501


        :return: The two_factor_requirement_enabled of this GithubOrganization.  # noqa: E501
        :rtype: bool
        """
        return self._two_factor_requirement_enabled

    @two_factor_requirement_enabled.setter
    def two_factor_requirement_enabled(self, two_factor_requirement_enabled):
        """Sets the two_factor_requirement_enabled of this GithubOrganization.


        :param two_factor_requirement_enabled: The two_factor_requirement_enabled of this GithubOrganization.  # noqa: E501
        :type two_factor_requirement_enabled: bool
        """

        self._two_factor_requirement_enabled = two_factor_requirement_enabled

    @property
    def type(self):
        """Gets the type of this GithubOrganization.  # noqa: E501


        :return: The type of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GithubOrganization.


        :param type: The type of this GithubOrganization.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this GithubOrganization.  # noqa: E501


        :return: The updated_at of this GithubOrganization.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GithubOrganization.


        :param updated_at: The updated_at of this GithubOrganization.  # noqa: E501
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this GithubOrganization.  # noqa: E501


        :return: The url of this GithubOrganization.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GithubOrganization.


        :param url: The url of this GithubOrganization.  # noqa: E501
        :type url: str
        """

        self._url = url

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubOrganization):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GithubOrganization):
            return True

        return self.to_dict() != other.to_dict()
