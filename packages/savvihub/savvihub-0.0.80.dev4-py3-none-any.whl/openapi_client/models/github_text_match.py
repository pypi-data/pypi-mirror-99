# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class GithubTextMatch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'fragment': 'str',
        'matches': 'list[GithubMatch]',
        'object_type': 'str',
        'object_url': 'str',
        '_property': 'str'
    }

    attribute_map = {
        'fragment': 'fragment',
        'matches': 'matches',
        'object_type': 'object_type',
        'object_url': 'object_url',
        '_property': 'property'
    }

    def __init__(self, fragment=None, matches=None, object_type=None, object_url=None, _property=None, local_vars_configuration=None):  # noqa: E501
        """GithubTextMatch - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._fragment = None
        self._matches = None
        self._object_type = None
        self._object_url = None
        self.__property = None
        self.discriminator = None

        self.fragment = fragment
        if matches is not None:
            self.matches = matches
        self.object_type = object_type
        self.object_url = object_url
        self._property = _property

    @property
    def fragment(self):
        """Gets the fragment of this GithubTextMatch.  # noqa: E501


        :return: The fragment of this GithubTextMatch.  # noqa: E501
        :rtype: str
        """
        return self._fragment

    @fragment.setter
    def fragment(self, fragment):
        """Sets the fragment of this GithubTextMatch.


        :param fragment: The fragment of this GithubTextMatch.  # noqa: E501
        :type fragment: str
        """

        self._fragment = fragment

    @property
    def matches(self):
        """Gets the matches of this GithubTextMatch.  # noqa: E501


        :return: The matches of this GithubTextMatch.  # noqa: E501
        :rtype: list[GithubMatch]
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this GithubTextMatch.


        :param matches: The matches of this GithubTextMatch.  # noqa: E501
        :type matches: list[GithubMatch]
        """

        self._matches = matches

    @property
    def object_type(self):
        """Gets the object_type of this GithubTextMatch.  # noqa: E501


        :return: The object_type of this GithubTextMatch.  # noqa: E501
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this GithubTextMatch.


        :param object_type: The object_type of this GithubTextMatch.  # noqa: E501
        :type object_type: str
        """

        self._object_type = object_type

    @property
    def object_url(self):
        """Gets the object_url of this GithubTextMatch.  # noqa: E501


        :return: The object_url of this GithubTextMatch.  # noqa: E501
        :rtype: str
        """
        return self._object_url

    @object_url.setter
    def object_url(self, object_url):
        """Sets the object_url of this GithubTextMatch.


        :param object_url: The object_url of this GithubTextMatch.  # noqa: E501
        :type object_url: str
        """

        self._object_url = object_url

    @property
    def _property(self):
        """Gets the _property of this GithubTextMatch.  # noqa: E501


        :return: The _property of this GithubTextMatch.  # noqa: E501
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this GithubTextMatch.


        :param _property: The _property of this GithubTextMatch.  # noqa: E501
        :type _property: str
        """

        self.__property = _property

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubTextMatch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GithubTextMatch):
            return True

        return self.to_dict() != other.to_dict()
