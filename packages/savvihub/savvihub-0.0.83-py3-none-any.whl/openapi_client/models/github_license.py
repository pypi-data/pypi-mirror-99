# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class GithubLicense(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'body': 'str',
        'conditions': 'list[str]',
        'description': 'str',
        'featured': 'bool',
        'html_url': 'str',
        'implementation': 'str',
        'key': 'str',
        'limitations': 'list[str]',
        'name': 'str',
        'permissions': 'list[str]',
        'spdx_id': 'str',
        'url': 'str'
    }

    attribute_map = {
        'body': 'body',
        'conditions': 'conditions',
        'description': 'description',
        'featured': 'featured',
        'html_url': 'html_url',
        'implementation': 'implementation',
        'key': 'key',
        'limitations': 'limitations',
        'name': 'name',
        'permissions': 'permissions',
        'spdx_id': 'spdx_id',
        'url': 'url'
    }

    def __init__(self, body=None, conditions=None, description=None, featured=None, html_url=None, implementation=None, key=None, limitations=None, name=None, permissions=None, spdx_id=None, url=None, local_vars_configuration=None):  # noqa: E501
        """GithubLicense - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._body = None
        self._conditions = None
        self._description = None
        self._featured = None
        self._html_url = None
        self._implementation = None
        self._key = None
        self._limitations = None
        self._name = None
        self._permissions = None
        self._spdx_id = None
        self._url = None
        self.discriminator = None

        self.body = body
        if conditions is not None:
            self.conditions = conditions
        self.description = description
        self.featured = featured
        self.html_url = html_url
        self.implementation = implementation
        self.key = key
        if limitations is not None:
            self.limitations = limitations
        self.name = name
        if permissions is not None:
            self.permissions = permissions
        self.spdx_id = spdx_id
        self.url = url

    @property
    def body(self):
        """Gets the body of this GithubLicense.  # noqa: E501


        :return: The body of this GithubLicense.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this GithubLicense.


        :param body: The body of this GithubLicense.  # noqa: E501
        :type body: str
        """

        self._body = body

    @property
    def conditions(self):
        """Gets the conditions of this GithubLicense.  # noqa: E501


        :return: The conditions of this GithubLicense.  # noqa: E501
        :rtype: list[str]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this GithubLicense.


        :param conditions: The conditions of this GithubLicense.  # noqa: E501
        :type conditions: list[str]
        """

        self._conditions = conditions

    @property
    def description(self):
        """Gets the description of this GithubLicense.  # noqa: E501


        :return: The description of this GithubLicense.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GithubLicense.


        :param description: The description of this GithubLicense.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def featured(self):
        """Gets the featured of this GithubLicense.  # noqa: E501


        :return: The featured of this GithubLicense.  # noqa: E501
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured):
        """Sets the featured of this GithubLicense.


        :param featured: The featured of this GithubLicense.  # noqa: E501
        :type featured: bool
        """

        self._featured = featured

    @property
    def html_url(self):
        """Gets the html_url of this GithubLicense.  # noqa: E501


        :return: The html_url of this GithubLicense.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this GithubLicense.


        :param html_url: The html_url of this GithubLicense.  # noqa: E501
        :type html_url: str
        """

        self._html_url = html_url

    @property
    def implementation(self):
        """Gets the implementation of this GithubLicense.  # noqa: E501


        :return: The implementation of this GithubLicense.  # noqa: E501
        :rtype: str
        """
        return self._implementation

    @implementation.setter
    def implementation(self, implementation):
        """Sets the implementation of this GithubLicense.


        :param implementation: The implementation of this GithubLicense.  # noqa: E501
        :type implementation: str
        """

        self._implementation = implementation

    @property
    def key(self):
        """Gets the key of this GithubLicense.  # noqa: E501


        :return: The key of this GithubLicense.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this GithubLicense.


        :param key: The key of this GithubLicense.  # noqa: E501
        :type key: str
        """

        self._key = key

    @property
    def limitations(self):
        """Gets the limitations of this GithubLicense.  # noqa: E501


        :return: The limitations of this GithubLicense.  # noqa: E501
        :rtype: list[str]
        """
        return self._limitations

    @limitations.setter
    def limitations(self, limitations):
        """Sets the limitations of this GithubLicense.


        :param limitations: The limitations of this GithubLicense.  # noqa: E501
        :type limitations: list[str]
        """

        self._limitations = limitations

    @property
    def name(self):
        """Gets the name of this GithubLicense.  # noqa: E501


        :return: The name of this GithubLicense.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GithubLicense.


        :param name: The name of this GithubLicense.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def permissions(self):
        """Gets the permissions of this GithubLicense.  # noqa: E501


        :return: The permissions of this GithubLicense.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this GithubLicense.


        :param permissions: The permissions of this GithubLicense.  # noqa: E501
        :type permissions: list[str]
        """

        self._permissions = permissions

    @property
    def spdx_id(self):
        """Gets the spdx_id of this GithubLicense.  # noqa: E501


        :return: The spdx_id of this GithubLicense.  # noqa: E501
        :rtype: str
        """
        return self._spdx_id

    @spdx_id.setter
    def spdx_id(self, spdx_id):
        """Sets the spdx_id of this GithubLicense.


        :param spdx_id: The spdx_id of this GithubLicense.  # noqa: E501
        :type spdx_id: str
        """

        self._spdx_id = spdx_id

    @property
    def url(self):
        """Gets the url of this GithubLicense.  # noqa: E501


        :return: The url of this GithubLicense.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GithubLicense.


        :param url: The url of this GithubLicense.  # noqa: E501
        :type url: str
        """

        self._url = url

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubLicense):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GithubLicense):
            return True

        return self.to_dict() != other.to_dict()
