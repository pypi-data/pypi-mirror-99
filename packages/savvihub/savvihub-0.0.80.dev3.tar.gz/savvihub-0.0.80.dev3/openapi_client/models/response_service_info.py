# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ResponseServiceInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_token_id': 'int',
        'created_by': 'ResponseUser',
        'created_by_id': 'int',
        'created_dt': 'datetime',
        'dataset_id': 'int',
        'endpoints': 'list[ModelServiceEndpoint]',
        'env_vars': 'ModelEnvVars',
        'exit_code': 'int',
        'experiment_id': 'int',
        'expose_type': 'str',
        'id': 'int',
        'immutable_slug': 'str',
        'kernel_cluster': 'ResponseKernelCluster',
        'kernel_cluster_id': 'int',
        'kernel_cluster_node': 'ResponseKernelClusterNode',
        'kernel_cluster_node_id': 'int',
        'kernel_cluster_select_policies': 'ModelKernelClusterSelectPolicies',
        'kernel_image': 'ResponseKernelImage',
        'kernel_image_id': 'int',
        'kernel_resource_spec_id': 'int',
        'name': 'str',
        'ports': 'ModelServicePorts',
        'project': 'ResponseProject',
        'project_id': 'int',
        'resource_spec': 'ResponseKernelResourceSpec',
        'service_config': 'ModelServiceConfig',
        'slug': 'str',
        'start_command': 'str',
        'status': 'str',
        'status_last_updated': 'datetime',
        'status_reason': 'str',
        'template': 'ResponseServiceTemplate',
        'template_id': 'int',
        'type': 'str',
        'updated_dt': 'datetime',
        'volume_mounts': 'ResponseVolumeMountInfos',
        'workspace_id': 'int'
    }

    attribute_map = {
        'access_token_id': 'access_token_id',
        'created_by': 'created_by',
        'created_by_id': 'created_by_id',
        'created_dt': 'created_dt',
        'dataset_id': 'dataset_id',
        'endpoints': 'endpoints',
        'env_vars': 'env_vars',
        'exit_code': 'exit_code',
        'experiment_id': 'experiment_id',
        'expose_type': 'expose_type',
        'id': 'id',
        'immutable_slug': 'immutable_slug',
        'kernel_cluster': 'kernel_cluster',
        'kernel_cluster_id': 'kernel_cluster_id',
        'kernel_cluster_node': 'kernel_cluster_node',
        'kernel_cluster_node_id': 'kernel_cluster_node_id',
        'kernel_cluster_select_policies': 'kernel_cluster_select_policies',
        'kernel_image': 'kernel_image',
        'kernel_image_id': 'kernel_image_id',
        'kernel_resource_spec_id': 'kernel_resource_spec_id',
        'name': 'name',
        'ports': 'ports',
        'project': 'project',
        'project_id': 'project_id',
        'resource_spec': 'resource_spec',
        'service_config': 'service_config',
        'slug': 'slug',
        'start_command': 'start_command',
        'status': 'status',
        'status_last_updated': 'status_last_updated',
        'status_reason': 'status_reason',
        'template': 'template',
        'template_id': 'template_id',
        'type': 'type',
        'updated_dt': 'updated_dt',
        'volume_mounts': 'volume_mounts',
        'workspace_id': 'workspace_id'
    }

    def __init__(self, access_token_id=None, created_by=None, created_by_id=None, created_dt=None, dataset_id=None, endpoints=None, env_vars=None, exit_code=None, experiment_id=None, expose_type=None, id=None, immutable_slug=None, kernel_cluster=None, kernel_cluster_id=None, kernel_cluster_node=None, kernel_cluster_node_id=None, kernel_cluster_select_policies=None, kernel_image=None, kernel_image_id=None, kernel_resource_spec_id=None, name=None, ports=None, project=None, project_id=None, resource_spec=None, service_config=None, slug=None, start_command=None, status=None, status_last_updated=None, status_reason=None, template=None, template_id=None, type=None, updated_dt=None, volume_mounts=None, workspace_id=None, local_vars_configuration=None):  # noqa: E501
        """ResponseServiceInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._access_token_id = None
        self._created_by = None
        self._created_by_id = None
        self._created_dt = None
        self._dataset_id = None
        self._endpoints = None
        self._env_vars = None
        self._exit_code = None
        self._experiment_id = None
        self._expose_type = None
        self._id = None
        self._immutable_slug = None
        self._kernel_cluster = None
        self._kernel_cluster_id = None
        self._kernel_cluster_node = None
        self._kernel_cluster_node_id = None
        self._kernel_cluster_select_policies = None
        self._kernel_image = None
        self._kernel_image_id = None
        self._kernel_resource_spec_id = None
        self._name = None
        self._ports = None
        self._project = None
        self._project_id = None
        self._resource_spec = None
        self._service_config = None
        self._slug = None
        self._start_command = None
        self._status = None
        self._status_last_updated = None
        self._status_reason = None
        self._template = None
        self._template_id = None
        self._type = None
        self._updated_dt = None
        self._volume_mounts = None
        self._workspace_id = None
        self.discriminator = None

        self.access_token_id = access_token_id
        self.created_by = created_by
        self.created_by_id = created_by_id
        self.created_dt = created_dt
        self.dataset_id = dataset_id
        self.endpoints = endpoints
        if env_vars is not None:
            self.env_vars = env_vars
        self.exit_code = exit_code
        self.experiment_id = experiment_id
        self.expose_type = expose_type
        self.id = id
        self.immutable_slug = immutable_slug
        self.kernel_cluster = kernel_cluster
        self.kernel_cluster_id = kernel_cluster_id
        if kernel_cluster_node is not None:
            self.kernel_cluster_node = kernel_cluster_node
        self.kernel_cluster_node_id = kernel_cluster_node_id
        if kernel_cluster_select_policies is not None:
            self.kernel_cluster_select_policies = kernel_cluster_select_policies
        self.kernel_image = kernel_image
        self.kernel_image_id = kernel_image_id
        self.kernel_resource_spec_id = kernel_resource_spec_id
        self.name = name
        if ports is not None:
            self.ports = ports
        if project is not None:
            self.project = project
        self.project_id = project_id
        self.resource_spec = resource_spec
        if service_config is not None:
            self.service_config = service_config
        self.slug = slug
        self.start_command = start_command
        self.status = status
        self.status_last_updated = status_last_updated
        self.status_reason = status_reason
        if template is not None:
            self.template = template
        self.template_id = template_id
        self.type = type
        self.updated_dt = updated_dt
        self.volume_mounts = volume_mounts
        self.workspace_id = workspace_id

    @property
    def access_token_id(self):
        """Gets the access_token_id of this ResponseServiceInfo.  # noqa: E501


        :return: The access_token_id of this ResponseServiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._access_token_id

    @access_token_id.setter
    def access_token_id(self, access_token_id):
        """Sets the access_token_id of this ResponseServiceInfo.


        :param access_token_id: The access_token_id of this ResponseServiceInfo.  # noqa: E501
        :type access_token_id: int
        """

        self._access_token_id = access_token_id

    @property
    def created_by(self):
        """Gets the created_by of this ResponseServiceInfo.  # noqa: E501


        :return: The created_by of this ResponseServiceInfo.  # noqa: E501
        :rtype: ResponseUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ResponseServiceInfo.


        :param created_by: The created_by of this ResponseServiceInfo.  # noqa: E501
        :type created_by: ResponseUser
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_by_id(self):
        """Gets the created_by_id of this ResponseServiceInfo.  # noqa: E501


        :return: The created_by_id of this ResponseServiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this ResponseServiceInfo.


        :param created_by_id: The created_by_id of this ResponseServiceInfo.  # noqa: E501
        :type created_by_id: int
        """
        if self.local_vars_configuration.client_side_validation and created_by_id is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by_id`, must not be `None`")  # noqa: E501

        self._created_by_id = created_by_id

    @property
    def created_dt(self):
        """Gets the created_dt of this ResponseServiceInfo.  # noqa: E501


        :return: The created_dt of this ResponseServiceInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ResponseServiceInfo.


        :param created_dt: The created_dt of this ResponseServiceInfo.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def dataset_id(self):
        """Gets the dataset_id of this ResponseServiceInfo.  # noqa: E501


        :return: The dataset_id of this ResponseServiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this ResponseServiceInfo.


        :param dataset_id: The dataset_id of this ResponseServiceInfo.  # noqa: E501
        :type dataset_id: int
        """

        self._dataset_id = dataset_id

    @property
    def endpoints(self):
        """Gets the endpoints of this ResponseServiceInfo.  # noqa: E501


        :return: The endpoints of this ResponseServiceInfo.  # noqa: E501
        :rtype: list[ModelServiceEndpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this ResponseServiceInfo.


        :param endpoints: The endpoints of this ResponseServiceInfo.  # noqa: E501
        :type endpoints: list[ModelServiceEndpoint]
        """
        if self.local_vars_configuration.client_side_validation and endpoints is None:  # noqa: E501
            raise ValueError("Invalid value for `endpoints`, must not be `None`")  # noqa: E501

        self._endpoints = endpoints

    @property
    def env_vars(self):
        """Gets the env_vars of this ResponseServiceInfo.  # noqa: E501


        :return: The env_vars of this ResponseServiceInfo.  # noqa: E501
        :rtype: ModelEnvVars
        """
        return self._env_vars

    @env_vars.setter
    def env_vars(self, env_vars):
        """Sets the env_vars of this ResponseServiceInfo.


        :param env_vars: The env_vars of this ResponseServiceInfo.  # noqa: E501
        :type env_vars: ModelEnvVars
        """

        self._env_vars = env_vars

    @property
    def exit_code(self):
        """Gets the exit_code of this ResponseServiceInfo.  # noqa: E501


        :return: The exit_code of this ResponseServiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this ResponseServiceInfo.


        :param exit_code: The exit_code of this ResponseServiceInfo.  # noqa: E501
        :type exit_code: int
        """

        self._exit_code = exit_code

    @property
    def experiment_id(self):
        """Gets the experiment_id of this ResponseServiceInfo.  # noqa: E501


        :return: The experiment_id of this ResponseServiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this ResponseServiceInfo.


        :param experiment_id: The experiment_id of this ResponseServiceInfo.  # noqa: E501
        :type experiment_id: int
        """

        self._experiment_id = experiment_id

    @property
    def expose_type(self):
        """Gets the expose_type of this ResponseServiceInfo.  # noqa: E501


        :return: The expose_type of this ResponseServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._expose_type

    @expose_type.setter
    def expose_type(self, expose_type):
        """Sets the expose_type of this ResponseServiceInfo.


        :param expose_type: The expose_type of this ResponseServiceInfo.  # noqa: E501
        :type expose_type: str
        """
        if self.local_vars_configuration.client_side_validation and expose_type is None:  # noqa: E501
            raise ValueError("Invalid value for `expose_type`, must not be `None`")  # noqa: E501

        self._expose_type = expose_type

    @property
    def id(self):
        """Gets the id of this ResponseServiceInfo.  # noqa: E501


        :return: The id of this ResponseServiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseServiceInfo.


        :param id: The id of this ResponseServiceInfo.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def immutable_slug(self):
        """Gets the immutable_slug of this ResponseServiceInfo.  # noqa: E501


        :return: The immutable_slug of this ResponseServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._immutable_slug

    @immutable_slug.setter
    def immutable_slug(self, immutable_slug):
        """Sets the immutable_slug of this ResponseServiceInfo.


        :param immutable_slug: The immutable_slug of this ResponseServiceInfo.  # noqa: E501
        :type immutable_slug: str
        """
        if self.local_vars_configuration.client_side_validation and immutable_slug is None:  # noqa: E501
            raise ValueError("Invalid value for `immutable_slug`, must not be `None`")  # noqa: E501

        self._immutable_slug = immutable_slug

    @property
    def kernel_cluster(self):
        """Gets the kernel_cluster of this ResponseServiceInfo.  # noqa: E501


        :return: The kernel_cluster of this ResponseServiceInfo.  # noqa: E501
        :rtype: ResponseKernelCluster
        """
        return self._kernel_cluster

    @kernel_cluster.setter
    def kernel_cluster(self, kernel_cluster):
        """Sets the kernel_cluster of this ResponseServiceInfo.


        :param kernel_cluster: The kernel_cluster of this ResponseServiceInfo.  # noqa: E501
        :type kernel_cluster: ResponseKernelCluster
        """
        if self.local_vars_configuration.client_side_validation and kernel_cluster is None:  # noqa: E501
            raise ValueError("Invalid value for `kernel_cluster`, must not be `None`")  # noqa: E501

        self._kernel_cluster = kernel_cluster

    @property
    def kernel_cluster_id(self):
        """Gets the kernel_cluster_id of this ResponseServiceInfo.  # noqa: E501


        :return: The kernel_cluster_id of this ResponseServiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._kernel_cluster_id

    @kernel_cluster_id.setter
    def kernel_cluster_id(self, kernel_cluster_id):
        """Sets the kernel_cluster_id of this ResponseServiceInfo.


        :param kernel_cluster_id: The kernel_cluster_id of this ResponseServiceInfo.  # noqa: E501
        :type kernel_cluster_id: int
        """

        self._kernel_cluster_id = kernel_cluster_id

    @property
    def kernel_cluster_node(self):
        """Gets the kernel_cluster_node of this ResponseServiceInfo.  # noqa: E501


        :return: The kernel_cluster_node of this ResponseServiceInfo.  # noqa: E501
        :rtype: ResponseKernelClusterNode
        """
        return self._kernel_cluster_node

    @kernel_cluster_node.setter
    def kernel_cluster_node(self, kernel_cluster_node):
        """Sets the kernel_cluster_node of this ResponseServiceInfo.


        :param kernel_cluster_node: The kernel_cluster_node of this ResponseServiceInfo.  # noqa: E501
        :type kernel_cluster_node: ResponseKernelClusterNode
        """

        self._kernel_cluster_node = kernel_cluster_node

    @property
    def kernel_cluster_node_id(self):
        """Gets the kernel_cluster_node_id of this ResponseServiceInfo.  # noqa: E501


        :return: The kernel_cluster_node_id of this ResponseServiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._kernel_cluster_node_id

    @kernel_cluster_node_id.setter
    def kernel_cluster_node_id(self, kernel_cluster_node_id):
        """Sets the kernel_cluster_node_id of this ResponseServiceInfo.


        :param kernel_cluster_node_id: The kernel_cluster_node_id of this ResponseServiceInfo.  # noqa: E501
        :type kernel_cluster_node_id: int
        """

        self._kernel_cluster_node_id = kernel_cluster_node_id

    @property
    def kernel_cluster_select_policies(self):
        """Gets the kernel_cluster_select_policies of this ResponseServiceInfo.  # noqa: E501


        :return: The kernel_cluster_select_policies of this ResponseServiceInfo.  # noqa: E501
        :rtype: ModelKernelClusterSelectPolicies
        """
        return self._kernel_cluster_select_policies

    @kernel_cluster_select_policies.setter
    def kernel_cluster_select_policies(self, kernel_cluster_select_policies):
        """Sets the kernel_cluster_select_policies of this ResponseServiceInfo.


        :param kernel_cluster_select_policies: The kernel_cluster_select_policies of this ResponseServiceInfo.  # noqa: E501
        :type kernel_cluster_select_policies: ModelKernelClusterSelectPolicies
        """

        self._kernel_cluster_select_policies = kernel_cluster_select_policies

    @property
    def kernel_image(self):
        """Gets the kernel_image of this ResponseServiceInfo.  # noqa: E501


        :return: The kernel_image of this ResponseServiceInfo.  # noqa: E501
        :rtype: ResponseKernelImage
        """
        return self._kernel_image

    @kernel_image.setter
    def kernel_image(self, kernel_image):
        """Sets the kernel_image of this ResponseServiceInfo.


        :param kernel_image: The kernel_image of this ResponseServiceInfo.  # noqa: E501
        :type kernel_image: ResponseKernelImage
        """
        if self.local_vars_configuration.client_side_validation and kernel_image is None:  # noqa: E501
            raise ValueError("Invalid value for `kernel_image`, must not be `None`")  # noqa: E501

        self._kernel_image = kernel_image

    @property
    def kernel_image_id(self):
        """Gets the kernel_image_id of this ResponseServiceInfo.  # noqa: E501


        :return: The kernel_image_id of this ResponseServiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._kernel_image_id

    @kernel_image_id.setter
    def kernel_image_id(self, kernel_image_id):
        """Sets the kernel_image_id of this ResponseServiceInfo.


        :param kernel_image_id: The kernel_image_id of this ResponseServiceInfo.  # noqa: E501
        :type kernel_image_id: int
        """
        if self.local_vars_configuration.client_side_validation and kernel_image_id is None:  # noqa: E501
            raise ValueError("Invalid value for `kernel_image_id`, must not be `None`")  # noqa: E501

        self._kernel_image_id = kernel_image_id

    @property
    def kernel_resource_spec_id(self):
        """Gets the kernel_resource_spec_id of this ResponseServiceInfo.  # noqa: E501


        :return: The kernel_resource_spec_id of this ResponseServiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._kernel_resource_spec_id

    @kernel_resource_spec_id.setter
    def kernel_resource_spec_id(self, kernel_resource_spec_id):
        """Sets the kernel_resource_spec_id of this ResponseServiceInfo.


        :param kernel_resource_spec_id: The kernel_resource_spec_id of this ResponseServiceInfo.  # noqa: E501
        :type kernel_resource_spec_id: int
        """

        self._kernel_resource_spec_id = kernel_resource_spec_id

    @property
    def name(self):
        """Gets the name of this ResponseServiceInfo.  # noqa: E501


        :return: The name of this ResponseServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResponseServiceInfo.


        :param name: The name of this ResponseServiceInfo.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def ports(self):
        """Gets the ports of this ResponseServiceInfo.  # noqa: E501


        :return: The ports of this ResponseServiceInfo.  # noqa: E501
        :rtype: ModelServicePorts
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this ResponseServiceInfo.


        :param ports: The ports of this ResponseServiceInfo.  # noqa: E501
        :type ports: ModelServicePorts
        """

        self._ports = ports

    @property
    def project(self):
        """Gets the project of this ResponseServiceInfo.  # noqa: E501


        :return: The project of this ResponseServiceInfo.  # noqa: E501
        :rtype: ResponseProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ResponseServiceInfo.


        :param project: The project of this ResponseServiceInfo.  # noqa: E501
        :type project: ResponseProject
        """

        self._project = project

    @property
    def project_id(self):
        """Gets the project_id of this ResponseServiceInfo.  # noqa: E501


        :return: The project_id of this ResponseServiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ResponseServiceInfo.


        :param project_id: The project_id of this ResponseServiceInfo.  # noqa: E501
        :type project_id: int
        """

        self._project_id = project_id

    @property
    def resource_spec(self):
        """Gets the resource_spec of this ResponseServiceInfo.  # noqa: E501


        :return: The resource_spec of this ResponseServiceInfo.  # noqa: E501
        :rtype: ResponseKernelResourceSpec
        """
        return self._resource_spec

    @resource_spec.setter
    def resource_spec(self, resource_spec):
        """Sets the resource_spec of this ResponseServiceInfo.


        :param resource_spec: The resource_spec of this ResponseServiceInfo.  # noqa: E501
        :type resource_spec: ResponseKernelResourceSpec
        """
        if self.local_vars_configuration.client_side_validation and resource_spec is None:  # noqa: E501
            raise ValueError("Invalid value for `resource_spec`, must not be `None`")  # noqa: E501

        self._resource_spec = resource_spec

    @property
    def service_config(self):
        """Gets the service_config of this ResponseServiceInfo.  # noqa: E501


        :return: The service_config of this ResponseServiceInfo.  # noqa: E501
        :rtype: ModelServiceConfig
        """
        return self._service_config

    @service_config.setter
    def service_config(self, service_config):
        """Sets the service_config of this ResponseServiceInfo.


        :param service_config: The service_config of this ResponseServiceInfo.  # noqa: E501
        :type service_config: ModelServiceConfig
        """

        self._service_config = service_config

    @property
    def slug(self):
        """Gets the slug of this ResponseServiceInfo.  # noqa: E501


        :return: The slug of this ResponseServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this ResponseServiceInfo.


        :param slug: The slug of this ResponseServiceInfo.  # noqa: E501
        :type slug: str
        """
        if self.local_vars_configuration.client_side_validation and slug is None:  # noqa: E501
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def start_command(self):
        """Gets the start_command of this ResponseServiceInfo.  # noqa: E501


        :return: The start_command of this ResponseServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._start_command

    @start_command.setter
    def start_command(self, start_command):
        """Sets the start_command of this ResponseServiceInfo.


        :param start_command: The start_command of this ResponseServiceInfo.  # noqa: E501
        :type start_command: str
        """
        if self.local_vars_configuration.client_side_validation and start_command is None:  # noqa: E501
            raise ValueError("Invalid value for `start_command`, must not be `None`")  # noqa: E501

        self._start_command = start_command

    @property
    def status(self):
        """Gets the status of this ResponseServiceInfo.  # noqa: E501


        :return: The status of this ResponseServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponseServiceInfo.


        :param status: The status of this ResponseServiceInfo.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_last_updated(self):
        """Gets the status_last_updated of this ResponseServiceInfo.  # noqa: E501


        :return: The status_last_updated of this ResponseServiceInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._status_last_updated

    @status_last_updated.setter
    def status_last_updated(self, status_last_updated):
        """Sets the status_last_updated of this ResponseServiceInfo.


        :param status_last_updated: The status_last_updated of this ResponseServiceInfo.  # noqa: E501
        :type status_last_updated: datetime
        """
        if self.local_vars_configuration.client_side_validation and status_last_updated is None:  # noqa: E501
            raise ValueError("Invalid value for `status_last_updated`, must not be `None`")  # noqa: E501

        self._status_last_updated = status_last_updated

    @property
    def status_reason(self):
        """Gets the status_reason of this ResponseServiceInfo.  # noqa: E501


        :return: The status_reason of this ResponseServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this ResponseServiceInfo.


        :param status_reason: The status_reason of this ResponseServiceInfo.  # noqa: E501
        :type status_reason: str
        """
        if self.local_vars_configuration.client_side_validation and status_reason is None:  # noqa: E501
            raise ValueError("Invalid value for `status_reason`, must not be `None`")  # noqa: E501

        self._status_reason = status_reason

    @property
    def template(self):
        """Gets the template of this ResponseServiceInfo.  # noqa: E501


        :return: The template of this ResponseServiceInfo.  # noqa: E501
        :rtype: ResponseServiceTemplate
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this ResponseServiceInfo.


        :param template: The template of this ResponseServiceInfo.  # noqa: E501
        :type template: ResponseServiceTemplate
        """

        self._template = template

    @property
    def template_id(self):
        """Gets the template_id of this ResponseServiceInfo.  # noqa: E501


        :return: The template_id of this ResponseServiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this ResponseServiceInfo.


        :param template_id: The template_id of this ResponseServiceInfo.  # noqa: E501
        :type template_id: int
        """

        self._template_id = template_id

    @property
    def type(self):
        """Gets the type of this ResponseServiceInfo.  # noqa: E501


        :return: The type of this ResponseServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResponseServiceInfo.


        :param type: The type of this ResponseServiceInfo.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ResponseServiceInfo.  # noqa: E501


        :return: The updated_dt of this ResponseServiceInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ResponseServiceInfo.


        :param updated_dt: The updated_dt of this ResponseServiceInfo.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    @property
    def volume_mounts(self):
        """Gets the volume_mounts of this ResponseServiceInfo.  # noqa: E501


        :return: The volume_mounts of this ResponseServiceInfo.  # noqa: E501
        :rtype: ResponseVolumeMountInfos
        """
        return self._volume_mounts

    @volume_mounts.setter
    def volume_mounts(self, volume_mounts):
        """Sets the volume_mounts of this ResponseServiceInfo.


        :param volume_mounts: The volume_mounts of this ResponseServiceInfo.  # noqa: E501
        :type volume_mounts: ResponseVolumeMountInfos
        """
        if self.local_vars_configuration.client_side_validation and volume_mounts is None:  # noqa: E501
            raise ValueError("Invalid value for `volume_mounts`, must not be `None`")  # noqa: E501

        self._volume_mounts = volume_mounts

    @property
    def workspace_id(self):
        """Gets the workspace_id of this ResponseServiceInfo.  # noqa: E501


        :return: The workspace_id of this ResponseServiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this ResponseServiceInfo.


        :param workspace_id: The workspace_id of this ResponseServiceInfo.  # noqa: E501
        :type workspace_id: int
        """
        if self.local_vars_configuration.client_side_validation and workspace_id is None:  # noqa: E501
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")  # noqa: E501

        self._workspace_id = workspace_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseServiceInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseServiceInfo):
            return True

        return self.to_dict() != other.to_dict()
