# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ModelFileMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'h': 'str',
        'l': 'str',
        'p': 'str',
        's': 'int',
        't': 'str',
        'u': 'datetime',
        'v': 'int'
    }

    attribute_map = {
        'h': 'h',
        'l': 'l',
        'p': 'p',
        's': 's',
        't': 't',
        'u': 'u',
        'v': 'v'
    }

    def __init__(self, h=None, l=None, p=None, s=None, t=None, u=None, v=None, local_vars_configuration=None):  # noqa: E501
        """ModelFileMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._h = None
        self._l = None
        self._p = None
        self._s = None
        self._t = None
        self._u = None
        self._v = None
        self.discriminator = None

        if h is not None:
            self.h = h
        if l is not None:
            self.l = l
        if p is not None:
            self.p = p
        if s is not None:
            self.s = s
        if t is not None:
            self.t = t
        if u is not None:
            self.u = u
        if v is not None:
            self.v = v

    @property
    def h(self):
        """Gets the h of this ModelFileMetadata.  # noqa: E501


        :return: The h of this ModelFileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._h

    @h.setter
    def h(self, h):
        """Sets the h of this ModelFileMetadata.


        :param h: The h of this ModelFileMetadata.  # noqa: E501
        :type h: str
        """

        self._h = h

    @property
    def l(self):
        """Gets the l of this ModelFileMetadata.  # noqa: E501


        :return: The l of this ModelFileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._l

    @l.setter
    def l(self, l):
        """Sets the l of this ModelFileMetadata.


        :param l: The l of this ModelFileMetadata.  # noqa: E501
        :type l: str
        """

        self._l = l

    @property
    def p(self):
        """Gets the p of this ModelFileMetadata.  # noqa: E501


        :return: The p of this ModelFileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._p

    @p.setter
    def p(self, p):
        """Sets the p of this ModelFileMetadata.


        :param p: The p of this ModelFileMetadata.  # noqa: E501
        :type p: str
        """

        self._p = p

    @property
    def s(self):
        """Gets the s of this ModelFileMetadata.  # noqa: E501


        :return: The s of this ModelFileMetadata.  # noqa: E501
        :rtype: int
        """
        return self._s

    @s.setter
    def s(self, s):
        """Sets the s of this ModelFileMetadata.


        :param s: The s of this ModelFileMetadata.  # noqa: E501
        :type s: int
        """

        self._s = s

    @property
    def t(self):
        """Gets the t of this ModelFileMetadata.  # noqa: E501


        :return: The t of this ModelFileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this ModelFileMetadata.


        :param t: The t of this ModelFileMetadata.  # noqa: E501
        :type t: str
        """

        self._t = t

    @property
    def u(self):
        """Gets the u of this ModelFileMetadata.  # noqa: E501


        :return: The u of this ModelFileMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._u

    @u.setter
    def u(self, u):
        """Sets the u of this ModelFileMetadata.


        :param u: The u of this ModelFileMetadata.  # noqa: E501
        :type u: datetime
        """

        self._u = u

    @property
    def v(self):
        """Gets the v of this ModelFileMetadata.  # noqa: E501


        :return: The v of this ModelFileMetadata.  # noqa: E501
        :rtype: int
        """
        return self._v

    @v.setter
    def v(self, v):
        """Sets the v of this ModelFileMetadata.


        :param v: The v of this ModelFileMetadata.  # noqa: E501
        :type v: int
        """

        self._v = v

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelFileMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelFileMetadata):
            return True

        return self.to_dict() != other.to_dict()
