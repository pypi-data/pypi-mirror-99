# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ResponseFileMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'download_url': 'StorageFileActionURLInfo',
        'hash': 'str',
        'is_dir': 'bool',
        'path': 'str',
        'size': 'int',
        'status': 'str',
        'updated_dt': 'datetime',
        'upload_url': 'StorageFileActionURLInfo'
    }

    attribute_map = {
        'download_url': 'download_url',
        'hash': 'hash',
        'is_dir': 'is_dir',
        'path': 'path',
        'size': 'size',
        'status': 'status',
        'updated_dt': 'updated_dt',
        'upload_url': 'upload_url'
    }

    def __init__(self, download_url=None, hash=None, is_dir=None, path=None, size=None, status=None, updated_dt=None, upload_url=None, local_vars_configuration=None):  # noqa: E501
        """ResponseFileMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._download_url = None
        self._hash = None
        self._is_dir = None
        self._path = None
        self._size = None
        self._status = None
        self._updated_dt = None
        self._upload_url = None
        self.discriminator = None

        if download_url is not None:
            self.download_url = download_url
        self.hash = hash
        self.is_dir = is_dir
        self.path = path
        self.size = size
        self.status = status
        self.updated_dt = updated_dt
        if upload_url is not None:
            self.upload_url = upload_url

    @property
    def download_url(self):
        """Gets the download_url of this ResponseFileMetadata.  # noqa: E501


        :return: The download_url of this ResponseFileMetadata.  # noqa: E501
        :rtype: StorageFileActionURLInfo
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this ResponseFileMetadata.


        :param download_url: The download_url of this ResponseFileMetadata.  # noqa: E501
        :type download_url: StorageFileActionURLInfo
        """

        self._download_url = download_url

    @property
    def hash(self):
        """Gets the hash of this ResponseFileMetadata.  # noqa: E501


        :return: The hash of this ResponseFileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this ResponseFileMetadata.


        :param hash: The hash of this ResponseFileMetadata.  # noqa: E501
        :type hash: str
        """
        if self.local_vars_configuration.client_side_validation and hash is None:  # noqa: E501
            raise ValueError("Invalid value for `hash`, must not be `None`")  # noqa: E501

        self._hash = hash

    @property
    def is_dir(self):
        """Gets the is_dir of this ResponseFileMetadata.  # noqa: E501


        :return: The is_dir of this ResponseFileMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._is_dir

    @is_dir.setter
    def is_dir(self, is_dir):
        """Sets the is_dir of this ResponseFileMetadata.


        :param is_dir: The is_dir of this ResponseFileMetadata.  # noqa: E501
        :type is_dir: bool
        """
        if self.local_vars_configuration.client_side_validation and is_dir is None:  # noqa: E501
            raise ValueError("Invalid value for `is_dir`, must not be `None`")  # noqa: E501

        self._is_dir = is_dir

    @property
    def path(self):
        """Gets the path of this ResponseFileMetadata.  # noqa: E501


        :return: The path of this ResponseFileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ResponseFileMetadata.


        :param path: The path of this ResponseFileMetadata.  # noqa: E501
        :type path: str
        """
        if self.local_vars_configuration.client_side_validation and path is None:  # noqa: E501
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def size(self):
        """Gets the size of this ResponseFileMetadata.  # noqa: E501


        :return: The size of this ResponseFileMetadata.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ResponseFileMetadata.


        :param size: The size of this ResponseFileMetadata.  # noqa: E501
        :type size: int
        """
        if self.local_vars_configuration.client_side_validation and size is None:  # noqa: E501
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def status(self):
        """Gets the status of this ResponseFileMetadata.  # noqa: E501


        :return: The status of this ResponseFileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponseFileMetadata.


        :param status: The status of this ResponseFileMetadata.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ResponseFileMetadata.  # noqa: E501


        :return: The updated_dt of this ResponseFileMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ResponseFileMetadata.


        :param updated_dt: The updated_dt of this ResponseFileMetadata.  # noqa: E501
        :type updated_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_dt`, must not be `None`")  # noqa: E501

        self._updated_dt = updated_dt

    @property
    def upload_url(self):
        """Gets the upload_url of this ResponseFileMetadata.  # noqa: E501


        :return: The upload_url of this ResponseFileMetadata.  # noqa: E501
        :rtype: StorageFileActionURLInfo
        """
        return self._upload_url

    @upload_url.setter
    def upload_url(self, upload_url):
        """Sets the upload_url of this ResponseFileMetadata.


        :param upload_url: The upload_url of this ResponseFileMetadata.  # noqa: E501
        :type upload_url: StorageFileActionURLInfo
        """

        self._upload_url = upload_url

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseFileMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseFileMetadata):
            return True

        return self.to_dict() != other.to_dict()
