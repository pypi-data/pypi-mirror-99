# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ModelVolumeEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'snapshot_volume': 'ModelVolume',
        'storage': 'ModelStorage',
        'workspace': 'ModelWorkspace'
    }

    attribute_map = {
        'snapshot_volume': 'snapshot_volume',
        'storage': 'storage',
        'workspace': 'workspace'
    }

    def __init__(self, snapshot_volume=None, storage=None, workspace=None, local_vars_configuration=None):  # noqa: E501
        """ModelVolumeEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._snapshot_volume = None
        self._storage = None
        self._workspace = None
        self.discriminator = None

        if snapshot_volume is not None:
            self.snapshot_volume = snapshot_volume
        if storage is not None:
            self.storage = storage
        if workspace is not None:
            self.workspace = workspace

    @property
    def snapshot_volume(self):
        """Gets the snapshot_volume of this ModelVolumeEdges.  # noqa: E501


        :return: The snapshot_volume of this ModelVolumeEdges.  # noqa: E501
        :rtype: ModelVolume
        """
        return self._snapshot_volume

    @snapshot_volume.setter
    def snapshot_volume(self, snapshot_volume):
        """Sets the snapshot_volume of this ModelVolumeEdges.


        :param snapshot_volume: The snapshot_volume of this ModelVolumeEdges.  # noqa: E501
        :type snapshot_volume: ModelVolume
        """

        self._snapshot_volume = snapshot_volume

    @property
    def storage(self):
        """Gets the storage of this ModelVolumeEdges.  # noqa: E501


        :return: The storage of this ModelVolumeEdges.  # noqa: E501
        :rtype: ModelStorage
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this ModelVolumeEdges.


        :param storage: The storage of this ModelVolumeEdges.  # noqa: E501
        :type storage: ModelStorage
        """

        self._storage = storage

    @property
    def workspace(self):
        """Gets the workspace of this ModelVolumeEdges.  # noqa: E501


        :return: The workspace of this ModelVolumeEdges.  # noqa: E501
        :rtype: ModelWorkspace
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this ModelVolumeEdges.


        :param workspace: The workspace of this ModelVolumeEdges.  # noqa: E501
        :type workspace: ModelWorkspace
        """

        self._workspace = workspace

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelVolumeEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelVolumeEdges):
            return True

        return self.to_dict() != other.to_dict()
