# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ModelKernelImage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'command': 'str',
        'created_dt': 'datetime',
        'description': 'str',
        'edges': 'ModelKernelImageEdges',
        'execute_type': 'str',
        'id': 'int',
        'image_pull_policy': 'str',
        'image_url': 'str',
        'immutable_slug': 'str',
        'is_public': 'bool',
        'is_savvihub_managed': 'bool',
        'language': 'str',
        'name': 'str',
        'packages': 'str',
        'processor_type': 'str',
        'updated_dt': 'datetime',
        'working_dir': 'str'
    }

    attribute_map = {
        'command': 'command',
        'created_dt': 'created_dt',
        'description': 'description',
        'edges': 'edges',
        'execute_type': 'execute_type',
        'id': 'id',
        'image_pull_policy': 'image_pull_policy',
        'image_url': 'image_url',
        'immutable_slug': 'immutable_slug',
        'is_public': 'is_public',
        'is_savvihub_managed': 'is_savvihub_managed',
        'language': 'language',
        'name': 'name',
        'packages': 'packages',
        'processor_type': 'processor_type',
        'updated_dt': 'updated_dt',
        'working_dir': 'working_dir'
    }

    def __init__(self, command=None, created_dt=None, description=None, edges=None, execute_type=None, id=None, image_pull_policy=None, image_url=None, immutable_slug=None, is_public=None, is_savvihub_managed=None, language=None, name=None, packages=None, processor_type=None, updated_dt=None, working_dir=None, local_vars_configuration=None):  # noqa: E501
        """ModelKernelImage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._command = None
        self._created_dt = None
        self._description = None
        self._edges = None
        self._execute_type = None
        self._id = None
        self._image_pull_policy = None
        self._image_url = None
        self._immutable_slug = None
        self._is_public = None
        self._is_savvihub_managed = None
        self._language = None
        self._name = None
        self._packages = None
        self._processor_type = None
        self._updated_dt = None
        self._working_dir = None
        self.discriminator = None

        if command is not None:
            self.command = command
        self.created_dt = created_dt
        self.description = description
        if edges is not None:
            self.edges = edges
        self.execute_type = execute_type
        if id is not None:
            self.id = id
        if image_pull_policy is not None:
            self.image_pull_policy = image_pull_policy
        if image_url is not None:
            self.image_url = image_url
        if immutable_slug is not None:
            self.immutable_slug = immutable_slug
        if is_public is not None:
            self.is_public = is_public
        if is_savvihub_managed is not None:
            self.is_savvihub_managed = is_savvihub_managed
        self.language = language
        if name is not None:
            self.name = name
        if packages is not None:
            self.packages = packages
        self.processor_type = processor_type
        self.updated_dt = updated_dt
        self.working_dir = working_dir

    @property
    def command(self):
        """Gets the command of this ModelKernelImage.  # noqa: E501


        :return: The command of this ModelKernelImage.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this ModelKernelImage.


        :param command: The command of this ModelKernelImage.  # noqa: E501
        :type command: str
        """

        self._command = command

    @property
    def created_dt(self):
        """Gets the created_dt of this ModelKernelImage.  # noqa: E501


        :return: The created_dt of this ModelKernelImage.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ModelKernelImage.


        :param created_dt: The created_dt of this ModelKernelImage.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def description(self):
        """Gets the description of this ModelKernelImage.  # noqa: E501


        :return: The description of this ModelKernelImage.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelKernelImage.


        :param description: The description of this ModelKernelImage.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def edges(self):
        """Gets the edges of this ModelKernelImage.  # noqa: E501


        :return: The edges of this ModelKernelImage.  # noqa: E501
        :rtype: ModelKernelImageEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this ModelKernelImage.


        :param edges: The edges of this ModelKernelImage.  # noqa: E501
        :type edges: ModelKernelImageEdges
        """

        self._edges = edges

    @property
    def execute_type(self):
        """Gets the execute_type of this ModelKernelImage.  # noqa: E501


        :return: The execute_type of this ModelKernelImage.  # noqa: E501
        :rtype: str
        """
        return self._execute_type

    @execute_type.setter
    def execute_type(self, execute_type):
        """Sets the execute_type of this ModelKernelImage.


        :param execute_type: The execute_type of this ModelKernelImage.  # noqa: E501
        :type execute_type: str
        """

        self._execute_type = execute_type

    @property
    def id(self):
        """Gets the id of this ModelKernelImage.  # noqa: E501


        :return: The id of this ModelKernelImage.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelKernelImage.


        :param id: The id of this ModelKernelImage.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def image_pull_policy(self):
        """Gets the image_pull_policy of this ModelKernelImage.  # noqa: E501


        :return: The image_pull_policy of this ModelKernelImage.  # noqa: E501
        :rtype: str
        """
        return self._image_pull_policy

    @image_pull_policy.setter
    def image_pull_policy(self, image_pull_policy):
        """Sets the image_pull_policy of this ModelKernelImage.


        :param image_pull_policy: The image_pull_policy of this ModelKernelImage.  # noqa: E501
        :type image_pull_policy: str
        """

        self._image_pull_policy = image_pull_policy

    @property
    def image_url(self):
        """Gets the image_url of this ModelKernelImage.  # noqa: E501


        :return: The image_url of this ModelKernelImage.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this ModelKernelImage.


        :param image_url: The image_url of this ModelKernelImage.  # noqa: E501
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def immutable_slug(self):
        """Gets the immutable_slug of this ModelKernelImage.  # noqa: E501


        :return: The immutable_slug of this ModelKernelImage.  # noqa: E501
        :rtype: str
        """
        return self._immutable_slug

    @immutable_slug.setter
    def immutable_slug(self, immutable_slug):
        """Sets the immutable_slug of this ModelKernelImage.


        :param immutable_slug: The immutable_slug of this ModelKernelImage.  # noqa: E501
        :type immutable_slug: str
        """

        self._immutable_slug = immutable_slug

    @property
    def is_public(self):
        """Gets the is_public of this ModelKernelImage.  # noqa: E501


        :return: The is_public of this ModelKernelImage.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this ModelKernelImage.


        :param is_public: The is_public of this ModelKernelImage.  # noqa: E501
        :type is_public: bool
        """

        self._is_public = is_public

    @property
    def is_savvihub_managed(self):
        """Gets the is_savvihub_managed of this ModelKernelImage.  # noqa: E501


        :return: The is_savvihub_managed of this ModelKernelImage.  # noqa: E501
        :rtype: bool
        """
        return self._is_savvihub_managed

    @is_savvihub_managed.setter
    def is_savvihub_managed(self, is_savvihub_managed):
        """Sets the is_savvihub_managed of this ModelKernelImage.


        :param is_savvihub_managed: The is_savvihub_managed of this ModelKernelImage.  # noqa: E501
        :type is_savvihub_managed: bool
        """

        self._is_savvihub_managed = is_savvihub_managed

    @property
    def language(self):
        """Gets the language of this ModelKernelImage.  # noqa: E501


        :return: The language of this ModelKernelImage.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ModelKernelImage.


        :param language: The language of this ModelKernelImage.  # noqa: E501
        :type language: str
        """

        self._language = language

    @property
    def name(self):
        """Gets the name of this ModelKernelImage.  # noqa: E501


        :return: The name of this ModelKernelImage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelKernelImage.


        :param name: The name of this ModelKernelImage.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def packages(self):
        """Gets the packages of this ModelKernelImage.  # noqa: E501


        :return: The packages of this ModelKernelImage.  # noqa: E501
        :rtype: str
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this ModelKernelImage.


        :param packages: The packages of this ModelKernelImage.  # noqa: E501
        :type packages: str
        """

        self._packages = packages

    @property
    def processor_type(self):
        """Gets the processor_type of this ModelKernelImage.  # noqa: E501


        :return: The processor_type of this ModelKernelImage.  # noqa: E501
        :rtype: str
        """
        return self._processor_type

    @processor_type.setter
    def processor_type(self, processor_type):
        """Sets the processor_type of this ModelKernelImage.


        :param processor_type: The processor_type of this ModelKernelImage.  # noqa: E501
        :type processor_type: str
        """

        self._processor_type = processor_type

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ModelKernelImage.  # noqa: E501


        :return: The updated_dt of this ModelKernelImage.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ModelKernelImage.


        :param updated_dt: The updated_dt of this ModelKernelImage.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    @property
    def working_dir(self):
        """Gets the working_dir of this ModelKernelImage.  # noqa: E501


        :return: The working_dir of this ModelKernelImage.  # noqa: E501
        :rtype: str
        """
        return self._working_dir

    @working_dir.setter
    def working_dir(self, working_dir):
        """Sets the working_dir of this ModelKernelImage.


        :param working_dir: The working_dir of this ModelKernelImage.  # noqa: E501
        :type working_dir: str
        """

        self._working_dir = working_dir

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelKernelImage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelKernelImage):
            return True

        return self.to_dict() != other.to_dict()
