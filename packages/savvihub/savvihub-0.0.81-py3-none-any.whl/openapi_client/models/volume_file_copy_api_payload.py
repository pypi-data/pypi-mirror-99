# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class VolumeFileCopyAPIPayload(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dest_path': 'str',
        'recursive': 'bool',
        'source_path': 'str',
        'source_snapshot': 'str'
    }

    attribute_map = {
        'dest_path': 'dest_path',
        'recursive': 'recursive',
        'source_path': 'source_path',
        'source_snapshot': 'source_snapshot'
    }

    def __init__(self, dest_path=None, recursive=None, source_path=None, source_snapshot='latest', local_vars_configuration=None):  # noqa: E501
        """VolumeFileCopyAPIPayload - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._dest_path = None
        self._recursive = None
        self._source_path = None
        self._source_snapshot = None
        self.discriminator = None

        if dest_path is not None:
            self.dest_path = dest_path
        if recursive is not None:
            self.recursive = recursive
        if source_path is not None:
            self.source_path = source_path
        if source_snapshot is not None:
            self.source_snapshot = source_snapshot

    @property
    def dest_path(self):
        """Gets the dest_path of this VolumeFileCopyAPIPayload.  # noqa: E501


        :return: The dest_path of this VolumeFileCopyAPIPayload.  # noqa: E501
        :rtype: str
        """
        return self._dest_path

    @dest_path.setter
    def dest_path(self, dest_path):
        """Sets the dest_path of this VolumeFileCopyAPIPayload.


        :param dest_path: The dest_path of this VolumeFileCopyAPIPayload.  # noqa: E501
        :type dest_path: str
        """

        self._dest_path = dest_path

    @property
    def recursive(self):
        """Gets the recursive of this VolumeFileCopyAPIPayload.  # noqa: E501


        :return: The recursive of this VolumeFileCopyAPIPayload.  # noqa: E501
        :rtype: bool
        """
        return self._recursive

    @recursive.setter
    def recursive(self, recursive):
        """Sets the recursive of this VolumeFileCopyAPIPayload.


        :param recursive: The recursive of this VolumeFileCopyAPIPayload.  # noqa: E501
        :type recursive: bool
        """

        self._recursive = recursive

    @property
    def source_path(self):
        """Gets the source_path of this VolumeFileCopyAPIPayload.  # noqa: E501


        :return: The source_path of this VolumeFileCopyAPIPayload.  # noqa: E501
        :rtype: str
        """
        return self._source_path

    @source_path.setter
    def source_path(self, source_path):
        """Sets the source_path of this VolumeFileCopyAPIPayload.


        :param source_path: The source_path of this VolumeFileCopyAPIPayload.  # noqa: E501
        :type source_path: str
        """

        self._source_path = source_path

    @property
    def source_snapshot(self):
        """Gets the source_snapshot of this VolumeFileCopyAPIPayload.  # noqa: E501


        :return: The source_snapshot of this VolumeFileCopyAPIPayload.  # noqa: E501
        :rtype: str
        """
        return self._source_snapshot

    @source_snapshot.setter
    def source_snapshot(self, source_snapshot):
        """Sets the source_snapshot of this VolumeFileCopyAPIPayload.


        :param source_snapshot: The source_snapshot of this VolumeFileCopyAPIPayload.  # noqa: E501
        :type source_snapshot: str
        """

        self._source_snapshot = source_snapshot

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeFileCopyAPIPayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VolumeFileCopyAPIPayload):
            return True

        return self.to_dict() != other.to_dict()
