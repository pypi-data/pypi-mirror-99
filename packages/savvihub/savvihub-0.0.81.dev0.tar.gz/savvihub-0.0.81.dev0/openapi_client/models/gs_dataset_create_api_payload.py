# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class GSDatasetCreateAPIPayload(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'gs_path': 'str',
        'is_public': 'bool',
        'name': 'str',
        'project_name': 'str'
    }

    attribute_map = {
        'description': 'description',
        'gs_path': 'gs_path',
        'is_public': 'is_public',
        'name': 'name',
        'project_name': 'project_name'
    }

    def __init__(self, description=None, gs_path=None, is_public=None, name=None, project_name=None, local_vars_configuration=None):  # noqa: E501
        """GSDatasetCreateAPIPayload - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._gs_path = None
        self._is_public = None
        self._name = None
        self._project_name = None
        self.discriminator = None

        self.description = description
        self.gs_path = gs_path
        if is_public is not None:
            self.is_public = is_public
        self.name = name
        self.project_name = project_name

    @property
    def description(self):
        """Gets the description of this GSDatasetCreateAPIPayload.  # noqa: E501


        :return: The description of this GSDatasetCreateAPIPayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GSDatasetCreateAPIPayload.


        :param description: The description of this GSDatasetCreateAPIPayload.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def gs_path(self):
        """Gets the gs_path of this GSDatasetCreateAPIPayload.  # noqa: E501


        :return: The gs_path of this GSDatasetCreateAPIPayload.  # noqa: E501
        :rtype: str
        """
        return self._gs_path

    @gs_path.setter
    def gs_path(self, gs_path):
        """Sets the gs_path of this GSDatasetCreateAPIPayload.


        :param gs_path: The gs_path of this GSDatasetCreateAPIPayload.  # noqa: E501
        :type gs_path: str
        """
        if self.local_vars_configuration.client_side_validation and gs_path is None:  # noqa: E501
            raise ValueError("Invalid value for `gs_path`, must not be `None`")  # noqa: E501

        self._gs_path = gs_path

    @property
    def is_public(self):
        """Gets the is_public of this GSDatasetCreateAPIPayload.  # noqa: E501


        :return: The is_public of this GSDatasetCreateAPIPayload.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this GSDatasetCreateAPIPayload.


        :param is_public: The is_public of this GSDatasetCreateAPIPayload.  # noqa: E501
        :type is_public: bool
        """

        self._is_public = is_public

    @property
    def name(self):
        """Gets the name of this GSDatasetCreateAPIPayload.  # noqa: E501


        :return: The name of this GSDatasetCreateAPIPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GSDatasetCreateAPIPayload.


        :param name: The name of this GSDatasetCreateAPIPayload.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def project_name(self):
        """Gets the project_name of this GSDatasetCreateAPIPayload.  # noqa: E501


        :return: The project_name of this GSDatasetCreateAPIPayload.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this GSDatasetCreateAPIPayload.


        :param project_name: The project_name of this GSDatasetCreateAPIPayload.  # noqa: E501
        :type project_name: str
        """

        self._project_name = project_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GSDatasetCreateAPIPayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GSDatasetCreateAPIPayload):
            return True

        return self.to_dict() != other.to_dict()
