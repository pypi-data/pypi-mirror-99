# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 15.5.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401

import six

# NOTE: This file is auto generated by the swagger code generator program.
# Do not edit the class manually.


class TreeContainerRequestSpec(object):

    swagger_types = {
        'fields': 'list[str]',
        'filter': 'str',
        'limit': 'int',
        'sort': 'str',
        'join_origin': 'bool'
    }

    attribute_map = {
        'fields': 'fields',
        'filter': 'filter',
        'limit': 'limit',
        'sort': 'sort',
        'join_origin': 'join-origin'
    }

    rattribute_map = {
        'fields': 'fields',
        'filter': 'filter',
        'limit': 'limit',
        'sort': 'sort',
        'join-origin': 'join_origin'
    }

    def __init__(self, fields=None, filter=None, limit=None, sort=None, join_origin=None):  # noqa: E501
        """TreeContainerRequestSpec - a model defined in Swagger"""
        super(TreeContainerRequestSpec, self).__init__()

        self._fields = None
        self._filter = None
        self._limit = None
        self._sort = None
        self._join_origin = None
        self.discriminator = None
        self.alt_discriminator = None

        self.fields = fields
        if filter is not None:
            self.filter = filter
        if limit is not None:
            self.limit = limit
        if sort is not None:
            self.sort = sort
        if join_origin is not None:
            self.join_origin = join_origin

    @property
    def fields(self):
        """Gets the fields of this TreeContainerRequestSpec.

        The list of fields to include

        :return: The fields of this TreeContainerRequestSpec.
        :rtype: list[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this TreeContainerRequestSpec.

        The list of fields to include

        :param fields: The fields of this TreeContainerRequestSpec.  # noqa: E501
        :type: list[str]
        """

        self._fields = fields

    @property
    def filter(self):
        """Gets the filter of this TreeContainerRequestSpec.

        The optional, comma-separated filter string

        :return: The filter of this TreeContainerRequestSpec.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this TreeContainerRequestSpec.

        The optional, comma-separated filter string

        :param filter: The filter of this TreeContainerRequestSpec.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def limit(self):
        """Gets the limit of this TreeContainerRequestSpec.

        The optional maximum number of children to include

        :return: The limit of this TreeContainerRequestSpec.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this TreeContainerRequestSpec.

        The optional maximum number of children to include

        :param limit: The limit of this TreeContainerRequestSpec.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def sort(self):
        """Gets the sort of this TreeContainerRequestSpec.

        The optional, comma-separated, sort specification

        :return: The sort of this TreeContainerRequestSpec.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this TreeContainerRequestSpec.

        The optional, comma-separated, sort specification

        :param sort: The sort of this TreeContainerRequestSpec.  # noqa: E501
        :type: str
        """

        self._sort = sort

    @property
    def join_origin(self):
        """Gets the join_origin of this TreeContainerRequestSpec.

        Whether or not to join file origins, default is false

        :return: The join_origin of this TreeContainerRequestSpec.
        :rtype: bool
        """
        return self._join_origin

    @join_origin.setter
    def join_origin(self, join_origin):
        """Sets the join_origin of this TreeContainerRequestSpec.

        Whether or not to join file origins, default is false

        :param join_origin: The join_origin of this TreeContainerRequestSpec.  # noqa: E501
        :type: bool
        """

        self._join_origin = join_origin


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TreeContainerRequestSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
