# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 14.6.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401

import six

from flywheel.models.tree_container_request_spec import TreeContainerRequestSpec  # noqa: F401,E501

# NOTE: This file is auto generated by the swagger code generator program.
# Do not edit the class manually.


class TreeRequest(object):

    swagger_types = {
        'groups': 'TreeContainerRequestSpec',
        'projects': 'TreeContainerRequestSpec',
        'subjects': 'TreeContainerRequestSpec',
        'sessions': 'TreeContainerRequestSpec',
        'acquisitions': 'TreeContainerRequestSpec',
        'analyses': 'TreeContainerRequestSpec',
        'jobs': 'TreeContainerRequestSpec'
    }

    attribute_map = {
        'groups': 'groups',
        'projects': 'projects',
        'subjects': 'subjects',
        'sessions': 'sessions',
        'acquisitions': 'acquisitions',
        'analyses': 'analyses',
        'jobs': 'jobs'
    }

    rattribute_map = {
        'groups': 'groups',
        'projects': 'projects',
        'subjects': 'subjects',
        'sessions': 'sessions',
        'acquisitions': 'acquisitions',
        'analyses': 'analyses',
        'jobs': 'jobs'
    }

    def __init__(self, groups=None, projects=None, subjects=None, sessions=None, acquisitions=None, analyses=None, jobs=None):  # noqa: E501
        """TreeRequest - a model defined in Swagger"""
        super(TreeRequest, self).__init__()

        self._groups = None
        self._projects = None
        self._subjects = None
        self._sessions = None
        self._acquisitions = None
        self._analyses = None
        self._jobs = None
        self.discriminator = None
        self.alt_discriminator = None

        if groups is not None:
            self.groups = groups
        if projects is not None:
            self.projects = projects
        if subjects is not None:
            self.subjects = subjects
        if sessions is not None:
            self.sessions = sessions
        if acquisitions is not None:
            self.acquisitions = acquisitions
        if analyses is not None:
            self.analyses = analyses
        if jobs is not None:
            self.jobs = jobs

    @property
    def groups(self):
        """Gets the groups of this TreeRequest.


        :return: The groups of this TreeRequest.
        :rtype: TreeContainerRequestSpec
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this TreeRequest.


        :param groups: The groups of this TreeRequest.  # noqa: E501
        :type: TreeContainerRequestSpec
        """

        self._groups = groups

    @property
    def projects(self):
        """Gets the projects of this TreeRequest.


        :return: The projects of this TreeRequest.
        :rtype: TreeContainerRequestSpec
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this TreeRequest.


        :param projects: The projects of this TreeRequest.  # noqa: E501
        :type: TreeContainerRequestSpec
        """

        self._projects = projects

    @property
    def subjects(self):
        """Gets the subjects of this TreeRequest.


        :return: The subjects of this TreeRequest.
        :rtype: TreeContainerRequestSpec
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects):
        """Sets the subjects of this TreeRequest.


        :param subjects: The subjects of this TreeRequest.  # noqa: E501
        :type: TreeContainerRequestSpec
        """

        self._subjects = subjects

    @property
    def sessions(self):
        """Gets the sessions of this TreeRequest.


        :return: The sessions of this TreeRequest.
        :rtype: TreeContainerRequestSpec
        """
        return self._sessions

    @sessions.setter
    def sessions(self, sessions):
        """Sets the sessions of this TreeRequest.


        :param sessions: The sessions of this TreeRequest.  # noqa: E501
        :type: TreeContainerRequestSpec
        """

        self._sessions = sessions

    @property
    def acquisitions(self):
        """Gets the acquisitions of this TreeRequest.


        :return: The acquisitions of this TreeRequest.
        :rtype: TreeContainerRequestSpec
        """
        return self._acquisitions

    @acquisitions.setter
    def acquisitions(self, acquisitions):
        """Sets the acquisitions of this TreeRequest.


        :param acquisitions: The acquisitions of this TreeRequest.  # noqa: E501
        :type: TreeContainerRequestSpec
        """

        self._acquisitions = acquisitions

    @property
    def analyses(self):
        """Gets the analyses of this TreeRequest.


        :return: The analyses of this TreeRequest.
        :rtype: TreeContainerRequestSpec
        """
        return self._analyses

    @analyses.setter
    def analyses(self, analyses):
        """Sets the analyses of this TreeRequest.


        :param analyses: The analyses of this TreeRequest.  # noqa: E501
        :type: TreeContainerRequestSpec
        """

        self._analyses = analyses

    @property
    def jobs(self):
        """Gets the jobs of this TreeRequest.


        :return: The jobs of this TreeRequest.
        :rtype: TreeContainerRequestSpec
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this TreeRequest.


        :param jobs: The jobs of this TreeRequest.  # noqa: E501
        :type: TreeContainerRequestSpec
        """

        self._jobs = jobs


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TreeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
