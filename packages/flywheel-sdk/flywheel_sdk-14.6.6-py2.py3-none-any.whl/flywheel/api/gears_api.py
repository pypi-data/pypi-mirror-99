# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 14.6.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from flywheel.api_client import ApiClient
import flywheel.models

# NOTE: This file is auto generated by the swagger code generator program.
# Do not edit the class manually.

class GearsApi(object):
    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_gear(self, gear_id_or_name, body, **kwargs):  # noqa: E501
        """Create or update a gear.

        If no existing gear is found, one will be created Otherwise, the specified gear will be updated 
        This method makes a synchronous HTTP request by default.

        :param str gear_id_or_name: Name of the gear to interact with (required)
        :param GearDoc body: (required)
        :param bool async_: Perform the request asynchronously
        :return: CollectionNewOutput
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.add_gear_with_http_info(gear_id_or_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_gear_with_http_info(gear_id_or_name, body, **kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def add_gear_with_http_info(self, gear_id_or_name, body, **kwargs):  # noqa: E501
        """Create or update a gear.

        If no existing gear is found, one will be created Otherwise, the specified gear will be updated 
        This method makes a synchronous HTTP request by default.

        :param str gear_id_or_name: Name of the gear to interact with (required)
        :param GearDoc body: (required)
        :param bool async: Perform the request asynchronously
        :return: CollectionNewOutput
        """

        all_params = ['gear_id_or_name', 'body']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_gear" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gear_id_or_name' is set
        if ('gear_id_or_name' not in params or
                params['gear_id_or_name'] is None):
            raise ValueError("Missing the required parameter `gear_id_or_name` when calling `add_gear`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_gear`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'gear_id_or_name' in params:
            path_params['GearIdOrName'] = params['gear_id_or_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = flywheel.models.GearDoc.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/{GearIdOrName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionNewOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def delete_gear(self, gear_id_or_name, **kwargs):  # noqa: E501
        """Delete a gear (not recommended)

        This method makes a synchronous HTTP request by default.

        :param str gear_id_or_name: Id of the gear to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.delete_gear_with_http_info(gear_id_or_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_gear_with_http_info(gear_id_or_name, **kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def delete_gear_with_http_info(self, gear_id_or_name, **kwargs):  # noqa: E501
        """Delete a gear (not recommended)

        This method makes a synchronous HTTP request by default.

        :param str gear_id_or_name: Id of the gear to interact with (required)
        :param bool async: Perform the request asynchronously
        :return: None
        """

        all_params = ['gear_id_or_name']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_gear" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gear_id_or_name' is set
        if ('gear_id_or_name' not in params or
                params['gear_id_or_name'] is None):
            raise ValueError("Missing the required parameter `gear_id_or_name` when calling `delete_gear`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'gear_id_or_name' in params:
            path_params['GearIdOrName'] = params['gear_id_or_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/{GearIdOrName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_all_gears(self, **kwargs):  # noqa: E501
        """List all gears

        This method makes a synchronous HTTP request by default.

        :param bool all_versions: return all versions of each gear
        :param bool include_invalid: return gears with the 'invalid' flag set
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param bool async_: Perform the request asynchronously
        :return: list[GearDoc]
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_all_gears_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_gears_with_http_info(**kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def get_all_gears_with_http_info(self, **kwargs):  # noqa: E501
        """List all gears

        This method makes a synchronous HTTP request by default.

        :param bool all_versions: return all versions of each gear
        :param bool include_invalid: return gears with the 'invalid' flag set
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param bool async: Perform the request asynchronously
        :return: list[GearDoc]
        """

        all_params = ['all_versions', 'include_invalid', 'filter', 'sort', 'limit', 'skip', 'page', 'after_id']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_gears" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_versions' in params:
            query_params.append(('all_versions', params['all_versions']))  # noqa: E501
        if 'include_invalid' in params:
            query_params.append(('include_invalid', params['include_invalid']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'after_id' in params:
            query_params.append(('after_id', params['after_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GearDoc]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_gear(self, gear_id_or_name, **kwargs):  # noqa: E501
        """Retrieve details about a specific gear

        This method makes a synchronous HTTP request by default.

        :param str gear_id_or_name: Id of the gear to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: GearDoc
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_gear_with_http_info(gear_id_or_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gear_with_http_info(gear_id_or_name, **kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def get_gear_with_http_info(self, gear_id_or_name, **kwargs):  # noqa: E501
        """Retrieve details about a specific gear

        This method makes a synchronous HTTP request by default.

        :param str gear_id_or_name: Id of the gear to interact with (required)
        :param bool async: Perform the request asynchronously
        :return: GearDoc
        """

        all_params = ['gear_id_or_name']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gear" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gear_id_or_name' is set
        if ('gear_id_or_name' not in params or
                params['gear_id_or_name'] is None):
            raise ValueError("Missing the required parameter `gear_id_or_name` when calling `get_gear`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'gear_id_or_name' in params:
            path_params['GearIdOrName'] = params['gear_id_or_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/{GearIdOrName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GearDoc',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_gear_context(self, gear_id, container_type, container_id, **kwargs):  # noqa: E501
        """Get context values for the given gear and container.

        Ref: https://github.com/flywheel-io/gears/tree/master/spec#contextual-values 
        This method makes a synchronous HTTP request by default.

        :param str gear_id: Id of the gear to interact with (required)
        :param str container_type: Type of the container to interact with (required)
        :param str container_id: Id of the container to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: GearContextLookup
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_gear_context_with_http_info(gear_id, container_type, container_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gear_context_with_http_info(gear_id, container_type, container_id, **kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def get_gear_context_with_http_info(self, gear_id, container_type, container_id, **kwargs):  # noqa: E501
        """Get context values for the given gear and container.

        Ref: https://github.com/flywheel-io/gears/tree/master/spec#contextual-values 
        This method makes a synchronous HTTP request by default.

        :param str gear_id: Id of the gear to interact with (required)
        :param str container_type: Type of the container to interact with (required)
        :param str container_id: Id of the container to interact with (required)
        :param bool async: Perform the request asynchronously
        :return: GearContextLookup
        """

        all_params = ['gear_id', 'container_type', 'container_id']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gear_context" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gear_id' is set
        if ('gear_id' not in params or
                params['gear_id'] is None):
            raise ValueError("Missing the required parameter `gear_id` when calling `get_gear_context`")  # noqa: E501
        # verify the required parameter 'container_type' is set
        if ('container_type' not in params or
                params['container_type'] is None):
            raise ValueError("Missing the required parameter `container_type` when calling `get_gear_context`")  # noqa: E501
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params or
                params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `get_gear_context`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'gear_id' in params:
            path_params['GearId'] = params['gear_id']  # noqa: E501
        if 'container_type' in params:
            path_params['ContainerType'] = params['container_type']  # noqa: E501
        if 'container_id' in params:
            path_params['ContainerId'] = params['container_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/{GearId}/context/{ContainerType}/{ContainerId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GearContextLookup',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_gear_invocation(self, gear_id, **kwargs):  # noqa: E501
        """Get a schema for invoking a gear.

        This method makes a synchronous HTTP request by default.

        :param str gear_id: Id of the gear to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: object
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_gear_invocation_with_http_info(gear_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gear_invocation_with_http_info(gear_id, **kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def get_gear_invocation_with_http_info(self, gear_id, **kwargs):  # noqa: E501
        """Get a schema for invoking a gear.

        This method makes a synchronous HTTP request by default.

        :param str gear_id: Id of the gear to interact with (required)
        :param bool async: Perform the request asynchronously
        :return: object
        """

        all_params = ['gear_id']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gear_invocation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gear_id' is set
        if ('gear_id' not in params or
                params['gear_id'] is None):
            raise ValueError("Missing the required parameter `gear_id` when calling `get_gear_invocation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'gear_id' in params:
            path_params['GearId'] = params['gear_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/{GearId}/invocation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_gear_suggest(self, gear_id, container_type, container_id, **kwargs):  # noqa: E501
        """Get files with input suggestions, parent containers, and child containers for the given container.

        This method makes a synchronous HTTP request by default.

        :param str gear_id: Id of the gear to interact with (required)
        :param str container_type: Type of the container to interact with (required)
        :param str container_id: Id of the container to interact with (required)
        :param str collection_id: Get suggestions for a collection
        :param str include: Include only \"children\" or \"files\"
        :param bool async_: Perform the request asynchronously
        :return: object
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_gear_suggest_with_http_info(gear_id, container_type, container_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gear_suggest_with_http_info(gear_id, container_type, container_id, **kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def get_gear_suggest_with_http_info(self, gear_id, container_type, container_id, **kwargs):  # noqa: E501
        """Get files with input suggestions, parent containers, and child containers for the given container.

        This method makes a synchronous HTTP request by default.

        :param str gear_id: Id of the gear to interact with (required)
        :param str container_type: Type of the container to interact with (required)
        :param str container_id: Id of the container to interact with (required)
        :param str collection_id: Get suggestions for a collection
        :param str include: Include only \"children\" or \"files\"
        :param bool async: Perform the request asynchronously
        :return: object
        """

        all_params = ['gear_id', 'container_type', 'container_id', 'collection_id', 'include']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gear_suggest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gear_id' is set
        if ('gear_id' not in params or
                params['gear_id'] is None):
            raise ValueError("Missing the required parameter `gear_id` when calling `get_gear_suggest`")  # noqa: E501
        # verify the required parameter 'container_type' is set
        if ('container_type' not in params or
                params['container_type'] is None):
            raise ValueError("Missing the required parameter `container_type` when calling `get_gear_suggest`")  # noqa: E501
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params or
                params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `get_gear_suggest`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'gear_id' in params:
            path_params['GearId'] = params['gear_id']  # noqa: E501
        if 'container_type' in params:
            path_params['ContainerType'] = params['container_type']  # noqa: E501
        if 'container_id' in params:
            path_params['ContainerId'] = params['container_id']  # noqa: E501

        query_params = []
        if 'collection_id' in params:
            query_params.append(('collectionId', params['collection_id']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/{GearId}/suggest/{ContainerType}/{ContainerId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_gear_ticket(self, gear_ticket_id, **kwargs):  # noqa: E501
        """Retrieve a specific gear ticket

        This method makes a synchronous HTTP request by default.

        :param str gear_ticket_id: The ID of the the gear ticket to retrieve (required)
        :param bool async_: Perform the request asynchronously
        :return: object
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_gear_ticket_with_http_info(gear_ticket_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gear_ticket_with_http_info(gear_ticket_id, **kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def get_gear_ticket_with_http_info(self, gear_ticket_id, **kwargs):  # noqa: E501
        """Retrieve a specific gear ticket

        This method makes a synchronous HTTP request by default.

        :param str gear_ticket_id: The ID of the the gear ticket to retrieve (required)
        :param bool async: Perform the request asynchronously
        :return: object
        """

        all_params = ['gear_ticket_id']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gear_ticket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gear_ticket_id' is set
        if ('gear_ticket_id' not in params or
                params['gear_ticket_id'] is None):
            raise ValueError("Missing the required parameter `gear_ticket_id` when calling `get_gear_ticket`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'gear_ticket_id' in params:
            path_params['GearTicketId'] = params['gear_ticket_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/ticket/{GearTicketId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_my_gear_tickets(self, **kwargs):  # noqa: E501
        """Retrieve all gear tickets for the current user

        This method makes a synchronous HTTP request by default.

        :param bool gear_names_only: If set, returns a string array of ticket IDs instead of the tickets themselves.
        :param bool async_: Perform the request asynchronously
        :return: object
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_my_gear_tickets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_my_gear_tickets_with_http_info(**kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def get_my_gear_tickets_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve all gear tickets for the current user

        This method makes a synchronous HTTP request by default.

        :param bool gear_names_only: If set, returns a string array of ticket IDs instead of the tickets themselves.
        :param bool async: Perform the request asynchronously
        :return: object
        """

        all_params = ['gear_names_only']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_my_gear_tickets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'gear_names_only' in params:
            query_params.append(('gear_names_only', params['gear_names_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/my-tickets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def prepare_add_gear(self, **kwargs):  # noqa: E501
        """Prepare a gear upload

        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: object
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.prepare_add_gear_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.prepare_add_gear_with_http_info(**kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def prepare_add_gear_with_http_info(self, **kwargs):  # noqa: E501
        """Prepare a gear upload

        This method makes a synchronous HTTP request by default.

        :param bool async: Perform the request asynchronously
        :return: object
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prepare_add_gear" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/prepare-add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def save_gear(self, ticket, **kwargs):  # noqa: E501
        """Report the result of a gear upload and save the ticket

        This method makes a synchronous HTTP request by default.

        :param bool ticket: The ticket ID to save (required)
        :param bool async_: Perform the request asynchronously
        :return: object
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.save_gear_with_http_info(ticket, **kwargs)  # noqa: E501
        else:
            (data) = self.save_gear_with_http_info(ticket, **kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def save_gear_with_http_info(self, ticket, **kwargs):  # noqa: E501
        """Report the result of a gear upload and save the ticket

        This method makes a synchronous HTTP request by default.

        :param bool ticket: The ticket ID to save (required)
        :param bool async: Perform the request asynchronously
        :return: object
        """

        all_params = ['ticket']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_gear" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket' is set
        if ('ticket' not in params or
                params['ticket'] is None):
            raise ValueError("Missing the required parameter `ticket` when calling `save_gear`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ticket' in params:
            query_params.append(('ticket', params['ticket']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/save', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)
