Metadata-Version: 2.1
Name: max30105
Version: 0.0.5
Summary: Python library for the MAX30105 Smoke/Pulse Detector
Home-page: http://www.pimoroni.com
Author: Philip Howard
Author-email: phil@pimoroni.com
License: MIT
Keywords: Raspberry Pi
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Operating System :: POSIX :: Linux
Classifier: License :: OSI Approved :: MIT License
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Software Development
Classifier: Topic :: System :: Hardware
Description-Content-Type: text/markdown
Requires-Dist: i2cdevice (>=0.0.7)

# MAX30105 - Heart Rate, Oximeter, Smoke Sensor

[![Build Status](https://travis-ci.com/pimoroni/max30105-python.svg?branch=master)](https://travis-ci.com/pimoroni/max30105-python)
[![Coverage Status](https://coveralls.io/repos/github/pimoroni/max30105-python/badge.svg?branch=master)](https://coveralls.io/github/pimoroni/max30105-python?branch=master)
[![PyPi Package](https://img.shields.io/pypi/v/max30105.svg)](https://pypi.python.org/pypi/max30105)
[![Python Versions](https://img.shields.io/pypi/pyversions/max30105.svg)](https://pypi.python.org/pypi/max30105)

The MAX30105 is an precision optical sensor that can be used to measure heart rate, pulse oximetry (SPO2 / blood oxygen saturation), and smoke (and other particles).

# Installing

Stable library from PyPi:

* Just run `sudo pip install max30105`

Latest/development library from GitHub:

* `git clone https://github.com/pimoroni/max30105-python`
* `cd max30105-python`
* `sudo ./install.sh`

# Important!

**This code should not be used for medical diagnosis, as the basis for a real smoke or fire detector, or in life-critical situations. It's for fun/novelty use only, so bear that in mind while using it.**

# Changelog


0.0.5
-----

* Bugfix: fix off-by-one error in sample average bitmask

0.0.4
-----

* Bugfix: fix timeout bug in get_temperature(), requires i2cdevice>=0.0.7

0.0.3
-----

* Bugfix: support 0 init value of MODE_CONFIG register

0.0.2
-----

* Port to i2cdevice>=0.0.6 set/get API

0.0.1
-----

* Initial Release


