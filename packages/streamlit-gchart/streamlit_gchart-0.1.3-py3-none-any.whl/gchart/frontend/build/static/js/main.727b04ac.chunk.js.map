{"version":3,"sources":["GChartComponent.tsx","index.tsx"],"names":["GChartComponent","render","console","log","props","args","width","height","chartType","loader","data","options","rootProps","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"qOAgBMA,E,4MAEGC,OAAS,WAcd,OARAC,QAAQC,IAAI,EAAKC,MAAMC,KAAX,MASV,cAAC,IAAD,CACEC,MAAO,EAAKF,MAAMC,KAAX,MACPE,OAAQ,EAAKH,MAAMC,KAAX,OACRG,UAAW,EAAKJ,MAAMC,KAAX,UACXI,OAAQ,gDACRC,KAAM,EAAKN,MAAMC,KAAX,KACNM,QAAS,EAAKP,MAAMC,KAAX,QACTO,UAAW,CAAE,cAAe,Q,YAxBNC,KAqCfC,cAAwBd,GCjDvCe,IAASd,OACP,cAAC,IAAMe,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.727b04ac.chunk.js","sourcesContent":["import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection\r\n} from \"streamlit-component-lib\"\r\nimport Chart from \"react-google-charts\";\r\nimport React, { ReactNode } from \"react\"\r\n\r\ninterface State {\r\n  numClicks: number\r\n}\r\n\r\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\r\nclass GChartComponent extends StreamlitComponentBase<State> {\r\n\r\n  public render = (): ReactNode => {\r\n    // Arguments that are passed to the plugin in Python are accessible\r\n    // via `this.props.args`. Here, we access the \"name\" arg.\r\n\r\n    //var maxFontSize = parseInt(this.props.args[\"maxFontSize\"])\r\n    //if (isNaN(maxFontSize)) maxFontSize = 30;\r\n    console.log(this.props.args[\"data\"])\r\n\r\n\r\n    //console.log(clause)\r\n    // Show a button and some text.\r\n    // When the button is clicked, we'll increment our \"numClicks\" state\r\n    // variable, and send its new value back to Streamlit, where it'll\r\n    // be available to the Python program.\r\n    return (\r\n      <Chart\r\n        width={this.props.args[\"width\"]}\r\n        height={this.props.args[\"height\"]}\r\n        chartType={this.props.args[\"chartType\"]}\r\n        loader={<div>Loading Chart</div>}\r\n        data={this.props.args[\"data\"]}\r\n        options={this.props.args[\"options\"]}\r\n        rootProps={{ 'data-testid': '1' }}\r\n      />\r\n    )\r\n  }\r\n\r\n\r\n}\r\n\r\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n// connection between your component and the Streamlit app, and handles\r\n// passing arguments from Python -> Component.\r\n//\r\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\r\nexport default withStreamlitConnection(GChartComponent)\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport GChartComponent from \"./GChartComponent\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <GChartComponent />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}