<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="1" hostname="lumipyry" name="pytest" skipped="14" tests="23" time="0.349" timestamp="2020-08-05T20:30:56.469956"><testcase classname="test_vacuum" file="test_vacuum.py" line="76" name="test_status" time="0.001"></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="90" name="test_status_with_errors" time="0.000"></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="101" name="test_start_and_stop" time="0.001"></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="109" name="test_spot" time="0.000"></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="117" name="test_pause" time="0.000"></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="123" name="test_home" time="0.000"></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="132" name="test_goto" time="0.000"></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="138" name="test_zoned_clean" time="0.000"></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="146" name="test_manual_control" time="0.001"><skipped message="" type="pytest.xfail"></skipped></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="150" name="test_log_upload" time="0.000"><skipped message="unknown handling" type="pytest.skip">test_vacuum.py:151: unknown handling</skipped></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="154" name="test_consumable_status" time="0.000"><skipped message="" type="pytest.xfail"></skipped></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="158" name="test_consumable_reset" time="0.000"><skipped message="consumable reset is not implemented" type="pytest.skip">test_vacuum.py:159: consumable reset is not implemented</skipped></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="162" name="test_map" time="0.000"><skipped message="" type="pytest.xfail"></skipped></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="166" name="test_clean_history" time="0.001"><skipped message="" type="pytest.xfail"></skipped></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="170" name="test_clean_details" time="0.000"><skipped message="" type="pytest.xfail"></skipped></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="174" name="test_find" time="0.000"><skipped message="hard to test" type="pytest.skip">test_vacuum.py:175: hard to test</skipped></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="178" name="test_timer" time="0.001"><skipped message="" type="pytest.xfail"></skipped></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="182" name="test_dnd" time="0.000"><skipped message="" type="pytest.xfail"></skipped></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="186" name="test_fan_speed" time="0.000"><skipped message="" type="pytest.xfail"></skipped></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="190" name="test_sound_info" time="0.000"><skipped message="" type="pytest.xfail"></skipped></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="194" name="test_serial_number" time="0.001"><skipped message="" type="pytest.xfail"></skipped></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="198" name="test_timezone" time="0.001"><skipped message="" type="pytest.xfail"></skipped></testcase><testcase classname="test_vacuum" file="test_vacuum.py" line="241" name="test_cli_waterbox" time="0.003"><failure message="AssertionError: assert &apos;Running command set_waterflow\nsending set_water_box_custom_mode with [202]\nfoo\n&apos; is None
 +  where &apos;Running command set_waterflow\nsending set_water_box_custom_mode with [202]\nfoo\n&apos; = &lt;Result okay&gt;.output">dummy = None

    def test_cli_waterbox(dummy):
        result = run_command(&apos;set_waterflow&apos;, &apos;high&apos;)
&gt;       assert result.output is None
E       AssertionError: assert &apos;Running command set_waterflow\nsending set_water_box_custom_mode with [202]\nfoo\n&apos; is None
E        +  where &apos;Running command set_waterflow\nsending set_water_box_custom_mode with [202]\nfoo\n&apos; = &lt;Result okay&gt;.output

test_vacuum.py:244: AssertionError</failure></testcase></testsuite></testsuites>