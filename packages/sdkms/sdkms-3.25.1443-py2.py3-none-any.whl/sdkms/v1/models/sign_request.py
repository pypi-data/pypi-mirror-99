# coding: utf-8

"""
    Fortanix SDKMS REST API

    This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 

    OpenAPI spec version: 1.0.0-20200608
    Contact: support@fortanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re




# NOTE: This class is auto generated by the swagger code generator program.
# Do not edit the class manually.
class SignRequest(object):
    """
    @undocumented: swagger_types
    @undocumented: attribute_map
    @undocumented: to_dict
    @undocumented: to_str
    @undocumented: __repr__
    @undocumented: __eq__
    @undocumented: __ne__
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hash_alg': 'DigestAlgorithm',
        'hash': 'bytearray',
        'data': 'bytearray',
        'mode': 'SignatureMode',
        'deterministic_signature': 'bool'
    }

    attribute_map = {
        'hash_alg': 'hash_alg',
        'hash': 'hash',
        'data': 'data',
        'mode': 'mode',
        'deterministic_signature': 'deterministic_signature'
    }

    def __init__(self, hash_alg=None, hash=None, data=None, mode=None, deterministic_signature=None):
        """
        SignRequest - a model defined in Swagger
        """

        self._hash_alg = None
        self._hash = None
        self._data = None
        self._mode = None
        self._deterministic_signature = None

        self.hash_alg = hash_alg
        if hash is not None:
          self.hash = hash
        if data is not None:
          self.data = data
        if mode is not None:
          self.mode = mode
        if deterministic_signature is not None:
          self.deterministic_signature = deterministic_signature

    @property
    def hash_alg(self):
        """
        Gets the hash_alg of this SignRequest.

        Type: L{DigestAlgorithm}
        """
        return self._hash_alg

    @hash_alg.setter
    def hash_alg(self, hash_alg):
        """
        Sets the hash_alg of this SignRequest.
        """

        self._hash_alg = hash_alg

    @property
    def hash(self):
        """
        Gets the hash of this SignRequest.
        Hash of the data to be signed. Exactly one of `hash` and `data` is required. 

        Type: L{bytearray}
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """
        Sets the hash of this SignRequest.
        Hash of the data to be signed. Exactly one of `hash` and `data` is required. 
        """

        if not isinstance(hash, bytearray):
            raise ValueError("Invalid value for `hash`, `hash` must be a bytearray")
        self._hash = hash

    @property
    def data(self):
        """
        Gets the data of this SignRequest.
        Data to be signed. Exactly one of `hash` and `data` is required. To reduce request size and avoid reaching the request size limit, prefer `hash`. When using Ed25519 keys, a distinction is made between providing the message directly in `data` and providing a prehashed value in `hash`. Providing a full message results in an \"Ed25519\" signature while providing `hash` results in an \"Ed25519ph\" signature, which is not compatible. See RFC 8032 for details. 

        Type: L{bytearray}
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this SignRequest.
        Data to be signed. Exactly one of `hash` and `data` is required. To reduce request size and avoid reaching the request size limit, prefer `hash`. When using Ed25519 keys, a distinction is made between providing the message directly in `data` and providing a prehashed value in `hash`. Providing a full message results in an \"Ed25519\" signature while providing `hash` results in an \"Ed25519ph\" signature, which is not compatible. See RFC 8032 for details. 
        """

        if not isinstance(data, bytearray):
            raise ValueError("Invalid value for `data`, `data` must be a bytearray")
        self._data = data

    @property
    def mode(self):
        """
        Gets the mode of this SignRequest.

        Type: L{SignatureMode}
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this SignRequest.
        """

        self._mode = mode

    @property
    def deterministic_signature(self):
        """
        Gets the deterministic_signature of this SignRequest.

        Type: L{bool}
        """
        return self._deterministic_signature

    @deterministic_signature.setter
    def deterministic_signature(self, deterministic_signature):
        """
        Sets the deterministic_signature of this SignRequest.
        """

        self._deterministic_signature = deterministic_signature

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SignRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

