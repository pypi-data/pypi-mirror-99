# coding: utf-8

"""
    Fortanix SDKMS REST API

    This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 

    OpenAPI spec version: 1.0.0-20200608
    Contact: support@fortanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re




# NOTE: This class is auto generated by the swagger code generator program.
# Do not edit the class manually.
class FpeDateBound(object):
    """
    @undocumented: swagger_types
    @undocumented: attribute_map
    @undocumented: to_dict
    @undocumented: to_str
    @undocumented: __repr__
    @undocumented: __eq__
    @undocumented: __ne__
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'year': 'int',
        'month': 'int',
        'day': 'int'
    }

    attribute_map = {
        'year': 'year',
        'month': 'month',
        'day': 'day'
    }

    def __init__(self, year=None, month=None, day=None):
        """
        FpeDateBound - a model defined in Swagger
        """

        self._year = None
        self._month = None
        self._day = None

        if year is not None:
          self.year = year
        self.month = month
        if day is not None:
          self.day = day

    @property
    def year(self):
        """
        Gets the year of this FpeDateBound.
        The year, which should be a number less than 100000. Zero is treated as a leap year.

        Type: L{int}
        """
        return self._year

    @year.setter
    def year(self, year):
        """
        Sets the year of this FpeDateBound.
        The year, which should be a number less than 100000. Zero is treated as a leap year.
        """
        if year is not None and year > 99999:
            raise ValueError("Invalid value for `year`, must be a value less than or equal to `99999`")
        if year is not None and year < 0:
            raise ValueError("Invalid value for `year`, must be a value greater than or equal to `0`")

        self._year = year

    @property
    def month(self):
        """
        Gets the month of this FpeDateBound.
        The month, which should be a number from 1 to 12.

        Type: L{int}
        """
        return self._month

    @month.setter
    def month(self, month):
        """
        Sets the month of this FpeDateBound.
        The month, which should be a number from 1 to 12.
        """
        if month is not None and month > 12:
            raise ValueError("Invalid value for `month`, must be a value less than or equal to `12`")
        if month is not None and month < 1:
            raise ValueError("Invalid value for `month`, must be a value greater than or equal to `1`")

        self._month = month

    @property
    def day(self):
        """
        Gets the day of this FpeDateBound.
        The day, which should be a number from 1 to 31, and must not be out-of-range for the given month. February is considered to be 29 days long, unless the year, if specified, is not a leap year. 

        Type: L{int}
        """
        return self._day

    @day.setter
    def day(self, day):
        """
        Sets the day of this FpeDateBound.
        The day, which should be a number from 1 to 31, and must not be out-of-range for the given month. February is considered to be 29 days long, unless the year, if specified, is not a leap year. 
        """
        if day is not None and day > 31:
            raise ValueError("Invalid value for `day`, must be a value less than or equal to `31`")
        if day is not None and day < 1:
            raise ValueError("Invalid value for `day`, must be a value greater than or equal to `1`")

        self._day = day

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FpeDateBound):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

