# coding: utf-8

"""
    Fortanix SDKMS REST API

    This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 

    OpenAPI spec version: 1.0.0-20200608
    Contact: support@fortanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re




# NOTE: This class is auto generated by the swagger code generator program.
# Do not edit the class manually.
class HmgConfig(object):
    """
    @undocumented: swagger_types
    @undocumented: attribute_map
    @undocumented: to_dict
    @undocumented: to_str
    @undocumented: __repr__
    @undocumented: __eq__
    @undocumented: __ne__
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kind': 'HmgKind',
        'url': 'str',
        'tls': 'TlsConfig',
        'pin': 'str',
        'slot': 'int',
        'access_key': 'str',
        'secret_key': 'str'
    }

    attribute_map = {
        'kind': 'kind',
        'url': 'url',
        'tls': 'tls',
        'pin': 'pin',
        'slot': 'slot',
        'access_key': 'access_key',
        'secret_key': 'secret_key'
    }

    def __init__(self, kind=None, url=None, tls=None, pin=None, slot=None, access_key=None, secret_key=None):
        """
        HmgConfig - a model defined in Swagger
        """

        self._kind = None
        self._url = None
        self._tls = None
        self._pin = None
        self._slot = None
        self._access_key = None
        self._secret_key = None

        self.kind = kind
        self.url = url
        self.tls = tls
        if pin is not None:
          self.pin = pin
        if slot is not None:
          self.slot = slot
        if access_key is not None:
          self.access_key = access_key
        if secret_key is not None:
          self.secret_key = secret_key

    @property
    def kind(self):
        """
        Gets the kind of this HmgConfig.

        Type: L{HmgKind}
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """
        Sets the kind of this HmgConfig.
        """

        self._kind = kind

    @property
    def url(self):
        """
        Gets the url of this HmgConfig.

        Type: L{str}
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this HmgConfig.
        """

        self._url = url

    @property
    def tls(self):
        """
        Gets the tls of this HmgConfig.

        Type: L{TlsConfig}
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """
        Sets the tls of this HmgConfig.
        """

        self._tls = tls

    @property
    def pin(self):
        """
        Gets the pin of this HmgConfig.

        Type: L{str}
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """
        Sets the pin of this HmgConfig.
        """

        self._pin = pin

    @property
    def slot(self):
        """
        Gets the slot of this HmgConfig.

        Type: L{int}
        """
        return self._slot

    @slot.setter
    def slot(self, slot):
        """
        Sets the slot of this HmgConfig.
        """

        self._slot = slot

    @property
    def access_key(self):
        """
        Gets the access_key of this HmgConfig.

        Type: L{str}
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """
        Sets the access_key of this HmgConfig.
        """

        self._access_key = access_key

    @property
    def secret_key(self):
        """
        Gets the secret_key of this HmgConfig.

        Type: L{str}
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """
        Sets the secret_key of this HmgConfig.
        """

        self._secret_key = secret_key

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HmgConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

