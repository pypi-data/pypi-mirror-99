# coding: utf-8

"""
    Fortanix SDKMS REST API

    This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 

    OpenAPI spec version: 1.0.0-20200608
    Contact: support@fortanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re




# NOTE: This class is auto generated by the swagger code generator program.
# Do not edit the class manually.
class SobjectComponent(object):
    """
    @undocumented: swagger_types
    @undocumented: attribute_map
    @undocumented: to_dict
    @undocumented: to_str
    @undocumented: __repr__
    @undocumented: __eq__
    @undocumented: __ne__
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'component': 'bytearray',
        'component_kcv': 'bytearray',
        'custodian': 'CreatorType'
    }

    attribute_map = {
        'component': 'component',
        'component_kcv': 'component_kcv',
        'custodian': 'custodian'
    }

    def __init__(self, component=None, component_kcv=None, custodian=None):
        """
        SobjectComponent - a model defined in Swagger
        """

        self._component = None
        self._component_kcv = None
        self._custodian = None

        if component is not None:
          self.component = component
        if component_kcv is not None:
          self.component_kcv = component_kcv
        if custodian is not None:
          self.custodian = custodian

    @property
    def component(self):
        """
        Gets the component of this SobjectComponent.
        component of Security Object

        Type: L{bytearray}
        """
        return self._component

    @component.setter
    def component(self, component):
        """
        Sets the component of this SobjectComponent.
        component of Security Object
        """

        if not isinstance(component, bytearray):
            raise ValueError("Invalid value for `component`, `component` must be a bytearray")
        self._component = component

    @property
    def component_kcv(self):
        """
        Gets the component_kcv of this SobjectComponent.
        component kcv value

        Type: L{bytearray}
        """
        return self._component_kcv

    @component_kcv.setter
    def component_kcv(self, component_kcv):
        """
        Sets the component_kcv of this SobjectComponent.
        component kcv value
        """

        if not isinstance(component_kcv, bytearray):
            raise ValueError("Invalid value for `component_kcv`, `component_kcv` must be a bytearray")
        self._component_kcv = component_kcv

    @property
    def custodian(self):
        """
        Gets the custodian of this SobjectComponent.

        Type: L{CreatorType}
        """
        return self._custodian

    @custodian.setter
    def custodian(self, custodian):
        """
        Sets the custodian of this SobjectComponent.
        """

        self._custodian = custodian

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SobjectComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

