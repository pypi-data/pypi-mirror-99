# coding: utf-8

"""
    Fortanix SDKMS REST API

    This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 

    OpenAPI spec version: 1.0.0-20200608
    Contact: support@fortanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re




# NOTE: This class is auto generated by the swagger code generator program.
# Do not edit the class manually.
class PersistTransientKeyRequest(object):
    """
    @undocumented: swagger_types
    @undocumented: attribute_map
    @undocumented: to_dict
    @undocumented: to_str
    @undocumented: __repr__
    @undocumented: __eq__
    @undocumented: __ne__
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'custom_metadata': 'dict(str, str)',
        'enabled': 'bool',
        'key_ops': 'list[KeyOperations]',
        'group_id': 'str',
        'transient_key': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'custom_metadata': 'custom_metadata',
        'enabled': 'enabled',
        'key_ops': 'key_ops',
        'group_id': 'group_id',
        'transient_key': 'transient_key'
    }

    def __init__(self, name=None, description=None, custom_metadata=None, enabled=None, key_ops=None, group_id=None, transient_key=None):
        """
        PersistTransientKeyRequest - a model defined in Swagger
        """

        self._name = None
        self._description = None
        self._custom_metadata = None
        self._enabled = None
        self._key_ops = None
        self._group_id = None
        self._transient_key = None

        self.name = name
        if description is not None:
          self.description = description
        if custom_metadata is not None:
          self.custom_metadata = custom_metadata
        if enabled is not None:
          self.enabled = enabled
        if key_ops is not None:
          self.key_ops = key_ops
        if group_id is not None:
          self.group_id = group_id
        self.transient_key = transient_key

    @property
    def name(self):
        """
        Gets the name of this PersistTransientKeyRequest.
        Name of the persisted security object. Security object names must be unique within an account.

        Type: L{str}
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PersistTransientKeyRequest.
        Name of the persisted security object. Security object names must be unique within an account.
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this PersistTransientKeyRequest.
        Description of the persisted security object.

        Type: L{str}
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this PersistTransientKeyRequest.
        Description of the persisted security object.
        """

        self._description = description

    @property
    def custom_metadata(self):
        """
        Gets the custom_metadata of this PersistTransientKeyRequest.
        User-defined metadata for the persisted key. Stored as key-value pairs.

        Type: map[L{str}]
        """
        return self._custom_metadata

    @custom_metadata.setter
    def custom_metadata(self, custom_metadata):
        """
        Sets the custom_metadata of this PersistTransientKeyRequest.
        User-defined metadata for the persisted key. Stored as key-value pairs.
        """

        self._custom_metadata = custom_metadata

    @property
    def enabled(self):
        """
        Gets the enabled of this PersistTransientKeyRequest.
        Whether the new security object should be enabled. Disabled security objects may not perform cryptographic operations. 

        Type: L{bool}
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this PersistTransientKeyRequest.
        Whether the new security object should be enabled. Disabled security objects may not perform cryptographic operations. 
        """

        self._enabled = enabled

    @property
    def key_ops(self):
        """
        Gets the key_ops of this PersistTransientKeyRequest.
        Optional array of key operations to be enabled for this security object. If this property is not provided, the SDKMS server will provide a default set of key operations. Note that if you provide an empty array, all key operations will be disabled. 

        Type: list[L{KeyOperations}]
        """
        return self._key_ops

    @key_ops.setter
    def key_ops(self, key_ops):
        """
        Sets the key_ops of this PersistTransientKeyRequest.
        Optional array of key operations to be enabled for this security object. If this property is not provided, the SDKMS server will provide a default set of key operations. Note that if you provide an empty array, all key operations will be disabled. 
        """

        self._key_ops = key_ops

    @property
    def group_id(self):
        """
        Gets the group_id of this PersistTransientKeyRequest.
        Group ID (not name) of the security group that the persisted security object should belong to. The user or application creating this security object must be a member of this group. If no group is specified, the default group for the user or application will be used. 

        Type: L{str}
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this PersistTransientKeyRequest.
        Group ID (not name) of the security group that the persisted security object should belong to. The user or application creating this security object must be a member of this group. If no group is specified, the default group for the user or application will be used. 
        """

        self._group_id = group_id

    @property
    def transient_key(self):
        """
        Gets the transient_key of this PersistTransientKeyRequest.
        Transient key blob.

        Type: L{str}
        """
        return self._transient_key

    @transient_key.setter
    def transient_key(self, transient_key):
        """
        Sets the transient_key of this PersistTransientKeyRequest.
        Transient key blob.
        """

        self._transient_key = transient_key

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PersistTransientKeyRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

