# coding: utf-8

"""
    Fortanix SDKMS REST API

    This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 

    OpenAPI spec version: 1.0.0-20200608
    Contact: support@fortanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re




# NOTE: This class is auto generated by the swagger code generator program.
# Do not edit the class manually.
class AuditLogResponse(object):
    """
    @undocumented: swagger_types
    @undocumented: attribute_map
    @undocumented: to_dict
    @undocumented: to_str
    @undocumented: __repr__
    @undocumented: __eq__
    @undocumented: __ne__
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_type': 'str',
        'actor_type': 'str',
        'message': 'str',
        'severity': 'str',
        'time': 'str',
        'object_id': 'str',
        'actor_id': 'str',
        'acct_id': 'str',
        'group_ids': 'list[str]'
    }

    attribute_map = {
        'action_type': 'action_type',
        'actor_type': 'actor_type',
        'message': 'message',
        'severity': 'severity',
        'time': 'time',
        'object_id': 'object_id',
        'actor_id': 'actor_id',
        'acct_id': 'acct_id',
        'group_ids': 'group_ids'
    }

    def __init__(self, action_type=None, actor_type=None, message=None, severity=None, time=None, object_id=None, actor_id=None, acct_id=None, group_ids=None):
        """
        AuditLogResponse - a model defined in Swagger
        """

        self._action_type = None
        self._actor_type = None
        self._message = None
        self._severity = None
        self._time = None
        self._object_id = None
        self._actor_id = None
        self._acct_id = None
        self._group_ids = None

        self.action_type = action_type
        self.actor_type = actor_type
        self.message = message
        self.severity = severity
        self.time = time
        self.object_id = object_id
        self.actor_id = actor_id
        self.acct_id = acct_id
        self.group_ids = group_ids

    @property
    def action_type(self):
        """
        Gets the action_type of this AuditLogResponse.
        Type of action performed.

        Type: L{str}
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """
        Sets the action_type of this AuditLogResponse.
        Type of action performed.
        """

        self._action_type = action_type

    @property
    def actor_type(self):
        """
        Gets the actor_type of this AuditLogResponse.
        Type of entity performing action.

        Type: L{str}
        """
        return self._actor_type

    @actor_type.setter
    def actor_type(self, actor_type):
        """
        Sets the actor_type of this AuditLogResponse.
        Type of entity performing action.
        """

        self._actor_type = actor_type

    @property
    def message(self):
        """
        Gets the message of this AuditLogResponse.
        Audit log message.

        Type: L{str}
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this AuditLogResponse.
        Audit log message.
        """

        self._message = message

    @property
    def severity(self):
        """
        Gets the severity of this AuditLogResponse.
        Severity of audit log message.

        Type: L{str}
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """
        Sets the severity of this AuditLogResponse.
        Severity of audit log message.
        """

        self._severity = severity

    @property
    def time(self):
        """
        Gets the time of this AuditLogResponse.
        Time that action occurred.

        Type: L{str}
        """
        return self._time

    @time.setter
    def time(self, time):
        """
        Sets the time of this AuditLogResponse.
        Time that action occurred.
        """

        self._time = time

    @property
    def object_id(self):
        """
        Gets the object_id of this AuditLogResponse.
        ID of object acted upon.

        Type: L{str}
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """
        Sets the object_id of this AuditLogResponse.
        ID of object acted upon.
        """

        self._object_id = object_id

    @property
    def actor_id(self):
        """
        Gets the actor_id of this AuditLogResponse.
        ID of entity performing action.

        Type: L{str}
        """
        return self._actor_id

    @actor_id.setter
    def actor_id(self, actor_id):
        """
        Sets the actor_id of this AuditLogResponse.
        ID of entity performing action.
        """

        self._actor_id = actor_id

    @property
    def acct_id(self):
        """
        Gets the acct_id of this AuditLogResponse.
        Account ID of the account this audit log applies to.

        Type: L{str}
        """
        return self._acct_id

    @acct_id.setter
    def acct_id(self, acct_id):
        """
        Sets the acct_id of this AuditLogResponse.
        Account ID of the account this audit log applies to.
        """

        self._acct_id = acct_id

    @property
    def group_ids(self):
        """
        Gets the group_ids of this AuditLogResponse.

        Type: list[L{str}]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """
        Sets the group_ids of this AuditLogResponse.
        """

        self._group_ids = group_ids

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AuditLogResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

