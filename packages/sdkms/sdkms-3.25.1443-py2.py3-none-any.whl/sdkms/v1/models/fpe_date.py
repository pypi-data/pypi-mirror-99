# coding: utf-8

"""
    Fortanix SDKMS REST API

    This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 

    OpenAPI spec version: 1.0.0-20200608
    Contact: support@fortanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re




# NOTE: This class is auto generated by the swagger code generator program.
# Do not edit the class manually.
class FpeDate(object):
    """
    @undocumented: swagger_types
    @undocumented: attribute_map
    @undocumented: to_dict
    @undocumented: to_str
    @undocumented: __repr__
    @undocumented: __eq__
    @undocumented: __ne__
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dmy_date': 'FpeDateWithBounds',
        'month_day_date': 'FpeDateWithBounds',
        'month_year_date': 'FpeDateWithBounds'
    }

    attribute_map = {
        'dmy_date': 'dmy_date',
        'month_day_date': 'month_day_date',
        'month_year_date': 'month_year_date'
    }

    def __init__(self, dmy_date=None, month_day_date=None, month_year_date=None):
        """
        FpeDate - a model defined in Swagger
        """

        self._dmy_date = None
        self._month_day_date = None
        self._month_year_date = None

        if dmy_date is not None:
          self.dmy_date = dmy_date
        if month_day_date is not None:
          self.month_day_date = month_day_date
        if month_year_date is not None:
          self.month_year_date = month_year_date

    @property
    def dmy_date(self):
        """
        Gets the dmy_date of this FpeDate.

        Type: L{FpeDateWithBounds}
        """
        return self._dmy_date

    @dmy_date.setter
    def dmy_date(self, dmy_date):
        """
        Sets the dmy_date of this FpeDate.
        """

        self._dmy_date = dmy_date

    @property
    def month_day_date(self):
        """
        Gets the month_day_date of this FpeDate.

        Type: L{FpeDateWithBounds}
        """
        return self._month_day_date

    @month_day_date.setter
    def month_day_date(self, month_day_date):
        """
        Sets the month_day_date of this FpeDate.
        """

        self._month_day_date = month_day_date

    @property
    def month_year_date(self):
        """
        Gets the month_year_date of this FpeDate.

        Type: L{FpeDateWithBounds}
        """
        return self._month_year_date

    @month_year_date.setter
    def month_year_date(self, month_year_date):
        """
        Sets the month_year_date of this FpeDate.
        """

        self._month_year_date = month_year_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FpeDate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

