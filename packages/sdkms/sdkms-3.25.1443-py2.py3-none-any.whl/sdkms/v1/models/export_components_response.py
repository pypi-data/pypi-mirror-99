# coding: utf-8

"""
    Fortanix SDKMS REST API

    This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 

    OpenAPI spec version: 1.0.0-20200608
    Contact: support@fortanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re




# NOTE: This class is auto generated by the swagger code generator program.
# Do not edit the class manually.
class ExportComponentsResponse(object):
    """
    @undocumented: swagger_types
    @undocumented: attribute_map
    @undocumented: to_dict
    @undocumented: to_str
    @undocumented: __repr__
    @undocumented: __eq__
    @undocumented: __ne__
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'components': 'list[SobjectComponent]',
        'key_kcv': 'bytearray',
        'description': 'str',
        'iv': 'bytearray',
        'tag': 'bytearray'
    }

    attribute_map = {
        'components': 'components',
        'key_kcv': 'key_kcv',
        'description': 'description',
        'iv': 'iv',
        'tag': 'tag'
    }

    def __init__(self, components=None, key_kcv=None, description=None, iv=None, tag=None):
        """
        ExportComponentsResponse - a model defined in Swagger
        """

        self._components = None
        self._key_kcv = None
        self._description = None
        self._iv = None
        self._tag = None

        self.components = components
        self.key_kcv = key_kcv
        if description is not None:
          self.description = description
        if iv is not None:
          self.iv = iv
        if tag is not None:
          self.tag = tag

    @property
    def components(self):
        """
        Gets the components of this ExportComponentsResponse.
        Components of the Security Object

        Type: list[L{SobjectComponent}]
        """
        return self._components

    @components.setter
    def components(self, components):
        """
        Sets the components of this ExportComponentsResponse.
        Components of the Security Object
        """

        self._components = components

    @property
    def key_kcv(self):
        """
        Gets the key_kcv of this ExportComponentsResponse.
        KCV for the entire Security Object

        Type: L{bytearray}
        """
        return self._key_kcv

    @key_kcv.setter
    def key_kcv(self, key_kcv):
        """
        Sets the key_kcv of this ExportComponentsResponse.
        KCV for the entire Security Object
        """

        if not isinstance(key_kcv, bytearray):
            raise ValueError("Invalid value for `key_kcv`, `key_kcv` must be a bytearray")
        self._key_kcv = key_kcv

    @property
    def description(self):
        """
        Gets the description of this ExportComponentsResponse.
        optional description to the export request

        Type: L{str}
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ExportComponentsResponse.
        optional description to the export request
        """

        self._description = description

    @property
    def iv(self):
        """
        Gets the iv of this ExportComponentsResponse.
        For symmetric ciphers, this value will be used for the cipher initialization value. If not provided, SDKMS will generate a random iv and return it in the response. If provided, iv length must match the length required by the cipher and mode. 

        Type: L{bytearray}
        """
        return self._iv

    @iv.setter
    def iv(self, iv):
        """
        Sets the iv of this ExportComponentsResponse.
        For symmetric ciphers, this value will be used for the cipher initialization value. If not provided, SDKMS will generate a random iv and return it in the response. If provided, iv length must match the length required by the cipher and mode. 
        """

        if not isinstance(iv, bytearray):
            raise ValueError("Invalid value for `iv`, `iv` must be a bytearray")
        self._iv = iv

    @property
    def tag(self):
        """
        Gets the tag of this ExportComponentsResponse.
        For symmetric ciphers with cipher mode GCM or CCM, the authentication tag produced by the cipher. Its length will match the tag length specified by the encryption request. 

        Type: L{bytearray}
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this ExportComponentsResponse.
        For symmetric ciphers with cipher mode GCM or CCM, the authentication tag produced by the cipher. Its length will match the tag length specified by the encryption request. 
        """

        if not isinstance(tag, bytearray):
            raise ValueError("Invalid value for `tag`, `tag` must be a bytearray")
        self._tag = tag

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ExportComponentsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

