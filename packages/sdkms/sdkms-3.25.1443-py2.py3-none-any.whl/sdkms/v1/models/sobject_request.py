# coding: utf-8

"""
    Fortanix SDKMS REST API

    This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 

    OpenAPI spec version: 1.0.0-20200608
    Contact: support@fortanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re




# NOTE: This class is auto generated by the swagger code generator program.
# Do not edit the class manually.
class SobjectRequest(object):
    """
    @undocumented: swagger_types
    @undocumented: attribute_map
    @undocumented: to_dict
    @undocumented: to_str
    @undocumented: __repr__
    @undocumented: __eq__
    @undocumented: __ne__
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'key_size': 'int',
        'pub_exponent': 'int',
        'elliptic_curve': 'EllipticCurve',
        'rsa': 'RsaOptions',
        'dsa': 'DsaOptions',
        'fpe': 'FpeOptions',
        'group_id': 'str',
        'obj_type': 'ObjectType',
        'key_ops': 'list[KeyOperations]',
        'custom_metadata': 'dict(str, str)',
        'value': 'bytearray',
        'enabled': 'bool',
        'transient': 'bool',
        'deterministic_signatures': 'bool',
        'deactivation_date': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'key_size': 'key_size',
        'pub_exponent': 'pub_exponent',
        'elliptic_curve': 'elliptic_curve',
        'rsa': 'rsa',
        'dsa': 'dsa',
        'fpe': 'fpe',
        'group_id': 'group_id',
        'obj_type': 'obj_type',
        'key_ops': 'key_ops',
        'custom_metadata': 'custom_metadata',
        'value': 'value',
        'enabled': 'enabled',
        'transient': 'transient',
        'deterministic_signatures': 'deterministic_signatures',
        'deactivation_date': 'deactivation_date'
    }

    def __init__(self, name=None, description=None, key_size=None, pub_exponent=None, elliptic_curve=None, rsa=None, dsa=None, fpe=None, group_id=None, obj_type=None, key_ops=None, custom_metadata=None, value=None, enabled=None, transient=None, deterministic_signatures=None, deactivation_date=None):
        """
        SobjectRequest - a model defined in Swagger
        """

        self._name = None
        self._description = None
        self._key_size = None
        self._pub_exponent = None
        self._elliptic_curve = None
        self._rsa = None
        self._dsa = None
        self._fpe = None
        self._group_id = None
        self._obj_type = None
        self._key_ops = None
        self._custom_metadata = None
        self._value = None
        self._enabled = None
        self._transient = None
        self._deterministic_signatures = None
        self._deactivation_date = None

        self.name = name
        if description is not None:
          self.description = description
        if key_size is not None:
          self.key_size = key_size
        if pub_exponent is not None:
          self.pub_exponent = pub_exponent
        if elliptic_curve is not None:
          self.elliptic_curve = elliptic_curve
        if rsa is not None:
          self.rsa = rsa
        if dsa is not None:
          self.dsa = dsa
        if fpe is not None:
          self.fpe = fpe
        if group_id is not None:
          self.group_id = group_id
        self.obj_type = obj_type
        if key_ops is not None:
          self.key_ops = key_ops
        if custom_metadata is not None:
          self.custom_metadata = custom_metadata
        if value is not None:
          self.value = value
        if enabled is not None:
          self.enabled = enabled
        if transient is not None:
          self.transient = transient
        if deterministic_signatures is not None:
          self.deterministic_signatures = deterministic_signatures
        if deactivation_date is not None:
          self.deactivation_date = deactivation_date

    @property
    def name(self):
        """
        Gets the name of this SobjectRequest.
        Name of the security object to create or import. Security object names must be unique within an account.

        Type: L{str}
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SobjectRequest.
        Name of the security object to create or import. Security object names must be unique within an account.
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this SobjectRequest.
        Description of the security object to create or import.

        Type: L{str}
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SobjectRequest.
        Description of the security object to create or import.
        """

        self._description = description

    @property
    def key_size(self):
        """
        Gets the key_size of this SobjectRequest.
        Size in bits (not bytes) of the security object to create or import. Required for symmetric keys. For DSA keys, it represents the size of `p`; allowed values are 2048 or 3072. Deprecated for RSA keys, specify it in `RsaOptions` instead.

        Type: L{int}
        """
        return self._key_size

    @key_size.setter
    def key_size(self, key_size):
        """
        Sets the key_size of this SobjectRequest.
        Size in bits (not bytes) of the security object to create or import. Required for symmetric keys. For DSA keys, it represents the size of `p`; allowed values are 2048 or 3072. Deprecated for RSA keys, specify it in `RsaOptions` instead.
        """

        self._key_size = key_size

    @property
    def pub_exponent(self):
        """
        Gets the pub_exponent of this SobjectRequest.
        For RSA keys only. Deprecated. Specify in `RsaOptions` instead. Public exponent to use when generating an RSA key.

        Type: L{int}
        """
        return self._pub_exponent

    @pub_exponent.setter
    def pub_exponent(self, pub_exponent):
        """
        Sets the pub_exponent of this SobjectRequest.
        For RSA keys only. Deprecated. Specify in `RsaOptions` instead. Public exponent to use when generating an RSA key.
        """

        self._pub_exponent = pub_exponent

    @property
    def elliptic_curve(self):
        """
        Gets the elliptic_curve of this SobjectRequest.

        Type: L{EllipticCurve}
        """
        return self._elliptic_curve

    @elliptic_curve.setter
    def elliptic_curve(self, elliptic_curve):
        """
        Sets the elliptic_curve of this SobjectRequest.
        """

        self._elliptic_curve = elliptic_curve

    @property
    def rsa(self):
        """
        Gets the rsa of this SobjectRequest.

        Type: L{RsaOptions}
        """
        return self._rsa

    @rsa.setter
    def rsa(self, rsa):
        """
        Sets the rsa of this SobjectRequest.
        """

        self._rsa = rsa

    @property
    def dsa(self):
        """
        Gets the dsa of this SobjectRequest.

        Type: L{DsaOptions}
        """
        return self._dsa

    @dsa.setter
    def dsa(self, dsa):
        """
        Sets the dsa of this SobjectRequest.
        """

        self._dsa = dsa

    @property
    def fpe(self):
        """
        Gets the fpe of this SobjectRequest.

        Type: L{FpeOptions}
        """
        return self._fpe

    @fpe.setter
    def fpe(self, fpe):
        """
        Sets the fpe of this SobjectRequest.
        """

        self._fpe = fpe

    @property
    def group_id(self):
        """
        Gets the group_id of this SobjectRequest.
        Group ID (not name) of the security group that this security object should belong to. The user or application creating this security object must be a member of this group. If no group is specified, the default group for the user or application will be used. 

        Type: L{str}
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this SobjectRequest.
        Group ID (not name) of the security group that this security object should belong to. The user or application creating this security object must be a member of this group. If no group is specified, the default group for the user or application will be used. 
        """

        self._group_id = group_id

    @property
    def obj_type(self):
        """
        Gets the obj_type of this SobjectRequest.

        Type: L{ObjectType}
        """
        return self._obj_type

    @obj_type.setter
    def obj_type(self, obj_type):
        """
        Sets the obj_type of this SobjectRequest.
        """

        self._obj_type = obj_type

    @property
    def key_ops(self):
        """
        Gets the key_ops of this SobjectRequest.
        Optional array of key operations to be enabled for this security object. If this property is not provided, the SDKMS server will provide a default set of key operations. Note that if you provide an empty array, all key operations will be disabled. 

        Type: list[L{KeyOperations}]
        """
        return self._key_ops

    @key_ops.setter
    def key_ops(self, key_ops):
        """
        Sets the key_ops of this SobjectRequest.
        Optional array of key operations to be enabled for this security object. If this property is not provided, the SDKMS server will provide a default set of key operations. Note that if you provide an empty array, all key operations will be disabled. 
        """

        self._key_ops = key_ops

    @property
    def custom_metadata(self):
        """
        Gets the custom_metadata of this SobjectRequest.
        User-defined metadata for this key. Stored as key-value pairs.

        Type: map[L{str}]
        """
        return self._custom_metadata

    @custom_metadata.setter
    def custom_metadata(self, custom_metadata):
        """
        Sets the custom_metadata of this SobjectRequest.
        User-defined metadata for this key. Stored as key-value pairs.
        """

        self._custom_metadata = custom_metadata

    @property
    def value(self):
        """
        Gets the value of this SobjectRequest.
        When importing a security object, this field contains the binary contents to import. When creating a security object, this field is unused. The value of an OPAQUE or CERTIFICATE object is always returned. For other objects, the value is returned only with `/crypto/v1/keys/export` API (if the object is exportable). 

        Type: L{bytearray}
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this SobjectRequest.
        When importing a security object, this field contains the binary contents to import. When creating a security object, this field is unused. The value of an OPAQUE or CERTIFICATE object is always returned. For other objects, the value is returned only with `/crypto/v1/keys/export` API (if the object is exportable). 
        """

        if not isinstance(value, bytearray):
            raise ValueError("Invalid value for `value`, `value` must be a bytearray")
        self._value = value

    @property
    def enabled(self):
        """
        Gets the enabled of this SobjectRequest.
        Whether the new security object should be enabled. Disabled security objects may not perform cryptographic operations. 

        Type: L{bool}
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this SobjectRequest.
        Whether the new security object should be enabled. Disabled security objects may not perform cryptographic operations. 
        """

        self._enabled = enabled

    @property
    def transient(self):
        """
        Gets the transient of this SobjectRequest.
        If this is true, SDKMS will create a transient key.

        Type: L{bool}
        """
        return self._transient

    @transient.setter
    def transient(self, transient):
        """
        Sets the transient of this SobjectRequest.
        If this is true, SDKMS will create a transient key.
        """

        self._transient = transient

    @property
    def deterministic_signatures(self):
        """
        Gets the deterministic_signatures of this SobjectRequest.

        Type: L{bool}
        """
        return self._deterministic_signatures

    @deterministic_signatures.setter
    def deterministic_signatures(self, deterministic_signatures):
        """
        Sets the deterministic_signatures of this SobjectRequest.
        """

        self._deterministic_signatures = deterministic_signatures

    @property
    def deactivation_date(self):
        """
        Gets the deactivation_date of this SobjectRequest.
        When this object will be deactivated.

        Type: L{str}
        """
        return self._deactivation_date

    @deactivation_date.setter
    def deactivation_date(self, deactivation_date):
        """
        Sets the deactivation_date of this SobjectRequest.
        When this object will be deactivated.
        """

        self._deactivation_date = deactivation_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SobjectRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

