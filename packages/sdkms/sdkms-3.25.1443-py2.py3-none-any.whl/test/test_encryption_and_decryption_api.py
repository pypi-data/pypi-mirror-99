# coding: utf-8

"""
    Fortanix SDKMS REST API

    This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 

    OpenAPI spec version: 1.0.0-20200608
    Contact: support@fortanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from __future__ import absolute_import

import os
import sys
import unittest

import sdkms/v1
from sdkms/v1.rest import ApiException
from sdkms/v1.apis.encryption_and_decryption_api import EncryptionAndDecryptionApi


class TestEncryptionAndDecryptionApi(unittest.TestCase):
    """ EncryptionAndDecryptionApi unit test stubs """

    def setUp(self):
        self.api = sdkms/v1.apis.encryption_and_decryption_api.EncryptionAndDecryptionApi()

    def tearDown(self):
        pass

    def test_batch_decrypt(self):
        """
        Test case for batch_decrypt

        Batch decrypt with one or more keys
        """
        pass

    def test_batch_encrypt(self):
        """
        Test case for batch_encrypt

        Batch encrypt with one or more keys
        """
        pass

    def test_decrypt(self):
        """
        Test case for decrypt

        Decrypt data
        """
        pass

    def test_decrypt_ex(self):
        """
        Test case for decrypt_ex

        Decrypt data
        """
        pass

    def test_decrypt_final(self):
        """
        Test case for decrypt_final

        Conclude multi-part decryption
        """
        pass

    def test_decrypt_final_ex(self):
        """
        Test case for decrypt_final_ex

        Conclude multi-part decryption
        """
        pass

    def test_decrypt_init(self):
        """
        Test case for decrypt_init

        Begin multi-part decryption
        """
        pass

    def test_decrypt_init_ex(self):
        """
        Test case for decrypt_init_ex

        Begin multi-part decryption
        """
        pass

    def test_decrypt_update(self):
        """
        Test case for decrypt_update

        Continue multi-part decryption
        """
        pass

    def test_decrypt_update_ex(self):
        """
        Test case for decrypt_update_ex

        Continue multi-part decryption
        """
        pass

    def test_encrypt(self):
        """
        Test case for encrypt

        Encrypt data
        """
        pass

    def test_encrypt_ex(self):
        """
        Test case for encrypt_ex

        Encrypt data
        """
        pass

    def test_encrypt_final(self):
        """
        Test case for encrypt_final

        Conclude multi-part encryption
        """
        pass

    def test_encrypt_final_ex(self):
        """
        Test case for encrypt_final_ex

        Conclude multi-part encryption
        """
        pass

    def test_encrypt_init(self):
        """
        Test case for encrypt_init

        Begin multi-part encryption
        """
        pass

    def test_encrypt_init_ex(self):
        """
        Test case for encrypt_init_ex

        Begin multi-part encryption
        """
        pass

    def test_encrypt_update(self):
        """
        Test case for encrypt_update

        Continue multi-part encryption
        """
        pass

    def test_encrypt_update_ex(self):
        """
        Test case for encrypt_update_ex

        Continue multi-part encryption
        """
        pass


if __name__ == '__main__':
    unittest.main()
