# -*- coding: utf-8 -*-
#
#  This file is part of Sequana software
#
#  Copyright (c) 2016-2021 - Sequana Dev Team (https://sequana.readthedocs.io)
#
#  File author(s):
#      Thomas Cokelaer <thomas.cokelaer@pasteur.fr>
#      Rachel Legendre <rachel.legendre@pasteur.fr>
#
#  Distributed under the terms of the 3-clause BSD license.
#  The full license is in the LICENSE file, distributed with this software.
#
#  Website:       https://github.com/sequana/sequana
#  Documentation: http://sequana.readthedocs.io
#  Contributors:  https://github.com/sequana/sequana/graphs/contributors
##############################################################################



rule rnaseqc:
    """
    rnaseqc computes a series of quality control metrics for RNA-seq data. 

    Required input:
        - __rnaseqc__input_bam : a set of BAM files (sorted and indexed with reOrderSam)
        - __rnaseqc__input_gtf: a GTF input file

    Required output:
        - __rnaseqc__output_directory: directory where to output files

    Other requirements:
        -  __rnaseqc__logs

    Parameters:
        -  directory __rnaseqc__logs
        -  config['rnaseqc'][options']: any options accepted by rnaseqc

    Required configuration:
        .. code-block:: yaml

            rnaseqc:
                 do: no
                 gtf_file: path to a GTF file
                 options: Any option recognized by RNAseQC tool (v2.35)


    References:
        http://archive.broadinstitute.org/cancer/cga/rnaseqc_run
    """
    input :
        bam = __rnaseqc__input_bam,
        gtf = __rnaseqc__input_gtf
    log :
        __rnaseqc__logs
    output:
        metrics = __rnaseqc__output_metrics
    params:
        directory = __rnaseqc__params_directory,
        sample = __rnaseqc__params_sample,
        kwargs = config['rnaseqc']['options']

    run:

        # If input GTF has no exon or genes, an error message is printed and no
        # files are created. This seems to be an issue in rnaseqc. So, the only
        # way is to trick the input GTF file by adding a dummy gene and a dummy
        # exon
        from easydev import TempFile

        with TempFile(suffix=".gtf") as fout:
            ff = open(fout.name, "w")
            ff.write('myCHR\tSGD\tgene\t0\t0\t.\t+\t0\tgene_id "dummy";')
            ff.write('myCHR\tSGD\texon\t0\t0\t.\t+\t0\texon_id "dummy";')
            ff.write(open(input['gtf'], "r").read())
            ff.close()
            shell("rnaseqc " + fout.name + " {input.bam} {params.directory} -s {params.sample} {params.kwargs} &>{log}")


