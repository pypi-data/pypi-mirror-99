# -*- coding: utf-8 -*-
#
#  This file is part of Sequana software
#
#  Copyright (c) 2016-2021 - Sequana Dev Team (https://sequana.readthedocs.io)
#
#  File author(s):
#      Thomas Cokelaer <thomas.cokelaer@pasteur.fr>
#
#  Distributed under the terms of the 3-clause BSD license.
#  The full license is in the LICENSE file, distributed with this software.
#
#  Website:       https://github.com/sequana/sequana
#  Documentation: http://sequana.readthedocs.io
#  Contributors:  https://github.com/sequana/sequana/graphs/contributors
##############################################################################



def macs3_dynamic(name):

    metadata = {'name':name}

    macs3_code = '''
rule macs3_%(name)s:
    """
    macs3 peak caller

    Required input:
        __macs3_%(name)s__ip_bam: input bam file(s)
        __macs3_%(name)s__control_bam: control bam file(s)

    Required output:
        __macs3_%(name)s__output: peak file

    Required configuration:
        .. code-block:: yaml

            macs3:
                mode: narrow or broad
                gsize: mappable size of your genome. See MACS2 documentation
                options:  ""   # any options for macs3 you want use
                no-model: yes or no
                force_shift: yes or no
                readLength: 50 # in order to compute the best shift with PPQT when force_shift is set

    """

    input:
        ip_bam = __macs3_%(name)s__input_ip_bam,
        control_bam = __macs3_%(name)s__input_control_bam,
    output: __macs3_%(name)s__output
    params:
        bandwidth       = __macs3_%(name)s__bandwidth,
        genome_size     = __macs3_%(name)s__genome_size,
        options         = __macs3_%(name)s__options,
        broad_cutoff    = __macs3_%(name)s__broad_cutoff,
        outdir          = __macs3__outdir,
        paired          = __macs3_%(name)s__paired,
        prefix          = __macs3_%(name)s__prefix,
        qvalue          = __macs3_%(name)s__qvalue,
        read_length     = __macs3_%(name)s__read_length,
    log:
        __macs3_%(name)s__log
    run:
        ip_bam = " ".join(input.ip_bam)
        control_bam = " ".join(input.control_bam)
        # -B --SPMR is to save fragment pileup useful to save into bigwig later on
        cmd = "macs3 callpeak -B --SPMR "
        cmd += f" -t {ip_bam} "
        cmd += f" -c {input.control_bam} "
        cmd += " -g {params.genome_size} "
        cmd += " -n {params.prefix} --bw {params.bandwidth} {params.options} -q {params.qvalue}"
        if params.paired:
            cmd += " -f BAMPE "
        else:
            cmd += " -f BAM "
        # First narrow peak calling
        shell(cmd + " --outdir {params.outdir}/narrow 2> {log[0]}")

        # second narrow peak calling
        shell(cmd + " --outdir {params.outdir}/broad --broad --broad-cutoff {params.broad_cutoff} 2> {log[1]}")

        

    '''

    from sequana.snaketools import build_dynamic_rule
    return build_dynamic_rule(macs3_code % metadata, manager.pipeline_dir)
