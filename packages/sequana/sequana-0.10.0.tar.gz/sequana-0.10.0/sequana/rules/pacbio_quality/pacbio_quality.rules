# -*- coding: utf-8 -*-
#
#  This file is part of Sequana software
#
#  Copyright (c) 2016-2021 - Sequana Dev Team (https://sequana.readthedocs.io)
#
#  File author(s):
#      Thomas Cokelaer <thomas.cokelaer@pasteur.fr>
#
#  Distributed under the terms of the 3-clause BSD license.
#  The full license is in the LICENSE file, distributed with this software.
#
#  Website:       https://github.com/sequana/sequana
#  Documentation: http://sequana.readthedocs.io
#  Contributors:  https://github.com/sequana/sequana/graphs/contributors
##############################################################################


try:
    __pacbio_quality__output_summary
except:
    __pacbio_quality__output_summary = "{sample}/summary_{sample}.json"

rule pacbio_quality:
    """Pacbio quality control

    Required input:
        - __pacbio_quality__input : the input BAM file

    Required output:
        - __pacbio_quality__output_summary: summary_{sample}.json

    Optional parameters:
        - __pacbio_quality__images_directory: where to save PNG
          images (default to ./images)

    In addition to a summary file with basic statistics, this
    rules creates 5 images with basic histograms about the read
    lengths, the GC content, the ZMW information, the SNR of the
    A,C,G,T nucleotides, and a 2D histogram of GC versus read length

    References:
        `sequana.pacbio <http://sequana.readthedocs.io/en/master/references.html#sequana.pacbio.PacbioSubreads>`_

    """
    input: __pacbio_quality__input
    params:
        sample_name = __pacbio_quality__sample_name
    output:
        read_len   = "{sample}/images/hist_read_len_{sample}.png",
        GC_content = "{sample}/images/GC_content_{sample}.png",
        ZMW        = "{sample}/images/ZMW_passes_{sample}.png",
        SNR        = "{sample}/images/SNR_{sample}.png",
        GC_vs_len  = "{sample}/images/GC_vs_len_{sample}.png",
        summary    = __pacbio_quality__output_summary
    run:
        from sequana import pacbio
        import pylab
        def setname(name):
            return name
        ########## labels for plots
        short_name = input[0].replace(".bam","").split("/")[-1]
        bam_pacbio = pacbio.PacbioSubreads(input[0])

        ########## Read length
        # individual histograms
        bam_pacbio.hist_read_length(label=short_name)
        pylab.title("")
        pylab.legend()
        pylab.savefig(setname(output.read_len))

        ########## GC content
        # individual histograms
        bam_pacbio.hist_GC(label=short_name)
        pylab.title("")
        pylab.legend()
        pylab.savefig(setname(output.GC_content))

        ########## ZMW passes
        # individual histograms
        bam_pacbio.hist_nb_passes(label=short_name)
        pylab.title("")
        pylab.legend()
        pylab.savefig(setname(output.ZMW))

        ########## SNR
        # individual histograms
        bam_pacbio.hist_snr()
        pylab.title("")
        pylab.savefig(setname(output.SNR))

        # plot GC versus read length
        bam_pacbio.plot_GC_read_len()
        pylab.title("")
        pylab.savefig(setname(output.GC_vs_len))

        # summary
        summary = bam_pacbio.summary()
        with open(output.summary, "w") as fh:
            summary.update(
                {"images":
                    {"hist_read_length": output.read_len,
                    "hist_gc_content": output.GC_content,
                    "hist_snr": output.SNR,
                    "gc_vs_length": output.GC_vs_len,
                    "hist_zmw": output.ZMW}
                })
            summary.update({'sample': params.sample_name})
            summary.update({'generator': "sequana_pacbio_quality"})
            json.dump(summary, fh, indent=True, sort_keys=True)
        pylab.close()


