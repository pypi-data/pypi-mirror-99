# -*- coding: utf-8 -*-
#
#  This file is part of Sequana software
#
#  Copyright (c) 2016-2021 - Sequana Dev Team (https://sequana.readthedocs.io)
#
#  File author(s):
#      Thomas Cokelaer <thomas.cokelaer@pasteur.fr>
#
#  Distributed under the terms of the 3-clause BSD license.
#  The full license is in the LICENSE file, distributed with this software.
#
#  Website:       https://github.com/sequana/sequana
#  Documentation: http://sequana.readthedocs.io
#  Contributors:  https://github.com/sequana/sequana/graphs/contributors
##############################################################################




rule sequana_coverage:
    """
    Sequana coverage detects and characterises automatically low and high 
    genome coverage regions.
    It provides a useful HTML report with dynamic plot and table.
    Moreover, a CSV file with all metrics computed is created.
    This CSV can be used to regenerate the sequana_coverage report.

    Required input:
        - __sequana_coverage__bed: BED file with coverage by base position.

    Optional input:
        - __sequana_coverage__fasta: FASTA file of the reference to compute GC content.
        - __sequana_coverage__gbk: Genbank file to annotate regions of interest. (Optional)

    **NOTE**: If you do not need an optional input. Initiate it as an empty list.

    Required output:
        - __sequana_coverage__csv: CSV file with computed metrics.
        - __sequana_coverage__html: HTML report of results.

    Required parameter:
        - __sequana_coverage__report_dir: Report directory to copy JS/CSS.

    Required configuration:
        .. code-block:: yaml
    
            sequana_coverage:
                mixture_models: 2 # number of gaussian predicted.
                circular: yes     # if your genome is circular.
                high_threshold: 4 # threshold to detect high coverage regions.
                low_threshold: -4 # threshold to detect low coverage regions.
                window_size: 30001 # window size to compute the running median.
                gc_window_size: 201 # window size to compute GC content.
                chunksize:
                binning: -1
                cnv_clustering: -1
    Reference:
        - https://doi.org/10.1101/092478
    """
    input:
        bed = __sequana_coverage__bed,
        fasta = __sequana_coverage__fasta,
        gbk = __sequana_coverage__gbk
    output:
        #csv = __sequana_coverage__csv,
        html = __sequana_coverage__html
    params:
        k = config["sequana_coverage"]["mixture_models"],
        size = config["sequana_coverage"]["window_size"],
        high = config["sequana_coverage"]["high_threshold"],
        double_threshold = config["sequana_coverage"]["double_threshold"],
        low = config["sequana_coverage"]["low_threshold"],
        circular = config["sequana_coverage"]["circular"],
        chunksize = config["sequana_coverage"]["chunksize"],
        gc_size = config["sequana_coverage"]["gc_window_size"],
        report_dir = __sequana_coverage__report_dir
    run:
        from sequana.bedtools import GenomeCov
        from sequana.modules_report.coverage import CoverageModule
        from sequana.utils import config

        # Run sequana coverage
        bed = GenomeCov(input['bed'], input['gbk'], params['low'],
                        params['high'], params['double_threshold'], 
                        params["double_threshold"])

        bed.compute_gc_content(input['fasta'], params['gc_size'],
                               params['circular'])

        sample = input['bed'].split(os.sep)[0]
        for chrom in bed:
            if params['size'] >  len(chrom.df)/4:
                W = int(len(chrom.df) / 4)
            else:
                W = params['size']
            results = chrom.run(W, circular=params['circular'], 
                        k=params['k'], binning=-1, cnv_delta=-1)

            prefix = "{}/{}/".format(params['report_dir'], chrom.chrom_name)

            output_json = prefix + "sequana_summary_coverage.json"

            from easydev import mkdirs
            mkdirs(prefix)
            output_roi = prefix + "rois.csv"
            ROIs = results.get_rois()
            ROIs.df.to_csv(output_roi)
            chrom.plot_coverage(prefix + "coverage.png")
            summary = results.get_summary(caller="sequana_pipeline")
            summary.to_json(output_json)

            # FIXME the following lines should be in the for loop ?
            #bed.to_csv(output['csv'], float_format='%.3g')

        # Create HTML reports
        config.output_dir = params['report_dir']
        # This works for the variant calling, which report is called
        # report_vc_{sample}. Since there is no _ in other pipelines, 
        # this works as well
        config.sample_name = params['report_dir'].split('_')[-1]
        CoverageModule(bed)
