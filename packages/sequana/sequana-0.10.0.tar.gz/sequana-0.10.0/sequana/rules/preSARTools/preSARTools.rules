# -*- coding: utf-8 -*-
#
#  This file is part of Sequana software
#
#  Copyright (c) 2016-2021 - Sequana Dev Team (https://sequana.readthedocs.io)
#
#  File author(s):
#       Rachel Legendre <rachel.legendre@pasteur.fr>
#
#  Distributed under the terms of the 3-clause BSD license.
#  The full license is in the LICENSE file, distributed with this software.
#
#  Website:       https://github.com/sequana/sequana
#  Documentation: http://sequana.readthedocs.io
#  Contributors:  https://github.com/sequana/sequana/graphs/contributors
##############################################################################



rule preSARTools:
    """
    SARTools is a R package dedicated to the differential analysis of RNA-seq data.
    It provides tools to generate descriptive and diagnostic graphs, to run the differential analysis
    with one of the well known DESeq2 or edgeR packages and to export the results into easily readable
    tab-delimited files. It also facilitates the generation of a HTML report which displays all the
    figures produced, explains the statistical methods and gives the results of the differential analysis.

    Required input:
        __SARTools__input: a list of count files

    Required output:
        __SARTools__output_directory: a directory with all count files
        __SARTools__target_file: a target file with the design and the corresponding count files

    Config:

        .. code-block:: yaml

            SARTools:
                design: path/to/file            #path to design file

    """


    input:
        __preSARTools__input
    log:
        __preSARTools__logs
    output:
        directory = __preSARTools__output_directory,
        targetFile = __preSARTools__targetFile
    threads: 1
    params:
        design = config['SARTools']['design']
    run:
        import pandas as pd
        from os.path import basename

        # move all featureCount files in a folder output.directory
        #shell("mkdir {output.directory}")
        for file in input:
            shell("cp {file} {output.directory}")
        # add a new colomn on target file with corresponding path to count files
        df = pd.read_csv(params.design, sep="\t", header = 0, index_col= None)
        df.insert(1,"file","Nan")
        files = {}
        for fp in input:
            for sample in df["sample"]:
                if fp.startswith(sample):
                    files[sample] = basename(fp)
        df['file'] = df['sample'].map(files)
        df.to_csv(output.targetFile, sep="\t", encoding='utf-8', index=False)




