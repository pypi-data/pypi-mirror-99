# -*- coding: utf-8 -*-
#
#  This file is part of Sequana software
#
#  Copyright (c) 2016-2021 - Sequana Dev Team (https://sequana.readthedocs.io)
#
#  File author(s):
#       Dimitri Desvillechabrol <dimitri.desvillechabrol@pasteur.fr>
#
#  Distributed under the terms of the 3-clause BSD license.
#  The full license is in the LICENSE file, distributed with this software.
#
#  Website:       https://github.com/sequana/sequana
#  Documentation: http://sequana.readthedocs.io
#  Contributors:  https://github.com/sequana/sequana/graphs/contributors
##############################################################################


rule joint_freebayes:
    """
    Freebayes is a variant caller designed to find SNPs and short INDELs from a
    BAM file. It produces a very well-annotated VCF output. Moreover, it
    provides a quality score calculated by a bayesian model. 
    
    This rules does the variant calling jointly with all samples. It increases
    the power of the bayesian model.

    Required input:
        - __joint_freebayes__input: List of sorted BAM files.
        - __joint_freebayes__reference: FASTA file of the reference genome.

    Required output:
        - __joint_freebayes__output: VCF file of detected variants.

    Required log:
        - __joint_freebayes__log: Log file with stdout and stderr of Freebayes.

    Required parameter:
        - __joint_freebayes__ploidy: The ploidy of the samples.

    Required configuration:
        .. code-block:: yaml

            freebayes:
                options: # Any options recognised by freebayes.

    Reference:
        - https://github.com/ekg/freebayes
    """
    input:
        bam = __joint_freebayes__input,
        ref = __joint_freebayes__reference
    output:
        vcf = __joint_freebayes__output,
    log:
        __joint_freebayes__log
    params:
        ploidy = __joint_freebayes__ploidy,
        options = config["joint_freebayes"]["options"]
    shell:
        """
        freebayes {params.options} --ploidy {params.ploidy} -f {input.ref} \
        -v {output.vcf} {input.bam} > {log} 2>&1
        """
