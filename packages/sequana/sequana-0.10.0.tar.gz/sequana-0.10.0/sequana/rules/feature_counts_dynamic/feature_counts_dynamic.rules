# -*- coding: utf-8 -*-
#
#  This file is part of Sequana software
#
#  Copyright (c) 2016-2021 - Sequana Dev Team (https://sequana.readthedocs.io)
#
#  File author(s):
#      Thomas Cokelaer <thomas.cokelaer@pasteur.fr>
#      Rachel Legendre <rachel.legendre@pasteur.fr>
#
#  Distributed under the terms of the 3-clause BSD license.
#  The full license is in the LICENSE file, distributed with this software.
#
#  Website:       https://github.com/sequana/sequana
#  Documentation: http://sequana.readthedocs.io
#  Contributors:  https://github.com/sequana/sequana/graphs/contributors
##############################################################################



def feature_counts_dynamic(name, manager):

    metadata = {'name': name}
    feature_counts_code = '''

rule feature_counts_%(name)s:
    """
    Feature counts (subread) summarizes counts mapped reads for 
    genomic features such as genes, exons, promoter, gene bodies, 
    genomic bins and chromosomal locations.

    :reference: http://bioinf.wehi.edu.au/featureCounts/

    Required input:
         __feature_counts__input: sorted bam file

    Required output:
        __feature_counts__output_count: output tabulated-delimited file

    Config:

        .. code-block:: yaml

            feature_counts:
                gff: " "       #path to the GFF/GTF annotation file
                options:  " "  #options for featureCounts you want use
    """


    input:
        bam = __feature_counts__input,
        gff = __feature_counts__gff
    output:
        counts = __feature_counts_%(name)s__output_count
    params:
        mapp = __feature_counts__options
    log:
        __feature_counts_%(name)s__log
    threads:
        __feature_counts__threads
    run:
        shell("""featureCounts -T {threads} {params.mapp} \
                 -a {input.gff} -o {output.counts} {input.bam} 2> {log}""")
        # now we can read the summary file back and add a tag
        sample = "__fc{}_".format(str(%(name)s)) + input.bam.split("/")[0]
        cmd = 'sed -i "s/Status.*/Status\t{}/g" {}.summary'.format(sample, output.counts)
        shell(cmd)

    '''
    from sequana.snaketools import build_dynamic_rule
    return build_dynamic_rule(feature_counts_code % metadata, manager.pipeline_dir)
