# -*- coding: utf-8 -*-
#
#  This file is part of Sequana software
#
#  Copyright (c) 2016-2021 - Sequana Dev Team (https://sequana.readthedocs.io)
#
#  File author(s):
#      Thomas Cokelaer <thomas.cokelaer@pasteur.fr>
#      Rachel Legendre <rachel.legendre@pasteur.fr>
#
#  Distributed under the terms of the 3-clause BSD license.
#  The full license is in the LICENSE file, distributed with this software.
#
#  Website:       https://github.com/sequana/sequana
#  Documentation: http://sequana.readthedocs.io
#  Contributors:  https://github.com/sequana/sequana/graphs/contributors
##############################################################################



rule cutadapt:
    """Cutadapt (adapter removal)

    Required input:
        - __cutadapt__input_fastq

    Required output:
        - __cutadapt__output

    Required parameters:
        - __cutadapt__fwd: forward adapters as a file, or string
        - __cutadapt__rev: reverse adapters as a file, or string
        - __cutadapt__options, 
        - __cutadapt__mode, # g for 5' adapter, a for 3' and b 
          for both 5'/3' (see cutadapt doc for details)
        - __cutadapt__wkdir,
        - __cutadapt__design,
        - __cutadapt__design_adapter,
        - __cutadapt__sample

    Other requirements:
        - __cutadapt__log

    Required configuration:
        .. code-block:: yaml

            cutadapt:
                do: yes
                tool_choice: cutadapt
                design: "%(adapter_design)s"
                adapter_choice: "%(adapter_type)s"
                fwd: "%(adapter_fwd)s"
                rev: "%(adapter_rev)s"
                m: 20   # cutoff
                mode: "g"   # g for 5' adapter, a for 3' and b for both 5'/3'
                quality: "30"
                options: "-O 6 --trim-n"

    References:
        http://cutadapt.readthedocs.io/en/stable/index.html
    """
    input:
        fastq = __cutadapt__input_fastq
    output:
        fastq = __cutadapt__output
    params:
        fwd = __cutadapt__fwd,
        rev = __cutadapt__rev,
        m = config['cutadapt']['m'],   # cutoff
        quality = config['cutadapt']['quality'],
        kwargs = __cutadapt__options,
        mode = __cutadapt__mode,
        wkdir = __cutadapt__wkdir,
        design = __cutadapt__design,
        design_adapter = __cutadapt__design_adapter,  # TODO this is the adapter kit. to rename
        sample = __cutadapt__sample,
    threads:
        config['cutadapt']['threads']
    log: __cutadapt__log
    run:
        executable = config['cutadapt']['tool_choice'] # could be cutadapt or atropos

        # Fill the fwd and revcomp variables depending on the config file
        if config['cutadapt']['design_file']:
            from sequana import FindAdaptersFromDesign
            # sample names are e.g. SAMPLE1_CACGAT and therefore we should split
            # the real sample name from the index. Unfortunately, users may
            # call their sample name "SAMPLE1_MYNAME_CAGCGT. How do we know
            # that the index CAGCCT is not part of the name ? How do we know
            # how many underscores the users used in its sample name ? There is
            # no way to know ... so we will try by trial and error
            underscores = params.sample.count("_")
            for i, trial in enumerate(range(underscores+1)):
                sample = params.sample.rsplit("_", i)[0]
                #print("{} {}".format(sample, i), flush=True)
                try:
                    fa = FindAdaptersFromDesign(params.design, params.design_adapter)
                    fwd, revcomp = fa.save_adapters_to_fasta(sample, output_dir=params.wkdir)
                    break # we succeed to find the correct name
                except ValueError:
                    pass
            fwd = "file:%s" % fwd
            revcomp = "file:%s" % revcomp
        elif params.design_adapter:
            from sequana.adapters import get_sequana_adapters
            fwd = "file:%s" % get_sequana_adapters(params.design_adapter, "fwd")
            revcomp = "file:%s" % get_sequana_adapters(params.design_adapter, "revcomp")
        else:
            fwd = params.fwd
            revcomp = params.rev


        # For atropos, output must be txt AND json for the module to work.
        #
        # Paired data
        if len(input.fastq) == 2:
            if executable == "atropos":
                cmd = "%s trim" % executable
                cmd += " -pe1 {input.fastq[0]} -pe2 {input.fastq[1]} "
                # atropos requires at least 2 threads
                if int(threads) > 1:
                    cmd += " -T {threads} "
                cmd += " --process-timeout 600 "
                logpath = log[0].replace(".txt", "")
                cmd += " --report-formats json txt --report-file %s" % logpath
            else:
                cmd = "{}".format(executable)
            mode2 = params.mode.upper()

            if fwd:
                cmd += " -{params.mode} %s " % fwd
            else:
                cmd += " -{params.mode} XXXX "

            if revcomp:
                cmd += " -%s %s " % (mode2, revcomp)
            else:
                cmd += " -%s XXXX " % mode2

            cmd += " -m {params.m} -q {params.quality} "
            # -o is common to atropos and cutadapt for the output R1 and -p for
            # R2
            cmd += " {params.kwargs} -o {output.fastq[0]} -p {output.fastq[1]}"

            # input of cutdapt must be at the end. earlier version handled
            # mixing of optional arguments and positional argument but not
            # latest version. In any case, it is safer to do it correctly
            # (changes sequana 0.8)
            if executable == "cutadapt":
                cmd += " {input.fastq[0]} {input.fastq[1]} "
            cmd += "> {log}"
            shell(cmd)
        else:
            if executable == "atropos":
                cmd = "%s trim -se {input.fastq[0]}  " % executable
                # atropos requires at least 2 threads

                if int(threads) > 1:
                    cmd += " -T {threads} "
                cmd += " --process-timeout 600 "
                logpath = log[0].replace(".txt", "")
                cmd += " --report-formats json txt --report-file %s" % logpath
            else:
                cmd = "%s" % executable

            if fwd:
                cmd += "    -{params.mode} %s " % fwd
            else:
                cmd += "    -{params.mode} XXXX "
            cmd += " -m {params.m} -q {params.quality} "
            cmd += " {params.kwargs} -o {output.fastq[0]}"
            if executable == "cutadapt":
                cmd += " {input.fastq[0]} "
            cmd += " > {log}"
            shell(cmd)
