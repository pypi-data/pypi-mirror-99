# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.6
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(647, 728)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(247, 10, 46))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.NoRole, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(247, 10, 46))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.NoRole, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(247, 10, 46))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.NoRole, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        MainWindow.setPalette(palette)
        MainWindow.setStyleSheet("")
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.vlayout = QtWidgets.QVBoxLayout()
        self.vlayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.vlayout.setContentsMargins(5, 0, 5, 0)
        self.vlayout.setSpacing(0)
        self.vlayout.setObjectName("vlayout")
        self.tabs_pipeline = QtWidgets.QTabWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabs_pipeline.sizePolicy().hasHeightForWidth())
        self.tabs_pipeline.setSizePolicy(sizePolicy)
        self.tabs_pipeline.setMinimumSize(QtCore.QSize(0, 167))
        self.tabs_pipeline.setStyleSheet("background-color:#aaddcc")
        self.tabs_pipeline.setTabPosition(QtWidgets.QTabWidget.North)
        self.tabs_pipeline.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabs_pipeline.setMovable(True)
        self.tabs_pipeline.setObjectName("tabs_pipeline")
        self.tab_sequana_pipelines = QtWidgets.QWidget()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tab_sequana_pipelines.sizePolicy().hasHeightForWidth())
        self.tab_sequana_pipelines.setSizePolicy(sizePolicy)
        self.tab_sequana_pipelines.setObjectName("tab_sequana_pipelines")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.tab_sequana_pipelines)
        self.gridLayout_6.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.gridLayout_20 = QtWidgets.QGridLayout()
        self.gridLayout_20.setObjectName("gridLayout_20")
        self.tabs_sequana = QtWidgets.QTabWidget(self.tab_sequana_pipelines)
        self.tabs_sequana.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabs_sequana.sizePolicy().hasHeightForWidth())
        self.tabs_sequana.setSizePolicy(sizePolicy)
        self.tabs_sequana.setBaseSize(QtCore.QSize(0, 0))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 238, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 238, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 238, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.NoRole, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 238, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 238, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 238, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.NoRole, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 238, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 238, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 238, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.NoRole, brush)
        self.tabs_sequana.setPalette(palette)
        self.tabs_sequana.setStyleSheet("background-color:#ffeedd")
        self.tabs_sequana.setTabPosition(QtWidgets.QTabWidget.North)
        self.tabs_sequana.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabs_sequana.setDocumentMode(False)
        self.tabs_sequana.setTabsClosable(False)
        self.tabs_sequana.setMovable(True)
        self.tabs_sequana.setTabBarAutoHide(False)
        self.tabs_sequana.setObjectName("tabs_sequana")
        self.Pipeline = QtWidgets.QWidget()
        self.Pipeline.setObjectName("Pipeline")
        self.gridLayout_19 = QtWidgets.QGridLayout(self.Pipeline)
        self.gridLayout_19.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.gridLayout_19.setContentsMargins(6, 0, 6, 0)
        self.gridLayout_19.setObjectName("gridLayout_19")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setContentsMargins(-1, -1, 0, 0)
        self.verticalLayout.setSpacing(6)
        self.verticalLayout.setObjectName("verticalLayout")
        self.choice_button = QtWidgets.QComboBox(self.Pipeline)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 238, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 238, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 238, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(89, 100, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.NoRole, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 238, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 238, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 238, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(89, 100, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.NoRole, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 238, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 238, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 238, 221))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(89, 100, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.NoRole, brush)
        self.choice_button.setPalette(palette)
        self.choice_button.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.choice_button.setAutoFillBackground(False)
        self.choice_button.setStyleSheet("selection-background-color: rgb(89, 100, 255);")
        self.choice_button.setObjectName("choice_button")
        self.choice_button.addItem("")
        self.verticalLayout.addWidget(self.choice_button)
        self.gridLayout_19.addLayout(self.verticalLayout, 0, 0, 1, 1)
        self.tabs_sequana.addTab(self.Pipeline, "")
        self.sequana_input_dir_tab = QtWidgets.QWidget()
        self.sequana_input_dir_tab.setObjectName("sequana_input_dir_tab")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.sequana_input_dir_tab)
        self.gridLayout_7.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.tabWidget = QtWidgets.QTabWidget(self.sequana_input_dir_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setMinimumSize(QtCore.QSize(0, 0))
        self.tabWidget.setStyleSheet("background-color:white")
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabWidget.setElideMode(QtCore.Qt.ElideNone)
        self.tabWidget.setObjectName("tabWidget")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.gridLayout_10 = QtWidgets.QGridLayout(self.tab_4)
        self.gridLayout_10.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_10.setObjectName("gridLayout_10")
        self.layout_sequana_input_dir = QtWidgets.QVBoxLayout()
        self.layout_sequana_input_dir.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.layout_sequana_input_dir.setContentsMargins(-1, 0, -1, 0)
        self.layout_sequana_input_dir.setSpacing(0)
        self.layout_sequana_input_dir.setObjectName("layout_sequana_input_dir")
        self.gridLayout_10.addLayout(self.layout_sequana_input_dir, 0, 0, 1, 1)
        self.tabWidget.addTab(self.tab_4, "")
        self.horizontalLayout_2.addWidget(self.tabWidget)
        self.gridLayout_7.addLayout(self.horizontalLayout_2, 0, 0, 1, 1)
        self.tabs_sequana.addTab(self.sequana_input_dir_tab, "")
        self.sequana_working_dir_tab = QtWidgets.QWidget()
        self.sequana_working_dir_tab.setObjectName("sequana_working_dir_tab")
        self.gridLayout_8 = QtWidgets.QGridLayout(self.sequana_working_dir_tab)
        self.gridLayout_8.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.layout_sequana_wkdir = QtWidgets.QHBoxLayout()
        self.layout_sequana_wkdir.setObjectName("layout_sequana_wkdir")
        self.gridLayout_8.addLayout(self.layout_sequana_wkdir, 0, 0, 1, 1)
        self.tabs_sequana.addTab(self.sequana_working_dir_tab, "")
        self.gridLayout_20.addWidget(self.tabs_sequana, 0, 0, 1, 1)
        self.gridLayout_6.addLayout(self.gridLayout_20, 0, 0, 1, 1)
        self.tabs_pipeline.addTab(self.tab_sequana_pipelines, "")
        self.tab_generic_pipelines = QtWidgets.QWidget()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tab_generic_pipelines.sizePolicy().hasHeightForWidth())
        self.tab_generic_pipelines.setSizePolicy(sizePolicy)
        self.tab_generic_pipelines.setObjectName("tab_generic_pipelines")
        self.gridLayout_11 = QtWidgets.QGridLayout(self.tab_generic_pipelines)
        self.gridLayout_11.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_11.setObjectName("gridLayout_11")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout_3.setContentsMargins(6, -1, 6, -1)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.tabs_generic = QtWidgets.QTabWidget(self.tab_generic_pipelines)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabs_generic.sizePolicy().hasHeightForWidth())
        self.tabs_generic.setSizePolicy(sizePolicy)
        self.tabs_generic.setStyleSheet("background-color:#ffeedd")
        self.tabs_generic.setObjectName("tabs_generic")
        self.snakefile = QtWidgets.QWidget()
        self.snakefile.setObjectName("snakefile")
        self.gridLayout_12 = QtWidgets.QGridLayout(self.snakefile)
        self.gridLayout_12.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_12.setObjectName("gridLayout_12")
        self.layout_generic_snakefile = QtWidgets.QHBoxLayout()
        self.layout_generic_snakefile.setObjectName("layout_generic_snakefile")
        self.gridLayout_12.addLayout(self.layout_generic_snakefile, 0, 0, 1, 1)
        self.tabs_generic.addTab(self.snakefile, "")
        self.configfile = QtWidgets.QWidget()
        self.configfile.setObjectName("configfile")
        self.gridLayout_13 = QtWidgets.QGridLayout(self.configfile)
        self.gridLayout_13.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_13.setObjectName("gridLayout_13")
        self.layout_generic_config = QtWidgets.QHBoxLayout()
        self.layout_generic_config.setSpacing(6)
        self.layout_generic_config.setObjectName("layout_generic_config")
        self.gridLayout_13.addLayout(self.layout_generic_config, 0, 0, 1, 1)
        self.cancel_push_button = QtWidgets.QPushButton(self.configfile)
        self.cancel_push_button.setObjectName("cancel_push_button")
        self.gridLayout_13.addWidget(self.cancel_push_button, 1, 0, 1, 1)
        self.tabs_generic.addTab(self.configfile, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.gridLayout_14 = QtWidgets.QGridLayout(self.tab)
        self.gridLayout_14.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_14.setObjectName("gridLayout_14")
        self.layout_generic_wkdir = QtWidgets.QHBoxLayout()
        self.layout_generic_wkdir.setObjectName("layout_generic_wkdir")
        self.gridLayout_14.addLayout(self.layout_generic_wkdir, 0, 0, 1, 1)
        self.tabs_generic.addTab(self.tab, "")
        self.verticalLayout_3.addWidget(self.tabs_generic)
        self.gridLayout_11.addLayout(self.verticalLayout_3, 0, 0, 1, 1)
        self.tabs_pipeline.addTab(self.tab_generic_pipelines, "")
        self.vlayout.addWidget(self.tabs_pipeline)
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        self.groupBox.setMinimumSize(QtCore.QSize(0, 90))
        self.groupBox.setObjectName("groupBox")
        self.gridLayout_15 = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout_15.setObjectName("gridLayout_15")
        self.frame = QtWidgets.QFrame(self.groupBox)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_17 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_17.setObjectName("gridLayout_17")
        self.frame_control = QtWidgets.QFrame(self.frame)
        self.frame_control.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_control.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_control.setObjectName("frame_control")
        self.gridLayout_16 = QtWidgets.QGridLayout(self.frame_control)
        self.gridLayout_16.setObjectName("gridLayout_16")
        self.formLayout = QtWidgets.QFormLayout()
        self.formLayout.setObjectName("formLayout")
        self.label_2 = QtWidgets.QLabel(self.frame_control)
        self.label_2.setObjectName("label_2")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_2)
        self.starting_box = QtWidgets.QComboBox(self.frame_control)
        self.starting_box.setObjectName("starting_box")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.starting_box)
        self.until_box = QtWidgets.QComboBox(self.frame_control)
        self.until_box.setEditable(False)
        self.until_box.setCurrentText("")
        self.until_box.setObjectName("until_box")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.until_box)
        self.label = QtWidgets.QLabel(self.frame_control)
        self.label.setObjectName("label")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.label)
        self.gridLayout_16.addLayout(self.formLayout, 1, 1, 1, 1)
        self.gridLayout_17.addWidget(self.frame_control, 1, 0, 1, 1)
        self.show_advanced_control = QtWidgets.QPushButton(self.frame)
        self.show_advanced_control.setObjectName("show_advanced_control")
        self.gridLayout_17.addWidget(self.show_advanced_control, 0, 0, 1, 1)
        self.gridLayout_15.addWidget(self.frame, 0, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_15.addItem(spacerItem, 0, 1, 1, 1)
        self.frame_3 = QtWidgets.QFrame(self.groupBox)
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.gridLayout_18 = QtWidgets.QGridLayout(self.frame_3)
        self.gridLayout_18.setObjectName("gridLayout_18")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setContentsMargins(2, 2, 2, 2)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_3 = QtWidgets.QLabel(self.frame_3)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_5.addWidget(self.label_3)
        self.comboBox_local = QtWidgets.QComboBox(self.frame_3)
        self.comboBox_local.setObjectName("comboBox_local")
        self.comboBox_local.addItem("")
        self.comboBox_local.addItem("")
        self.horizontalLayout_5.addWidget(self.comboBox_local)
        self.verticalLayout_5.addLayout(self.horizontalLayout_5)
        self.label_4 = QtWidgets.QLabel(self.frame_3)
        self.label_4.setAutoFillBackground(False)
        self.label_4.setStyleSheet("background-color:orange")
        self.label_4.setFrameShape(QtWidgets.QFrame.Box)
        self.label_4.setWordWrap(True)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_5.addWidget(self.label_4)
        self.horizontalLayout_3.addLayout(self.verticalLayout_5)
        self.horizontalLayout_3.setStretch(0, 1)
        self.gridLayout_18.addLayout(self.horizontalLayout_3, 0, 2, 1, 1)
        self.gridLayout_15.addWidget(self.frame_3, 0, 2, 1, 1)
        self.gridLayout_15.setColumnStretch(0, 1)
        self.gridLayout_15.setColumnStretch(2, 2)
        self.vlayout.addWidget(self.groupBox)
        self.tabs = QtWidgets.QTabWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabs.sizePolicy().hasHeightForWidth())
        self.tabs.setSizePolicy(sizePolicy)
        self.tabs.setMinimumSize(QtCore.QSize(0, 0))
        self.tabs.setMaximumSize(QtCore.QSize(16777215, 2000))
        self.tabs.setBaseSize(QtCore.QSize(0, 0))
        self.tabs.setToolTip("")
        self.tabs.setStyleSheet("background-color:#ffffff")
        self.tabs.setObjectName("tabs")
        self.snakemake = QtWidgets.QWidget()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.snakemake.sizePolicy().hasHeightForWidth())
        self.snakemake.setSizePolicy(sizePolicy)
        self.snakemake.setToolTip("")
        self.snakemake.setObjectName("snakemake")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.snakemake)
        self.gridLayout_5.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.layout_snakemake = QtWidgets.QVBoxLayout()
        self.layout_snakemake.setObjectName("layout_snakemake")
        self.gridLayout_5.addLayout(self.layout_snakemake, 0, 0, 1, 1)
        self.tabs.addTab(self.snakemake, "")
        self.ipython = QtWidgets.QWidget()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ipython.sizePolicy().hasHeightForWidth())
        self.ipython.setSizePolicy(sizePolicy)
        self.ipython.setObjectName("ipython")
        self.gridLayout = QtWidgets.QGridLayout(self.ipython)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.layout_ipython = QtWidgets.QVBoxLayout()
        self.layout_ipython.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.layout_ipython.setSpacing(6)
        self.layout_ipython.setObjectName("layout_ipython")
        self.gridLayout.addLayout(self.layout_ipython, 0, 0, 1, 1)
        self.tabs.addTab(self.ipython, "")
        self.logger = QtWidgets.QWidget()
        self.logger.setObjectName("logger")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.logger)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.layout_logger = QtWidgets.QVBoxLayout()
        self.layout_logger.setObjectName("layout_logger")
        self.gridLayout_3.addLayout(self.layout_logger, 0, 0, 1, 1)
        self.tabs.addTab(self.logger, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setAcceptDrops(False)
        self.tab_3.setToolTip("")
        self.tab_3.setObjectName("tab_3")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.tab_3)
        self.gridLayout_4.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.scrollArea = QtWidgets.QScrollArea(self.tab_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollArea.sizePolicy().hasHeightForWidth())
        self.scrollArea.setSizePolicy(sizePolicy)
        self.scrollArea.setLineWidth(1)
        self.scrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 595, 160))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.gridLayout_4.addWidget(self.scrollArea, 0, 0, 1, 1)
        self.tabs.addTab(self.tab_3, "")
        self.vlayout.addWidget(self.tabs)
        self.widget_footer = QtWidgets.QWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_footer.sizePolicy().hasHeightForWidth())
        self.widget_footer.setSizePolicy(sizePolicy)
        self.widget_footer.setMinimumSize(QtCore.QSize(0, 0))
        self.widget_footer.setObjectName("widget_footer")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget_footer)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setContentsMargins(0, -1, 0, -1)
        self.horizontalLayout.setSpacing(11)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.run_btn = QtWidgets.QPushButton(self.widget_footer)
        self.run_btn.setObjectName("run_btn")
        self.horizontalLayout.addWidget(self.run_btn)
        self.stop_btn = QtWidgets.QPushButton(self.widget_footer)
        self.stop_btn.setObjectName("stop_btn")
        self.horizontalLayout.addWidget(self.stop_btn)
        self.unlock_btn = QtWidgets.QPushButton(self.widget_footer)
        self.unlock_btn.setObjectName("unlock_btn")
        self.horizontalLayout.addWidget(self.unlock_btn)
        self.report_btn = QtWidgets.QPushButton(self.widget_footer)
        self.report_btn.setObjectName("report_btn")
        self.horizontalLayout.addWidget(self.report_btn)
        self.save_btn = QtWidgets.QPushButton(self.widget_footer)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.save_btn.sizePolicy().hasHeightForWidth())
        self.save_btn.setSizePolicy(sizePolicy)
        self.save_btn.setAutoFillBackground(False)
        self.save_btn.setStyleSheet("background-color:orange")
        self.save_btn.setObjectName("save_btn")
        self.horizontalLayout.addWidget(self.save_btn)
        self.dag_btn = QtWidgets.QPushButton(self.widget_footer)
        self.dag_btn.setObjectName("dag_btn")
        self.horizontalLayout.addWidget(self.dag_btn)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.vlayout.addWidget(self.widget_footer)
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.progressBar.sizePolicy().hasHeightForWidth())
        self.progressBar.setSizePolicy(sizePolicy)
        self.progressBar.setToolTipDuration(-1)
        self.progressBar.setStyleSheet("border: 2px solid grey;\n"
"margin:2px;\n"
"border-radius: 5px;\n"
"text-align: center;\n"
"")
        self.progressBar.setProperty("value", 1)
        self.progressBar.setObjectName("progressBar")
        self.vlayout.addWidget(self.progressBar)
        self.gridLayout_2.addLayout(self.vlayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 647, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuOption = QtWidgets.QMenu(self.menubar)
        self.menuOption.setObjectName("menuOption")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionImportConfig = QtWidgets.QAction(MainWindow)
        self.actionImportConfig.setObjectName("actionImportConfig")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.actionSnakemake = QtWidgets.QAction(MainWindow)
        self.actionSnakemake.setCheckable(False)
        self.actionSnakemake.setObjectName("actionSnakemake")
        self.actionPreferences = QtWidgets.QAction(MainWindow)
        self.actionPreferences.setObjectName("actionPreferences")
        self.actionIPython = QtWidgets.QAction(MainWindow)
        self.actionIPython.setCheckable(True)
        self.actionIPython.setObjectName("actionIPython")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionHelp = QtWidgets.QAction(MainWindow)
        self.actionHelp.setEnabled(True)
        self.actionHelp.setObjectName("actionHelp")
        self.action_import_configfile = QtWidgets.QAction(MainWindow)
        self.action_import_configfile.setObjectName("action_import_configfile")
        self.action_import_schemafile = QtWidgets.QAction(MainWindow)
        self.action_import_schemafile.setObjectName("action_import_schemafile")
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.action_import_configfile)
        self.menuFile.addAction(self.action_import_schemafile)
        self.menuFile.addAction(self.actionQuit)
        self.menuOption.addAction(self.actionSnakemake)
        self.menuOption.addAction(self.actionPreferences)
        self.menuHelp.addAction(self.actionHelp)
        self.menuHelp.addAction(self.actionAbout)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuOption.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.tabs_pipeline.setCurrentIndex(0)
        self.tabs_sequana.setCurrentIndex(1)
        self.tabWidget.setCurrentIndex(0)
        self.tabs_generic.setCurrentIndex(0)
        self.tabs.setCurrentIndex(3)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.tabs_pipeline, self.choice_button)
        MainWindow.setTabOrder(self.choice_button, self.starting_box)
        MainWindow.setTabOrder(self.starting_box, self.tabs)
        MainWindow.setTabOrder(self.tabs, self.run_btn)
        MainWindow.setTabOrder(self.run_btn, self.stop_btn)
        MainWindow.setTabOrder(self.stop_btn, self.unlock_btn)
        MainWindow.setTabOrder(self.unlock_btn, self.report_btn)
        MainWindow.setTabOrder(self.report_btn, self.save_btn)
        MainWindow.setTabOrder(self.save_btn, self.dag_btn)
        MainWindow.setTabOrder(self.dag_btn, self.scrollArea)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Sequanix (Sequana GUI)"))
        self.tabs_pipeline.setToolTip(_translate("MainWindow", "<html><head/><body><p>Select a Sequana pipeline (left tab) or a generic Snakemake file (right tab).</p><p><br/>Go to Menu Help-&gt;QuickStart for more details (Ctrl+H key).</p></body></html>"))
        self.tabs_sequana.setToolTip(_translate("MainWindow", "<html><head/><body><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Left tab:</span> Select one of the pipeline in the combo box. In order to get information about a pipeline, please see the Help menu. </li><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Middle tab:</span> Select one of this option</li><ol style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 2;\"><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Input directory: the directory where fastq.gz files are stored (all Sequana pipelines expect fastq.gz as input)</li><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Input samples: select one or two files (fastq.gz) in a directory</li></ol><li style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Right tab: </span>Select working directory where Snakefile/pipeline and config files will be copied. Pipelines are also ran in that directory. </li></ul></body></html>"))
        self.choice_button.setToolTip(_translate("MainWindow", "<html><head/><body><p>Sequana pipelines are automatically fetched from sequana library.</p><p>Each pipeline is defined by a pipeline name. Its config file is fetched automatically.</p><p>Each pipeline require the user to define the input. It may be one of:</p><p><ul><li> a directory</li><li> a set of FastQ input file</li></ul></body></html>"))
        self.choice_button.setCurrentText(_translate("MainWindow", "Select a Sequana pipeline"))
        self.choice_button.setItemText(0, _translate("MainWindow", "Select a Sequana pipeline"))
        self.tabs_sequana.setTabText(self.tabs_sequana.indexOf(self.Pipeline), _translate("MainWindow", "1 - Pipeline selection"))
        self.tabWidget.setToolTip(_translate("MainWindow", "<html><head/><body><p>Choose one of those tab as your input choice</p><p><br/></p><p><span style=\" font-weight:600;\">Left tab (Input directory):</span> Automatically select all fastq.gz files found in the directory</p><p><span style=\" font-weight:600;\">Middle tab (Input Samples):</span> Sometimes, only 1 or 2 files (paired) are required, use this tab in such situations</p><p><span style=\" font-weight:600;\">Right tab (Input pattern):</span> Your samples may be in many sub directories, or you want to select only a sub set of files. Please provide a pattern with wildcards if you use this tab</p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("MainWindow", "a - Input directory"))
        self.tabs_sequana.setTabText(self.tabs_sequana.indexOf(self.sequana_input_dir_tab), _translate("MainWindow", "2 - Input data (directory or files)"))
        self.tabs_sequana.setTabText(self.tabs_sequana.indexOf(self.sequana_working_dir_tab), _translate("MainWindow", "3 - Working directory"))
        self.tabs_pipeline.setTabText(self.tabs_pipeline.indexOf(self.tab_sequana_pipelines), _translate("MainWindow", "A - Sequana pipelines"))
        self.tabs_generic.setToolTip(_translate("MainWindow", "<html><head/><body><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Left tab:</span> Select a valid local Snakefile. </li><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Middle tab:</span> Select a config file. This is optional. Note that Snakefiles may be using a config file or not. For instance if <i>configfile: \"config.yaml\"</i> is found, a config file is expected. Users have to check with the author of the snakefile whether a config file is required or not.</li><li style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Right tab: </span>Select working directory where Snakefile and config files will be copied. Pipelines are also ran in that directory. </li></ul></body></html>"))
        self.tabs_generic.setTabText(self.tabs_generic.indexOf(self.snakefile), _translate("MainWindow", "1 - Snakefile"))
        self.cancel_push_button.setText(_translate("MainWindow", "cancel selection"))
        self.tabs_generic.setTabText(self.tabs_generic.indexOf(self.configfile), _translate("MainWindow", "2 - Config file"))
        self.tabs_generic.setTabText(self.tabs_generic.indexOf(self.tab), _translate("MainWindow", "3 - Working directory"))
        self.tabs_pipeline.setTabText(self.tabs_pipeline.indexOf(self.tab_generic_pipelines), _translate("MainWindow", "B - Generic pipelines"))
        self.groupBox.setTitle(_translate("MainWindow", "Pipeline control"))
        self.label_2.setText(_translate("MainWindow", "Starting"))
        self.label.setText(_translate("MainWindow", "Until"))
        self.show_advanced_control.setText(_translate("MainWindow", "show advanced control"))
        self.label_3.setText(_translate("MainWindow", "<b>Is it a local or cluster run ?</b>"))
        self.comboBox_local.setItemText(0, _translate("MainWindow", "local"))
        self.comboBox_local.setItemText(1, _translate("MainWindow", "cluster"))
        self.label_4.setText(_translate("MainWindow", "<html><head/><body><p>Please, Check the snakemake dialog (<span style=\" font-weight:600;\">Ctrl+O</span>) to set the number of nodes in the local or cluster tabs and cluster options.</p></body></html>"))
        self.tabs.setTabText(self.tabs.indexOf(self.snakemake), _translate("MainWindow", "&Snakemake output"))
        self.ipython.setToolTip(_translate("MainWindow", "<html><head/><body><p>This is an IPython shell included in the GUI. The entire Sequana GUI is accessible as the variable <span style=\" font-weight:600;\">gui.</span></p><p>For instance, you can access to layout or values set in the graphical interface with:</p>\n"
"<pre>    \n"
"    gui.ui\n"
"</pre>\n"
"\n"
"<p>More generally, this is a pure IPython shell, so you can use e.g. matplotlib/pylab:</p>\n"
"<pre>    \n"
"    import pylab\n"
"    pylab.plot([1,2,3])\n"
"</pre></body></html>"))
        self.tabs.setTabText(self.tabs.indexOf(self.ipython), _translate("MainWindow", "&IPython shell"))
        self.logger.setToolTip(_translate("MainWindow", "<p>This tab contains the logging information from Sequana and possibly other Python packages that uses the logging package.</p>\n"
"\n"
"Color code:\n"
"\n"
"<pre>\n"
"- debug: cyan\n"
"- info: green\n"
"- warning: orange\n"
"- error: red\n"
"- critical: bold red \n"
"</pre>You can change the verbosity in the preferences dialog</p>"))
        self.tabs.setTabText(self.tabs.indexOf(self.logger), _translate("MainWindow", "&Logger"))
        self.tabs.setTabText(self.tabs.indexOf(self.tab_3), _translate("MainWindow", "&Config parameters"))
        self.run_btn.setToolTip(_translate("MainWindow", "<html><head/><body><p>Execute the Snakemake pipeline </p><p><span style=\" font-weight:600;\">shortcut: Ctrl+R</span></p></body></html>"))
        self.run_btn.setText(_translate("MainWindow", "&Run"))
        self.run_btn.setShortcut(_translate("MainWindow", "Ctrl+R"))
        self.stop_btn.setToolTip(_translate("MainWindow", "<html><head/><body><p>Stop the running pipeline. This may take a few seconds to stop.</p><p><span style=\" font-weight:600;\">Shortcut: Ctrl+X</span></p></body></html>"))
        self.stop_btn.setText(_translate("MainWindow", "Stop"))
        self.stop_btn.setShortcut(_translate("MainWindow", "Ctrl+X"))
        self.unlock_btn.setToolTip(_translate("MainWindow", "<html><head/><body><p>Sometimes, the execution of a pipeline may be interrupted, which locks the working directory. This button allows users to unlock the directory.</p><p>For developers, this is equivalent to the snakemake command:</p><p><span style=\" font-style:italic; color:#ff0004;\">snakemake -s Snakefile --unlock </span></p><p><br/></p><p><span style=\" font-weight:600; color:#000000;\">Shortcut: Ctrl+U</span></p></body></html>"))
        self.unlock_btn.setText(_translate("MainWindow", "&Unlock"))
        self.unlock_btn.setShortcut(_translate("MainWindow", "Ctrl+U"))
        self.report_btn.setToolTip(_translate("MainWindow", "<html><head/><body><p>This button opens an HTML page present in the working directory (if found) if an HTML filename is specified in the <span style=\" font-weight:600;\">Preferences dialog.</span> If not, a file browser pops up so that one can select an HTML file. </p><p><br/></p><p><br/></p></body></html>"))
        self.report_btn.setText(_translate("MainWindow", "Open Report"))
        self.report_btn.setShortcut(_translate("MainWindow", "Shift+W"))
        self.save_btn.setToolTip(_translate("MainWindow", "<html><head/><body><p>Save the current <span style=\" font-style:italic;\">configuration</span> (parameters to be used by the pipeline in the Config parameters tab here above) as well as the current <span style=\" font-style:italic;\">Snakemake pipeline</span>. The two files are saved in the <span style=\" font-style:italic;\">working directory</span>.</p><p><br/></p><p><span style=\" font-weight:600;\">Shortcut: Ctrl+S</span></p></body></html>"))
        self.save_btn.setText(_translate("MainWindow", "&Save"))
        self.save_btn.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.dag_btn.setToolTip(_translate("MainWindow", "<html><head/><body><p>Pressing this button, a DAG is created and shown. </p><p>This is a good way to check your config file (i.e., if there are optional switch).</p><p><br/></p><p><span style=\" font-weight:600;\">Shortcut: Ctrl+D</span></p></body></html>"))
        self.dag_btn.setText(_translate("MainWindow", "Show Pipeline"))
        self.dag_btn.setShortcut(_translate("MainWindow", "Ctrl+D"))
        self.progressBar.setToolTip(_translate("MainWindow", "<p>Progress of the pipeline. color codes:\n"
"    <ul>\n"
"        <li style=\"color:red\">Red: an error occured</li>\n"
"        <li style=\"color:orange\">Orange: interrupted by the user</li>\n"
"        <li style=\"color:green\">Green: completed with success</li>\n"
"        <li style=\"color:blue\">Blue: in progress</li>\n"
"    </ul>\n"
"</p>"))
        self.menuFile.setTitle(_translate("MainWindow", "&File"))
        self.menuOption.setTitle(_translate("MainWindow", "&Option"))
        self.menuHelp.setTitle(_translate("MainWindow", "&Help"))
        self.actionImportConfig.setText(_translate("MainWindow", "&Import Config File"))
        self.actionImportConfig.setShortcut(_translate("MainWindow", "Ctrl+I"))
        self.actionQuit.setText(_translate("MainWindow", "&Quit"))
        self.actionQuit.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.actionSnakemake.setText(_translate("MainWindow", "Snakemake &Options"))
        self.actionSnakemake.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionPreferences.setText(_translate("MainWindow", "&Preferences"))
        self.actionPreferences.setShortcut(_translate("MainWindow", "Ctrl+P"))
        self.actionIPython.setText(_translate("MainWindow", "Show/Hide IPython &Debug dialog"))
        self.actionIPython.setToolTip(_translate("MainWindow", "Show or Hide an IPython dialog for debugging"))
        self.actionIPython.setShortcut(_translate("MainWindow", "Ctrl+D"))
        self.actionAbout.setText(_translate("MainWindow", "&About"))
        self.actionAbout.setShortcut(_translate("MainWindow", "Ctrl+A"))
        self.actionHelp.setText(_translate("MainWindow", "Quick Start"))
        self.actionHelp.setShortcut(_translate("MainWindow", "Ctrl+H"))
        self.action_import_configfile.setText(_translate("MainWindow", "Import Config File (sequana pipeline only)"))
        self.action_import_schemafile.setText(_translate("MainWindow", "Import YAML/JSON Schema File (generic pipeline only)"))

