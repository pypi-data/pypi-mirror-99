# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import zoom_command_pb2 as zoom__command__pb2


class ZoomControllerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetZoomSpeed = channel.unary_unary(
                '/reachy.sdk.zoom.ZoomControllerService/SetZoomSpeed',
                request_serializer=zoom__command__pb2.ZoomSpeed.SerializeToString,
                response_deserializer=zoom__command__pb2.Empty.FromString,
                )
        self.SendZoomCommand = channel.unary_unary(
                '/reachy.sdk.zoom.ZoomControllerService/SendZoomCommand',
                request_serializer=zoom__command__pb2.ZoomCommand.SerializeToString,
                response_deserializer=zoom__command__pb2.Empty.FromString,
                )


class ZoomControllerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetZoomSpeed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendZoomCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ZoomControllerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetZoomSpeed': grpc.unary_unary_rpc_method_handler(
                    servicer.SetZoomSpeed,
                    request_deserializer=zoom__command__pb2.ZoomSpeed.FromString,
                    response_serializer=zoom__command__pb2.Empty.SerializeToString,
            ),
            'SendZoomCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.SendZoomCommand,
                    request_deserializer=zoom__command__pb2.ZoomCommand.FromString,
                    response_serializer=zoom__command__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'reachy.sdk.zoom.ZoomControllerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ZoomControllerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetZoomSpeed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reachy.sdk.zoom.ZoomControllerService/SetZoomSpeed',
            zoom__command__pb2.ZoomSpeed.SerializeToString,
            zoom__command__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendZoomCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reachy.sdk.zoom.ZoomControllerService/SendZoomCommand',
            zoom__command__pb2.ZoomCommand.SerializeToString,
            zoom__command__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
