[Logger]
# The location and name of the log file
file = .log/ybot.nhl.log
# The logging level for the log file
level = INFO

[Connection]
# Location of the file that has the OAuth credentials to login to the Yahoo!
# service.  This file can be generated with the init_oauth_env.py script.
oauthFile = {{ oauth_file }}

[Cache]
# Location of where to keep the cache files.  These files are used by the
# program to save data taken from web API endpoints.  They help reduce the number
# of requests sent.
dir = .cache/
# The amount of minutes before the free agent cache is invalidated.  When this
# expires we pull the latest set of free agents down.
freeAgentExpiry = 60
# The amount of minutes before the cached prediction builder instance will
# expiry.  When this expires we build the prediction builder from scratch.
predictionBuilderExpiry = 1440

[League]
# The league ID to work on.  You can get the league id using the example/leagues.py
# script.
id = {{ league_id }}
# The league stat categories that we are able to predict.  This can be a subset
# of the actual stat cateogires in the Yahoo! league.  We can avoid stats that
# are not represented in the predicted stats that we use.
predictedStatCategories = {{ stat_categories }}

# This section allows you to specify the class to use for prediction of the
# stats for the players.
[Prediction]
builderPackage=yahoo_fantasy_bot
builderModule=.nhl
# The class loader is a function that produces a class for the prediction
# builder.  It takes two arguments: yahoo_fantasy_api.League object and
# configparser.  The prediction builder object has one API that must exist:
# predict().  The first positional argument must be a list of players.
builderClassLoader=init_prediction_builder
# List the source of the predicted stats.  Valid options are:
# - 'yahoo' meaning we will use the current season stats
# - 'yahoo_lastseason' meaning we will use the stats from last season
# - 'yahoo_lastmonth' means we will use the stats for the last month
# - 'csv' means we will get the predicted stats from an external .csv file
# NOTE: When changing this value you must use the --resetcache option to
# remove any cached files that were using the old stats source.
source={{ stat_projection }}
# For Yahoo data source, this should be set to player_id.  For csv, use the
# column name from the csv file name.
player_id_column_name=player_id
#
# The next set of paramters are specific to nhl builder module when using the
# csv source.  They define the csv of the predicted stats to use for the
# prediction module.  The lineup optimizer uses these projections to compare
# lineups against each other.  
#
# The skaters_csv is a .csv file containing all of the skaters (forwards +
# defencemen) and their projected stats.
#skaters_csv_file=
# The goales_csv is the .csv file containing all of the goalies and their
# projected stats.
#goalies_csv_file=
# We read the skater csv into a datafram.  This indicates what column name
# should act as the index for the rows in the skaters csv file.
#skaters_csv_index_col=name
# We read the goalie csv into a datafram.  This indicates what column name
# should act as the index for the rows in the goalies csv file.
#goalies_csv_index_col=name
# Optional parameter that defines the column names to use when reading the
# skaters csv.  The stats that are used in the Yahoo! league settings must
# match the column names here.  If this is not set, we infer the column names
# from the csv file.
#skaters_csv_column_names=index,name,Tm,FPTS,GPPG,GP,G,A,P,+/-,PPG,SHG,PIM,MAJ,MNR,TOI,TOI/G,SOG,S%,GW
# Optional parameter that defines the column names to use when reading the
# goalies csv.  The stats that are used in the Yahoo! league settings must
# match the column names here.  If this is not set, we infer the column names
# from the csv file.
#goalies_csv_column_names=index,name,Tm,FPTS,GPPG,GP,GS,W,L,SO,GA,GAA,SV,SA,SV%,PM,A,MIN
# What row number in the skaters csv file has a header for the column names?
# Leave commented out if the csv file has no header.  Note, you will need to
# specify a valid row even if you are overriding the column names with
# skaters_csv_column_names.
#skaters_csv_header=0
# What row number in the goalies csv file has a header for the column names?
# Leave commented out if the csv file has no header.  Note, you will need to
# specify a valid row even if you are overriding the column names with
# goalies_csv_column_names.
#goalies_csv_header=0

[LineupOptimizer]
# The next three parameters locate the function to use to optimize the lineup.
# The function must take the following parameters:
#  - configparser object for this config file
#  - a ScoreComparer object
#  - a roster.Builder object
#  - a DataFrame of all of the players eligible to be included in the lineup
#  - list of players that form the initial lineup
# If it is able to find a better lineup, it returns it.  Otherwise it returns
# None.
package=yahoo_fantasy_bot
module=.lineup_optimizer
function=optimize_with_genetic_algorithm
#
# The next set of parms in this section are specific to the optimizer function
# in use.
#
# Number of generations we'll run until we stop.  The best lineup at the end of
# this generation is the one that is returned back.
generations=250
# Number of lineups to generate for the initial population of the algorithm
initialPopulationSize=24
# We use a tournament selection method to pick the chromosomes to use for mating.
# This config parameter determines the number of chromosomes to include in the
# tournament selection process.  The number must be a power of 2.
tournamentParticipants=4
# Number of offsping we'll create when we mate two lineups
numOffspring=6
# The chance that an individual lineup is mutated within a given generation.
mutationPct=10
# To avoid roster churn and dropping all-stars, lock any player on your lineup
# that is owned at or above the given percent.  The percent is express as an
# int (i.e. 90 is 90%).
lockPlayersAbovePctOwn=80
# An optional file that contains a list of player names that are locked.  This
# can be left empty if not used.  If set, the format of the file is one player
# name per line.
lockPlayerFile=

# This section allows you to select the class to display of players to the
# screen.
[Display]
package=yahoo_fantasy_bot
module=.nhl
# The class is instanitated with a single configparser.  The class implements
# the following functions:
# - printRoster(roster)
class=PlayerPrinter

# This section allows you to select the class to handle scoring of a roster.
[Scorer]
package=yahoo_fantasy_bot
module=.nhl
# The class is instantiated with a single argument, configparser.  It must
# implement the following functions:
# - summarize(DataFrame predictedStats) : DataFrame
# - is_counting_stat(stat) : bool
# - is_highest_better(stat) : bool
class=Scorer
# Score based on the weekly schedule.  This means that a players predicted
# stats will be based on the number of games its team plays that week.
useWeeklySchedule=false
# When computing a score with standard deviation, this is a cap for how much a
# given category will dominate.  A category score will at most be computed as a
# multiple of this number of standard deviations.
stdevCap=3

# This section allows you to select the class to handle accumulating the stats
# during lineup optimizations
[ScoreAccumulator]
package=yahoo_fantasy_bot
module=.nhl
# The class is instantiated with a single argument, configparser.  It must
# implement the following functions:
# - add_player(player)
# - remove_player(player)
# - get_summary(roster) : pandas.Series
class=StatAccumulator

[Trade]
# Set to true if all trades will be automatically rejected.  Otherwise, we will
# evaluate the lineup with the new players and accept it if it improves the
# score.
autoReject=true
