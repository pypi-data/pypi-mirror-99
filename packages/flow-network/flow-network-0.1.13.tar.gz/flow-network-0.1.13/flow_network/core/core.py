# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _core
else:
    import _core

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_SwigPyIterator

    def value(self):
        return _core.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _core.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _core.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _core.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _core.SwigPyIterator_equal(self, x)

    def copy(self):
        return _core.SwigPyIterator_copy(self)

    def next(self):
        return _core.SwigPyIterator_next(self)

    def __next__(self):
        return _core.SwigPyIterator___next__(self)

    def previous(self):
        return _core.SwigPyIterator_previous(self)

    def advance(self, n):
        return _core.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _core.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _core.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _core.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _core.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _core.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _core.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _core:
_core.SwigPyIterator_swigregister(SwigPyIterator)

class EdgeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _core.EdgeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _core.EdgeVector___nonzero__(self)

    def __bool__(self):
        return _core.EdgeVector___bool__(self)

    def __len__(self):
        return _core.EdgeVector___len__(self)

    def __getslice__(self, i, j):
        return _core.EdgeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _core.EdgeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _core.EdgeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _core.EdgeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _core.EdgeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _core.EdgeVector___setitem__(self, *args)

    def pop(self):
        return _core.EdgeVector_pop(self)

    def append(self, x):
        return _core.EdgeVector_append(self, x)

    def empty(self):
        return _core.EdgeVector_empty(self)

    def size(self):
        return _core.EdgeVector_size(self)

    def swap(self, v):
        return _core.EdgeVector_swap(self, v)

    def begin(self):
        return _core.EdgeVector_begin(self)

    def end(self):
        return _core.EdgeVector_end(self)

    def rbegin(self):
        return _core.EdgeVector_rbegin(self)

    def rend(self):
        return _core.EdgeVector_rend(self)

    def clear(self):
        return _core.EdgeVector_clear(self)

    def get_allocator(self):
        return _core.EdgeVector_get_allocator(self)

    def pop_back(self):
        return _core.EdgeVector_pop_back(self)

    def erase(self, *args):
        return _core.EdgeVector_erase(self, *args)

    def __init__(self, *args):
        _core.EdgeVector_swiginit(self, _core.new_EdgeVector(*args))

    def push_back(self, x):
        return _core.EdgeVector_push_back(self, x)

    def front(self):
        return _core.EdgeVector_front(self)

    def back(self):
        return _core.EdgeVector_back(self)

    def assign(self, n, x):
        return _core.EdgeVector_assign(self, n, x)

    def resize(self, *args):
        return _core.EdgeVector_resize(self, *args)

    def insert(self, *args):
        return _core.EdgeVector_insert(self, *args)

    def reserve(self, n):
        return _core.EdgeVector_reserve(self, n)

    def capacity(self):
        return _core.EdgeVector_capacity(self)
    __swig_destroy__ = _core.delete_EdgeVector

# Register EdgeVector in _core:
_core.EdgeVector_swigregister(EdgeVector)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _core.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _core.IntVector___nonzero__(self)

    def __bool__(self):
        return _core.IntVector___bool__(self)

    def __len__(self):
        return _core.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _core.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _core.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _core.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _core.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _core.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _core.IntVector___setitem__(self, *args)

    def pop(self):
        return _core.IntVector_pop(self)

    def append(self, x):
        return _core.IntVector_append(self, x)

    def empty(self):
        return _core.IntVector_empty(self)

    def size(self):
        return _core.IntVector_size(self)

    def swap(self, v):
        return _core.IntVector_swap(self, v)

    def begin(self):
        return _core.IntVector_begin(self)

    def end(self):
        return _core.IntVector_end(self)

    def rbegin(self):
        return _core.IntVector_rbegin(self)

    def rend(self):
        return _core.IntVector_rend(self)

    def clear(self):
        return _core.IntVector_clear(self)

    def get_allocator(self):
        return _core.IntVector_get_allocator(self)

    def pop_back(self):
        return _core.IntVector_pop_back(self)

    def erase(self, *args):
        return _core.IntVector_erase(self, *args)

    def __init__(self, *args):
        _core.IntVector_swiginit(self, _core.new_IntVector(*args))

    def push_back(self, x):
        return _core.IntVector_push_back(self, x)

    def front(self):
        return _core.IntVector_front(self)

    def back(self):
        return _core.IntVector_back(self)

    def assign(self, n, x):
        return _core.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _core.IntVector_resize(self, *args)

    def insert(self, *args):
        return _core.IntVector_insert(self, *args)

    def reserve(self, n):
        return _core.IntVector_reserve(self, n)

    def capacity(self):
        return _core.IntVector_capacity(self)
    __swig_destroy__ = _core.delete_IntVector

# Register IntVector in _core:
_core.IntVector_swigregister(IntVector)

class IntIntPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _core.IntIntPair_swiginit(self, _core.new_IntIntPair(*args))
    first = property(_core.IntIntPair_first_get, _core.IntIntPair_first_set)
    second = property(_core.IntIntPair_second_get, _core.IntIntPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _core.delete_IntIntPair

# Register IntIntPair in _core:
_core.IntIntPair_swigregister(IntIntPair)

class LongLongPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _core.LongLongPair_swiginit(self, _core.new_LongLongPair(*args))
    first = property(_core.LongLongPair_first_get, _core.LongLongPair_first_set)
    second = property(_core.LongLongPair_second_get, _core.LongLongPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _core.delete_LongLongPair

# Register LongLongPair in _core:
_core.LongLongPair_swigregister(LongLongPair)

class Edge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    next = property(_core.Edge_next_get, _core.Edge_next_set)
    u = property(_core.Edge_u_get, _core.Edge_u_set)
    v = property(_core.Edge_v_get, _core.Edge_v_set)
    flow = property(_core.Edge_flow_get, _core.Edge_flow_set)
    cost = property(_core.Edge_cost_get, _core.Edge_cost_set)

    def __init__(self, *args):
        _core.Edge_swiginit(self, _core.new_Edge(*args))
    __swig_destroy__ = _core.delete_Edge

# Register Edge in _core:
_core.Edge_swigregister(Edge)
cvar = _core.cvar

class Graph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cnt = property(_core.Graph_cnt_get, _core.Graph_cnt_set)
    head = property(_core.Graph_head_get, _core.Graph_head_set)
    edges = property(_core.Graph_edges_get, _core.Graph_edges_set)

    def __init__(self, n):
        _core.Graph_swiginit(self, _core.new_Graph(n))
    __swig_destroy__ = _core.delete_Graph

    def add_edge(self, u, v, flow, cost=0):
        return _core.Graph_add_edge(self, u, v, flow, cost)

# Register Graph in _core:
_core.Graph_swigregister(Graph)

class BaseNetwork(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_core.BaseNetwork_n_get, _core.BaseNetwork_n_set)
    dist = property(_core.BaseNetwork_dist_get, _core.BaseNetwork_dist_set)
    graph = property(_core.BaseNetwork_graph_get, _core.BaseNetwork_graph_set)

    def __init__(self, n):
        _core.BaseNetwork_swiginit(self, _core.new_BaseNetwork(n))
    __swig_destroy__ = _core.delete_BaseNetwork

# Register BaseNetwork in _core:
_core.BaseNetwork_swigregister(BaseNetwork)

class MaximumFlow(BaseNetwork):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cur = property(_core.MaximumFlow_cur_get, _core.MaximumFlow_cur_set)

    def __init__(self, n):
        _core.MaximumFlow_swiginit(self, _core.new_MaximumFlow(n))
    __swig_destroy__ = _core.delete_MaximumFlow

    def bfs(self, S, T):
        return _core.MaximumFlow_bfs(self, S, T)

    def dfs(self, *args):
        return _core.MaximumFlow_dfs(self, *args)

    def run(self, S, T):
        return _core.MaximumFlow_run(self, S, T)

# Register MaximumFlow in _core:
_core.MaximumFlow_swigregister(MaximumFlow)

class MinimumCostFlow(BaseNetwork):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pre = property(_core.MinimumCostFlow_pre_get, _core.MinimumCostFlow_pre_set)
    low = property(_core.MinimumCostFlow_low_get, _core.MinimumCostFlow_low_set)
    vis = property(_core.MinimumCostFlow_vis_get, _core.MinimumCostFlow_vis_set)
    clk = property(_core.MinimumCostFlow_clk_get, _core.MinimumCostFlow_clk_set)

    def __init__(self, n):
        _core.MinimumCostFlow_swiginit(self, _core.new_MinimumCostFlow(n))
    __swig_destroy__ = _core.delete_MinimumCostFlow

    def bfs(self, S, T):
        return _core.MinimumCostFlow_bfs(self, S, T)

    def run(self, S, T):
        return _core.MinimumCostFlow_run(self, S, T)

# Register MinimumCostFlow in _core:
_core.MinimumCostFlow_swigregister(MinimumCostFlow)



