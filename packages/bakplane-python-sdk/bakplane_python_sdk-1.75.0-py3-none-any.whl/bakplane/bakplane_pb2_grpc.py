# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from bakplane import bakplane_pb2 as bakplane_dot_bakplane__pb2


class BakplaneStub(object):
    """
    Service for manging the lifecycle of ingestion, mastering, warehousing, and querying

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ApplyAdapter = channel.unary_unary(
            "/io.openaristos.Bakplane/ApplyAdapter",
            request_serializer=bakplane_dot_bakplane__pb2.ApplyAdapterRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ApplyAdapterResponse.FromString,
        )
        self.RetractAdapter = channel.unary_unary(
            "/io.openaristos.Bakplane/RetractAdapter",
            request_serializer=bakplane_dot_bakplane__pb2.RetractAdapterRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.RetractAdapterResponse.FromString,
        )
        self.ListAdapter = channel.unary_unary(
            "/io.openaristos.Bakplane/ListAdapter",
            request_serializer=bakplane_dot_bakplane__pb2.ListAdapterRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ListAdapterResponse.FromString,
        )
        self.EnableAdapter = channel.unary_unary(
            "/io.openaristos.Bakplane/EnableAdapter",
            request_serializer=bakplane_dot_bakplane__pb2.EnableAdapterRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.EnableAdapterResponse.FromString,
        )
        self.DisableAdapter = channel.unary_unary(
            "/io.openaristos.Bakplane/DisableAdapter",
            request_serializer=bakplane_dot_bakplane__pb2.DisableAdapterRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.DisableAdapterResponse.FromString,
        )
        self.ApplyResource = channel.unary_unary(
            "/io.openaristos.Bakplane/ApplyResource",
            request_serializer=bakplane_dot_bakplane__pb2.ApplyResourceRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ApplyResourceResponse.FromString,
        )
        self.RetractResource = channel.unary_unary(
            "/io.openaristos.Bakplane/RetractResource",
            request_serializer=bakplane_dot_bakplane__pb2.RetractResourceRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.RetractResourceResponse.FromString,
        )
        self.ListResources = channel.unary_unary(
            "/io.openaristos.Bakplane/ListResources",
            request_serializer=bakplane_dot_bakplane__pb2.ListResourceRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ListResourceResponse.FromString,
        )
        self.EnableResource = channel.unary_unary(
            "/io.openaristos.Bakplane/EnableResource",
            request_serializer=bakplane_dot_bakplane__pb2.EnableResourceRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.EnableResourceResponse.FromString,
        )
        self.PreviewResource = channel.unary_unary(
            "/io.openaristos.Bakplane/PreviewResource",
            request_serializer=bakplane_dot_bakplane__pb2.PreviewResourceRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.PreviewResourceResponse.FromString,
        )
        self.DisableResource = channel.unary_unary(
            "/io.openaristos.Bakplane/DisableResource",
            request_serializer=bakplane_dot_bakplane__pb2.DisableResourceRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.DisableResourceResponse.FromString,
        )
        self.MigrateResource = channel.unary_unary(
            "/io.openaristos.Bakplane/MigrateResource",
            request_serializer=bakplane_dot_bakplane__pb2.MigrateResourceRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.MigrateResourceResponse.FromString,
        )
        self.MigrateAllResources = channel.unary_unary(
            "/io.openaristos.Bakplane/MigrateAllResources",
            request_serializer=bakplane_dot_bakplane__pb2.MigrateAllResourcesRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.MigrateAllResourcesResponse.FromString,
        )
        self.ResourceMigrationStatus = channel.unary_unary(
            "/io.openaristos.Bakplane/ResourceMigrationStatus",
            request_serializer=bakplane_dot_bakplane__pb2.MigrationStatusRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.MigrateResourceResponse.FromString,
        )
        self.ResolveResource = channel.unary_stream(
            "/io.openaristos.Bakplane/ResolveResource",
            request_serializer=bakplane_dot_bakplane__pb2.ResolveResourceRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ResolveResourceResponse.FromString,
        )
        self.ResolveResourceIntent = channel.unary_unary(
            "/io.openaristos.Bakplane/ResolveResourceIntent",
            request_serializer=bakplane_dot_bakplane__pb2.ResolveResourceRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ResolveResourceIntentResponse.FromString,
        )
        self.ResolveQueryResource = channel.unary_unary(
            "/io.openaristos.Bakplane/ResolveQueryResource",
            request_serializer=bakplane_dot_bakplane__pb2.ResolveQueryResourceRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ResolveQueryResourceResponse.FromString,
        )
        self.ResolveUniverse = channel.unary_stream(
            "/io.openaristos.Bakplane/ResolveUniverse",
            request_serializer=bakplane_dot_bakplane__pb2.ResolveUniverseRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ResolveUniverseGroupEntry.FromString,
        )
        self.ApplyLandingZone = channel.unary_unary(
            "/io.openaristos.Bakplane/ApplyLandingZone",
            request_serializer=bakplane_dot_bakplane__pb2.ApplyLandingZoneRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ApplyLandingZoneResponse.FromString,
        )
        self.RetractLandingZone = channel.unary_unary(
            "/io.openaristos.Bakplane/RetractLandingZone",
            request_serializer=bakplane_dot_bakplane__pb2.RetractLandingZoneRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.RetractLandingZoneResponse.FromString,
        )
        self.ListLandingZone = channel.unary_unary(
            "/io.openaristos.Bakplane/ListLandingZone",
            request_serializer=bakplane_dot_bakplane__pb2.ListLandingZoneRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ListLandingZoneResponse.FromString,
        )
        self.EnableLandingZone = channel.unary_unary(
            "/io.openaristos.Bakplane/EnableLandingZone",
            request_serializer=bakplane_dot_bakplane__pb2.EnableLandingZoneRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.EnableLandingZoneResponse.FromString,
        )
        self.DisableLandingZone = channel.unary_unary(
            "/io.openaristos.Bakplane/DisableLandingZone",
            request_serializer=bakplane_dot_bakplane__pb2.DisableLandingZoneRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.DisableLandingZoneResponse.FromString,
        )
        self.ApplyOntology = channel.unary_unary(
            "/io.openaristos.Bakplane/ApplyOntology",
            request_serializer=bakplane_dot_bakplane__pb2.ApplyOntologyRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ApplyOntologyResponse.FromString,
        )
        self.RetractOntology = channel.unary_unary(
            "/io.openaristos.Bakplane/RetractOntology",
            request_serializer=bakplane_dot_bakplane__pb2.RetractOntologyRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.RetractOntologyResponse.FromString,
        )
        self.ListOntology = channel.unary_unary(
            "/io.openaristos.Bakplane/ListOntology",
            request_serializer=bakplane_dot_bakplane__pb2.ListOntologyRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ListOntologyResponse.FromString,
        )
        self.ApplyExecutionEngine = channel.unary_unary(
            "/io.openaristos.Bakplane/ApplyExecutionEngine",
            request_serializer=bakplane_dot_bakplane__pb2.ApplyExecutionEngineRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ApplyExecutionEngineResponse.FromString,
        )
        self.RetractExecutionEngine = channel.unary_unary(
            "/io.openaristos.Bakplane/RetractExecutionEngine",
            request_serializer=bakplane_dot_bakplane__pb2.RetractExecutionEngineRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.RetractExecutionEngineResponse.FromString,
        )
        self.ListExecutionEngine = channel.unary_unary(
            "/io.openaristos.Bakplane/ListExecutionEngine",
            request_serializer=bakplane_dot_bakplane__pb2.ListExecutionEngineRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ListExecutionEngineResponse.FromString,
        )
        self.EnableExecutionEngine = channel.unary_unary(
            "/io.openaristos.Bakplane/EnableExecutionEngine",
            request_serializer=bakplane_dot_bakplane__pb2.EnableExecutionEngineRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.EnableExecutionEngineResponse.FromString,
        )
        self.DisableExecutionEngine = channel.unary_unary(
            "/io.openaristos.Bakplane/DisableExecutionEngine",
            request_serializer=bakplane_dot_bakplane__pb2.DisableExecutionEngineRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.DisableExecutionEngineResponse.FromString,
        )
        self.ApplyWarehouse = channel.unary_unary(
            "/io.openaristos.Bakplane/ApplyWarehouse",
            request_serializer=bakplane_dot_bakplane__pb2.ApplyWarehouseRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ApplyWarehouseResponse.FromString,
        )
        self.ApplyValidator = channel.unary_unary(
            "/io.openaristos.Bakplane/ApplyValidator",
            request_serializer=bakplane_dot_bakplane__pb2.ApplyValidatorRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ApplyValidatorResponse.FromString,
        )
        self.RetractValidator = channel.unary_unary(
            "/io.openaristos.Bakplane/RetractValidator",
            request_serializer=bakplane_dot_bakplane__pb2.RetractValidatorRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.RetractValidatorResponse.FromString,
        )
        self.ListValidator = channel.unary_unary(
            "/io.openaristos.Bakplane/ListValidator",
            request_serializer=bakplane_dot_bakplane__pb2.ListValidatorRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ListValidatorResponse.FromString,
        )
        self.RetractWarehouse = channel.unary_unary(
            "/io.openaristos.Bakplane/RetractWarehouse",
            request_serializer=bakplane_dot_bakplane__pb2.RetractWarehouseRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.RetractWarehouseResponse.FromString,
        )
        self.ListWarehouse = channel.unary_unary(
            "/io.openaristos.Bakplane/ListWarehouse",
            request_serializer=bakplane_dot_bakplane__pb2.ListWarehouseRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ListWarehouseResponse.FromString,
        )
        self.EnableWarehouse = channel.unary_unary(
            "/io.openaristos.Bakplane/EnableWarehouse",
            request_serializer=bakplane_dot_bakplane__pb2.EnableWarehouseRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.EnableWarehouseResponse.FromString,
        )
        self.DisableWarehouse = channel.unary_unary(
            "/io.openaristos.Bakplane/DisableWarehouse",
            request_serializer=bakplane_dot_bakplane__pb2.DisableWarehouseRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.DisableWarehouseResponse.FromString,
        )
        self.ApplyMasteringEngine = channel.unary_unary(
            "/io.openaristos.Bakplane/ApplyMasteringEngine",
            request_serializer=bakplane_dot_bakplane__pb2.ApplyMasteringEngineRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ApplyMasteringEngineResponse.FromString,
        )
        self.RetractMasteringEngine = channel.unary_unary(
            "/io.openaristos.Bakplane/RetractMasteringEngine",
            request_serializer=bakplane_dot_bakplane__pb2.RetractMasteringEngineRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.RetractMasteringEngineResponse.FromString,
        )
        self.ListMasteringEngine = channel.unary_unary(
            "/io.openaristos.Bakplane/ListMasteringEngine",
            request_serializer=bakplane_dot_bakplane__pb2.ListMasteringEngineRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ListMasteringEngineResponse.FromString,
        )
        self.CreateIngestionSession = channel.unary_unary(
            "/io.openaristos.Bakplane/CreateIngestionSession",
            request_serializer=bakplane_dot_bakplane__pb2.CreateIngestionSessionRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.CreateIngestionSessionResponse.FromString,
        )
        self.ExecuteIngestionSession = channel.unary_unary(
            "/io.openaristos.Bakplane/ExecuteIngestionSession",
            request_serializer=bakplane_dot_bakplane__pb2.ExecuteIngestionSessionRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.IngestionSessionStatusResponse.FromString,
        )
        self.DeleteIngestionSession = channel.unary_unary(
            "/io.openaristos.Bakplane/DeleteIngestionSession",
            request_serializer=bakplane_dot_bakplane__pb2.DeleteIngestionSessionRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.DeleteIngestionSessionResponse.FromString,
        )
        self.GetIngestionSession = channel.unary_unary(
            "/io.openaristos.Bakplane/GetIngestionSession",
            request_serializer=bakplane_dot_bakplane__pb2.GetIngestionSessionRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.IngestionSessionStatusResponse.FromString,
        )
        self.MasterIngestionSession = channel.unary_unary(
            "/io.openaristos.Bakplane/MasterIngestionSession",
            request_serializer=bakplane_dot_bakplane__pb2.MasterIngestionSessionRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.MasterIngestionSessionResponse.FromString,
        )
        self.HaltIncrementalMastering = channel.unary_unary(
            "/io.openaristos.Bakplane/HaltIncrementalMastering",
            request_serializer=bakplane_dot_bakplane__pb2.HaltIncrementalMasteringRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.HaltIncrementalMasteringResponse.FromString,
        )
        self.ResumeIncrementalMastering = channel.unary_unary(
            "/io.openaristos.Bakplane/ResumeIncrementalMastering",
            request_serializer=bakplane_dot_bakplane__pb2.ResumeIncrementalMasteringRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ResumeIncrementalMasteringResponse.FromString,
        )
        self.PublishIngestionSessionResource = channel.unary_unary(
            "/io.openaristos.Bakplane/PublishIngestionSessionResource",
            request_serializer=bakplane_dot_bakplane__pb2.PublishIngestionSessionResourceRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.PublishIngestionSessionResourceResponse.FromString,
        )
        self.PublishIngestionSessionResourceStatus = channel.unary_unary(
            "/io.openaristos.Bakplane/PublishIngestionSessionResourceStatus",
            request_serializer=bakplane_dot_bakplane__pb2.PublishIngestionSessionResourceStatusRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.PublishIngestionSessionStatusResponse.FromString,
        )
        self.RetractPublishingSession = channel.unary_unary(
            "/io.openaristos.Bakplane/RetractPublishingSession",
            request_serializer=bakplane_dot_bakplane__pb2.RetractPublishingSessionRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.RetractPublishingSessionResponse.FromString,
        )
        self.RetractMasteringSession = channel.unary_unary(
            "/io.openaristos.Bakplane/RetractMasteringSession",
            request_serializer=bakplane_dot_bakplane__pb2.RetractMasteringSessionRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.RetractMasteringSessionResponse.FromString,
        )
        self.ResolveResourcePath = channel.unary_unary(
            "/io.openaristos.Bakplane/ResolveResourcePath",
            request_serializer=bakplane_dot_bakplane__pb2.ResolveResourcePathRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ResolveResourcePathResponse.FromString,
        )
        self.ListIngestionSessionArtifacts = channel.unary_unary(
            "/io.openaristos.Bakplane/ListIngestionSessionArtifacts",
            request_serializer=bakplane_dot_bakplane__pb2.ListIngestionSessionArtifactsRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ListIngestionSessionArtifactsResponse.FromString,
        )
        self.ListIngestionSessions = channel.unary_unary(
            "/io.openaristos.Bakplane/ListIngestionSessions",
            request_serializer=bakplane_dot_bakplane__pb2.ListIngestionSessionsRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ListIngestionSessionsResponse.FromString,
        )
        self.SessionPS = channel.unary_unary(
            "/io.openaristos.Bakplane/SessionPS",
            request_serializer=bakplane_dot_bakplane__pb2.PSRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.PSResponse.FromString,
        )
        self.ApplyPerspective = channel.unary_unary(
            "/io.openaristos.Bakplane/ApplyPerspective",
            request_serializer=bakplane_dot_bakplane__pb2.ApplyPerspectiveRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ApplyPerspectiveResponse.FromString,
        )
        self.RetractPerspective = channel.unary_unary(
            "/io.openaristos.Bakplane/RetractPerspective",
            request_serializer=bakplane_dot_bakplane__pb2.RetractPerspectiveRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.RetractPerspectiveResponse.FromString,
        )
        self.ListPerspective = channel.unary_unary(
            "/io.openaristos.Bakplane/ListPerspective",
            request_serializer=bakplane_dot_bakplane__pb2.ListPerspectiveRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.ListPerspectiveResponse.FromString,
        )
        self.HealthCheck = channel.unary_unary(
            "/io.openaristos.Bakplane/HealthCheck",
            request_serializer=bakplane_dot_bakplane__pb2.HealthCheckRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.HealthCheckResponse.FromString,
        )
        self.EntityCoverage = channel.unary_unary(
            "/io.openaristos.Bakplane/EntityCoverage",
            request_serializer=bakplane_dot_bakplane__pb2.EntityCoverageRequest.SerializeToString,
            response_deserializer=bakplane_dot_bakplane__pb2.EntityCoverageResponse.FromString,
        )


class BakplaneServicer(object):
    """
    Service for manging the lifecycle of ingestion, mastering, warehousing, and querying

    """

    def ApplyAdapter(self, request, context):
        """Apply an adapter, a new adapter is created, and an existing is updated, including all resources"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RetractAdapter(self, request, context):
        """Retract an adapter, removes all resources, ingestion sessions, then removes the adapter"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListAdapter(self, request, context):
        """List adapters by query definition"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def EnableAdapter(self, request, context):
        """Enable the adapter, by default the adapter is enabled, only if you had disabled will you need to run this"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DisableAdapter(self, request, context):
        """Disable the adapter, this is useful, when you want to keep your adapter around, but no longer need it"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ApplyResource(self, request, context):
        """Apply a resource, a new resource is created, a resource here may be independent from the adatper"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RetractResource(self, request, context):
        """Retract a resource"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListResources(self, request, context):
        """List resources by query definition"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def EnableResource(self, request, context):
        """Enable the resource, by default the resource is enabled, only if you had disabled will you need to run this"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PreviewResource(self, request, context):
        """Preview the resource data, providing up to 100 rows as sample"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DisableResource(self, request, context):
        """Disable the resource, this is useful, when you want to keep your resource around, but no longer need it"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def MigrateResource(self, request, context):
        """Database migrations, including up, down, and getting a version, very powerful for managing schemas"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def MigrateAllResources(self, request, context):
        """Migrate all resources for a given adapter"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ResourceMigrationStatus(self, request, context):
        """Database migration status for a given adapter and warehouse provides the version it's running currently"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ResolveResource(self, request, context):
        """Resolve resource allows a user to request resource data in a warehouse (virtual or physical)"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ResolveResourceIntent(self, request, context):
        """Resolve resource intent, provides location where given resource is, connectivity information how to access it"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ResolveQueryResource(self, request, context):
        """Resolves a resource for querying purposes"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ResolveUniverse(self, request, context):
        """Resolves a traversal request"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ApplyLandingZone(self, request, context):
        """Apply an landing zone, a new landing zone is created, and an existing is updated"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RetractLandingZone(self, request, context):
        """Retract an landing zone, removes all data inside of landing zone, then removes the landing zone plugin"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListLandingZone(self, request, context):
        """List landing zones by query definition"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def EnableLandingZone(self, request, context):
        """Enable a single landing zone"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DisableLandingZone(self, request, context):
        """Disable a single landing zone, this will leave data intact, but disable the use of the plugin"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ApplyOntology(self, request, context):
        """Apply an ontology, a new ontology is created, and an existing is updated"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RetractOntology(self, request, context):
        """Retract an ontology, removes all entities and relationships inside of Dominus"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListOntology(self, request, context):
        """List all installed ontologies"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ApplyExecutionEngine(self, request, context):
        """Apply an execution engine, a new execution engine is created, and an existing is updated"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RetractExecutionEngine(self, request, context):
        """Retract an execution engine, this will disable all plugins that depend on it, such as adapters"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListExecutionEngine(self, request, context):
        """List execution engine by query definition"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def EnableExecutionEngine(self, request, context):
        """Enable a single execution engine"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DisableExecutionEngine(self, request, context):
        """Disable a single execution engine, this will disable all plugins that depend on it"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ApplyWarehouse(self, request, context):
        """Apply an warehouse, a new warehouse is created, and an existing is updated"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ApplyValidator(self, request, context):
        """Apply a custom validator into the system"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RetractValidator(self, request, context):
        """Retract an validator that should no longer be used"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListValidator(self, request, context):
        """List validator by query definition"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RetractWarehouse(self, request, context):
        """Retract an warehouse, this will disable all plugins that depend on it, such as adapters"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListWarehouse(self, request, context):
        """List warehouse by query definition"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def EnableWarehouse(self, request, context):
        """Enable a single warehouse"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DisableWarehouse(self, request, context):
        """Disable a single warehouse, this will disable all plugins that depend on it, including resources"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ApplyMasteringEngine(self, request, context):
        """Apply a mastering engine, a new mastering engine is created, and an existing is updated,
        the Dominus mastering engine is the only one supported at this time
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RetractMasteringEngine(self, request, context):
        """Retract a existing mastering engine"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListMasteringEngine(self, request, context):
        """List mastering engines by query definition"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CreateIngestionSession(self, request, context):
        """Create an ingestion session, this is used to ingest bounded, and unbounded data, you may supply
        your own adapter parameters, and remember that this operates on a per adapter basis
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ExecuteIngestionSession(self, request, context):
        """Execute an ingestion session"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteIngestionSession(self, request, context):
        """Delete an ingestion session"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetIngestionSession(self, request, context):
        """Get the ingestion session status"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def MasterIngestionSession(self, request, context):
        """Execute an a batch mastering session, this informs Dominus to batch load the entities and relationships"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def HaltIncrementalMastering(self, request, context):
        """Halt incremental mastering for the given engines"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ResumeIncrementalMastering(self, request, context):
        """Halt incremental mastering for the given engines"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PublishIngestionSessionResource(self, request, context):
        """Publish all asset artifacts produced by an ingestion session into one or more warehouses"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PublishIngestionSessionResourceStatus(self, request, context):
        """Get the last known status of the ingestion session"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RetractPublishingSession(self, request, context):
        """Retract items created and published during the ingestion session"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RetractMasteringSession(self, request, context):
        """Retract items created and published during the ingestion session"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ResolveResourcePath(self, request, context):
        """Resolve a given path into a detailed resource location"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListIngestionSessionArtifacts(self, request, context):
        """Retrieve the ingestion session artifact locations"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListIngestionSessions(self, request, context):
        """List ingestion sessions over a period of time"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SessionPS(self, request, context):
        """Lists running ingestion and publishing sessions"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ApplyPerspective(self, request, context):
        """Apply a perspective, a new perspective is created, and an existing is updated"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RetractPerspective(self, request, context):
        """Retract an perspective, removes all entities related to the perspective, then removes the perspective"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListPerspective(self, request, context):
        """List perspectives by query definition"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def HealthCheck(self, request, context):
        """A basic health-check request"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def EntityCoverage(self, request, context):
        """An entity coverage endpoint"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_BakplaneServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ApplyAdapter": grpc.unary_unary_rpc_method_handler(
            servicer.ApplyAdapter,
            request_deserializer=bakplane_dot_bakplane__pb2.ApplyAdapterRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ApplyAdapterResponse.SerializeToString,
        ),
        "RetractAdapter": grpc.unary_unary_rpc_method_handler(
            servicer.RetractAdapter,
            request_deserializer=bakplane_dot_bakplane__pb2.RetractAdapterRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.RetractAdapterResponse.SerializeToString,
        ),
        "ListAdapter": grpc.unary_unary_rpc_method_handler(
            servicer.ListAdapter,
            request_deserializer=bakplane_dot_bakplane__pb2.ListAdapterRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ListAdapterResponse.SerializeToString,
        ),
        "EnableAdapter": grpc.unary_unary_rpc_method_handler(
            servicer.EnableAdapter,
            request_deserializer=bakplane_dot_bakplane__pb2.EnableAdapterRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.EnableAdapterResponse.SerializeToString,
        ),
        "DisableAdapter": grpc.unary_unary_rpc_method_handler(
            servicer.DisableAdapter,
            request_deserializer=bakplane_dot_bakplane__pb2.DisableAdapterRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.DisableAdapterResponse.SerializeToString,
        ),
        "ApplyResource": grpc.unary_unary_rpc_method_handler(
            servicer.ApplyResource,
            request_deserializer=bakplane_dot_bakplane__pb2.ApplyResourceRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ApplyResourceResponse.SerializeToString,
        ),
        "RetractResource": grpc.unary_unary_rpc_method_handler(
            servicer.RetractResource,
            request_deserializer=bakplane_dot_bakplane__pb2.RetractResourceRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.RetractResourceResponse.SerializeToString,
        ),
        "ListResources": grpc.unary_unary_rpc_method_handler(
            servicer.ListResources,
            request_deserializer=bakplane_dot_bakplane__pb2.ListResourceRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ListResourceResponse.SerializeToString,
        ),
        "EnableResource": grpc.unary_unary_rpc_method_handler(
            servicer.EnableResource,
            request_deserializer=bakplane_dot_bakplane__pb2.EnableResourceRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.EnableResourceResponse.SerializeToString,
        ),
        "PreviewResource": grpc.unary_unary_rpc_method_handler(
            servicer.PreviewResource,
            request_deserializer=bakplane_dot_bakplane__pb2.PreviewResourceRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.PreviewResourceResponse.SerializeToString,
        ),
        "DisableResource": grpc.unary_unary_rpc_method_handler(
            servicer.DisableResource,
            request_deserializer=bakplane_dot_bakplane__pb2.DisableResourceRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.DisableResourceResponse.SerializeToString,
        ),
        "MigrateResource": grpc.unary_unary_rpc_method_handler(
            servicer.MigrateResource,
            request_deserializer=bakplane_dot_bakplane__pb2.MigrateResourceRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.MigrateResourceResponse.SerializeToString,
        ),
        "MigrateAllResources": grpc.unary_unary_rpc_method_handler(
            servicer.MigrateAllResources,
            request_deserializer=bakplane_dot_bakplane__pb2.MigrateAllResourcesRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.MigrateAllResourcesResponse.SerializeToString,
        ),
        "ResourceMigrationStatus": grpc.unary_unary_rpc_method_handler(
            servicer.ResourceMigrationStatus,
            request_deserializer=bakplane_dot_bakplane__pb2.MigrationStatusRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.MigrateResourceResponse.SerializeToString,
        ),
        "ResolveResource": grpc.unary_stream_rpc_method_handler(
            servicer.ResolveResource,
            request_deserializer=bakplane_dot_bakplane__pb2.ResolveResourceRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ResolveResourceResponse.SerializeToString,
        ),
        "ResolveResourceIntent": grpc.unary_unary_rpc_method_handler(
            servicer.ResolveResourceIntent,
            request_deserializer=bakplane_dot_bakplane__pb2.ResolveResourceRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ResolveResourceIntentResponse.SerializeToString,
        ),
        "ResolveQueryResource": grpc.unary_unary_rpc_method_handler(
            servicer.ResolveQueryResource,
            request_deserializer=bakplane_dot_bakplane__pb2.ResolveQueryResourceRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ResolveQueryResourceResponse.SerializeToString,
        ),
        "ResolveUniverse": grpc.unary_stream_rpc_method_handler(
            servicer.ResolveUniverse,
            request_deserializer=bakplane_dot_bakplane__pb2.ResolveUniverseRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ResolveUniverseGroupEntry.SerializeToString,
        ),
        "ApplyLandingZone": grpc.unary_unary_rpc_method_handler(
            servicer.ApplyLandingZone,
            request_deserializer=bakplane_dot_bakplane__pb2.ApplyLandingZoneRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ApplyLandingZoneResponse.SerializeToString,
        ),
        "RetractLandingZone": grpc.unary_unary_rpc_method_handler(
            servicer.RetractLandingZone,
            request_deserializer=bakplane_dot_bakplane__pb2.RetractLandingZoneRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.RetractLandingZoneResponse.SerializeToString,
        ),
        "ListLandingZone": grpc.unary_unary_rpc_method_handler(
            servicer.ListLandingZone,
            request_deserializer=bakplane_dot_bakplane__pb2.ListLandingZoneRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ListLandingZoneResponse.SerializeToString,
        ),
        "EnableLandingZone": grpc.unary_unary_rpc_method_handler(
            servicer.EnableLandingZone,
            request_deserializer=bakplane_dot_bakplane__pb2.EnableLandingZoneRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.EnableLandingZoneResponse.SerializeToString,
        ),
        "DisableLandingZone": grpc.unary_unary_rpc_method_handler(
            servicer.DisableLandingZone,
            request_deserializer=bakplane_dot_bakplane__pb2.DisableLandingZoneRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.DisableLandingZoneResponse.SerializeToString,
        ),
        "ApplyOntology": grpc.unary_unary_rpc_method_handler(
            servicer.ApplyOntology,
            request_deserializer=bakplane_dot_bakplane__pb2.ApplyOntologyRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ApplyOntologyResponse.SerializeToString,
        ),
        "RetractOntology": grpc.unary_unary_rpc_method_handler(
            servicer.RetractOntology,
            request_deserializer=bakplane_dot_bakplane__pb2.RetractOntologyRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.RetractOntologyResponse.SerializeToString,
        ),
        "ListOntology": grpc.unary_unary_rpc_method_handler(
            servicer.ListOntology,
            request_deserializer=bakplane_dot_bakplane__pb2.ListOntologyRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ListOntologyResponse.SerializeToString,
        ),
        "ApplyExecutionEngine": grpc.unary_unary_rpc_method_handler(
            servicer.ApplyExecutionEngine,
            request_deserializer=bakplane_dot_bakplane__pb2.ApplyExecutionEngineRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ApplyExecutionEngineResponse.SerializeToString,
        ),
        "RetractExecutionEngine": grpc.unary_unary_rpc_method_handler(
            servicer.RetractExecutionEngine,
            request_deserializer=bakplane_dot_bakplane__pb2.RetractExecutionEngineRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.RetractExecutionEngineResponse.SerializeToString,
        ),
        "ListExecutionEngine": grpc.unary_unary_rpc_method_handler(
            servicer.ListExecutionEngine,
            request_deserializer=bakplane_dot_bakplane__pb2.ListExecutionEngineRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ListExecutionEngineResponse.SerializeToString,
        ),
        "EnableExecutionEngine": grpc.unary_unary_rpc_method_handler(
            servicer.EnableExecutionEngine,
            request_deserializer=bakplane_dot_bakplane__pb2.EnableExecutionEngineRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.EnableExecutionEngineResponse.SerializeToString,
        ),
        "DisableExecutionEngine": grpc.unary_unary_rpc_method_handler(
            servicer.DisableExecutionEngine,
            request_deserializer=bakplane_dot_bakplane__pb2.DisableExecutionEngineRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.DisableExecutionEngineResponse.SerializeToString,
        ),
        "ApplyWarehouse": grpc.unary_unary_rpc_method_handler(
            servicer.ApplyWarehouse,
            request_deserializer=bakplane_dot_bakplane__pb2.ApplyWarehouseRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ApplyWarehouseResponse.SerializeToString,
        ),
        "ApplyValidator": grpc.unary_unary_rpc_method_handler(
            servicer.ApplyValidator,
            request_deserializer=bakplane_dot_bakplane__pb2.ApplyValidatorRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ApplyValidatorResponse.SerializeToString,
        ),
        "RetractValidator": grpc.unary_unary_rpc_method_handler(
            servicer.RetractValidator,
            request_deserializer=bakplane_dot_bakplane__pb2.RetractValidatorRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.RetractValidatorResponse.SerializeToString,
        ),
        "ListValidator": grpc.unary_unary_rpc_method_handler(
            servicer.ListValidator,
            request_deserializer=bakplane_dot_bakplane__pb2.ListValidatorRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ListValidatorResponse.SerializeToString,
        ),
        "RetractWarehouse": grpc.unary_unary_rpc_method_handler(
            servicer.RetractWarehouse,
            request_deserializer=bakplane_dot_bakplane__pb2.RetractWarehouseRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.RetractWarehouseResponse.SerializeToString,
        ),
        "ListWarehouse": grpc.unary_unary_rpc_method_handler(
            servicer.ListWarehouse,
            request_deserializer=bakplane_dot_bakplane__pb2.ListWarehouseRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ListWarehouseResponse.SerializeToString,
        ),
        "EnableWarehouse": grpc.unary_unary_rpc_method_handler(
            servicer.EnableWarehouse,
            request_deserializer=bakplane_dot_bakplane__pb2.EnableWarehouseRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.EnableWarehouseResponse.SerializeToString,
        ),
        "DisableWarehouse": grpc.unary_unary_rpc_method_handler(
            servicer.DisableWarehouse,
            request_deserializer=bakplane_dot_bakplane__pb2.DisableWarehouseRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.DisableWarehouseResponse.SerializeToString,
        ),
        "ApplyMasteringEngine": grpc.unary_unary_rpc_method_handler(
            servicer.ApplyMasteringEngine,
            request_deserializer=bakplane_dot_bakplane__pb2.ApplyMasteringEngineRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ApplyMasteringEngineResponse.SerializeToString,
        ),
        "RetractMasteringEngine": grpc.unary_unary_rpc_method_handler(
            servicer.RetractMasteringEngine,
            request_deserializer=bakplane_dot_bakplane__pb2.RetractMasteringEngineRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.RetractMasteringEngineResponse.SerializeToString,
        ),
        "ListMasteringEngine": grpc.unary_unary_rpc_method_handler(
            servicer.ListMasteringEngine,
            request_deserializer=bakplane_dot_bakplane__pb2.ListMasteringEngineRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ListMasteringEngineResponse.SerializeToString,
        ),
        "CreateIngestionSession": grpc.unary_unary_rpc_method_handler(
            servicer.CreateIngestionSession,
            request_deserializer=bakplane_dot_bakplane__pb2.CreateIngestionSessionRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.CreateIngestionSessionResponse.SerializeToString,
        ),
        "ExecuteIngestionSession": grpc.unary_unary_rpc_method_handler(
            servicer.ExecuteIngestionSession,
            request_deserializer=bakplane_dot_bakplane__pb2.ExecuteIngestionSessionRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.IngestionSessionStatusResponse.SerializeToString,
        ),
        "DeleteIngestionSession": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteIngestionSession,
            request_deserializer=bakplane_dot_bakplane__pb2.DeleteIngestionSessionRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.DeleteIngestionSessionResponse.SerializeToString,
        ),
        "GetIngestionSession": grpc.unary_unary_rpc_method_handler(
            servicer.GetIngestionSession,
            request_deserializer=bakplane_dot_bakplane__pb2.GetIngestionSessionRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.IngestionSessionStatusResponse.SerializeToString,
        ),
        "MasterIngestionSession": grpc.unary_unary_rpc_method_handler(
            servicer.MasterIngestionSession,
            request_deserializer=bakplane_dot_bakplane__pb2.MasterIngestionSessionRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.MasterIngestionSessionResponse.SerializeToString,
        ),
        "HaltIncrementalMastering": grpc.unary_unary_rpc_method_handler(
            servicer.HaltIncrementalMastering,
            request_deserializer=bakplane_dot_bakplane__pb2.HaltIncrementalMasteringRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.HaltIncrementalMasteringResponse.SerializeToString,
        ),
        "ResumeIncrementalMastering": grpc.unary_unary_rpc_method_handler(
            servicer.ResumeIncrementalMastering,
            request_deserializer=bakplane_dot_bakplane__pb2.ResumeIncrementalMasteringRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ResumeIncrementalMasteringResponse.SerializeToString,
        ),
        "PublishIngestionSessionResource": grpc.unary_unary_rpc_method_handler(
            servicer.PublishIngestionSessionResource,
            request_deserializer=bakplane_dot_bakplane__pb2.PublishIngestionSessionResourceRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.PublishIngestionSessionResourceResponse.SerializeToString,
        ),
        "PublishIngestionSessionResourceStatus": grpc.unary_unary_rpc_method_handler(
            servicer.PublishIngestionSessionResourceStatus,
            request_deserializer=bakplane_dot_bakplane__pb2.PublishIngestionSessionResourceStatusRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.PublishIngestionSessionStatusResponse.SerializeToString,
        ),
        "RetractPublishingSession": grpc.unary_unary_rpc_method_handler(
            servicer.RetractPublishingSession,
            request_deserializer=bakplane_dot_bakplane__pb2.RetractPublishingSessionRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.RetractPublishingSessionResponse.SerializeToString,
        ),
        "RetractMasteringSession": grpc.unary_unary_rpc_method_handler(
            servicer.RetractMasteringSession,
            request_deserializer=bakplane_dot_bakplane__pb2.RetractMasteringSessionRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.RetractMasteringSessionResponse.SerializeToString,
        ),
        "ResolveResourcePath": grpc.unary_unary_rpc_method_handler(
            servicer.ResolveResourcePath,
            request_deserializer=bakplane_dot_bakplane__pb2.ResolveResourcePathRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ResolveResourcePathResponse.SerializeToString,
        ),
        "ListIngestionSessionArtifacts": grpc.unary_unary_rpc_method_handler(
            servicer.ListIngestionSessionArtifacts,
            request_deserializer=bakplane_dot_bakplane__pb2.ListIngestionSessionArtifactsRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ListIngestionSessionArtifactsResponse.SerializeToString,
        ),
        "ListIngestionSessions": grpc.unary_unary_rpc_method_handler(
            servicer.ListIngestionSessions,
            request_deserializer=bakplane_dot_bakplane__pb2.ListIngestionSessionsRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ListIngestionSessionsResponse.SerializeToString,
        ),
        "SessionPS": grpc.unary_unary_rpc_method_handler(
            servicer.SessionPS,
            request_deserializer=bakplane_dot_bakplane__pb2.PSRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.PSResponse.SerializeToString,
        ),
        "ApplyPerspective": grpc.unary_unary_rpc_method_handler(
            servicer.ApplyPerspective,
            request_deserializer=bakplane_dot_bakplane__pb2.ApplyPerspectiveRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ApplyPerspectiveResponse.SerializeToString,
        ),
        "RetractPerspective": grpc.unary_unary_rpc_method_handler(
            servicer.RetractPerspective,
            request_deserializer=bakplane_dot_bakplane__pb2.RetractPerspectiveRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.RetractPerspectiveResponse.SerializeToString,
        ),
        "ListPerspective": grpc.unary_unary_rpc_method_handler(
            servicer.ListPerspective,
            request_deserializer=bakplane_dot_bakplane__pb2.ListPerspectiveRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.ListPerspectiveResponse.SerializeToString,
        ),
        "HealthCheck": grpc.unary_unary_rpc_method_handler(
            servicer.HealthCheck,
            request_deserializer=bakplane_dot_bakplane__pb2.HealthCheckRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.HealthCheckResponse.SerializeToString,
        ),
        "EntityCoverage": grpc.unary_unary_rpc_method_handler(
            servicer.EntityCoverage,
            request_deserializer=bakplane_dot_bakplane__pb2.EntityCoverageRequest.FromString,
            response_serializer=bakplane_dot_bakplane__pb2.EntityCoverageResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "io.openaristos.Bakplane", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Bakplane(object):
    """
    Service for manging the lifecycle of ingestion, mastering, warehousing, and querying

    """

    @staticmethod
    def ApplyAdapter(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ApplyAdapter",
            bakplane_dot_bakplane__pb2.ApplyAdapterRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ApplyAdapterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RetractAdapter(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/RetractAdapter",
            bakplane_dot_bakplane__pb2.RetractAdapterRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.RetractAdapterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListAdapter(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ListAdapter",
            bakplane_dot_bakplane__pb2.ListAdapterRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ListAdapterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def EnableAdapter(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/EnableAdapter",
            bakplane_dot_bakplane__pb2.EnableAdapterRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.EnableAdapterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DisableAdapter(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/DisableAdapter",
            bakplane_dot_bakplane__pb2.DisableAdapterRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.DisableAdapterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ApplyResource(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ApplyResource",
            bakplane_dot_bakplane__pb2.ApplyResourceRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ApplyResourceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RetractResource(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/RetractResource",
            bakplane_dot_bakplane__pb2.RetractResourceRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.RetractResourceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListResources(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ListResources",
            bakplane_dot_bakplane__pb2.ListResourceRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ListResourceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def EnableResource(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/EnableResource",
            bakplane_dot_bakplane__pb2.EnableResourceRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.EnableResourceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def PreviewResource(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/PreviewResource",
            bakplane_dot_bakplane__pb2.PreviewResourceRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.PreviewResourceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DisableResource(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/DisableResource",
            bakplane_dot_bakplane__pb2.DisableResourceRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.DisableResourceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def MigrateResource(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/MigrateResource",
            bakplane_dot_bakplane__pb2.MigrateResourceRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.MigrateResourceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def MigrateAllResources(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/MigrateAllResources",
            bakplane_dot_bakplane__pb2.MigrateAllResourcesRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.MigrateAllResourcesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ResourceMigrationStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ResourceMigrationStatus",
            bakplane_dot_bakplane__pb2.MigrationStatusRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.MigrateResourceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ResolveResource(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/io.openaristos.Bakplane/ResolveResource",
            bakplane_dot_bakplane__pb2.ResolveResourceRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ResolveResourceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ResolveResourceIntent(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ResolveResourceIntent",
            bakplane_dot_bakplane__pb2.ResolveResourceRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ResolveResourceIntentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ResolveQueryResource(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ResolveQueryResource",
            bakplane_dot_bakplane__pb2.ResolveQueryResourceRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ResolveQueryResourceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ResolveUniverse(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/io.openaristos.Bakplane/ResolveUniverse",
            bakplane_dot_bakplane__pb2.ResolveUniverseRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ResolveUniverseGroupEntry.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ApplyLandingZone(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ApplyLandingZone",
            bakplane_dot_bakplane__pb2.ApplyLandingZoneRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ApplyLandingZoneResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RetractLandingZone(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/RetractLandingZone",
            bakplane_dot_bakplane__pb2.RetractLandingZoneRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.RetractLandingZoneResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListLandingZone(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ListLandingZone",
            bakplane_dot_bakplane__pb2.ListLandingZoneRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ListLandingZoneResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def EnableLandingZone(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/EnableLandingZone",
            bakplane_dot_bakplane__pb2.EnableLandingZoneRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.EnableLandingZoneResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DisableLandingZone(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/DisableLandingZone",
            bakplane_dot_bakplane__pb2.DisableLandingZoneRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.DisableLandingZoneResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ApplyOntology(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ApplyOntology",
            bakplane_dot_bakplane__pb2.ApplyOntologyRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ApplyOntologyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RetractOntology(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/RetractOntology",
            bakplane_dot_bakplane__pb2.RetractOntologyRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.RetractOntologyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListOntology(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ListOntology",
            bakplane_dot_bakplane__pb2.ListOntologyRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ListOntologyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ApplyExecutionEngine(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ApplyExecutionEngine",
            bakplane_dot_bakplane__pb2.ApplyExecutionEngineRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ApplyExecutionEngineResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RetractExecutionEngine(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/RetractExecutionEngine",
            bakplane_dot_bakplane__pb2.RetractExecutionEngineRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.RetractExecutionEngineResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListExecutionEngine(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ListExecutionEngine",
            bakplane_dot_bakplane__pb2.ListExecutionEngineRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ListExecutionEngineResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def EnableExecutionEngine(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/EnableExecutionEngine",
            bakplane_dot_bakplane__pb2.EnableExecutionEngineRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.EnableExecutionEngineResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DisableExecutionEngine(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/DisableExecutionEngine",
            bakplane_dot_bakplane__pb2.DisableExecutionEngineRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.DisableExecutionEngineResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ApplyWarehouse(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ApplyWarehouse",
            bakplane_dot_bakplane__pb2.ApplyWarehouseRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ApplyWarehouseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ApplyValidator(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ApplyValidator",
            bakplane_dot_bakplane__pb2.ApplyValidatorRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ApplyValidatorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RetractValidator(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/RetractValidator",
            bakplane_dot_bakplane__pb2.RetractValidatorRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.RetractValidatorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListValidator(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ListValidator",
            bakplane_dot_bakplane__pb2.ListValidatorRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ListValidatorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RetractWarehouse(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/RetractWarehouse",
            bakplane_dot_bakplane__pb2.RetractWarehouseRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.RetractWarehouseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListWarehouse(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ListWarehouse",
            bakplane_dot_bakplane__pb2.ListWarehouseRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ListWarehouseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def EnableWarehouse(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/EnableWarehouse",
            bakplane_dot_bakplane__pb2.EnableWarehouseRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.EnableWarehouseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DisableWarehouse(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/DisableWarehouse",
            bakplane_dot_bakplane__pb2.DisableWarehouseRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.DisableWarehouseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ApplyMasteringEngine(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ApplyMasteringEngine",
            bakplane_dot_bakplane__pb2.ApplyMasteringEngineRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ApplyMasteringEngineResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RetractMasteringEngine(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/RetractMasteringEngine",
            bakplane_dot_bakplane__pb2.RetractMasteringEngineRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.RetractMasteringEngineResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListMasteringEngine(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ListMasteringEngine",
            bakplane_dot_bakplane__pb2.ListMasteringEngineRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ListMasteringEngineResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CreateIngestionSession(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/CreateIngestionSession",
            bakplane_dot_bakplane__pb2.CreateIngestionSessionRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.CreateIngestionSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ExecuteIngestionSession(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ExecuteIngestionSession",
            bakplane_dot_bakplane__pb2.ExecuteIngestionSessionRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.IngestionSessionStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DeleteIngestionSession(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/DeleteIngestionSession",
            bakplane_dot_bakplane__pb2.DeleteIngestionSessionRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.DeleteIngestionSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetIngestionSession(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/GetIngestionSession",
            bakplane_dot_bakplane__pb2.GetIngestionSessionRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.IngestionSessionStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def MasterIngestionSession(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/MasterIngestionSession",
            bakplane_dot_bakplane__pb2.MasterIngestionSessionRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.MasterIngestionSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def HaltIncrementalMastering(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/HaltIncrementalMastering",
            bakplane_dot_bakplane__pb2.HaltIncrementalMasteringRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.HaltIncrementalMasteringResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ResumeIncrementalMastering(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ResumeIncrementalMastering",
            bakplane_dot_bakplane__pb2.ResumeIncrementalMasteringRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ResumeIncrementalMasteringResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def PublishIngestionSessionResource(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/PublishIngestionSessionResource",
            bakplane_dot_bakplane__pb2.PublishIngestionSessionResourceRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.PublishIngestionSessionResourceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def PublishIngestionSessionResourceStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/PublishIngestionSessionResourceStatus",
            bakplane_dot_bakplane__pb2.PublishIngestionSessionResourceStatusRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.PublishIngestionSessionStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RetractPublishingSession(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/RetractPublishingSession",
            bakplane_dot_bakplane__pb2.RetractPublishingSessionRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.RetractPublishingSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RetractMasteringSession(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/RetractMasteringSession",
            bakplane_dot_bakplane__pb2.RetractMasteringSessionRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.RetractMasteringSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ResolveResourcePath(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ResolveResourcePath",
            bakplane_dot_bakplane__pb2.ResolveResourcePathRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ResolveResourcePathResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListIngestionSessionArtifacts(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ListIngestionSessionArtifacts",
            bakplane_dot_bakplane__pb2.ListIngestionSessionArtifactsRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ListIngestionSessionArtifactsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListIngestionSessions(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ListIngestionSessions",
            bakplane_dot_bakplane__pb2.ListIngestionSessionsRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ListIngestionSessionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SessionPS(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/SessionPS",
            bakplane_dot_bakplane__pb2.PSRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.PSResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ApplyPerspective(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ApplyPerspective",
            bakplane_dot_bakplane__pb2.ApplyPerspectiveRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ApplyPerspectiveResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RetractPerspective(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/RetractPerspective",
            bakplane_dot_bakplane__pb2.RetractPerspectiveRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.RetractPerspectiveResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListPerspective(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/ListPerspective",
            bakplane_dot_bakplane__pb2.ListPerspectiveRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.ListPerspectiveResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def HealthCheck(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/HealthCheck",
            bakplane_dot_bakplane__pb2.HealthCheckRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def EntityCoverage(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.openaristos.Bakplane/EntityCoverage",
            bakplane_dot_bakplane__pb2.EntityCoverageRequest.SerializeToString,
            bakplane_dot_bakplane__pb2.EntityCoverageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
