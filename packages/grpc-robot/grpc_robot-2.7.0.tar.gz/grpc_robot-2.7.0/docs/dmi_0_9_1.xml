<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="grpc_robot.Dmi" type="LIBRARY" format="ROBOT" scope="SUITE" namedargs="true" generated="2021-03-23T15:30:48Z" specversion="2" source="../grpc_robot/dmi_robot.py" lineno="19">
<version>2.7.0</version>
<scope>test suite</scope>
<namedargs>yes</namedargs>
<doc>
    This library is intended to supported different Protocol Buffer definitions. Precondition is that python files
    generated from Protocol Buffer files are available in a pip package which must be installed before the library
    is used.

    | Supported device  | Pip package                 | Pip package version | Library Name   |
    | dmi               | device-management-interface | 0.9.1               | grpc_robot.Dmi |
    | dmi               | device-management-interface | 0.9.2               | grpc_robot.Dmi |
    | dmi               | device-management-interface | 0.9.3               | grpc_robot.Dmi |
    | dmi               | device-management-interface | 0.9.4               | grpc_robot.Dmi |
    | dmi               | device-management-interface | 0.9.5               | grpc_robot.Dmi |
    | dmi               | device-management-interface | 0.9.6               | grpc_robot.Dmi |
    | dmi               | device-management-interface | 0.9.8               | grpc_robot.Dmi |
    | dmi               | device-management-interface | 0.9.9               | grpc_robot.Dmi |
    | dmi               | device-management-interface | 0.10.1              | grpc_robot.Dmi |
    | dmi               | device-management-interface | 0.10.2              | grpc_robot.Dmi |
    | dmi               | device-management-interface | 0.12.0              | grpc_robot.Dmi |
    </doc>
<kw name="Connection Close">
<arguments>
</arguments>
<doc>
Closes the connection to the gRPC host.</doc>
</kw>
<kw name="Connection Open">
<arguments>
<arg>host</arg>
<arg>port</arg>
<arg>**kwargs</arg>
</arguments>
<doc>
Opens a connection to the gRPC host.

*Parameters*:
- host: &lt;string&gt;|&lt;IP address&gt;; Name or IP address of the gRPC host.
- port: &lt;number&gt;; TCP port of the gRPC host.

*Named Parameters*:
- timeout: &lt;number&gt;; Timeout in seconds for a gRPC response. Default: 30 s</doc>
</kw>
<kw name="Connection Parameters Get">
<arguments>
</arguments>
<doc>
Retrieves the connection parameters for the gRPC channel.

*Return*: A dictionary with the keys:
- timeout</doc>
</kw>
<kw name="Connection Parameters Set">
<arguments>
<arg>**kwargs</arg>
</arguments>
<doc>
Sets the gRPC channel connection parameters.

*Named Parameters*:
- timeout: &lt;number&gt;; Timeout in seconds for a gRPC response.

*Return*: Same dictionary as the keyword _Connection Parameter Get_ with the values before they got changed.</doc>
</kw>
<kw name="Dmi Version Get">
<arguments>
</arguments>
<doc>
Retrieve the version of the currently used python module _device-management-interface_.

*Return*: version string consisting of three dot-separated numbers (x.y.z)</doc>
</kw>
<kw name="Get Keyword Names">
<arguments>
</arguments>
<doc>
Returns the list of keyword names</doc>
</kw>
<kw name="Hw Event Mgmt Service List Events">
<arguments>
<arg>param_dict</arg>
<arg>**kwargs</arg>
</arguments>
<doc>
RPC _ListEvents_ from _NativeEventsManagementService_.


*Parameters*:

- param_dict:
| {    # type: HardwareID
|   'uuid': {    # type: Uuid
|     'uuid': &lt;string&gt;,
|   }
| }
*Named parameters*:

- return_enum_integer: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the enum values as integer values rather than their labels. Default: _${FALSE}_ or _false_.

- return_defaults: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the default values. Default: _${FALSE}_ or _false_.

- timeout: &lt;int&gt; or &lt;string&gt;; Number of seconds to wait for the response. Default: The timeout value set by keywords _Connection Open_ and _Connection Parameters Set_.
*Return*: *Note*: Bold dictionary keys are cases of an ONEOF type that is not transmitted in gRPC.

| {    # type: ListEventsResponse
|   'status': &lt; UNDEFINED_STATUS | OK | ERROR &gt;
|   'reason': &lt; UNDEFINED_REASON | UNKNOWN_DEVICE | INTERNAL_ERROR | WRONG_METRIC | WRONG_EVENT | LOGGING_ENDPOINT_ERROR | LOGGING_ENDPOINT_PROTOCOL_ERROR | KAFKA_ENDPOINT_ERROR &gt;
|   'events': {    # type: EventsCfg
|     'items': [    # list of:
|       {    # type: EventCfg
|         'event_id': &lt; EVENT_NAME_UNDEFINED | EVENT_TRANSCEIVER_PLUG_OUT | EVENT_TRANSCEIVER_PLUG_IN | EVENT_TRANSCEIVER_VOLTAGE_ABOVE_THRESHOLD | EVENT_TRANSCEIVER_VOLTAGE_BELOW_THRESHOLD | EVENT_TRANSCEIVER_TEMPERATURE_ABOVE_THRESHOLD | EVENT_TRANSCEIVER_TEMPERATURE_BELOW_THRESHOLD | EVENT_TRANSCEIVER_CURRENT_ABOVE_THRESHOLD | EVENT_TRANSCEIVER_CURRENT_BELOW_THRESHOLD | EVENT_TRANSCEIVER_RX_POWER_ABOVE_THRESHOLD | EVENT_TRANSCEIVER_RX_POWER_BELOW_THRESHOLD | EVENT_TRANSCEIVER_TX_POWER_ABOVE_THRESHOLD | EVENT_TRANSCEIVER_TX_POWER_BELOW_THRESHOLD | EVENT_TRANSCEIVER_FAILURE | EVENT_TRANSCEIVER_VOLTAGE_ABOVE_THRESHOLD_RECOVERED | EVENT_TRANSCEIVER_VOLTAGE_BELOW_THRESHOLD_RECOVERED | EVENT_TRANSCEIVER_TEMPERATURE_ABOVE_THRESHOLD_RECOVERED | EVENT_TRANSCEIVER_TEMPERATURE_BELOW_THRESHOLD_RECOVERED | EVENT_TRANSCEIVER_CURRENT_ABOVE_THRESHOLD_RECOVERED | EVENT_TRANSCEIVER_CURRENT_BELOW_THRESHOLD_RECOVERED | EVENT_TRANSCEIVER_RX_POWER_ABOVE_THRESHOLD_RECOVERED | EVENT_TRANSCEIVER_RX_POWER_BELOW_THRESHOLD_RECOVERED | EVENT_TRANSCEIVER_TX_POWER_ABOVE_THRESHOLD_RECOVERED | EVENT_TRANSCEIVER_TX_POWER_BELOW_THRESHOLD_RECOVERED | EVENT_TRANSCEIVER_FAILURE_RECOVERED | EVENT_PSU_PLUG_OUT | EVENT_PSU_PLUG_IN | EVENT_PSU_FAILURE | EVENT_PSU_FAILURE_RECOVERED | EVENT_FAN_FAILURE | EVENT_FAN_PLUG_OUT | EVENT_FAN_PLUG_IN | EVENT_FAN_FAILURE_RECOVERED | EVENT_CPU_TEMPERATURE_ABOVE_CRITICAL | EVENT_CPU_TEMPERATURE_ABOVE_FATAL | EVENT_CPU_TEMPERATURE_ABOVE_CRITICAL_RECOVERED | EVENT_CPU_TEMPERATURE_ABOVE_FATAL_RECOVERED | EVENT_HW_DEVICE_RESET | EVENT_HW_DEVICE_TEMPERATURE_ABOVE_CRITICAL | EVENT_HW_DEVICE_TEMPERATURE_ABOVE_FATAL | EVENT_HW_DEVICE_TEMPERATURE_ABOVE_CRITICAL_RECOVERED | EVENT_HW_DEVICE_TEMPERATURE_ABOVE_FATAL_RECOVERED &gt;
|         'is_configured': &lt;bool&gt;,
|         'thresholds': {    # type: Thresholds
|           '_ONEOF threshold_: *upper*': {    # type: WaterMarks
|             'high': {    # type: ValueType
|               '_ONEOF val_: *int_val*': &lt;int64&gt;,
|               '_ONEOF val_: *uint_val*': &lt;uint64&gt;,
|               '_ONEOF val_: *float_val*': &lt;float&gt;,
|             }
|             'low': {    # type: ValueType
|               '_ONEOF val_: *int_val*': &lt;int64&gt;,
|               '_ONEOF val_: *uint_val*': &lt;uint64&gt;,
|               '_ONEOF val_: *float_val*': &lt;float&gt;,
|             }
|           }
|           '_ONEOF threshold_: *lower*': {    # type: WaterMarks
|             'high': {    # type: ValueType
|               '_ONEOF val_: *int_val*': &lt;int64&gt;,
|               '_ONEOF val_: *uint_val*': &lt;uint64&gt;,
|               '_ONEOF val_: *float_val*': &lt;float&gt;,
|             }
|             'low': {    # type: ValueType
|               '_ONEOF val_: *int_val*': &lt;int64&gt;,
|               '_ONEOF val_: *uint_val*': &lt;uint64&gt;,
|               '_ONEOF val_: *float_val*': &lt;float&gt;,
|             }
|           }
|         }
|       }
|     ]
|   }
| }</doc>
</kw>
<kw name="Hw Event Mgmt Service Update Events Configuration">
<arguments>
<arg>param_dict</arg>
<arg>**kwargs</arg>
</arguments>
<doc>
RPC _UpdateEventsConfiguration_ from _NativeEventsManagementService_.


*Parameters*:

- param_dict: *Note*: Bold dictionary keys are cases of an ONEOF type that is not transmitted in gRPC.

| {    # type: EventsConfigurationRequest
|   'device_uuid': {    # type: Uuid
|     'uuid': &lt;string&gt;,
|   }
|   '_ONEOF operation_: *changes*': {    # type: EventsCfg
|     'items': [    # list of:
|       {    # type: EventCfg
|         'event_id': &lt; EVENT_NAME_UNDEFINED | EVENT_TRANSCEIVER_PLUG_OUT | EVENT_TRANSCEIVER_PLUG_IN | EVENT_TRANSCEIVER_VOLTAGE_ABOVE_THRESHOLD | EVENT_TRANSCEIVER_VOLTAGE_BELOW_THRESHOLD | EVENT_TRANSCEIVER_TEMPERATURE_ABOVE_THRESHOLD | EVENT_TRANSCEIVER_TEMPERATURE_BELOW_THRESHOLD | EVENT_TRANSCEIVER_CURRENT_ABOVE_THRESHOLD | EVENT_TRANSCEIVER_CURRENT_BELOW_THRESHOLD | EVENT_TRANSCEIVER_RX_POWER_ABOVE_THRESHOLD | EVENT_TRANSCEIVER_RX_POWER_BELOW_THRESHOLD | EVENT_TRANSCEIVER_TX_POWER_ABOVE_THRESHOLD | EVENT_TRANSCEIVER_TX_POWER_BELOW_THRESHOLD | EVENT_TRANSCEIVER_FAILURE | EVENT_TRANSCEIVER_VOLTAGE_ABOVE_THRESHOLD_RECOVERED | EVENT_TRANSCEIVER_VOLTAGE_BELOW_THRESHOLD_RECOVERED | EVENT_TRANSCEIVER_TEMPERATURE_ABOVE_THRESHOLD_RECOVERED | EVENT_TRANSCEIVER_TEMPERATURE_BELOW_THRESHOLD_RECOVERED | EVENT_TRANSCEIVER_CURRENT_ABOVE_THRESHOLD_RECOVERED | EVENT_TRANSCEIVER_CURRENT_BELOW_THRESHOLD_RECOVERED | EVENT_TRANSCEIVER_RX_POWER_ABOVE_THRESHOLD_RECOVERED | EVENT_TRANSCEIVER_RX_POWER_BELOW_THRESHOLD_RECOVERED | EVENT_TRANSCEIVER_TX_POWER_ABOVE_THRESHOLD_RECOVERED | EVENT_TRANSCEIVER_TX_POWER_BELOW_THRESHOLD_RECOVERED | EVENT_TRANSCEIVER_FAILURE_RECOVERED | EVENT_PSU_PLUG_OUT | EVENT_PSU_PLUG_IN | EVENT_PSU_FAILURE | EVENT_PSU_FAILURE_RECOVERED | EVENT_FAN_FAILURE | EVENT_FAN_PLUG_OUT | EVENT_FAN_PLUG_IN | EVENT_FAN_FAILURE_RECOVERED | EVENT_CPU_TEMPERATURE_ABOVE_CRITICAL | EVENT_CPU_TEMPERATURE_ABOVE_FATAL | EVENT_CPU_TEMPERATURE_ABOVE_CRITICAL_RECOVERED | EVENT_CPU_TEMPERATURE_ABOVE_FATAL_RECOVERED | EVENT_HW_DEVICE_RESET | EVENT_HW_DEVICE_TEMPERATURE_ABOVE_CRITICAL | EVENT_HW_DEVICE_TEMPERATURE_ABOVE_FATAL | EVENT_HW_DEVICE_TEMPERATURE_ABOVE_CRITICAL_RECOVERED | EVENT_HW_DEVICE_TEMPERATURE_ABOVE_FATAL_RECOVERED &gt;
|         'is_configured': &lt;bool&gt;,
|         'thresholds': {    # type: Thresholds
|           '_ONEOF threshold_: *upper*': {    # type: WaterMarks
|             'high': {    # type: ValueType
|               '_ONEOF val_: *int_val*': &lt;int64&gt;,
|               '_ONEOF val_: *uint_val*': &lt;uint64&gt;,
|               '_ONEOF val_: *float_val*': &lt;float&gt;,
|             }
|             'low': {    # type: ValueType
|               '_ONEOF val_: *int_val*': &lt;int64&gt;,
|               '_ONEOF val_: *uint_val*': &lt;uint64&gt;,
|               '_ONEOF val_: *float_val*': &lt;float&gt;,
|             }
|           }
|           '_ONEOF threshold_: *lower*': {    # type: WaterMarks
|             'high': {    # type: ValueType
|               '_ONEOF val_: *int_val*': &lt;int64&gt;,
|               '_ONEOF val_: *uint_val*': &lt;uint64&gt;,
|               '_ONEOF val_: *float_val*': &lt;float&gt;,
|             }
|             'low': {    # type: ValueType
|               '_ONEOF val_: *int_val*': &lt;int64&gt;,
|               '_ONEOF val_: *uint_val*': &lt;uint64&gt;,
|               '_ONEOF val_: *float_val*': &lt;float&gt;,
|             }
|           }
|         }
|       }
|     ]
|   }
|   '_ONEOF operation_: *reset_to_default*': &lt;bool&gt;,
| }
*Named parameters*:

- return_enum_integer: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the enum values as integer values rather than their labels. Default: _${FALSE}_ or _false_.

- return_defaults: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the default values. Default: _${FALSE}_ or _false_.

- timeout: &lt;int&gt; or &lt;string&gt;; Number of seconds to wait for the response. Default: The timeout value set by keywords _Connection Open_ and _Connection Parameters Set_.
*Return*:
| {    # type: EventsConfigurationResponse
|   'status': &lt; UNDEFINED_STATUS | OK | ERROR &gt;
|   'reason': &lt; UNDEFINED_REASON | UNKNOWN_DEVICE | INTERNAL_ERROR | WRONG_METRIC | WRONG_EVENT | LOGGING_ENDPOINT_ERROR | LOGGING_ENDPOINT_PROTOCOL_ERROR | KAFKA_ENDPOINT_ERROR &gt;
| }</doc>
</kw>
<kw name="Hw Management Service Get Hw Component Info">
<arguments>
<arg>param_dict</arg>
<arg>**kwargs</arg>
</arguments>
<doc>
RPC _GetHWComponentInfo_ from _NativeHWManagementService_.


*Parameters*:

- param_dict:
| {    # type: HWComponentInfoGetRequest
|   'device_uuid': {    # type: Uuid
|     'uuid': &lt;string&gt;,
|   }
|   'component_uuid': {    # type: Uuid
|     'uuid': &lt;string&gt;,
|   }
|   'component_name': &lt;string&gt;,
| }
*Named parameters*:

- return_enum_integer: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the enum values as integer values rather than their labels. Default: _${FALSE}_ or _false_.

- return_defaults: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the default values. Default: _${FALSE}_ or _false_.

- timeout: &lt;int&gt; or &lt;string&gt;; Number of seconds to wait for the response. Default: The timeout value set by keywords _Connection Open_ and _Connection Parameters Set_.
*Return*:
| [    # list of:
|   {    # type: HWComponentInfoGetResponse
|     'status': &lt; UNDEFINED_STATUS | OK | ERROR &gt;
|     'reason': &lt; UNDEFINED_REASON | UNKNOWN_DEVICE | INTERNAL_ERROR | WRONG_METRIC | WRONG_EVENT | LOGGING_ENDPOINT_ERROR | LOGGING_ENDPOINT_PROTOCOL_ERROR | KAFKA_ENDPOINT_ERROR &gt;
|     'component': {    # type: Component
|       'name': &lt;string&gt;,
|       'class': &lt; COMPONENT_TYPE_UNDEFINED | COMPONENT_TYPE_UNKNOWN | COMPONENT_TYPE_CHASSIS | COMPONENT_TYPE_BACKPLANE | COMPONENT_TYPE_CONTAINER | COMPONENT_TYPE_POWER_SUPPLY | COMPONENT_TYPE_FAN | COMPONENT_TYPE_SENSOR | COMPONENT_TYPE_MODULE | COMPONENT_TYPE_PORT | COMPONENT_TYPE_CPU | COMPONENT_TYPE_BATTERY | COMPONENT_TYPE_STORAGE | COMPONENT_TYPE_MEMORY | COMPONENT_TYPE_TRANSCEIVER | COMPONENT_TYPE_GPON_TRANSCEIVER | COMPONENT_TYPE_XGS_PON_TRANSCEIVER &gt;
|       'description': &lt;string&gt;,
|       'parent': &lt;string&gt;,
|       'parent_rel_pos': &lt;int32&gt;,
|       'children': [    # list of:
|         &lt; recursive type: Component &gt;
|       ]
|       'hardware_rev': &lt;string&gt;,
|       'firmware_rev': &lt;string&gt;,
|       'software_rev': &lt;string&gt;,
|       'serial_num': &lt;string&gt;,
|       'mfg_name': &lt;string&gt;,
|       'model_name': &lt;string&gt;,
|       'alias': &lt;string&gt;,
|       'asset_id': &lt;string&gt;,
|       'is_fru': &lt;bool&gt;,
|       'mfg_date': &lt;google.protobuf.Timestamp&gt;,
|       'uri': {    # type: Uri
|         'uri': &lt;string&gt;,
|       }
|       'uuid': {    # type: Uuid
|         'uuid': &lt;string&gt;,
|       }
|       'state': {    # type: ComponentState
|         'state_last_changed': &lt;google.protobuf.Timestamp&gt;,
|         'admin_state': &lt; COMP_ADMIN_STATE_UNDEFINED | COMP_ADMIN_STATE_UNKNOWN | COMP_ADMIN_STATE_LOCKED | COMP_ADMIN_STATE_SHUTTING_DOWN | COMP_ADMIN_STATE_UNLOCKED &gt;
|         'oper_state': &lt; COMP_OPER_STATE_UNDEFINED | COMP_OPER_STATE_UNKNOWN | COMP_OPER_STATE_DISABLED | COMP_OPER_STATE_ENABLED | COMP_OPER_STATE_TESTING &gt;
|         'usage_state': &lt; COMP_USAGE_STATE_UNDEFINED | COMP_USAGE_STATE_UNKNOWN | COMP_USAGE_STATE_IDLE | COMP_USAGE_STATE_ACTIVE | COMP_USAGE_STATE_BUSY &gt;
|         'alarm_state': &lt; COMP_ALARM_STATE_UNDEFINED | COMP_ALARM_STATE_UNKNOWN | COMP_ALARM_STATE_UNDER_REPAIR | COMP_ALARM_STATE_CRITICAL | COMP_ALARM_STATE_MAJOR | COMP_ALARM_STATE_MINOR | COMP_ALARM_STATE_WARNING | COMP_ALARM_STATE_INTERMEDIATE &gt;
|         'standby_state': &lt; COMP_STANDBY_STATE_UNDEFINED | COMP_STANDBY_STATE_UNKNOWN | COMP_STANDBY_STATE_HOT | COMP_STANDBY_STATE_COLD | COMP_STANDBY_STATE_PROVIDING_SERVICE &gt;
|       }
|       'sensor_data': [    # list of:
|         {    # type: ComponentSensorData
|           'value': &lt;int32&gt;,
|           'type': &lt; SENSOR_VALUE_TYPE_UNDEFINED | SENSOR_VALUE_TYPE_OTHER | SENSOR_VALUE_TYPE_UNKNOWN | SENSOR_VALUE_TYPE_VOLTS_AC | SENSOR_VALUE_TYPE_VOLTS_DC | SENSOR_VALUE_TYPE_AMPERES | SENSOR_VALUE_TYPE_WATTS | SENSOR_VALUE_TYPE_HERTZ | SENSOR_VALUE_TYPE_CELSIUS | SENSOR_VALUE_TYPE_PERCENT_RH | SENSOR_VALUE_TYPE_RPM | SENSOR_VALUE_TYPE_CMM | SENSOR_VALUE_TYPE_TRUTH_VALUE &gt;
|           'scale': &lt; SENSOR_VALUE_SCALE_UNDEFINED | SENSOR_VALUE_SCALE_YOCTO | SENSOR_VALUE_SCALE_ZEPTO | SENSOR_VALUE_SCALE_ATTO | SENSOR_VALUE_SCALE_FEMTO | SENSOR_VALUE_SCALE_PICO | SENSOR_VALUE_SCALE_NANO | SENSOR_VALUE_SCALE_MICRO | SENSOR_VALUE_SCALE_MILLI | SENSOR_VALUE_SCALE_UNITS | SENSOR_VALUE_SCALE_KILO | SENSOR_VALUE_SCALE_MEGA | SENSOR_VALUE_SCALE_GIGA | SENSOR_VALUE_SCALE_TERA | SENSOR_VALUE_SCALE_PETA | SENSOR_VALUE_SCALE_EXA | SENSOR_VALUE_SCALE_ZETTA | SENSOR_VALUE_SCALE_YOTTA &gt;
|           'precision': &lt;int32&gt;,
|           'status': &lt; SENSOR_STATUS_UNDEFINED | SENSOR_STATUS_OK | SENSOR_STATUS_UNAVAILABLE | SENSOR_STATUS_NONOPERATIONAL &gt;
|           'units_display': &lt;string&gt;,
|           'timestamp': &lt;google.protobuf.Timestamp&gt;,
|           'value_update_rate': &lt;uint32&gt;,
|           'data_type': &lt;string&gt;,
|         }
|       ]
|     }
|   }
| ]</doc>
</kw>
<kw name="Hw Management Service Get Logging Endpoint">
<arguments>
<arg>param_dict</arg>
<arg>**kwargs</arg>
</arguments>
<doc>
RPC _GetLoggingEndpoint_ from _NativeHWManagementService_.


*Parameters*:

- param_dict:
| {    # type: Uuid
|   'uuid': &lt;string&gt;,
| }
*Named parameters*:

- return_enum_integer: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the enum values as integer values rather than their labels. Default: _${FALSE}_ or _false_.

- return_defaults: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the default values. Default: _${FALSE}_ or _false_.

- timeout: &lt;int&gt; or &lt;string&gt;; Number of seconds to wait for the response. Default: The timeout value set by keywords _Connection Open_ and _Connection Parameters Set_.
*Return*:
| {    # type: GetLoggingEndpointResponse
|   'status': &lt; UNDEFINED_STATUS | OK | ERROR &gt;
|   'reason': &lt; UNDEFINED_REASON | UNKNOWN_DEVICE | INTERNAL_ERROR | WRONG_METRIC | WRONG_EVENT | LOGGING_ENDPOINT_ERROR | LOGGING_ENDPOINT_PROTOCOL_ERROR | KAFKA_ENDPOINT_ERROR &gt;
|   'logging_endpoint': &lt;string&gt;,
|   'logging_protocol': &lt;string&gt;,
| }</doc>
</kw>
<kw name="Hw Management Service Get Managed Devices">
<arguments>
<arg>**kwargs</arg>
</arguments>
<doc>
RPC _GetManagedDevices_ from _NativeHWManagementService_.


*Parameters*:
_none_

*Named parameters*:

- return_enum_integer: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the enum values as integer values rather than their labels. Default: _${FALSE}_ or _false_.

- return_defaults: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the default values. Default: _${FALSE}_ or _false_.

- timeout: &lt;int&gt; or &lt;string&gt;; Number of seconds to wait for the response. Default: The timeout value set by keywords _Connection Open_ and _Connection Parameters Set_.
*Return*:
| {    # type: ManagedDevicesResponse
|   'devices': [    # list of:
|     {    # type: ModifiableComponent
|       'name': &lt;string&gt;,
|       'class': &lt; COMPONENT_TYPE_UNDEFINED | COMPONENT_TYPE_UNKNOWN | COMPONENT_TYPE_CHASSIS | COMPONENT_TYPE_BACKPLANE | COMPONENT_TYPE_CONTAINER | COMPONENT_TYPE_POWER_SUPPLY | COMPONENT_TYPE_FAN | COMPONENT_TYPE_SENSOR | COMPONENT_TYPE_MODULE | COMPONENT_TYPE_PORT | COMPONENT_TYPE_CPU | COMPONENT_TYPE_BATTERY | COMPONENT_TYPE_STORAGE | COMPONENT_TYPE_MEMORY | COMPONENT_TYPE_TRANSCEIVER | COMPONENT_TYPE_GPON_TRANSCEIVER | COMPONENT_TYPE_XGS_PON_TRANSCEIVER &gt;
|       'parent': {    # type: Component
|         'name': &lt;string&gt;,
|         'class': &lt; COMPONENT_TYPE_UNDEFINED | COMPONENT_TYPE_UNKNOWN | COMPONENT_TYPE_CHASSIS | COMPONENT_TYPE_BACKPLANE | COMPONENT_TYPE_CONTAINER | COMPONENT_TYPE_POWER_SUPPLY | COMPONENT_TYPE_FAN | COMPONENT_TYPE_SENSOR | COMPONENT_TYPE_MODULE | COMPONENT_TYPE_PORT | COMPONENT_TYPE_CPU | COMPONENT_TYPE_BATTERY | COMPONENT_TYPE_STORAGE | COMPONENT_TYPE_MEMORY | COMPONENT_TYPE_TRANSCEIVER | COMPONENT_TYPE_GPON_TRANSCEIVER | COMPONENT_TYPE_XGS_PON_TRANSCEIVER &gt;
|         'description': &lt;string&gt;,
|         'parent': &lt;string&gt;,
|         'parent_rel_pos': &lt;int32&gt;,
|         'children': [    # list of:
|           &lt; recursive type: Component &gt;
|         ]
|         'hardware_rev': &lt;string&gt;,
|         'firmware_rev': &lt;string&gt;,
|         'software_rev': &lt;string&gt;,
|         'serial_num': &lt;string&gt;,
|         'mfg_name': &lt;string&gt;,
|         'model_name': &lt;string&gt;,
|         'alias': &lt;string&gt;,
|         'asset_id': &lt;string&gt;,
|         'is_fru': &lt;bool&gt;,
|         'mfg_date': &lt;google.protobuf.Timestamp&gt;,
|         'uri': {    # type: Uri
|           'uri': &lt;string&gt;,
|         }
|         'uuid': {    # type: Uuid
|           'uuid': &lt;string&gt;,
|         }
|         'state': {    # type: ComponentState
|           'state_last_changed': &lt;google.protobuf.Timestamp&gt;,
|           'admin_state': &lt; COMP_ADMIN_STATE_UNDEFINED | COMP_ADMIN_STATE_UNKNOWN | COMP_ADMIN_STATE_LOCKED | COMP_ADMIN_STATE_SHUTTING_DOWN | COMP_ADMIN_STATE_UNLOCKED &gt;
|           'oper_state': &lt; COMP_OPER_STATE_UNDEFINED | COMP_OPER_STATE_UNKNOWN | COMP_OPER_STATE_DISABLED | COMP_OPER_STATE_ENABLED | COMP_OPER_STATE_TESTING &gt;
|           'usage_state': &lt; COMP_USAGE_STATE_UNDEFINED | COMP_USAGE_STATE_UNKNOWN | COMP_USAGE_STATE_IDLE | COMP_USAGE_STATE_ACTIVE | COMP_USAGE_STATE_BUSY &gt;
|           'alarm_state': &lt; COMP_ALARM_STATE_UNDEFINED | COMP_ALARM_STATE_UNKNOWN | COMP_ALARM_STATE_UNDER_REPAIR | COMP_ALARM_STATE_CRITICAL | COMP_ALARM_STATE_MAJOR | COMP_ALARM_STATE_MINOR | COMP_ALARM_STATE_WARNING | COMP_ALARM_STATE_INTERMEDIATE &gt;
|           'standby_state': &lt; COMP_STANDBY_STATE_UNDEFINED | COMP_STANDBY_STATE_UNKNOWN | COMP_STANDBY_STATE_HOT | COMP_STANDBY_STATE_COLD | COMP_STANDBY_STATE_PROVIDING_SERVICE &gt;
|         }
|         'sensor_data': [    # list of:
|           {    # type: ComponentSensorData
|             'value': &lt;int32&gt;,
|             'type': &lt; SENSOR_VALUE_TYPE_UNDEFINED | SENSOR_VALUE_TYPE_OTHER | SENSOR_VALUE_TYPE_UNKNOWN | SENSOR_VALUE_TYPE_VOLTS_AC | SENSOR_VALUE_TYPE_VOLTS_DC | SENSOR_VALUE_TYPE_AMPERES | SENSOR_VALUE_TYPE_WATTS | SENSOR_VALUE_TYPE_HERTZ | SENSOR_VALUE_TYPE_CELSIUS | SENSOR_VALUE_TYPE_PERCENT_RH | SENSOR_VALUE_TYPE_RPM | SENSOR_VALUE_TYPE_CMM | SENSOR_VALUE_TYPE_TRUTH_VALUE &gt;
|             'scale': &lt; SENSOR_VALUE_SCALE_UNDEFINED | SENSOR_VALUE_SCALE_YOCTO | SENSOR_VALUE_SCALE_ZEPTO | SENSOR_VALUE_SCALE_ATTO | SENSOR_VALUE_SCALE_FEMTO | SENSOR_VALUE_SCALE_PICO | SENSOR_VALUE_SCALE_NANO | SENSOR_VALUE_SCALE_MICRO | SENSOR_VALUE_SCALE_MILLI | SENSOR_VALUE_SCALE_UNITS | SENSOR_VALUE_SCALE_KILO | SENSOR_VALUE_SCALE_MEGA | SENSOR_VALUE_SCALE_GIGA | SENSOR_VALUE_SCALE_TERA | SENSOR_VALUE_SCALE_PETA | SENSOR_VALUE_SCALE_EXA | SENSOR_VALUE_SCALE_ZETTA | SENSOR_VALUE_SCALE_YOTTA &gt;
|             'precision': &lt;int32&gt;,
|             'status': &lt; SENSOR_STATUS_UNDEFINED | SENSOR_STATUS_OK | SENSOR_STATUS_UNAVAILABLE | SENSOR_STATUS_NONOPERATIONAL &gt;
|             'units_display': &lt;string&gt;,
|             'timestamp': &lt;google.protobuf.Timestamp&gt;,
|             'value_update_rate': &lt;uint32&gt;,
|             'data_type': &lt;string&gt;,
|           }
|         ]
|       }
|       'parent_rel_pos': &lt;int32&gt;,
|       'alias': &lt;string&gt;,
|       'asset_id': &lt;string&gt;,
|       'uri': {    # type: Uri
|         'uri': &lt;string&gt;,
|       }
|       'admin_state': &lt; COMP_ADMIN_STATE_UNDEFINED | COMP_ADMIN_STATE_UNKNOWN | COMP_ADMIN_STATE_LOCKED | COMP_ADMIN_STATE_SHUTTING_DOWN | COMP_ADMIN_STATE_UNLOCKED &gt;
|     }
|   ]
| }</doc>
</kw>
<kw name="Hw Management Service Get Msg Bus Endpoint">
<arguments>
<arg>**kwargs</arg>
</arguments>
<doc>
RPC _GetMsgBusEndpoint_ from _NativeHWManagementService_.


*Parameters*:
_none_

*Named parameters*:

- return_enum_integer: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the enum values as integer values rather than their labels. Default: _${FALSE}_ or _false_.

- return_defaults: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the default values. Default: _${FALSE}_ or _false_.

- timeout: &lt;int&gt; or &lt;string&gt;; Number of seconds to wait for the response. Default: The timeout value set by keywords _Connection Open_ and _Connection Parameters Set_.
*Return*:
| {    # type: GetMsgBusEndpointResponse
|   'status': &lt; UNDEFINED_STATUS | OK | ERROR &gt;
|   'reason': &lt; UNDEFINED_REASON | UNKNOWN_DEVICE | INTERNAL_ERROR | WRONG_METRIC | WRONG_EVENT | LOGGING_ENDPOINT_ERROR | LOGGING_ENDPOINT_PROTOCOL_ERROR | KAFKA_ENDPOINT_ERROR &gt;
|   'msgbus_endpoint': &lt;string&gt;,
| }</doc>
</kw>
<kw name="Hw Management Service Get Physical Inventory">
<arguments>
<arg>param_dict</arg>
<arg>**kwargs</arg>
</arguments>
<doc>
RPC _GetPhysicalInventory_ from _NativeHWManagementService_.


*Parameters*:

- param_dict:
| {    # type: PhysicalInventoryRequest
|   'device_uuid': {    # type: Uuid
|     'uuid': &lt;string&gt;,
|   }
| }
*Named parameters*:

- return_enum_integer: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the enum values as integer values rather than their labels. Default: _${FALSE}_ or _false_.

- return_defaults: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the default values. Default: _${FALSE}_ or _false_.

- timeout: &lt;int&gt; or &lt;string&gt;; Number of seconds to wait for the response. Default: The timeout value set by keywords _Connection Open_ and _Connection Parameters Set_.
*Return*:
| [    # list of:
|   {    # type: PhysicalInventoryResponse
|     'status': &lt; UNDEFINED_STATUS | OK | ERROR &gt;
|     'reason': &lt; UNDEFINED_REASON | UNKNOWN_DEVICE | INTERNAL_ERROR | WRONG_METRIC | WRONG_EVENT | LOGGING_ENDPOINT_ERROR | LOGGING_ENDPOINT_PROTOCOL_ERROR | KAFKA_ENDPOINT_ERROR &gt;
|     'inventory': {    # type: Hardware
|       'last_change': &lt;google.protobuf.Timestamp&gt;,
|       'root': {    # type: Component
|         'name': &lt;string&gt;,
|         'class': &lt; COMPONENT_TYPE_UNDEFINED | COMPONENT_TYPE_UNKNOWN | COMPONENT_TYPE_CHASSIS | COMPONENT_TYPE_BACKPLANE | COMPONENT_TYPE_CONTAINER | COMPONENT_TYPE_POWER_SUPPLY | COMPONENT_TYPE_FAN | COMPONENT_TYPE_SENSOR | COMPONENT_TYPE_MODULE | COMPONENT_TYPE_PORT | COMPONENT_TYPE_CPU | COMPONENT_TYPE_BATTERY | COMPONENT_TYPE_STORAGE | COMPONENT_TYPE_MEMORY | COMPONENT_TYPE_TRANSCEIVER | COMPONENT_TYPE_GPON_TRANSCEIVER | COMPONENT_TYPE_XGS_PON_TRANSCEIVER &gt;
|         'description': &lt;string&gt;,
|         'parent': &lt;string&gt;,
|         'parent_rel_pos': &lt;int32&gt;,
|         'children': [    # list of:
|           &lt; recursive type: Component &gt;
|         ]
|         'hardware_rev': &lt;string&gt;,
|         'firmware_rev': &lt;string&gt;,
|         'software_rev': &lt;string&gt;,
|         'serial_num': &lt;string&gt;,
|         'mfg_name': &lt;string&gt;,
|         'model_name': &lt;string&gt;,
|         'alias': &lt;string&gt;,
|         'asset_id': &lt;string&gt;,
|         'is_fru': &lt;bool&gt;,
|         'mfg_date': &lt;google.protobuf.Timestamp&gt;,
|         'uri': {    # type: Uri
|           'uri': &lt;string&gt;,
|         }
|         'uuid': {    # type: Uuid
|           'uuid': &lt;string&gt;,
|         }
|         'state': {    # type: ComponentState
|           'state_last_changed': &lt;google.protobuf.Timestamp&gt;,
|           'admin_state': &lt; COMP_ADMIN_STATE_UNDEFINED | COMP_ADMIN_STATE_UNKNOWN | COMP_ADMIN_STATE_LOCKED | COMP_ADMIN_STATE_SHUTTING_DOWN | COMP_ADMIN_STATE_UNLOCKED &gt;
|           'oper_state': &lt; COMP_OPER_STATE_UNDEFINED | COMP_OPER_STATE_UNKNOWN | COMP_OPER_STATE_DISABLED | COMP_OPER_STATE_ENABLED | COMP_OPER_STATE_TESTING &gt;
|           'usage_state': &lt; COMP_USAGE_STATE_UNDEFINED | COMP_USAGE_STATE_UNKNOWN | COMP_USAGE_STATE_IDLE | COMP_USAGE_STATE_ACTIVE | COMP_USAGE_STATE_BUSY &gt;
|           'alarm_state': &lt; COMP_ALARM_STATE_UNDEFINED | COMP_ALARM_STATE_UNKNOWN | COMP_ALARM_STATE_UNDER_REPAIR | COMP_ALARM_STATE_CRITICAL | COMP_ALARM_STATE_MAJOR | COMP_ALARM_STATE_MINOR | COMP_ALARM_STATE_WARNING | COMP_ALARM_STATE_INTERMEDIATE &gt;
|           'standby_state': &lt; COMP_STANDBY_STATE_UNDEFINED | COMP_STANDBY_STATE_UNKNOWN | COMP_STANDBY_STATE_HOT | COMP_STANDBY_STATE_COLD | COMP_STANDBY_STATE_PROVIDING_SERVICE &gt;
|         }
|         'sensor_data': [    # list of:
|           {    # type: ComponentSensorData
|             'value': &lt;int32&gt;,
|             'type': &lt; SENSOR_VALUE_TYPE_UNDEFINED | SENSOR_VALUE_TYPE_OTHER | SENSOR_VALUE_TYPE_UNKNOWN | SENSOR_VALUE_TYPE_VOLTS_AC | SENSOR_VALUE_TYPE_VOLTS_DC | SENSOR_VALUE_TYPE_AMPERES | SENSOR_VALUE_TYPE_WATTS | SENSOR_VALUE_TYPE_HERTZ | SENSOR_VALUE_TYPE_CELSIUS | SENSOR_VALUE_TYPE_PERCENT_RH | SENSOR_VALUE_TYPE_RPM | SENSOR_VALUE_TYPE_CMM | SENSOR_VALUE_TYPE_TRUTH_VALUE &gt;
|             'scale': &lt; SENSOR_VALUE_SCALE_UNDEFINED | SENSOR_VALUE_SCALE_YOCTO | SENSOR_VALUE_SCALE_ZEPTO | SENSOR_VALUE_SCALE_ATTO | SENSOR_VALUE_SCALE_FEMTO | SENSOR_VALUE_SCALE_PICO | SENSOR_VALUE_SCALE_NANO | SENSOR_VALUE_SCALE_MICRO | SENSOR_VALUE_SCALE_MILLI | SENSOR_VALUE_SCALE_UNITS | SENSOR_VALUE_SCALE_KILO | SENSOR_VALUE_SCALE_MEGA | SENSOR_VALUE_SCALE_GIGA | SENSOR_VALUE_SCALE_TERA | SENSOR_VALUE_SCALE_PETA | SENSOR_VALUE_SCALE_EXA | SENSOR_VALUE_SCALE_ZETTA | SENSOR_VALUE_SCALE_YOTTA &gt;
|             'precision': &lt;int32&gt;,
|             'status': &lt; SENSOR_STATUS_UNDEFINED | SENSOR_STATUS_OK | SENSOR_STATUS_UNAVAILABLE | SENSOR_STATUS_NONOPERATIONAL &gt;
|             'units_display': &lt;string&gt;,
|             'timestamp': &lt;google.protobuf.Timestamp&gt;,
|             'value_update_rate': &lt;uint32&gt;,
|             'data_type': &lt;string&gt;,
|           }
|         ]
|       }
|     }
|   }
| ]</doc>
</kw>
<kw name="Hw Management Service Set Hw Component Info">
<arguments>
<arg>param_dict</arg>
<arg>**kwargs</arg>
</arguments>
<doc>
RPC _SetHWComponentInfo_ from _NativeHWManagementService_.


*Parameters*:

- param_dict:
| {    # type: HWComponentInfoSetRequest
|   'device_uuid': {    # type: Uuid
|     'uuid': &lt;string&gt;,
|   }
|   'component_uuid': {    # type: Uuid
|     'uuid': &lt;string&gt;,
|   }
|   'component_name': &lt;string&gt;,
|   'changes': {    # type: ModifiableComponent
|     'name': &lt;string&gt;,
|     'class': &lt; COMPONENT_TYPE_UNDEFINED | COMPONENT_TYPE_UNKNOWN | COMPONENT_TYPE_CHASSIS | COMPONENT_TYPE_BACKPLANE | COMPONENT_TYPE_CONTAINER | COMPONENT_TYPE_POWER_SUPPLY | COMPONENT_TYPE_FAN | COMPONENT_TYPE_SENSOR | COMPONENT_TYPE_MODULE | COMPONENT_TYPE_PORT | COMPONENT_TYPE_CPU | COMPONENT_TYPE_BATTERY | COMPONENT_TYPE_STORAGE | COMPONENT_TYPE_MEMORY | COMPONENT_TYPE_TRANSCEIVER | COMPONENT_TYPE_GPON_TRANSCEIVER | COMPONENT_TYPE_XGS_PON_TRANSCEIVER &gt;
|     'parent': {    # type: Component
|       'name': &lt;string&gt;,
|       'class': &lt; COMPONENT_TYPE_UNDEFINED | COMPONENT_TYPE_UNKNOWN | COMPONENT_TYPE_CHASSIS | COMPONENT_TYPE_BACKPLANE | COMPONENT_TYPE_CONTAINER | COMPONENT_TYPE_POWER_SUPPLY | COMPONENT_TYPE_FAN | COMPONENT_TYPE_SENSOR | COMPONENT_TYPE_MODULE | COMPONENT_TYPE_PORT | COMPONENT_TYPE_CPU | COMPONENT_TYPE_BATTERY | COMPONENT_TYPE_STORAGE | COMPONENT_TYPE_MEMORY | COMPONENT_TYPE_TRANSCEIVER | COMPONENT_TYPE_GPON_TRANSCEIVER | COMPONENT_TYPE_XGS_PON_TRANSCEIVER &gt;
|       'description': &lt;string&gt;,
|       'parent': &lt;string&gt;,
|       'parent_rel_pos': &lt;int32&gt;,
|       'children': [    # list of:
|         &lt; recursive type: Component &gt;
|       ]
|       'hardware_rev': &lt;string&gt;,
|       'firmware_rev': &lt;string&gt;,
|       'software_rev': &lt;string&gt;,
|       'serial_num': &lt;string&gt;,
|       'mfg_name': &lt;string&gt;,
|       'model_name': &lt;string&gt;,
|       'alias': &lt;string&gt;,
|       'asset_id': &lt;string&gt;,
|       'is_fru': &lt;bool&gt;,
|       'mfg_date': &lt;google.protobuf.Timestamp&gt;,
|       'uri': {    # type: Uri
|         'uri': &lt;string&gt;,
|       }
|       'uuid': {    # type: Uuid
|         'uuid': &lt;string&gt;,
|       }
|       'state': {    # type: ComponentState
|         'state_last_changed': &lt;google.protobuf.Timestamp&gt;,
|         'admin_state': &lt; COMP_ADMIN_STATE_UNDEFINED | COMP_ADMIN_STATE_UNKNOWN | COMP_ADMIN_STATE_LOCKED | COMP_ADMIN_STATE_SHUTTING_DOWN | COMP_ADMIN_STATE_UNLOCKED &gt;
|         'oper_state': &lt; COMP_OPER_STATE_UNDEFINED | COMP_OPER_STATE_UNKNOWN | COMP_OPER_STATE_DISABLED | COMP_OPER_STATE_ENABLED | COMP_OPER_STATE_TESTING &gt;
|         'usage_state': &lt; COMP_USAGE_STATE_UNDEFINED | COMP_USAGE_STATE_UNKNOWN | COMP_USAGE_STATE_IDLE | COMP_USAGE_STATE_ACTIVE | COMP_USAGE_STATE_BUSY &gt;
|         'alarm_state': &lt; COMP_ALARM_STATE_UNDEFINED | COMP_ALARM_STATE_UNKNOWN | COMP_ALARM_STATE_UNDER_REPAIR | COMP_ALARM_STATE_CRITICAL | COMP_ALARM_STATE_MAJOR | COMP_ALARM_STATE_MINOR | COMP_ALARM_STATE_WARNING | COMP_ALARM_STATE_INTERMEDIATE &gt;
|         'standby_state': &lt; COMP_STANDBY_STATE_UNDEFINED | COMP_STANDBY_STATE_UNKNOWN | COMP_STANDBY_STATE_HOT | COMP_STANDBY_STATE_COLD | COMP_STANDBY_STATE_PROVIDING_SERVICE &gt;
|       }
|       'sensor_data': [    # list of:
|         {    # type: ComponentSensorData
|           'value': &lt;int32&gt;,
|           'type': &lt; SENSOR_VALUE_TYPE_UNDEFINED | SENSOR_VALUE_TYPE_OTHER | SENSOR_VALUE_TYPE_UNKNOWN | SENSOR_VALUE_TYPE_VOLTS_AC | SENSOR_VALUE_TYPE_VOLTS_DC | SENSOR_VALUE_TYPE_AMPERES | SENSOR_VALUE_TYPE_WATTS | SENSOR_VALUE_TYPE_HERTZ | SENSOR_VALUE_TYPE_CELSIUS | SENSOR_VALUE_TYPE_PERCENT_RH | SENSOR_VALUE_TYPE_RPM | SENSOR_VALUE_TYPE_CMM | SENSOR_VALUE_TYPE_TRUTH_VALUE &gt;
|           'scale': &lt; SENSOR_VALUE_SCALE_UNDEFINED | SENSOR_VALUE_SCALE_YOCTO | SENSOR_VALUE_SCALE_ZEPTO | SENSOR_VALUE_SCALE_ATTO | SENSOR_VALUE_SCALE_FEMTO | SENSOR_VALUE_SCALE_PICO | SENSOR_VALUE_SCALE_NANO | SENSOR_VALUE_SCALE_MICRO | SENSOR_VALUE_SCALE_MILLI | SENSOR_VALUE_SCALE_UNITS | SENSOR_VALUE_SCALE_KILO | SENSOR_VALUE_SCALE_MEGA | SENSOR_VALUE_SCALE_GIGA | SENSOR_VALUE_SCALE_TERA | SENSOR_VALUE_SCALE_PETA | SENSOR_VALUE_SCALE_EXA | SENSOR_VALUE_SCALE_ZETTA | SENSOR_VALUE_SCALE_YOTTA &gt;
|           'precision': &lt;int32&gt;,
|           'status': &lt; SENSOR_STATUS_UNDEFINED | SENSOR_STATUS_OK | SENSOR_STATUS_UNAVAILABLE | SENSOR_STATUS_NONOPERATIONAL &gt;
|           'units_display': &lt;string&gt;,
|           'timestamp': &lt;google.protobuf.Timestamp&gt;,
|           'value_update_rate': &lt;uint32&gt;,
|           'data_type': &lt;string&gt;,
|         }
|       ]
|     }
|     'parent_rel_pos': &lt;int32&gt;,
|     'alias': &lt;string&gt;,
|     'asset_id': &lt;string&gt;,
|     'uri': {    # type: Uri
|       'uri': &lt;string&gt;,
|     }
|     'admin_state': &lt; COMP_ADMIN_STATE_UNDEFINED | COMP_ADMIN_STATE_UNKNOWN | COMP_ADMIN_STATE_LOCKED | COMP_ADMIN_STATE_SHUTTING_DOWN | COMP_ADMIN_STATE_UNLOCKED &gt;
|   }
| }
*Named parameters*:

- return_enum_integer: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the enum values as integer values rather than their labels. Default: _${FALSE}_ or _false_.

- return_defaults: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the default values. Default: _${FALSE}_ or _false_.

- timeout: &lt;int&gt; or &lt;string&gt;; Number of seconds to wait for the response. Default: The timeout value set by keywords _Connection Open_ and _Connection Parameters Set_.
*Return*:
| {    # type: HWComponentInfoSetResponse
|   'status': &lt; UNDEFINED_STATUS | OK | ERROR &gt;
|   'reason': &lt; UNDEFINED_REASON | UNKNOWN_DEVICE | INTERNAL_ERROR | WRONG_METRIC | WRONG_EVENT | LOGGING_ENDPOINT_ERROR | LOGGING_ENDPOINT_PROTOCOL_ERROR | KAFKA_ENDPOINT_ERROR &gt;
| }</doc>
</kw>
<kw name="Hw Management Service Set Logging Endpoint">
<arguments>
<arg>param_dict</arg>
<arg>**kwargs</arg>
</arguments>
<doc>
RPC _SetLoggingEndpoint_ from _NativeHWManagementService_.


*Parameters*:

- param_dict:
| {    # type: SetLoggingEndpointRequest
|   'device_uuid': {    # type: Uuid
|     'uuid': &lt;string&gt;,
|   }
|   'logging_endpoint': &lt;string&gt;,
|   'logging_protocol': &lt;string&gt;,
| }
*Named parameters*:

- return_enum_integer: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the enum values as integer values rather than their labels. Default: _${FALSE}_ or _false_.

- return_defaults: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the default values. Default: _${FALSE}_ or _false_.

- timeout: &lt;int&gt; or &lt;string&gt;; Number of seconds to wait for the response. Default: The timeout value set by keywords _Connection Open_ and _Connection Parameters Set_.
*Return*:
| {    # type: SetRemoteEndpointResponse
|   'status': &lt; UNDEFINED_STATUS | OK | ERROR &gt;
|   'reason': &lt; UNDEFINED_REASON | UNKNOWN_DEVICE | INTERNAL_ERROR | WRONG_METRIC | WRONG_EVENT | LOGGING_ENDPOINT_ERROR | LOGGING_ENDPOINT_PROTOCOL_ERROR | KAFKA_ENDPOINT_ERROR &gt;
| }</doc>
</kw>
<kw name="Hw Management Service Set Msg Bus Endpoint">
<arguments>
<arg>param_dict</arg>
<arg>**kwargs</arg>
</arguments>
<doc>
RPC _SetMsgBusEndpoint_ from _NativeHWManagementService_.


*Parameters*:

- param_dict:
| {    # type: SetMsgBusEndpointRequest
|   'msgbus_endpoint': &lt;string&gt;,
| }
*Named parameters*:

- return_enum_integer: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the enum values as integer values rather than their labels. Default: _${FALSE}_ or _false_.

- return_defaults: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the default values. Default: _${FALSE}_ or _false_.

- timeout: &lt;int&gt; or &lt;string&gt;; Number of seconds to wait for the response. Default: The timeout value set by keywords _Connection Open_ and _Connection Parameters Set_.
*Return*:
| {    # type: SetRemoteEndpointResponse
|   'status': &lt; UNDEFINED_STATUS | OK | ERROR &gt;
|   'reason': &lt; UNDEFINED_REASON | UNKNOWN_DEVICE | INTERNAL_ERROR | WRONG_METRIC | WRONG_EVENT | LOGGING_ENDPOINT_ERROR | LOGGING_ENDPOINT_PROTOCOL_ERROR | KAFKA_ENDPOINT_ERROR &gt;
| }</doc>
</kw>
<kw name="Hw Management Service Start Managing Device">
<arguments>
<arg>param_dict</arg>
<arg>**kwargs</arg>
</arguments>
<doc>
RPC _StartManagingDevice_ from _NativeHWManagementService_.


*Parameters*:

- param_dict:
| {    # type: ModifiableComponent
|   'name': &lt;string&gt;,
|   'class': &lt; COMPONENT_TYPE_UNDEFINED | COMPONENT_TYPE_UNKNOWN | COMPONENT_TYPE_CHASSIS | COMPONENT_TYPE_BACKPLANE | COMPONENT_TYPE_CONTAINER | COMPONENT_TYPE_POWER_SUPPLY | COMPONENT_TYPE_FAN | COMPONENT_TYPE_SENSOR | COMPONENT_TYPE_MODULE | COMPONENT_TYPE_PORT | COMPONENT_TYPE_CPU | COMPONENT_TYPE_BATTERY | COMPONENT_TYPE_STORAGE | COMPONENT_TYPE_MEMORY | COMPONENT_TYPE_TRANSCEIVER | COMPONENT_TYPE_GPON_TRANSCEIVER | COMPONENT_TYPE_XGS_PON_TRANSCEIVER &gt;
|   'parent': {    # type: Component
|     'name': &lt;string&gt;,
|     'class': &lt; COMPONENT_TYPE_UNDEFINED | COMPONENT_TYPE_UNKNOWN | COMPONENT_TYPE_CHASSIS | COMPONENT_TYPE_BACKPLANE | COMPONENT_TYPE_CONTAINER | COMPONENT_TYPE_POWER_SUPPLY | COMPONENT_TYPE_FAN | COMPONENT_TYPE_SENSOR | COMPONENT_TYPE_MODULE | COMPONENT_TYPE_PORT | COMPONENT_TYPE_CPU | COMPONENT_TYPE_BATTERY | COMPONENT_TYPE_STORAGE | COMPONENT_TYPE_MEMORY | COMPONENT_TYPE_TRANSCEIVER | COMPONENT_TYPE_GPON_TRANSCEIVER | COMPONENT_TYPE_XGS_PON_TRANSCEIVER &gt;
|     'description': &lt;string&gt;,
|     'parent': &lt;string&gt;,
|     'parent_rel_pos': &lt;int32&gt;,
|     'children': [    # list of:
|       &lt; recursive type: Component &gt;
|     ]
|     'hardware_rev': &lt;string&gt;,
|     'firmware_rev': &lt;string&gt;,
|     'software_rev': &lt;string&gt;,
|     'serial_num': &lt;string&gt;,
|     'mfg_name': &lt;string&gt;,
|     'model_name': &lt;string&gt;,
|     'alias': &lt;string&gt;,
|     'asset_id': &lt;string&gt;,
|     'is_fru': &lt;bool&gt;,
|     'mfg_date': &lt;google.protobuf.Timestamp&gt;,
|     'uri': {    # type: Uri
|       'uri': &lt;string&gt;,
|     }
|     'uuid': {    # type: Uuid
|       'uuid': &lt;string&gt;,
|     }
|     'state': {    # type: ComponentState
|       'state_last_changed': &lt;google.protobuf.Timestamp&gt;,
|       'admin_state': &lt; COMP_ADMIN_STATE_UNDEFINED | COMP_ADMIN_STATE_UNKNOWN | COMP_ADMIN_STATE_LOCKED | COMP_ADMIN_STATE_SHUTTING_DOWN | COMP_ADMIN_STATE_UNLOCKED &gt;
|       'oper_state': &lt; COMP_OPER_STATE_UNDEFINED | COMP_OPER_STATE_UNKNOWN | COMP_OPER_STATE_DISABLED | COMP_OPER_STATE_ENABLED | COMP_OPER_STATE_TESTING &gt;
|       'usage_state': &lt; COMP_USAGE_STATE_UNDEFINED | COMP_USAGE_STATE_UNKNOWN | COMP_USAGE_STATE_IDLE | COMP_USAGE_STATE_ACTIVE | COMP_USAGE_STATE_BUSY &gt;
|       'alarm_state': &lt; COMP_ALARM_STATE_UNDEFINED | COMP_ALARM_STATE_UNKNOWN | COMP_ALARM_STATE_UNDER_REPAIR | COMP_ALARM_STATE_CRITICAL | COMP_ALARM_STATE_MAJOR | COMP_ALARM_STATE_MINOR | COMP_ALARM_STATE_WARNING | COMP_ALARM_STATE_INTERMEDIATE &gt;
|       'standby_state': &lt; COMP_STANDBY_STATE_UNDEFINED | COMP_STANDBY_STATE_UNKNOWN | COMP_STANDBY_STATE_HOT | COMP_STANDBY_STATE_COLD | COMP_STANDBY_STATE_PROVIDING_SERVICE &gt;
|     }
|     'sensor_data': [    # list of:
|       {    # type: ComponentSensorData
|         'value': &lt;int32&gt;,
|         'type': &lt; SENSOR_VALUE_TYPE_UNDEFINED | SENSOR_VALUE_TYPE_OTHER | SENSOR_VALUE_TYPE_UNKNOWN | SENSOR_VALUE_TYPE_VOLTS_AC | SENSOR_VALUE_TYPE_VOLTS_DC | SENSOR_VALUE_TYPE_AMPERES | SENSOR_VALUE_TYPE_WATTS | SENSOR_VALUE_TYPE_HERTZ | SENSOR_VALUE_TYPE_CELSIUS | SENSOR_VALUE_TYPE_PERCENT_RH | SENSOR_VALUE_TYPE_RPM | SENSOR_VALUE_TYPE_CMM | SENSOR_VALUE_TYPE_TRUTH_VALUE &gt;
|         'scale': &lt; SENSOR_VALUE_SCALE_UNDEFINED | SENSOR_VALUE_SCALE_YOCTO | SENSOR_VALUE_SCALE_ZEPTO | SENSOR_VALUE_SCALE_ATTO | SENSOR_VALUE_SCALE_FEMTO | SENSOR_VALUE_SCALE_PICO | SENSOR_VALUE_SCALE_NANO | SENSOR_VALUE_SCALE_MICRO | SENSOR_VALUE_SCALE_MILLI | SENSOR_VALUE_SCALE_UNITS | SENSOR_VALUE_SCALE_KILO | SENSOR_VALUE_SCALE_MEGA | SENSOR_VALUE_SCALE_GIGA | SENSOR_VALUE_SCALE_TERA | SENSOR_VALUE_SCALE_PETA | SENSOR_VALUE_SCALE_EXA | SENSOR_VALUE_SCALE_ZETTA | SENSOR_VALUE_SCALE_YOTTA &gt;
|         'precision': &lt;int32&gt;,
|         'status': &lt; SENSOR_STATUS_UNDEFINED | SENSOR_STATUS_OK | SENSOR_STATUS_UNAVAILABLE | SENSOR_STATUS_NONOPERATIONAL &gt;
|         'units_display': &lt;string&gt;,
|         'timestamp': &lt;google.protobuf.Timestamp&gt;,
|         'value_update_rate': &lt;uint32&gt;,
|         'data_type': &lt;string&gt;,
|       }
|     ]
|   }
|   'parent_rel_pos': &lt;int32&gt;,
|   'alias': &lt;string&gt;,
|   'asset_id': &lt;string&gt;,
|   'uri': {    # type: Uri
|     'uri': &lt;string&gt;,
|   }
|   'admin_state': &lt; COMP_ADMIN_STATE_UNDEFINED | COMP_ADMIN_STATE_UNKNOWN | COMP_ADMIN_STATE_LOCKED | COMP_ADMIN_STATE_SHUTTING_DOWN | COMP_ADMIN_STATE_UNLOCKED &gt;
| }
*Named parameters*:

- return_enum_integer: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the enum values as integer values rather than their labels. Default: _${FALSE}_ or _false_.

- return_defaults: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the default values. Default: _${FALSE}_ or _false_.

- timeout: &lt;int&gt; or &lt;string&gt;; Number of seconds to wait for the response. Default: The timeout value set by keywords _Connection Open_ and _Connection Parameters Set_.
*Return*:
| [    # list of:
|   {    # type: StartManagingDeviceResponse
|     'status': &lt; UNDEFINED_STATUS | OK | ERROR &gt;
|     'reason': &lt; UNDEFINED_REASON | UNKNOWN_DEVICE | INTERNAL_ERROR | WRONG_METRIC | WRONG_EVENT | LOGGING_ENDPOINT_ERROR | LOGGING_ENDPOINT_PROTOCOL_ERROR | KAFKA_ENDPOINT_ERROR &gt;
|     'device_uuid': {    # type: Uuid
|       'uuid': &lt;string&gt;,
|     }
|   }
| ]</doc>
</kw>
<kw name="Hw Management Service Stop Managing Device">
<arguments>
<arg>param_dict</arg>
<arg>**kwargs</arg>
</arguments>
<doc>
RPC _StopManagingDevice_ from _NativeHWManagementService_.


*Parameters*:

- param_dict:
| {    # type: StopManagingDeviceRequest
|   'name': &lt;string&gt;,
| }
*Named parameters*:

- return_enum_integer: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the enum values as integer values rather than their labels. Default: _${FALSE}_ or _false_.

- return_defaults: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the default values. Default: _${FALSE}_ or _false_.

- timeout: &lt;int&gt; or &lt;string&gt;; Number of seconds to wait for the response. Default: The timeout value set by keywords _Connection Open_ and _Connection Parameters Set_.
*Return*:
| {    # type: StopManagingDeviceResponse
|   'status': &lt; UNDEFINED_STATUS | OK | ERROR &gt;
|   'reason': &lt; UNDEFINED_REASON | UNKNOWN_DEVICE | INTERNAL_ERROR | WRONG_METRIC | WRONG_EVENT | LOGGING_ENDPOINT_ERROR | LOGGING_ENDPOINT_PROTOCOL_ERROR | KAFKA_ENDPOINT_ERROR &gt;
| }</doc>
</kw>
<kw name="Hw Metrics Mgmt Service Get Metric">
<arguments>
<arg>param_dict</arg>
<arg>**kwargs</arg>
</arguments>
<doc>
RPC _GetMetric_ from _NativeMetricsManagementService_.


*Parameters*:

- param_dict:
| {    # type: GetMetricRequest
|   'meta_data': {    # type: MetricMetaData
|     'device_uuid': {    # type: Uuid
|       'uuid': &lt;string&gt;,
|     }
|     'component_uuid': {    # type: Uuid
|       'uuid': &lt;string&gt;,
|     }
|     'component_name': &lt;string&gt;,
|   }
|   'metric_id': &lt; METRIC_NAME_UNDEFINED | METRIC_FAN_SPEED | METRIC_CPU_TEMP | METRIC_CPU_USAGE_PERCENTAGE | METRIC_TRANSCEIVER_TEMP | METRIC_TRANSCEIVER_VOLTAGE | METRIC_TRANSCEIVER_BIAS | METRIC_TRANSCEIVER_RX_POWER | METRIC_TRANSCEIVER_TX_POWER | METRIC_TRANSCEIVER_WAVELENGTH | METRIC_DISK_TEMP | METRIC_DISK_CAPACITY | METRIC_DISK_USAGE | METRIC_DISK_USAGE_PERCENTAGE | METRIC_DISK_READ_WRITE_PERCENTAGE | METRIC_DISK_FAULTY_CELLS_PERCENTAGE | METRIC_RAM_TEMP | METRIC_RAM_CAPACITY | METRIC_RAM_USAGE | METRIC_RAM_USAGE_PERCENTAGE | METRIC_POWER_MAX | METRIC_POWER_USAGE | METRIC_POWER_USAGE_PERCENTAGE | METRIC_INNER_SURROUNDING_TEMP &gt;
| }
*Named parameters*:

- return_enum_integer: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the enum values as integer values rather than their labels. Default: _${FALSE}_ or _false_.

- return_defaults: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the default values. Default: _${FALSE}_ or _false_.

- timeout: &lt;int&gt; or &lt;string&gt;; Number of seconds to wait for the response. Default: The timeout value set by keywords _Connection Open_ and _Connection Parameters Set_.
*Return*:
| {    # type: GetMetricResponse
|   'status': &lt; UNDEFINED_STATUS | OK | ERROR &gt;
|   'reason': &lt; UNDEFINED_REASON | UNKNOWN_DEVICE | INTERNAL_ERROR | WRONG_METRIC | WRONG_EVENT | LOGGING_ENDPOINT_ERROR | LOGGING_ENDPOINT_PROTOCOL_ERROR | KAFKA_ENDPOINT_ERROR &gt;
|   'metric': {    # type: Metric
|     'metric_id': &lt; METRIC_NAME_UNDEFINED | METRIC_FAN_SPEED | METRIC_CPU_TEMP | METRIC_CPU_USAGE_PERCENTAGE | METRIC_TRANSCEIVER_TEMP | METRIC_TRANSCEIVER_VOLTAGE | METRIC_TRANSCEIVER_BIAS | METRIC_TRANSCEIVER_RX_POWER | METRIC_TRANSCEIVER_TX_POWER | METRIC_TRANSCEIVER_WAVELENGTH | METRIC_DISK_TEMP | METRIC_DISK_CAPACITY | METRIC_DISK_USAGE | METRIC_DISK_USAGE_PERCENTAGE | METRIC_DISK_READ_WRITE_PERCENTAGE | METRIC_DISK_FAULTY_CELLS_PERCENTAGE | METRIC_RAM_TEMP | METRIC_RAM_CAPACITY | METRIC_RAM_USAGE | METRIC_RAM_USAGE_PERCENTAGE | METRIC_POWER_MAX | METRIC_POWER_USAGE | METRIC_POWER_USAGE_PERCENTAGE | METRIC_INNER_SURROUNDING_TEMP &gt;
|     'metric_metadata': {    # type: MetricMetaData
|       'device_uuid': {    # type: Uuid
|         'uuid': &lt;string&gt;,
|       }
|       'component_uuid': {    # type: Uuid
|         'uuid': &lt;string&gt;,
|       }
|       'component_name': &lt;string&gt;,
|     }
|     'value': {    # type: ComponentSensorData
|       'value': &lt;int32&gt;,
|       'type': &lt; SENSOR_VALUE_TYPE_UNDEFINED | SENSOR_VALUE_TYPE_OTHER | SENSOR_VALUE_TYPE_UNKNOWN | SENSOR_VALUE_TYPE_VOLTS_AC | SENSOR_VALUE_TYPE_VOLTS_DC | SENSOR_VALUE_TYPE_AMPERES | SENSOR_VALUE_TYPE_WATTS | SENSOR_VALUE_TYPE_HERTZ | SENSOR_VALUE_TYPE_CELSIUS | SENSOR_VALUE_TYPE_PERCENT_RH | SENSOR_VALUE_TYPE_RPM | SENSOR_VALUE_TYPE_CMM | SENSOR_VALUE_TYPE_TRUTH_VALUE &gt;
|       'scale': &lt; SENSOR_VALUE_SCALE_UNDEFINED | SENSOR_VALUE_SCALE_YOCTO | SENSOR_VALUE_SCALE_ZEPTO | SENSOR_VALUE_SCALE_ATTO | SENSOR_VALUE_SCALE_FEMTO | SENSOR_VALUE_SCALE_PICO | SENSOR_VALUE_SCALE_NANO | SENSOR_VALUE_SCALE_MICRO | SENSOR_VALUE_SCALE_MILLI | SENSOR_VALUE_SCALE_UNITS | SENSOR_VALUE_SCALE_KILO | SENSOR_VALUE_SCALE_MEGA | SENSOR_VALUE_SCALE_GIGA | SENSOR_VALUE_SCALE_TERA | SENSOR_VALUE_SCALE_PETA | SENSOR_VALUE_SCALE_EXA | SENSOR_VALUE_SCALE_ZETTA | SENSOR_VALUE_SCALE_YOTTA &gt;
|       'precision': &lt;int32&gt;,
|       'status': &lt; SENSOR_STATUS_UNDEFINED | SENSOR_STATUS_OK | SENSOR_STATUS_UNAVAILABLE | SENSOR_STATUS_NONOPERATIONAL &gt;
|       'units_display': &lt;string&gt;,
|       'timestamp': &lt;google.protobuf.Timestamp&gt;,
|       'value_update_rate': &lt;uint32&gt;,
|       'data_type': &lt;string&gt;,
|     }
|   }
| }</doc>
</kw>
<kw name="Hw Metrics Mgmt Service List Metrics">
<arguments>
<arg>param_dict</arg>
<arg>**kwargs</arg>
</arguments>
<doc>
RPC _ListMetrics_ from _NativeMetricsManagementService_.


*Parameters*:

- param_dict:
| {    # type: HardwareID
|   'uuid': {    # type: Uuid
|     'uuid': &lt;string&gt;,
|   }
| }
*Named parameters*:

- return_enum_integer: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the enum values as integer values rather than their labels. Default: _${FALSE}_ or _false_.

- return_defaults: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the default values. Default: _${FALSE}_ or _false_.

- timeout: &lt;int&gt; or &lt;string&gt;; Number of seconds to wait for the response. Default: The timeout value set by keywords _Connection Open_ and _Connection Parameters Set_.
*Return*:
| {    # type: ListMetricsResponse
|   'status': &lt; UNDEFINED_STATUS | OK | ERROR &gt;
|   'reason': &lt; UNDEFINED_REASON | UNKNOWN_DEVICE | INTERNAL_ERROR | WRONG_METRIC | WRONG_EVENT | LOGGING_ENDPOINT_ERROR | LOGGING_ENDPOINT_PROTOCOL_ERROR | KAFKA_ENDPOINT_ERROR &gt;
|   'metrics': {    # type: MetricsConfig
|     'metrics': [    # list of:
|       {    # type: MetricConfig
|         'metric_id': &lt; METRIC_NAME_UNDEFINED | METRIC_FAN_SPEED | METRIC_CPU_TEMP | METRIC_CPU_USAGE_PERCENTAGE | METRIC_TRANSCEIVER_TEMP | METRIC_TRANSCEIVER_VOLTAGE | METRIC_TRANSCEIVER_BIAS | METRIC_TRANSCEIVER_RX_POWER | METRIC_TRANSCEIVER_TX_POWER | METRIC_TRANSCEIVER_WAVELENGTH | METRIC_DISK_TEMP | METRIC_DISK_CAPACITY | METRIC_DISK_USAGE | METRIC_DISK_USAGE_PERCENTAGE | METRIC_DISK_READ_WRITE_PERCENTAGE | METRIC_DISK_FAULTY_CELLS_PERCENTAGE | METRIC_RAM_TEMP | METRIC_RAM_CAPACITY | METRIC_RAM_USAGE | METRIC_RAM_USAGE_PERCENTAGE | METRIC_POWER_MAX | METRIC_POWER_USAGE | METRIC_POWER_USAGE_PERCENTAGE | METRIC_INNER_SURROUNDING_TEMP &gt;
|         'is_configured': &lt;bool&gt;,
|         'poll_interval': &lt;uint32&gt;,
|       }
|     ]
|   }
| }</doc>
</kw>
<kw name="Hw Metrics Mgmt Service Update Metrics Configuration">
<arguments>
<arg>param_dict</arg>
<arg>**kwargs</arg>
</arguments>
<doc>
RPC _UpdateMetricsConfiguration_ from _NativeMetricsManagementService_.


*Parameters*:

- param_dict: *Note*: Bold dictionary keys are cases of an ONEOF type that is not transmitted in gRPC.

| {    # type: MetricsConfigurationRequest
|   'device_uuid': {    # type: Uuid
|     'uuid': &lt;string&gt;,
|   }
|   '_ONEOF operation_: *changes*': {    # type: MetricsConfig
|     'metrics': [    # list of:
|       {    # type: MetricConfig
|         'metric_id': &lt; METRIC_NAME_UNDEFINED | METRIC_FAN_SPEED | METRIC_CPU_TEMP | METRIC_CPU_USAGE_PERCENTAGE | METRIC_TRANSCEIVER_TEMP | METRIC_TRANSCEIVER_VOLTAGE | METRIC_TRANSCEIVER_BIAS | METRIC_TRANSCEIVER_RX_POWER | METRIC_TRANSCEIVER_TX_POWER | METRIC_TRANSCEIVER_WAVELENGTH | METRIC_DISK_TEMP | METRIC_DISK_CAPACITY | METRIC_DISK_USAGE | METRIC_DISK_USAGE_PERCENTAGE | METRIC_DISK_READ_WRITE_PERCENTAGE | METRIC_DISK_FAULTY_CELLS_PERCENTAGE | METRIC_RAM_TEMP | METRIC_RAM_CAPACITY | METRIC_RAM_USAGE | METRIC_RAM_USAGE_PERCENTAGE | METRIC_POWER_MAX | METRIC_POWER_USAGE | METRIC_POWER_USAGE_PERCENTAGE | METRIC_INNER_SURROUNDING_TEMP &gt;
|         'is_configured': &lt;bool&gt;,
|         'poll_interval': &lt;uint32&gt;,
|       }
|     ]
|   }
|   '_ONEOF operation_: *reset_to_default*': &lt;bool&gt;,
| }
*Named parameters*:

- return_enum_integer: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the enum values as integer values rather than their labels. Default: _${FALSE}_ or _false_.

- return_defaults: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the default values. Default: _${FALSE}_ or _false_.

- timeout: &lt;int&gt; or &lt;string&gt;; Number of seconds to wait for the response. Default: The timeout value set by keywords _Connection Open_ and _Connection Parameters Set_.
*Return*:
| {    # type: MetricsConfigurationResponse
|   'status': &lt; UNDEFINED_STATUS | OK | ERROR &gt;
|   'reason': &lt; UNDEFINED_REASON | UNKNOWN_DEVICE | INTERNAL_ERROR | WRONG_METRIC | WRONG_EVENT | LOGGING_ENDPOINT_ERROR | LOGGING_ENDPOINT_PROTOCOL_ERROR | KAFKA_ENDPOINT_ERROR &gt;
| }</doc>
</kw>
<kw name="Library Version Get">
<arguments>
</arguments>
<doc>
Retrieve the version of the currently running library instance.

*Return*: version string consisting of three dot-separated numbers (x.y.z)</doc>
</kw>
<kw name="Sw Management Service Activate Image">
<arguments>
<arg>param_dict</arg>
<arg>**kwargs</arg>
</arguments>
<doc>
RPC _ActivateImage_ from _NativeSoftwareManagementService_.


*Parameters*:

- param_dict:
| {    # type: HardwareID
|   'uuid': {    # type: Uuid
|     'uuid': &lt;string&gt;,
|   }
| }
*Named parameters*:

- return_enum_integer: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the enum values as integer values rather than their labels. Default: _${FALSE}_ or _false_.

- return_defaults: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the default values. Default: _${FALSE}_ or _false_.

- timeout: &lt;int&gt; or &lt;string&gt;; Number of seconds to wait for the response. Default: The timeout value set by keywords _Connection Open_ and _Connection Parameters Set_.
*Return*:
| [    # list of:
|   {    # type: ImageStatus
|     'status': &lt; UNDEFINED_STATUS | OK | ERROR &gt;
|     'reason': &lt; UNDEFINED_REASON | ERROR_IN_REQUEST | INTERNAL_ERROR | DEVICE_IN_WRONG_STATE | INVALID_IMAGE | WRONG_IMAGE_CHECKSUM &gt;
|     'state': &lt; UNDEFINED_STATE | COPYING_IMAGE | INSTALLING_IMAGE | COMMITTING_IMAGE | REBOOTING_DEVICE | UPGRADE_COMPLETE | UPGRADE_FAILED | ACTIVATION_COMPLETE | ACTIVATION_FAILED &gt;
|     'description': &lt;string&gt;,
|   }
| ]</doc>
</kw>
<kw name="Sw Management Service Download Image">
<arguments>
<arg>param_dict</arg>
<arg>**kwargs</arg>
</arguments>
<doc>
RPC _DownloadImage_ from _NativeSoftwareManagementService_.


*Parameters*:

- param_dict:
| {    # type: DownloadImageRequest
|   'device_uuid': {    # type: Uuid
|     'uuid': &lt;string&gt;,
|   }
|   'image_info': {    # type: ImageInformation
|     'image': {    # type: ImageVersion
|       'image_name': &lt;string&gt;,
|       'version': &lt;string&gt;,
|     }
|     'image_install_script': &lt;string&gt;,
|     'image_url': &lt;string&gt;,
|     'sha256sum': &lt;string&gt;,
|   }
| }
*Named parameters*:

- return_enum_integer: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the enum values as integer values rather than their labels. Default: _${FALSE}_ or _false_.

- return_defaults: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the default values. Default: _${FALSE}_ or _false_.

- timeout: &lt;int&gt; or &lt;string&gt;; Number of seconds to wait for the response. Default: The timeout value set by keywords _Connection Open_ and _Connection Parameters Set_.
*Return*:
| [    # list of:
|   {    # type: ImageStatus
|     'status': &lt; UNDEFINED_STATUS | OK | ERROR &gt;
|     'reason': &lt; UNDEFINED_REASON | ERROR_IN_REQUEST | INTERNAL_ERROR | DEVICE_IN_WRONG_STATE | INVALID_IMAGE | WRONG_IMAGE_CHECKSUM &gt;
|     'state': &lt; UNDEFINED_STATE | COPYING_IMAGE | INSTALLING_IMAGE | COMMITTING_IMAGE | REBOOTING_DEVICE | UPGRADE_COMPLETE | UPGRADE_FAILED | ACTIVATION_COMPLETE | ACTIVATION_FAILED &gt;
|     'description': &lt;string&gt;,
|   }
| ]</doc>
</kw>
<kw name="Sw Management Service Get Software Version">
<arguments>
<arg>param_dict</arg>
<arg>**kwargs</arg>
</arguments>
<doc>
RPC _GetSoftwareVersion_ from _NativeSoftwareManagementService_.


*Parameters*:

- param_dict:
| {    # type: HardwareID
|   'uuid': {    # type: Uuid
|     'uuid': &lt;string&gt;,
|   }
| }
*Named parameters*:

- return_enum_integer: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the enum values as integer values rather than their labels. Default: _${FALSE}_ or _false_.

- return_defaults: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the default values. Default: _${FALSE}_ or _false_.

- timeout: &lt;int&gt; or &lt;string&gt;; Number of seconds to wait for the response. Default: The timeout value set by keywords _Connection Open_ and _Connection Parameters Set_.
*Return*:
| {    # type: GetSoftwareVersionInformationResponse
|   'status': &lt; UNDEFINED_STATUS | OK | ERROR &gt;
|   'reason': &lt; UNDEFINED_REASON | UNKNOWN_DEVICE | INTERNAL_ERROR | WRONG_METRIC | WRONG_EVENT | LOGGING_ENDPOINT_ERROR | LOGGING_ENDPOINT_PROTOCOL_ERROR | KAFKA_ENDPOINT_ERROR &gt;
|   'info': {    # type: SoftwareVersionInformation
|     'active_versions': [    # list of:
|       {    # type: ImageVersion
|         'image_name': &lt;string&gt;,
|         'version': &lt;string&gt;,
|       }
|     ]
|     'standby_versions': [    # list of:
|       {    # type: ImageVersion
|         'image_name': &lt;string&gt;,
|         'version': &lt;string&gt;,
|       }
|     ]
|   }
| }</doc>
</kw>
<kw name="Sw Management Service Revert To Standby Image">
<arguments>
<arg>param_dict</arg>
<arg>**kwargs</arg>
</arguments>
<doc>
RPC _RevertToStandbyImage_ from _NativeSoftwareManagementService_.


*Parameters*:

- param_dict:
| {    # type: HardwareID
|   'uuid': {    # type: Uuid
|     'uuid': &lt;string&gt;,
|   }
| }
*Named parameters*:

- return_enum_integer: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the enum values as integer values rather than their labels. Default: _${FALSE}_ or _false_.

- return_defaults: &lt;bool&gt; or &lt;string&gt;; Whether or not to return the default values. Default: _${FALSE}_ or _false_.

- timeout: &lt;int&gt; or &lt;string&gt;; Number of seconds to wait for the response. Default: The timeout value set by keywords _Connection Open_ and _Connection Parameters Set_.
*Return*:
| [    # list of:
|   {    # type: ImageStatus
|     'status': &lt; UNDEFINED_STATUS | OK | ERROR &gt;
|     'reason': &lt; UNDEFINED_REASON | ERROR_IN_REQUEST | INTERNAL_ERROR | DEVICE_IN_WRONG_STATE | INVALID_IMAGE | WRONG_IMAGE_CHECKSUM &gt;
|     'state': &lt; UNDEFINED_STATE | COPYING_IMAGE | INSTALLING_IMAGE | COMMITTING_IMAGE | REBOOTING_DEVICE | UPGRADE_COMPLETE | UPGRADE_FAILED | ACTIVATION_COMPLETE | ACTIVATION_FAILED &gt;
|     'description': &lt;string&gt;,
|   }
| ]</doc>
</kw>
</keywordspec>
