"""Initial

Revision ID: 23dd1cc88eb2
Revises:
Create Date: 2021-03-01 20:36:50.564862

"""
import snapflow
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "23dd1cc88eb2"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "_snapflow_data_block_metadata",
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("id", sa.String(length=128), nullable=False),
        sa.Column("inferred_schema_key", sa.String(length=128), nullable=True),
        sa.Column("nominal_schema_key", sa.String(length=128), nullable=True),
        sa.Column("realized_schema_key", sa.String(length=128), nullable=False),
        sa.Column("record_count", sa.Integer(), nullable=True),
        sa.Column("created_by_node_key", sa.String(length=128), nullable=True),
        sa.Column("deleted", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "_snapflow_generated_schema",
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("key", sa.String(length=128), nullable=False),
        sa.Column("definition", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("key"),
    )
    op.create_table(
        "_snapflow_graph_metadata",
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("hash", sa.String(length=128), nullable=False),
        sa.Column("adjacency", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("hash"),
    )
    op.create_table(
        "_snapflow_node_state",
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("node_key", sa.String(length=128), nullable=False),
        sa.Column("state", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("node_key"),
    )
    op.create_table(
        "_snapflow_snap_log",
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("graph_id", sa.String(length=128), nullable=False),
        sa.Column("node_key", sa.String(length=128), nullable=False),
        sa.Column("node_start_state", sa.JSON(), nullable=True),
        sa.Column("node_end_state", sa.JSON(), nullable=True),
        sa.Column("snap_key", sa.String(length=128), nullable=False),
        sa.Column("snap_params", sa.JSON(), nullable=True),
        sa.Column("runtime_url", sa.String(length=128), nullable=False),
        sa.Column("queued_at", sa.DateTime(), nullable=True),
        sa.Column("started_at", sa.DateTime(), nullable=True),
        sa.Column("completed_at", sa.DateTime(), nullable=True),
        sa.Column("error", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["graph_id"],
            ["_snapflow_graph_metadata.hash"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "_snapflow_stored_data_block_metadata",
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("id", sa.String(length=128), nullable=False),
        sa.Column("name", sa.String(length=128), nullable=True),
        sa.Column("data_block_id", sa.String(length=128), nullable=False),
        sa.Column("storage_url", sa.String(length=128), nullable=False),
        sa.Column(
            "data_format",
            snapflow.utils.registry.ClassBasedEnumSqlalchemyType(length=128),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["data_block_id"],
            ["_snapflow_data_block_metadata.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "_snapflow_alias",
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("alias", sa.String(length=128), nullable=False),
        sa.Column("data_block_id", sa.String(length=128), nullable=False),
        sa.Column("stored_data_block_id", sa.String(length=128), nullable=False),
        sa.ForeignKeyConstraint(
            ["data_block_id"],
            ["_snapflow_data_block_metadata.id"],
        ),
        sa.ForeignKeyConstraint(
            ["stored_data_block_id"],
            ["_snapflow_stored_data_block_metadata.id"],
        ),
        sa.PrimaryKeyConstraint("alias"),
    )
    op.create_table(
        "_snapflow_data_block_log",
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("snap_log_id", sa.Integer(), nullable=False),
        sa.Column("data_block_id", sa.String(length=128), nullable=False),
        sa.Column(
            "direction",
            sa.Enum("INPUT", "OUTPUT", name="direction", native_enum=False),
            nullable=False,
        ),
        sa.Column("processed_at", sa.DateTime(), nullable=False),
        sa.Column("invalidated", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_block_id"],
            ["_snapflow_data_block_metadata.id"],
        ),
        sa.ForeignKeyConstraint(
            ["snap_log_id"],
            ["_snapflow_snap_log.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("_snapflow_data_block_log")
    op.drop_table("_snapflow_alias")
    op.drop_table("_snapflow_stored_data_block_metadata")
    op.drop_table("_snapflow_snap_log")
    op.drop_table("_snapflow_node_state")
    op.drop_table("_snapflow_graph_metadata")
    op.drop_table("_snapflow_generated_schema")
    op.drop_table("_snapflow_data_block_metadata")
    # ### end Alembic commands ###
