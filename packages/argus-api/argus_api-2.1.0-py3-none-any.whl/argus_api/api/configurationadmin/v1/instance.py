"""Autogenerated API"""
from argus_api import session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(
    extending=("configurationadmin", "v1", "instance"),
    module=argus_cli_module
)
def add_comment_1(
    id: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Add a comment to configuration instance (INTERNAL)
    
    :param int id: ID of instance to comment
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/configurationadmin/v1/instance/{id}/comment".format(id=id)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        data=body or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("configurationadmin", "v1", "instance"),
    module=argus_cli_module
)
def create_3(
    templateID: int = None,
    hostID: int = None,
    parentID: int = None,
    information: str = None,
    properties: dict = None,
    identifiers: dict = None,
    codeProfile: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Create new configuration instance (INTERNAL)
    
    :param int templateID: 
    :param int hostID: 
    :param int parentID: 
    :param str information: [\s\w\{\}\$\-\(\)\.\[\]"\'_/\\,\*\+\#:@!?;=]*
    :param dict properties: 
    :param dict identifiers: 
    :param str codeProfile: [a-zA-Z0-9_\-\.]*
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/configurationadmin/v1/instance".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send templateID if the argument was provided, dont send null values
    if templateID is not None:
        body.update({"templateID": templateID})
    # Only send hostID if the argument was provided, dont send null values
    if hostID is not None:
        body.update({"hostID": hostID})
    # Only send parentID if the argument was provided, dont send null values
    if parentID is not None:
        body.update({"parentID": parentID})
    # Only send information if the argument was provided, dont send null values
    if information is not None:
        body.update({"information": information})
    # Only send properties if the argument was provided, dont send null values
    if properties is not None:
        body.update({"properties": properties})
    # Only send identifiers if the argument was provided, dont send null values
    if identifiers is not None:
        body.update({"identifiers": identifiers})
    # Only send codeProfile if the argument was provided, dont send null values
    if codeProfile is not None:
        body.update({"codeProfile": codeProfile})

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("configurationadmin", "v1", "instance"),
    module=argus_cli_module
)
def delete_2(
    id: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Delete configuration instance (INTERNAL)
    
    :param int id: ID of instance to delete
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/configurationadmin/v1/instance/{id}".format(id=id)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}

    log.debug("DELETE %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("configurationadmin", "v1", "instance"),
    module=argus_cli_module
)
def disable_monitoring_1(
    id: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Disable monitoring of configuration instance (INTERNAL)
    
    :param int id: ID of instance to disable monitoring on
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/configurationadmin/v1/instance/{id}/monitoring/disable".format(id=id)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        data=body or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("configurationadmin", "v1", "instance"),
    module=argus_cli_module
)
def enable_monitoring_1(
    id: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Enable monitoring of configuration instance (INTERNAL)
    
    :param int id: ID of instance to enable monitoring on
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/configurationadmin/v1/instance/{id}/monitoring/enable".format(id=id)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("configurationadmin", "v1", "instance"),
    module=argus_cli_module
)
def list_3(
    offset: int = None,
    search: str = None,
    includeComments: bool = None,
    includeDeleted: bool = None,
    templateID: int = None,
    hostID: int = None,
    limit: int = 25,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """List configuration instances (INTERNAL)
    
    :param int offset: Offset results
    :param str search: Limit results to instances matching this searchstring
    :param bool includeComments: Include comments in output
    :param bool includeDeleted: Include deleted instances
    :param list templateID: Limit results to instances with these templates
    :param list hostID: Limit results to instances on these hosts
    :param int limit: Limit results
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/configurationadmin/v1/instance".format(limit=limit,
        offset=offset,
        search=search,
        includeComments=includeComments,
        includeDeleted=includeDeleted,
        templateID=templateID,
        hostID=hostID)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send search if the argument was provided, dont send null values
    if search is not None:
        query_parameters.update({"search": search})
    # Only send includeComments if the argument was provided, dont send null values
    if includeComments is not None:
        query_parameters.update({"includeComments": includeComments})
    # Only send includeDeleted if the argument was provided, dont send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})
    # Only send templateID if the argument was provided, dont send null values
    if templateID is not None:
        query_parameters.update({"templateID": templateID})
    # Only send hostID if the argument was provided, dont send null values
    if hostID is not None:
        query_parameters.update({"hostID": hostID})

    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("configurationadmin", "v1", "instance"),
    module=argus_cli_module
)
def revisions(
    id: int,
    offset: int = None,
    limit: int = 25,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """List configuration instance revisions (INTERNAL)
    
    :param int id: ID of instance to fetch revisions for
    :param int offset: Offset results
    :param int limit: Limit results
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/configurationadmin/v1/instance/{id}/revisions".format(limit=limit,
        id=id,
        offset=offset)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("configurationadmin", "v1", "instance"),
    module=argus_cli_module
)
def schedule_monitoring_1(
    id: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Schedule downtime for configuration instance (INTERNAL)
    
    :param int id: ID of instance to schedule downtime for
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/configurationadmin/v1/instance/{id}/monitoring/schedule".format(id=id)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        data=body or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("configurationadmin", "v1", "instance"),
    module=argus_cli_module
)
def search_3(
    templateID: int = None,
    hostID: int = None,
    instanceID: int = None,
    limit: int = None,
    offset: int = None,
    includeDeleted: bool = None,
    includeFlags: int = None,
    excludeFlags: int = None,
    subCriteria: dict = None,
    exclude: bool = None,
    required: bool = None,
    includeComments: bool = None,
    template: str = None,
    instance: int = None,
    host: str = None,
    parentID: int = None,
    codeProfile: str = None,
    keywords: str = None,
    masterID: int = None,
    codeProfileOverride: bool = None,
    inDowntime: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Search configuration instances (INTERNAL)
    
    :param list templateID: 
    :param list hostID: 
    :param list instanceID: 
    :param int limit: Set this value to set max number of results. By default, no restriction on result set size. 
    :param int offset: Set this value to skip the first (offset) objects. By default, return result from first object. 
    :param bool includeDeleted: Set to true to include deleted objects. By default, exclude deleted objects. 
    :param int includeFlags: Only include objects which have includeFlags set. 
    :param int excludeFlags: Exclude objects which have excludeFlags set. 
    :param list subCriteria: Set additional criterias which are applied using a logical OR. 
    :param bool exclude: Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. 
    :param bool required: Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). 
    :param bool includeComments: If true, include comments in output. 
    :param list template: If set, filter instances by template ID or shortname. 
    :param list instance: If set, filter instances by ID. 
    :param list host: If set, filter instances by host ID or hostname. 
    :param list parentID: If set, filter instances by parent instance ID. 
    :param list codeProfile: If set, filter instances by active code profile. 
    :param list keywords: If set, filter instances matching these keywords. 
    :param int masterID: If set, only include instance revisions of given master. If not set, revisions are excluded. 
    :param bool codeProfileOverride: If true, only return instances with overridden code profile. If false, exclude. If not set, do not filter. 
    :param bool inDowntime: If true, only return instances which are in scheduled downtime, or whose host is in downtime. If false, exclude. If not set, do not filter. 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/configurationadmin/v1/instance/search".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send templateID if the argument was provided, dont send null values
    if templateID is not None:
        body.update({"templateID": templateID})
    # Only send hostID if the argument was provided, dont send null values
    if hostID is not None:
        body.update({"hostID": hostID})
    # Only send instanceID if the argument was provided, dont send null values
    if instanceID is not None:
        body.update({"instanceID": instanceID})
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, dont send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send includeFlags if the argument was provided, dont send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, dont send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send subCriteria if the argument was provided, dont send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send exclude if the argument was provided, dont send null values
    if exclude is not None:
        body.update({"exclude": exclude})
    # Only send required if the argument was provided, dont send null values
    if required is not None:
        body.update({"required": required})
    # Only send includeComments if the argument was provided, dont send null values
    if includeComments is not None:
        body.update({"includeComments": includeComments})
    # Only send template if the argument was provided, dont send null values
    if template is not None:
        body.update({"template": template})
    # Only send instance if the argument was provided, dont send null values
    if instance is not None:
        body.update({"instance": instance})
    # Only send host if the argument was provided, dont send null values
    if host is not None:
        body.update({"host": host})
    # Only send parentID if the argument was provided, dont send null values
    if parentID is not None:
        body.update({"parentID": parentID})
    # Only send codeProfile if the argument was provided, dont send null values
    if codeProfile is not None:
        body.update({"codeProfile": codeProfile})
    # Only send keywords if the argument was provided, dont send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send masterID if the argument was provided, dont send null values
    if masterID is not None:
        body.update({"masterID": masterID})
    # Only send codeProfileOverride if the argument was provided, dont send null values
    if codeProfileOverride is not None:
        body.update({"codeProfileOverride": codeProfileOverride})
    # Only send inDowntime if the argument was provided, dont send null values
    if inDowntime is not None:
        body.update({"inDowntime": inDowntime})

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("configurationadmin", "v1", "instance"),
    module=argus_cli_module
)
def update_2(
    id: int,
    configurationID: int = None,
    hostID: int = None,
    parentID: int = None,
    information: str = None,
    properties: dict = None,
    identifiers: dict = None,
    codeProfile: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Update configuration instance (INTERNAL)
    
    :param int id: ID of instance to update
    :param int configurationID: 
    :param int hostID: If set, assign instance to given configuration host. 
    :param int parentID: If set, set parent instance for this instance (on same configuration host). 
    :param str information: If set, change information field for instance.  => [\s\w\{\}\$\-\(\)\.\[\]"\'_/\\,\*\+\#:@!?;=]*
    :param dict properties: If set, set these properties for instance. Property with null value will delete existing property. 
    :param dict identifiers: If set, set these identifiers for instance. Identifier with null value will delete existing identifier. 
    :param str codeProfile: Name of code profile to use. If null, do not change. If blank, reset to template profile.  => [a-zA-Z0-9_\-\.]*
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/configurationadmin/v1/instance/{id}".format(id=id)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send id if the argument was provided, dont send null values
    if id is not None:
        body.update({"id": id})
    # Only send configurationID if the argument was provided, dont send null values
    if configurationID is not None:
        body.update({"configurationID": configurationID})
    # Only send hostID if the argument was provided, dont send null values
    if hostID is not None:
        body.update({"hostID": hostID})
    # Only send parentID if the argument was provided, dont send null values
    if parentID is not None:
        body.update({"parentID": parentID})
    # Only send information if the argument was provided, dont send null values
    if information is not None:
        body.update({"information": information})
    # Only send properties if the argument was provided, dont send null values
    if properties is not None:
        body.update({"properties": properties})
    # Only send identifiers if the argument was provided, dont send null values
    if identifiers is not None:
        body.update({"identifiers": identifiers})
    # Only send codeProfile if the argument was provided, dont send null values
    if codeProfile is not None:
        body.update({"codeProfile": codeProfile})

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("configurationadmin", "v1", "instance"),
    module=argus_cli_module
)
def view_1(
    id: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Fetch configuration instance (INTERNAL)
    
    :param int id: ID of instance to fetch
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/configurationadmin/v1/instance/{id}".format(id=id)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}

    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()

