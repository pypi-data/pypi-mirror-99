"""Autogenerated API"""
from argus_api import session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module
from requests import Response

log = logging.getLogger(__name__)


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def add_document_by_path_raw(
    parentFolderPath: str,
    documentName: str,
    customer: str = None,
    accessMode: str = "roleBased",
    createMissing: bool = None,
    overwriteExisting: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Create a new document with the specified name into the parent folder
    
    :param str parentFolderPath: Path from customer root to the parent folder (if not specified, add the folder in the root folder)
    :param str documentName: Document name
    :param str customer: Customer space to fetch from (default is current users customer
    :param str accessMode: Access mode to set on new document
    :param bool createMissing: If true, create any missing folders before adding document
    :param bool overwriteExisting: If true, overwrite existing document with the same name
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ParentFolderNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/path{parentFolderPath}/{documentName}".format(accessMode=accessMode,
        parentFolderPath=parentFolderPath,
        documentName=documentName,
        customer=customer,
        createMissing=createMissing,
        overwriteExisting=overwriteExisting)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send accessMode if the argument was provided, dont send null values
    if accessMode is not None:
        query_parameters.update({"accessMode": accessMode})
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({"customer": customer})
    # Only send createMissing if the argument was provided, dont send null values
    if createMissing is not None:
        query_parameters.update({"createMissing": createMissing})
    # Only send overwriteExisting if the argument was provided, dont send null values
    if overwriteExisting is not None:
        query_parameters.update({"overwriteExisting": overwriteExisting})

    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def add_document_watcher(
    documentID: int,
    subjectDomain: str = None,
    subject: str = None,
    negated: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Add watcher to specified document. Requires write access to the document. (DEV)
    
    :param int documentID: ID of document
    :param str subjectDomain: Domain to resolve subject shortname in. Defaults to current users domain. 
    :param str subject: ID or shortname of subject to add as watcher. 
    :param bool negated: If true, register an explicitly negated watcher entry. Default is to add a new active watcher. (default false)
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/watchers".format(documentID=documentID)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send subjectDomain if the argument was provided, dont send null values
    if subjectDomain is not None:
        body.update({"subjectDomain": subjectDomain})
    # Only send subject if the argument was provided, dont send null values
    if subject is not None:
        body.update({"subject": subject})
    # Only send negated if the argument was provided, dont send null values
    if negated is not None:
        body.update({"negated": negated})

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def add_document_watcher_by_path(
    parentFolderPath: str,
    documentName: str,
    customer: str = None,
    subjectDomain: str = None,
    subject: str = None,
    negated: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Add watcher to specified document. Requires write access to the document.
    
    :param str parentFolderPath: Path to parent folder (if not specified, select document from root folder)
    :param str documentName: Document name
    :param str customer: Customer space to lookup folder in (default is current users customer)
    :param str subjectDomain: Domain to resolve subject shortname in. Defaults to current users domain. 
    :param str subject: ID or shortname of subject to add as watcher. 
    :param bool negated: If true, register an explicitly negated watcher entry. Default is to add a new active watcher. (default false)
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/path/watchers{parentFolderPath}/{documentName}".format(parentFolderPath=parentFolderPath,
        documentName=documentName,
        customer=customer)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send subjectDomain if the argument was provided, dont send null values
    if subjectDomain is not None:
        body.update({"subjectDomain": subjectDomain})
    # Only send subject if the argument was provided, dont send null values
    if subject is not None:
        body.update({"subject": subject})
    # Only send negated if the argument was provided, dont send null values
    if negated is not None:
        body.update({"negated": negated})

    query_parameters = {}
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def commit_document(
    documentID: int,
    name: str = None,
    mimeType: str = None,
    data: str = None,
    notificationOptions: dict = None,
    text: str = None,
    lockRequestTime: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Commit specified document (PUBLIC)
    
    :param int documentID: ID of document to commit
    :param str name: If set change document name  => Sanitize by regex \A[^\\\/:*"?<>|]{1,254}\z
    :param str mimeType: If set change document MIME type 
    :param str data: Base64 encoded document content formatted according to the given MIME type. If set change document content 
    :param dict notificationOptions: 
    :param str text: Plain text document content. If set change document content 
    :param int lockRequestTime: Specify how long the document should be locked (default 0)
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises DocumentLockedException: on 423
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/commit".format(documentID=documentID)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send name if the argument was provided, dont send null values
    if name is not None:
        body.update({"name": name})
    # Only send mimeType if the argument was provided, dont send null values
    if mimeType is not None:
        body.update({"mimeType": mimeType})
    # Only send data if the argument was provided, dont send null values
    if data is not None:
        body.update({"data": data})
    # Only send lockRequestTime if the argument was provided, dont send null values
    if lockRequestTime is not None:
        body.update({"lockRequestTime": lockRequestTime})
    # Only send notificationOptions if the argument was provided, dont send null values
    if notificationOptions is not None:
        body.update({"notificationOptions": notificationOptions})
    # Only send text if the argument was provided, dont send null values
    if text is not None:
        body.update({"text": text})

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def delete_document(
    documentID: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Discard specified document (PUBLIC)
    
    :param int documentID: ID of document to discard
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises DocumentLockedException: on 423
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}".format(documentID=documentID)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}

    log.debug("DELETE %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def delete_document_by_path(
    parentFolderPath: str,
    documentName: str,
    customer: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Discard specified document
    
    :param str parentFolderPath: Path from customer root to the parent folder (if not specified, fetch document from root folder)
    :param str documentName: Document name
    :param str customer: Customer space to fetch from (default is current users customer
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises DocumentLockedException: on 423
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/path{parentFolderPath}/{documentName}".format(parentFolderPath=parentFolderPath,
        documentName=documentName,
        customer=customer)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug("DELETE %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def delete_document_watcher(
    documentID: int,
    entryID: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Delete watcher entry on document. Requires write access to document. (DEV)
    
    :param int documentID: ID of document
    :param str entryID: ID of watcher entry
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/watchers/{entryID}".format(documentID=documentID,
        entryID=entryID)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}

    log.debug("DELETE %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def delete_document_watcher_by_path(
    parentFolderPath: str,
    documentName: str,
    entryID: str,
    customer: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Delete watcher entry on document. Requires write access to document.
    
    :param str parentFolderPath: Path to parent folder (if not specified, select document from root folder)
    :param str documentName: Document name
    :param str entryID: ID of watcher entry
    :param str customer: Customer space to lookup folder in (default is current users customer)
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/path/watchers{parentFolderPath}/{documentName}/{entryID}".format(parentFolderPath=parentFolderPath,
        documentName=documentName,
        customer=customer,
        entryID=entryID)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug("DELETE %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def get_current_user_document_watch_status(
    documentID: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Get current user watcher status for document (DEV)
    
    :param int documentID: ID of document
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/watch".format(documentID=documentID)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}

    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def get_current_user_document_watch_status_by_path(
    parentFolderPath: str,
    documentName: str,
    customer: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Get current user watcher status for document
    
    :param str parentFolderPath: Path to parent folder (if not specified, select document from root folder)
    :param str documentName: Document name
    :param str customer: Customer space to lookup folder in (default is current users customer)
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/path/watch{parentFolderPath}/{documentName}".format(parentFolderPath=parentFolderPath,
        documentName=documentName,
        customer=customer)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def get_document_content_by_id(
    documentID: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> Response:
    """Download content as a file for specified document (PUBLIC)
    
    :param int documentID: ID of document to fetch
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns: requests.Response object
    
    """

    route = "/documents/v1/document/{documentID}/content".format(documentID=documentID)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
        'content': None
    }

    body = body or {}

    query_parameters = {}

    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response
    


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def get_document_content_by_path(
    parentFolderPath: str,
    documentName: str,
    customer: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Download content as a file for specified document
    
    :param str parentFolderPath: Path from customer root to the parent folder (if not specified, fetch document from root folder)
    :param str documentName: Document name
    :param str customer: Customer space to fetch from (default is current users customer
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/path/content{parentFolderPath}/{documentName}".format(parentFolderPath=parentFolderPath,
        documentName=documentName,
        customer=customer)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def get_document_revisions(
    documentID: int,
    limit: int = 25,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Fetch specified document revisions (PUBLIC)
    
    :param int documentID: ID of document to fetch revisions
    :param int limit: Maximum number of returned results
    :param int offset: Skip a number of results
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/versions".format(limit=limit,
        documentID=documentID,
        offset=offset)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def get_meta_info_by_id(
    documentID: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Fetch specified document excluding content (PUBLIC)
    
    :param int documentID: ID of document to fetch
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}".format(documentID=documentID)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}

    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def get_meta_info_by_path(
    parentFolderPath: str,
    documentName: str,
    customer: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Fetch specified document meta data
    
    :param str parentFolderPath: Path from customer root to the parent folder (if not specified, fetch document from root folder)
    :param str documentName: Document name
    :param str customer: Customer space to fetch from (default is current users customer
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/path/meta{parentFolderPath}/{documentName}".format(parentFolderPath=parentFolderPath,
        documentName=documentName,
        customer=customer)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def grant_document_access(
    documentID: int,
    subject: str = None,
    level: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Grant access to specified document (PUBLIC)
    
    :param int documentID: Document ID
    :param str subject: Specify user/group to grant access to 
    :param str level: Specify access level to grant to user/group 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/access".format(documentID=documentID)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send subject if the argument was provided, dont send null values
    if subject is not None:
        body.update({"subject": subject})
    # Only send level if the argument was provided, dont send null values
    if level is not None:
        body.update({"level": level})

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def grant_document_access_by_path(
    parentFolderPath: str,
    documentName: str,
    customer: str = None,
    subject: str = None,
    level: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Grant access to specified document
    
    :param str parentFolderPath: Path from customer root (if not specified, this returns the root)
    :param str documentName: Document name
    :param str customer: Customer space to fetch from (default is current users customer)
    :param str subject: Specify user/group to grant access to 
    :param str level: Specify access level to grant to user/group 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/path/access{parentFolderPath}/{documentName}".format(parentFolderPath=parentFolderPath,
        documentName=documentName,
        customer=customer)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send subject if the argument was provided, dont send null values
    if subject is not None:
        body.update({"subject": subject})
    # Only send level if the argument was provided, dont send null values
    if level is not None:
        body.update({"level": level})

    query_parameters = {}
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def list_document_access(
    documentID: int,
    limit: int = 25,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Fetch ACL for specified document (PUBLIC)
    
    :param int documentID: Document ID
    :param int limit: Maximum number of returned results
    :param int offset: Skip a number of results
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/access".format(limit=limit,
        documentID=documentID,
        offset=offset)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def list_document_access_by_path(
    parentFolderPath: str,
    documentName: str,
    customer: str = None,
    limit: int = 25,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Fetch ACL for specified document
    
    :param str parentFolderPath: Path from customer root (if not specified, this returns the root)
    :param str documentName: Document name
    :param str customer: Customer space to fetch from (default is current users customer)
    :param int limit: Maximum number of returned results
    :param int offset: Skip a number of results
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/path/access{parentFolderPath}/{documentName}".format(limit=limit,
        parentFolderPath=parentFolderPath,
        documentName=documentName,
        customer=customer,
        offset=offset)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({"customer": customer})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def list_document_watchers(
    documentID: int,
    offset: int = None,
    includeNegated: bool = None,
    includeDeleted: bool = None,
    limit: int = 25,
    includeInherited: bool = True,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Get all watchers for document (DEV)
    
    :param int documentID: ID of document
    :param int offset: Skip this number of results
    :param bool includeNegated: If true, also fetch explicit unwatch records
    :param bool includeDeleted: If true, also fetch deleted watcher records
    :param int limit: Limit the result
    :param bool includeInherited: If true, also fetch watchers defined on parent folders
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/watchers".format(limit=limit,
        includeInherited=includeInherited,
        documentID=documentID,
        offset=offset,
        includeNegated=includeNegated,
        includeDeleted=includeDeleted)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send includeInherited if the argument was provided, dont send null values
    if includeInherited is not None:
        query_parameters.update({"includeInherited": includeInherited})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send includeNegated if the argument was provided, dont send null values
    if includeNegated is not None:
        query_parameters.update({"includeNegated": includeNegated})
    # Only send includeDeleted if the argument was provided, dont send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})

    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def list_document_watchers_by_path(
    parentFolderPath: str,
    documentName: str,
    customer: str = None,
    offset: int = None,
    includeNegated: bool = None,
    includeDeleted: bool = None,
    limit: int = 25,
    includeInherited: bool = True,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Get all watchers for document
    
    :param str parentFolderPath: Path to parent folder (if not specified, select document from root folder)
    :param str documentName: Document name
    :param str customer: Customer space to lookup folder in (default is current users customer)
    :param int offset: Skip this number of results
    :param bool includeNegated: If true, also fetch explicit unwatch records
    :param bool includeDeleted: If true, also fetch deleted watcher records
    :param int limit: Limit the result
    :param bool includeInherited: If true, also fetch watchers defined on parent folders
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/path/watchers{parentFolderPath}/{documentName}".format(limit=limit,
        includeInherited=includeInherited,
        parentFolderPath=parentFolderPath,
        documentName=documentName,
        customer=customer,
        offset=offset,
        includeNegated=includeNegated,
        includeDeleted=includeDeleted)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send includeInherited if the argument was provided, dont send null values
    if includeInherited is not None:
        query_parameters.update({"includeInherited": includeInherited})
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({"customer": customer})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send includeNegated if the argument was provided, dont send null values
    if includeNegated is not None:
        query_parameters.update({"includeNegated": includeNegated})
    # Only send includeDeleted if the argument was provided, dont send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})

    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def list_documents(
    customerID: int = None,
    keywords: str = None,
    limit: int = 25,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """List documents (DEV)
    
    :param list customerID: Filter documents by customerID
    :param list keywords: Filter documents by keywords
    :param int limit: Maximum number of returned results
    :param int offset: Skip a number of results
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document".format(limit=limit,
        customerID=customerID,
        keywords=keywords,
        offset=offset)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send customerID if the argument was provided, dont send null values
    if customerID is not None:
        query_parameters.update({"customerID": customerID})
    # Only send keywords if the argument was provided, dont send null values
    if keywords is not None:
        query_parameters.update({"keywords": keywords})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def lock_document(
    documentID: int,
    lockRequestTime: int = None,
    mode: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Lock/Unlock specified document (PUBLIC)
    
    :param int documentID: ID of document to lock/unlock
    :param int lockRequestTime: If 'mode' is set to LOCK, specify how long the document should be locked 
    :param str mode: Specify whether to lock or unlock the document, or to override an existing lock (default LOCK)
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises DocumentLockedException: on 423
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/lock".format(documentID=documentID)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send lockRequestTime if the argument was provided, dont send null values
    if lockRequestTime is not None:
        body.update({"lockRequestTime": lockRequestTime})
    # Only send mode if the argument was provided, dont send null values
    if mode is not None:
        body.update({"mode": mode})

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def move_document(
    documentID: int,
    newFolderID: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Move document to a different folder (PUBLIC)
    
    :param int documentID: ID of document to move
    :param int newFolderID: 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises DocumentLockedException: on 423
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/move".format(documentID=documentID)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send newFolderID if the argument was provided, dont send null values
    if newFolderID is not None:
        body.update({"newFolderID": newFolderID})

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def revoke_document_access(
    documentID: int,
    accessID: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Revoke specified explicit access from document (PUBLIC)
    
    :param int documentID: Document ID
    :param int accessID: Access ID
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/access/{accessID}".format(documentID=documentID,
        accessID=accessID)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}

    log.debug("DELETE %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def revoke_document_access_by_path(
    parentFolderPath: str,
    documentName: str,
    accessID: int,
    customer: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Revoke specified explicit access from document
    
    :param str parentFolderPath: Path from customer root (if not specified, this returns the root)
    :param str documentName: Document name
    :param int accessID: Access ID
    :param str customer: Customer space to fetch from (default is current users customer)
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/path/access{parentFolderPath}/{documentName}/{accessID}".format(parentFolderPath=parentFolderPath,
        documentName=documentName,
        accessID=accessID,
        customer=customer)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug("DELETE %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def search_documents(
    limit: int = None,
    offset: int = None,
    includeDeleted: bool = None,
    subCriteria: dict = None,
    exclude: bool = None,
    required: bool = None,
    customerID: int = None,
    id: int = None,
    userID: int = None,
    userFieldStrategy: str = None,
    accessMode: str = None,
    state: str = None,
    startTimestamp: int = None,
    endTimestamp: int = None,
    timeMatchStrategy: str = None,
    timeFieldStrategy: str = None,
    keywords: str = None,
    keywordMatchStrategy: str = None,
    keywordFieldStrategy: str = None,
    labels: str = None,
    folderID: int = None,
    sortBy: str = None,
    includeFlags: str = None,
    excludeFlags: str = None,
    recursive: bool = True,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Search for specific documents (DEV)
    
    :param int limit: Set this value to set max number of results. By default, no restriction on result set size. 
    :param int offset: Set this value to skip the first (offset) objects. By default, return result from first object. 
    :param bool includeDeleted: Set to true to include deleted objects. By default, exclude deleted objects. 
    :param list subCriteria: Set additional criterias which are applied using a logical OR. 
    :param bool exclude: Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. 
    :param bool required: Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). 
    :param list customerID: Restrict search to data belonging to specified customers. 
    :param list id: ID of documents to match 
    :param list userID: Restrict search to documents associated with any of these users. 
    :param list userFieldStrategy: Defines which user fields will be used for searching for documents associated to userID field. (default all)
    :param list accessMode: Match these access modes 
    :param list state: The status of the documents to match 
    :param int startTimestamp: Start of time search period 
    :param int endTimestamp: End of time search period 
    :param str timeMatchStrategy: TimeMatchStrategy to define how to match startTimestamp and endTimestamp with fields. (default any)
    :param list timeFieldStrategy: TimeFieldStrategy to define which timestamp field(s) to match. (default createdTimestamp)
    :param list keywords: A set of keywords matched against documents based on the set KeywordFieldStrategy and KeywordMatchStrategy. 
    :param str keywordMatchStrategy: KeywordMatchStrategy to define how to match keywords with fields. (default any)
    :param list keywordFieldStrategy: KeywordFieldStrategy to define which document field(s) to match. (default all)
    :param list labels: Match documents with any of these labels 
    :param list folderID: Search for documents within any of these folders. Use folderID=0 to search root folders. 
    :param list sortBy: List of properties to sort by (prefix with "-" to sort descending). 
    :param list includeFlags: Only include objects which have includeFlags set. 
    :param list excludeFlags: Exclude objects which have excludeFlags set. 
    :param bool recursive: Search all subfolders below selected folders (default true)
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/search".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, dont send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send subCriteria if the argument was provided, dont send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send exclude if the argument was provided, dont send null values
    if exclude is not None:
        body.update({"exclude": exclude})
    # Only send required if the argument was provided, dont send null values
    if required is not None:
        body.update({"required": required})
    # Only send customerID if the argument was provided, dont send null values
    if customerID is not None:
        body.update({"customerID": customerID})
    # Only send id if the argument was provided, dont send null values
    if id is not None:
        body.update({"id": id})
    # Only send userID if the argument was provided, dont send null values
    if userID is not None:
        body.update({"userID": userID})
    # Only send userFieldStrategy if the argument was provided, dont send null values
    if userFieldStrategy is not None:
        body.update({"userFieldStrategy": userFieldStrategy})
    # Only send accessMode if the argument was provided, dont send null values
    if accessMode is not None:
        body.update({"accessMode": accessMode})
    # Only send state if the argument was provided, dont send null values
    if state is not None:
        body.update({"state": state})
    # Only send startTimestamp if the argument was provided, dont send null values
    if startTimestamp is not None:
        body.update({"startTimestamp": startTimestamp})
    # Only send endTimestamp if the argument was provided, dont send null values
    if endTimestamp is not None:
        body.update({"endTimestamp": endTimestamp})
    # Only send timeMatchStrategy if the argument was provided, dont send null values
    if timeMatchStrategy is not None:
        body.update({"timeMatchStrategy": timeMatchStrategy})
    # Only send timeFieldStrategy if the argument was provided, dont send null values
    if timeFieldStrategy is not None:
        body.update({"timeFieldStrategy": timeFieldStrategy})
    # Only send keywords if the argument was provided, dont send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send keywordMatchStrategy if the argument was provided, dont send null values
    if keywordMatchStrategy is not None:
        body.update({"keywordMatchStrategy": keywordMatchStrategy})
    # Only send keywordFieldStrategy if the argument was provided, dont send null values
    if keywordFieldStrategy is not None:
        body.update({"keywordFieldStrategy": keywordFieldStrategy})
    # Only send labels if the argument was provided, dont send null values
    if labels is not None:
        body.update({"labels": labels})
    # Only send folderID if the argument was provided, dont send null values
    if folderID is not None:
        body.update({"folderID": folderID})
    # Only send recursive if the argument was provided, dont send null values
    if recursive is not None:
        body.update({"recursive": recursive})
    # Only send sortBy if the argument was provided, dont send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send includeFlags if the argument was provided, dont send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, dont send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def set_current_user_document_watch_status(
    documentID: int,
    watch: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Change current user watcher status for document. Requires read access to the document. (DEV)
    
    :param int documentID: ID of document
    :param bool watch: If true, enable an explicit watcher for the current user for the target document. If false, add an explicit negation for the current user. 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/watch".format(documentID=documentID)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send watch if the argument was provided, dont send null values
    if watch is not None:
        body.update({"watch": watch})

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def set_current_user_document_watch_status_by_path(
    parentFolderPath: str,
    documentName: str,
    customer: str = None,
    watch: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Change current user watcher status for document. Requires read access to the document.
    
    :param str parentFolderPath: Path to parent folder (if not specified, select document from root folder)
    :param str documentName: Document name
    :param str customer: Customer space to lookup folder in (default is current users customer)
    :param bool watch: If true, enable an explicit watcher for the current user for the target document. If false, add an explicit negation for the current user. 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/path/watch{parentFolderPath}/{documentName}".format(parentFolderPath=parentFolderPath,
        documentName=documentName,
        customer=customer)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send watch if the argument was provided, dont send null values
    if watch is not None:
        body.update({"watch": watch})

    query_parameters = {}
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def update_document(
    documentID: int,
    name: str = None,
    mimeType: str = None,
    data: str = None,
    notificationOptions: dict = None,
    text: str = None,
    lockRequestTime: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Update specified document (PUBLIC)
    
    :param int documentID: ID of document to update
    :param str name: If set change document name  => Sanitize by regex \A[^\\\/:*"?<>|]{1,254}\z
    :param str mimeType: If set change document MIME type 
    :param str data: Base64 encoded document content formatted according to the given MIME type. If set change document content 
    :param dict notificationOptions: 
    :param str text: Plain text document content. If set change document content 
    :param int lockRequestTime: Specify how long the document should be locked (default 0)
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises DocumentLockedException: on 423
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}".format(documentID=documentID)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send name if the argument was provided, dont send null values
    if name is not None:
        body.update({"name": name})
    # Only send mimeType if the argument was provided, dont send null values
    if mimeType is not None:
        body.update({"mimeType": mimeType})
    # Only send data if the argument was provided, dont send null values
    if data is not None:
        body.update({"data": data})
    # Only send lockRequestTime if the argument was provided, dont send null values
    if lockRequestTime is not None:
        body.update({"lockRequestTime": lockRequestTime})
    # Only send notificationOptions if the argument was provided, dont send null values
    if notificationOptions is not None:
        body.update({"notificationOptions": notificationOptions})
    # Only send text if the argument was provided, dont send null values
    if text is not None:
        body.update({"text": text})

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def update_document_access_settings(
    documentID: int,
    accessMode: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Change access settings on specified document (PUBLIC)
    
    :param int documentID: Document ID
    :param str accessMode: Specify general access mode for document/folder 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/access".format(documentID=documentID)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send accessMode if the argument was provided, dont send null values
    if accessMode is not None:
        body.update({"accessMode": accessMode})

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("documents", "v1", "document"),
    module=argus_cli_module
)
def update_document_access_settings_by_path(
    parentFolderPath: str,
    documentName: str,
    customer: str = None,
    accessMode: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Change access settings on specified document
    
    :param str parentFolderPath: Path from customer root (if not specified, this returns the root)
    :param str documentName: Document name
    :param str customer: Customer space to fetch from (default is current users customer)
    :param str accessMode: Specify general access mode for document/folder 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/documents/v1/document/path/access{parentFolderPath}/{documentName}".format(parentFolderPath=parentFolderPath,
        documentName=documentName,
        customer=customer)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send accessMode if the argument was provided, dont send null values
    if accessMode is not None:
        body.update({"accessMode": accessMode})

    query_parameters = {}
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()

