"""Autogenerated API"""
from argus_api import session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(
    extending=("authentication", "v1", "signature", "enroll"),
    module=argus_cli_module
)
def enroll_webauthn_key(
    challengeID: str = None,
    type: str = None,
    algorithm: str = None,
    name: str = None,
    publicKey: str = None,
    attestationObject: str = None,
    clientData: str = None,
    authorization: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Enroll new public key (DEV)
    
    :param str challengeID: ID of the challenge this request is bound to 
    :param str type: The type of the key 
    :param str algorithm: The key algorithm 
    :param str name: A name to associate with the key 
    :param str publicKey: The key material 
    :param str attestationObject: The attestation object (expected format depends on type) 
    :param str clientData: The clientData which is attested (expected format depends on type) 
    :param str authorization: The authorization token to permit enrolling this key. Token must be valid for operation 'publickey.enroll' :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/authentication/v1/signature/enroll".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send challengeID if the argument was provided, dont send null values
    if challengeID is not None:
        body.update({"challengeID": challengeID})
    # Only send type if the argument was provided, dont send null values
    if type is not None:
        body.update({"type": type})
    # Only send algorithm if the argument was provided, dont send null values
    if algorithm is not None:
        body.update({"algorithm": algorithm})
    # Only send name if the argument was provided, dont send null values
    if name is not None:
        body.update({"name": name})
    # Only send publicKey if the argument was provided, dont send null values
    if publicKey is not None:
        body.update({"publicKey": publicKey})
    # Only send attestationObject if the argument was provided, dont send null values
    if attestationObject is not None:
        body.update({"attestationObject": attestationObject})
    # Only send clientData if the argument was provided, dont send null values
    if clientData is not None:
        body.update({"clientData": clientData})
    # Only send authorization if the argument was provided, dont send null values
    if authorization is not None:
        body.update({"authorization": authorization})

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("authentication", "v1", "signature", "enroll"),
    module=argus_cli_module
)
def enroll_webauthn_key_1(
    challengeID: str = None,
    keyID: str = None,
    attestationObject: str = None,
    clientData: str = None,
    authorization: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Enroll new webauthn key (DEV)
    
    :param str challengeID: ID of the challenge this request is bound to 
    :param str keyID: The WebAuthn keyID 
    :param str attestationObject: The WebAuthn attestation object 
    :param str clientData: The WebAuthn clientData which is attested 
    :param str authorization: The authorization token to permit enrolling this key. Token must be valid for operation 'publickey.enroll' :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/authentication/v1/signature/webauthn/enroll".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send challengeID if the argument was provided, dont send null values
    if challengeID is not None:
        body.update({"challengeID": challengeID})
    # Only send keyID if the argument was provided, dont send null values
    if keyID is not None:
        body.update({"keyID": keyID})
    # Only send attestationObject if the argument was provided, dont send null values
    if attestationObject is not None:
        body.update({"attestationObject": attestationObject})
    # Only send clientData if the argument was provided, dont send null values
    if clientData is not None:
        body.update({"clientData": clientData})
    # Only send authorization if the argument was provided, dont send null values
    if authorization is not None:
        body.update({"authorization": authorization})

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("authentication", "v1", "signature", "enroll"),
    module=argus_cli_module
)
def get_public_key_enrollment_options(
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Get enrollment options before enrolling new public key (DEV)
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/authentication/v1/signature/enroll".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}

    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("authentication", "v1", "signature", "enroll"),
    module=argus_cli_module
)
def get_webauthn_create_options(
    origin: str = "portal.mnemonic.no",
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Request parameters for enrolling new webauthn key (DEV)
    
    :param str origin: The origin which the webauthn credentials will be bound to:param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises NotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/authentication/v1/signature/webauthn/enroll".format(origin=origin)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send origin if the argument was provided, dont send null values
    if origin is not None:
        query_parameters.update({"origin": origin})

    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()

