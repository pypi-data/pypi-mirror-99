"""Autogenerated API"""
from argus_api import session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(
    extending=("alarms", "v1", "mitre"),
    module=argus_cli_module
)
def add_mitre_category(
    externalId: str = None,
    shortName: str = None,
    name: str = None,
    version: str = None,
    type: str = None,
    model: str = None,
    url: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Adds a new MITRE category (DEV)
    
    :param str externalId: External ID of the MITRE category 
    :param str shortName: Short name of the MITRE category 
    :param str name: Detailed name of the MITRE category 
    :param str version: Version of the MITRE category 
    :param str type: Enumerated type of the MITRE category 
    :param str model: Enumerated threat model of the MITRE category 
    :param str url: URL of the external MITRE category page  => ((https?|ftp|gopher|telnet|file):((/)|(\\))+[\w\d:\#@%/;$()~_?\\+-=\\\.&]*)
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/alarms/v1/mitre".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send externalId if the argument was provided, dont send null values
    if externalId is not None:
        body.update({"externalId": externalId})
    # Only send shortName if the argument was provided, dont send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send name if the argument was provided, dont send null values
    if name is not None:
        body.update({"name": name})
    # Only send version if the argument was provided, dont send null values
    if version is not None:
        body.update({"version": version})
    # Only send type if the argument was provided, dont send null values
    if type is not None:
        body.update({"type": type})
    # Only send model if the argument was provided, dont send null values
    if model is not None:
        body.update({"model": model})
    # Only send url if the argument was provided, dont send null values
    if url is not None:
        body.update({"url": url})

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("alarms", "v1", "mitre"),
    module=argus_cli_module
)
def delete_mitre_category(
    idOrExtIdOrShortName: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Deletes an existing MITRE category (DEV)
    
    :param str idOrExtIdOrShortName: ID, ExtID or short name of MITRE category
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/alarms/v1/mitre/{idOrExtIdOrShortName}".format(idOrExtIdOrShortName=idOrExtIdOrShortName)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}

    log.debug("DELETE %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("alarms", "v1", "mitre"),
    module=argus_cli_module
)
def get_mitre_category(
    idOrExtIdOrShortName: str,
    includeRelationships: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Gets an existing MITRE category (DEV)
    
    :param str idOrExtIdOrShortName: ID, ExtID or short name of MITRE category
    :param bool includeRelationships: To include MITRE category relationships or not (not included by default)
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/alarms/v1/mitre/{idOrExtIdOrShortName}".format(idOrExtIdOrShortName=idOrExtIdOrShortName,
        includeRelationships=includeRelationships)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send includeRelationships if the argument was provided, dont send null values
    if includeRelationships is not None:
        query_parameters.update({"includeRelationships": includeRelationships})

    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("alarms", "v1", "mitre"),
    module=argus_cli_module
)
def list_mitre_categories(
    version: str = None,
    includeDeleted: bool = None,
    includeDeprecated: bool = None,
    includeRelationships: bool = None,
    sortBy: str = None,
    limit: int = None,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """List MITRE categories (DEV)
    
    :param list version: The version(s) of included MITRE categories (all by default)
    :param bool includeDeleted: To include deleted MITRE categories or not (not included by default)
    :param bool includeDeprecated: To include deprecated MITRE categories or not (not included by default)
    :param bool includeRelationships: To include MITRE category relationships or not (not included by default)
    :param list sortBy: Field(s) to sort results by (without sign is ascending, with '-' sign is descending)
    :param int limit: The max amount of items to return (25 by default)
    :param int offset: The amount of items to skip from the beginning (0 by default)
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/alarms/v1/mitre".format(version=version,
        includeDeleted=includeDeleted,
        includeDeprecated=includeDeprecated,
        includeRelationships=includeRelationships,
        sortBy=sortBy,
        limit=limit,
        offset=offset)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send version if the argument was provided, dont send null values
    if version is not None:
        query_parameters.update({"version": version})
    # Only send includeDeleted if the argument was provided, dont send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})
    # Only send includeDeprecated if the argument was provided, dont send null values
    if includeDeprecated is not None:
        query_parameters.update({"includeDeprecated": includeDeprecated})
    # Only send includeRelationships if the argument was provided, dont send null values
    if includeRelationships is not None:
        query_parameters.update({"includeRelationships": includeRelationships})
    # Only send sortBy if the argument was provided, dont send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("alarms", "v1", "mitre"),
    module=argus_cli_module
)
def search_mitre_categories(
    id: str = None,
    externalId: str = None,
    shortName: str = None,
    version: str = None,
    type: str = None,
    model: str = None,
    includeFlags: str = None,
    excludeFlags: str = None,
    keywords: str = None,
    keywordFieldStrategy: str = None,
    keywordMatchStrategy: str = None,
    subCriteria: dict = None,
    sortBy: str = None,
    includeRelationships: bool = None,
    limit: int = 25,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Searches for MITRE categories (DEV)
    
    :param list id: A set of IDs of the searched MITRE categories 
    :param list externalId: A set of external IDs of the searched MITRE categories 
    :param list shortName: A set of short names of the searched MITRE categories 
    :param list version: A set of versions of the searched MITRE categories 
    :param list type: A set of enumerated types of the searched MITRE categories 
    :param list model: A set of enumerated threat models of the searched MITRE categories 
    :param list includeFlags: A set of included enumerated flags of the searched MITRE categories 
    :param list excludeFlags: A set of excluded enumerated flags of the searched MITRE categories 
    :param list keywords: Keywords that are searched for in the fields of MITRE categories 
    :param list keywordFieldStrategy: A set of fields of the MITRE categories where the keywords are searched (default all)
    :param str keywordMatchStrategy: Selected keyword matching strategy for searching in the fields of MITRE categories (default all)
    :param list subCriteria: Set additional search criteria with AND, OR or AND NOT 
    :param list sortBy: Fields to sort results by (without sign is ascending, with '-' sign is descending) (default shortName, -createdTimestamp)
    :param bool includeRelationships: To include MITRE categories' relationships in search results or not (default false)
    :param int limit: The max amount of items to return (default 25)
    :param int offset: The amount of items to skip from the beginning (default 0)
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/alarms/v1/mitre/search".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send id if the argument was provided, dont send null values
    if id is not None:
        body.update({"id": id})
    # Only send externalId if the argument was provided, dont send null values
    if externalId is not None:
        body.update({"externalId": externalId})
    # Only send shortName if the argument was provided, dont send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send version if the argument was provided, dont send null values
    if version is not None:
        body.update({"version": version})
    # Only send type if the argument was provided, dont send null values
    if type is not None:
        body.update({"type": type})
    # Only send model if the argument was provided, dont send null values
    if model is not None:
        body.update({"model": model})
    # Only send includeFlags if the argument was provided, dont send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, dont send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send keywords if the argument was provided, dont send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send keywordFieldStrategy if the argument was provided, dont send null values
    if keywordFieldStrategy is not None:
        body.update({"keywordFieldStrategy": keywordFieldStrategy})
    # Only send keywordMatchStrategy if the argument was provided, dont send null values
    if keywordMatchStrategy is not None:
        body.update({"keywordMatchStrategy": keywordMatchStrategy})
    # Only send subCriteria if the argument was provided, dont send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send includeRelationships if the argument was provided, dont send null values
    if includeRelationships is not None:
        body.update({"includeRelationships": includeRelationships})
    # Only send sortBy if the argument was provided, dont send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        body.update({"offset": offset})

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("alarms", "v1", "mitre"),
    module=argus_cli_module
)
def update_mitre_category(
    idOrExtIdOrShortName: str,
    name: str = None,
    type: str = None,
    model: str = None,
    url: str = None,
    deprecated: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Updates an existing MITRE category (DEV)
    
    :param str idOrExtIdOrShortName: ID, ExtID or short name of MITRE category
    :param str name: Detailed name of the MITRE category 
    :param str type: Enumerated type of the MITRE category 
    :param str model: Enumerated threat model of the MITRE category 
    :param str url: URL of the external MITRE category page  => ((https?|ftp|gopher|telnet|file):((/)|(\\))+[\w\d:\#@%/;$()~_?\\+-=\\\.&]*)
    :param bool deprecated: A boolean flag indicating if the MITRE category is deprecated 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/alarms/v1/mitre/{idOrExtIdOrShortName}".format(idOrExtIdOrShortName=idOrExtIdOrShortName)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send name if the argument was provided, dont send null values
    if name is not None:
        body.update({"name": name})
    # Only send type if the argument was provided, dont send null values
    if type is not None:
        body.update({"type": type})
    # Only send model if the argument was provided, dont send null values
    if model is not None:
        body.update({"model": model})
    # Only send url if the argument was provided, dont send null values
    if url is not None:
        body.update({"url": url})
    # Only send deprecated if the argument was provided, dont send null values
    if deprecated is not None:
        body.update({"deprecated": deprecated})

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()

