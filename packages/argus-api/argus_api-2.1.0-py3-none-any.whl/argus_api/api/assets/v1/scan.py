"""Autogenerated API"""
from argus_api import session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(
    extending=("assets", "v1", "scan"),
    module=argus_cli_module
)
def client_host_asset_scanned(
    customerID: int,
    hostName: str,
    detectedVulnerabilities: dict = None,
    detectedApplications: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Marks a single Client HostAsset as scanned. The host is identified by the host name, and it must be of type CLIENT. (DEV)
    
    :param int customerID: Customer ID
    :param str hostName: Name of host asset
    :param list detectedVulnerabilities: Specify (vulnerabilityID, socket string) objects of detected vulnerabilities. 
    :param list detectedApplications: Specify sockets of detected applications (e.g. tcp/80). 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/assets/v1/scan/{customerID}/client/{hostName}".format(customerID=customerID,
        hostName=hostName)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send detectedVulnerabilities if the argument was provided, dont send null values
    if detectedVulnerabilities is not None:
        body.update({"detectedVulnerabilities": detectedVulnerabilities})
    # Only send detectedApplications if the argument was provided, dont send null values
    if detectedApplications is not None:
        body.update({"detectedApplications": detectedApplications})

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("assets", "v1", "scan"),
    module=argus_cli_module
)
def host_asset_bulk_scanned(
    customerID: int = None,
    scannedRequests: dict = None,
    scannedIpRanges: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Marks multiple HostAsset as scanned. (PUBLIC)
    
    :param int customerID: Define customer which was scanned. 
    :param list scannedRequests: Set of host scan requests. 
    :param list scannedIpRanges: Set of scanned IP address ranges as list of single IPs (1.1.1.1), CIDR networks (1.1.1.0/24) or ranges (1.1.1.1-1.1.1.2) 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/assets/v1/scan".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send customerID if the argument was provided, dont send null values
    if customerID is not None:
        body.update({"customerID": customerID})
    # Only send scannedRequests if the argument was provided, dont send null values
    if scannedRequests is not None:
        body.update({"scannedRequests": scannedRequests})
    # Only send scannedIpRanges if the argument was provided, dont send null values
    if scannedIpRanges is not None:
        body.update({"scannedIpRanges": scannedIpRanges})

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("assets", "v1", "scan"),
    module=argus_cli_module
)
def host_asset_scanned(
    customerID: int,
    ip: str,
    detectedVulnerabilities: dict = None,
    detectedApplications: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Marks a single HostAsset as scanned. (PUBLIC)
    
    :param int customerID: Customer ID
    :param str ip: IP address of scanned HostAsset
    :param list detectedVulnerabilities: Specify (vulnerabilityID, socket string) objects of detected vulnerabilities. 
    :param list detectedApplications: Specify sockets of detected applications (e.g. tcp/80). 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/assets/v1/scan/{customerID}/{ip}".format(customerID=customerID,
        ip=ip)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send detectedVulnerabilities if the argument was provided, dont send null values
    if detectedVulnerabilities is not None:
        body.update({"detectedVulnerabilities": detectedVulnerabilities})
    # Only send detectedApplications if the argument was provided, dont send null values
    if detectedApplications is not None:
        body.update({"detectedApplications": detectedApplications})

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("assets", "v1", "scan"),
    module=argus_cli_module
)
def host_asset_scanned_by_id(
    hostID: str,
    detectedVulnerabilities: dict = None,
    detectedApplications: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Marks a single HostAsset as scanned. The host is identified by ID. (DEV)
    
    :param str hostID: ID of the host asset
    :param list detectedVulnerabilities: Specify (vulnerabilityID, socket string) objects of detected vulnerabilities. 
    :param list detectedApplications: Specify sockets of detected applications (e.g. tcp/80). 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/assets/v1/scan/{hostID}".format(hostID=hostID)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send detectedVulnerabilities if the argument was provided, dont send null values
    if detectedVulnerabilities is not None:
        body.update({"detectedVulnerabilities": detectedVulnerabilities})
    # Only send detectedApplications if the argument was provided, dont send null values
    if detectedApplications is not None:
        body.update({"detectedApplications": detectedApplications})

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()

