"""Autogenerated API"""
from argus_api import session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module
from requests import Response

log = logging.getLogger(__name__)


@register_command(
    extending=("events", "v1", "aggregated"),
    module=argus_cli_module
)
def find_aggregated_event_stats(
    subCriteria: dict = None,
    signature: str = None,
    destinationIP: str = None,
    sourceIP: str = None,
    ip: str = None,
    destinationPort: str = None,
    sourcePort: str = None,
    port: str = None,
    minSeverity: str = None,
    maxSeverity: str = None,
    includeDeleted: bool = None,
    customerID: int = None,
    exclude: bool = None,
    eventIdentifier: dict = None,
    locationID: int = None,
    severity: str = None,
    customer: str = None,
    alarmID: int = None,
    attackCategoryID: int = None,
    sourceGeoCountry: str = None,
    destinationGeoCountry: str = None,
    geoCountry: str = None,
    properties: dict = None,
    minCount: int = None,
    associatedCaseID: int = None,
    sourceIPMinBits: int = None,
    destinationIPMinBits: int = None,
    resolution: int = None,
    groupBy: str = None,
    countRawEvents: bool = None,
    cutoff: int = None,
    includeOthers: bool = None,
    startTimestamp: int = None,
    endTimestamp: int = None,
    includeFlags: str = None,
    excludeFlags: str = None,
    lastUpdatedTimestamp: int = None,
    indexStartTime: int = None,
    indexEndTime: int = None,
    skipFutureEvents: bool = None,
    exactMatchProperties: bool = True,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Fetch aggregated event stats (PUBLIC)
    
    :param list subCriteria: 
    :param list signature: 
    :param list destinationIP: 
    :param list sourceIP: 
    :param list ip: 
    :param list destinationPort: 
    :param list sourcePort: 
    :param list port: 
    :param str minSeverity: 
    :param str maxSeverity: 
    :param bool includeDeleted: Also include deleted objects (where implemented) 
    :param list customerID: DEPRECATED! Use customer instead 
    :param bool exclude: Exclude these criteria from the parent criteria. 
    :param list eventIdentifier: Search for events specified by full ID (type/timestamp/customerid/eventid). 
    :param list locationID: Search for events having these locations. 
    :param list severity: Search events with specified severity. Can't be used together with minSeverity/maxSeverity. 
    :param list customer: Search for events by customer (id or shortname). 
    :param list alarmID: Search for events having an attack identifier (signature) mapped to any of these alarms. 
    :param list attackCategoryID: Search for events having an attack identifier (signature) mapped to any of these categories. 
    :param list sourceGeoCountry: Search for events where source IP is registered in any of these countries. 
    :param list destinationGeoCountry: Search for events where destination IP is registered in any of these countries. 
    :param list geoCountry: Search for events where source or destination IP is registered in any of these countries. 
    :param dict properties: Search for events having these properties (logical AND). 
    :param int minCount: Search for events with aggregated count at least this high 
    :param list associatedCaseID: Search for events associated to one of these cases 
    :param int sourceIPMinBits: Do not include source CIDR-networks with wider mask than this 
    :param int destinationIPMinBits: Do not include destination CIDR-networks with wider mask than this 
    :param int resolution: Divide results into timeframes with this size (in milliseconds) 
    :param list groupBy: Group results by these fields 
    :param bool countRawEvents: Return the number of raw events (not the number of aggregated events) 
    :param int cutoff: If set, keep the <cutoff> biggest records, and cut off the rest. 
    :param bool includeOthers: If true (default), records which are cut off are collected into a common "other" record 
    :param int startTimestamp: Search objects from this timestamp 
    :param int endTimestamp: Search objects until this timestamp 
    :param list includeFlags: Search objects with these flags set 
    :param list excludeFlags: Exclude objects with these flags set 
    :param int lastUpdatedTimestamp: Match only with events marked with a last updated time greater or equal to this. 
    :param int indexStartTime: Earliest created time of the indices searched. 
    :param int indexEndTime: Last created time of the indices searched. 
    :param bool skipFutureEvents: Whether service should generate endTimestamp by current timestamp. (default false)
    :param bool exactMatchProperties: If set to true, will execute in-memory filtering to only match events that have exact match of properties specified at top level "properties" field of search request. WARN: The count of response would not be reliable, as the filtering is applied in-memory of application server, but the count was done by search engine. (default true)
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/events/v1/aggregated/stats".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send subCriteria if the argument was provided, dont send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send signature if the argument was provided, dont send null values
    if signature is not None:
        body.update({"signature": signature})
    # Only send destinationIP if the argument was provided, dont send null values
    if destinationIP is not None:
        body.update({"destinationIP": destinationIP})
    # Only send sourceIP if the argument was provided, dont send null values
    if sourceIP is not None:
        body.update({"sourceIP": sourceIP})
    # Only send ip if the argument was provided, dont send null values
    if ip is not None:
        body.update({"ip": ip})
    # Only send destinationPort if the argument was provided, dont send null values
    if destinationPort is not None:
        body.update({"destinationPort": destinationPort})
    # Only send sourcePort if the argument was provided, dont send null values
    if sourcePort is not None:
        body.update({"sourcePort": sourcePort})
    # Only send port if the argument was provided, dont send null values
    if port is not None:
        body.update({"port": port})
    # Only send minSeverity if the argument was provided, dont send null values
    if minSeverity is not None:
        body.update({"minSeverity": minSeverity})
    # Only send maxSeverity if the argument was provided, dont send null values
    if maxSeverity is not None:
        body.update({"maxSeverity": maxSeverity})
    # Only send includeDeleted if the argument was provided, dont send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send customerID if the argument was provided, dont send null values
    if customerID is not None:
        body.update({"customerID": customerID})
    # Only send skipFutureEvents if the argument was provided, dont send null values
    if skipFutureEvents is not None:
        body.update({"skipFutureEvents": skipFutureEvents})
    # Only send exclude if the argument was provided, dont send null values
    if exclude is not None:
        body.update({"exclude": exclude})
    # Only send eventIdentifier if the argument was provided, dont send null values
    if eventIdentifier is not None:
        body.update({"eventIdentifier": eventIdentifier})
    # Only send locationID if the argument was provided, dont send null values
    if locationID is not None:
        body.update({"locationID": locationID})
    # Only send severity if the argument was provided, dont send null values
    if severity is not None:
        body.update({"severity": severity})
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send alarmID if the argument was provided, dont send null values
    if alarmID is not None:
        body.update({"alarmID": alarmID})
    # Only send attackCategoryID if the argument was provided, dont send null values
    if attackCategoryID is not None:
        body.update({"attackCategoryID": attackCategoryID})
    # Only send sourceGeoCountry if the argument was provided, dont send null values
    if sourceGeoCountry is not None:
        body.update({"sourceGeoCountry": sourceGeoCountry})
    # Only send destinationGeoCountry if the argument was provided, dont send null values
    if destinationGeoCountry is not None:
        body.update({"destinationGeoCountry": destinationGeoCountry})
    # Only send geoCountry if the argument was provided, dont send null values
    if geoCountry is not None:
        body.update({"geoCountry": geoCountry})
    # Only send properties if the argument was provided, dont send null values
    if properties is not None:
        body.update({"properties": properties})
    # Only send exactMatchProperties if the argument was provided, dont send null values
    if exactMatchProperties is not None:
        body.update({"exactMatchProperties": exactMatchProperties})
    # Only send minCount if the argument was provided, dont send null values
    if minCount is not None:
        body.update({"minCount": minCount})
    # Only send associatedCaseID if the argument was provided, dont send null values
    if associatedCaseID is not None:
        body.update({"associatedCaseID": associatedCaseID})
    # Only send sourceIPMinBits if the argument was provided, dont send null values
    if sourceIPMinBits is not None:
        body.update({"sourceIPMinBits": sourceIPMinBits})
    # Only send destinationIPMinBits if the argument was provided, dont send null values
    if destinationIPMinBits is not None:
        body.update({"destinationIPMinBits": destinationIPMinBits})
    # Only send resolution if the argument was provided, dont send null values
    if resolution is not None:
        body.update({"resolution": resolution})
    # Only send groupBy if the argument was provided, dont send null values
    if groupBy is not None:
        body.update({"groupBy": groupBy})
    # Only send countRawEvents if the argument was provided, dont send null values
    if countRawEvents is not None:
        body.update({"countRawEvents": countRawEvents})
    # Only send cutoff if the argument was provided, dont send null values
    if cutoff is not None:
        body.update({"cutoff": cutoff})
    # Only send includeOthers if the argument was provided, dont send null values
    if includeOthers is not None:
        body.update({"includeOthers": includeOthers})
    # Only send startTimestamp if the argument was provided, dont send null values
    if startTimestamp is not None:
        body.update({"startTimestamp": startTimestamp})
    # Only send endTimestamp if the argument was provided, dont send null values
    if endTimestamp is not None:
        body.update({"endTimestamp": endTimestamp})
    # Only send includeFlags if the argument was provided, dont send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, dont send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send lastUpdatedTimestamp if the argument was provided, dont send null values
    if lastUpdatedTimestamp is not None:
        body.update({"lastUpdatedTimestamp": lastUpdatedTimestamp})
    # Only send indexStartTime if the argument was provided, dont send null values
    if indexStartTime is not None:
        body.update({"indexStartTime": indexStartTime})
    # Only send indexEndTime if the argument was provided, dont send null values
    if indexEndTime is not None:
        body.update({"indexEndTime": indexEndTime})

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("events", "v1", "aggregated"),
    module=argus_cli_module
)
def find_aggregated_events(
    subCriteria: dict = None,
    signature: str = None,
    destinationIP: str = None,
    sourceIP: str = None,
    ip: str = None,
    destinationPort: str = None,
    sourcePort: str = None,
    port: str = None,
    minSeverity: str = None,
    maxSeverity: str = None,
    limit: int = None,
    offset: int = None,
    includeDeleted: bool = None,
    customerID: int = None,
    exclude: bool = None,
    eventIdentifier: dict = None,
    locationID: int = None,
    severity: str = None,
    customer: str = None,
    alarmID: int = None,
    attackCategoryID: int = None,
    sourceGeoCountry: str = None,
    destinationGeoCountry: str = None,
    geoCountry: str = None,
    properties: dict = None,
    minCount: int = None,
    associatedCaseID: int = None,
    sourceIPMinBits: int = None,
    destinationIPMinBits: int = None,
    startTimestamp: int = None,
    endTimestamp: int = None,
    sortBy: str = None,
    includeFlags: str = None,
    excludeFlags: str = None,
    lastUpdatedTimestamp: int = None,
    indexStartTime: int = None,
    indexEndTime: int = None,
    skipFutureEvents: bool = None,
    exactMatchProperties: bool = True,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Search for aggregated events (PUBLIC)
    
    :param list subCriteria: 
    :param list signature: 
    :param list destinationIP: 
    :param list sourceIP: 
    :param list ip: 
    :param list destinationPort: 
    :param list sourcePort: 
    :param list port: 
    :param str minSeverity: 
    :param str maxSeverity: 
    :param int limit: Limit results 
    :param int offset: Offset results 
    :param bool includeDeleted: Also include deleted objects (where implemented) 
    :param list customerID: DEPRECATED! Use customer instead 
    :param bool exclude: Exclude these criteria from the parent criteria. 
    :param list eventIdentifier: Search for events specified by full ID (type/timestamp/customerid/eventid). 
    :param list locationID: Search for events having these locations. 
    :param list severity: Search events with specified severity. Can't be used together with minSeverity/maxSeverity. 
    :param list customer: Search for events by customer (id or shortname). 
    :param list alarmID: Search for events having an attack identifier (signature) mapped to any of these alarms. 
    :param list attackCategoryID: Search for events having an attack identifier (signature) mapped to any of these categories. 
    :param list sourceGeoCountry: Search for events where source IP is registered in any of these countries. 
    :param list destinationGeoCountry: Search for events where destination IP is registered in any of these countries. 
    :param list geoCountry: Search for events where source or destination IP is registered in any of these countries. 
    :param dict properties: Search for events having these properties (logical AND). 
    :param int minCount: Search for events with aggregated count at least this high 
    :param list associatedCaseID: Search for events associated to one of these cases 
    :param int sourceIPMinBits: Do not include source CIDR-networks with wider mask than this 
    :param int destinationIPMinBits: Do not include destination CIDR-networks with wider mask than this 
    :param int startTimestamp: Search objects from this timestamp 
    :param int endTimestamp: Search objects until this timestamp 
    :param list sortBy: Order results by these properties (prefix with - to sort descending) 
    :param list includeFlags: Search objects with these flags set 
    :param list excludeFlags: Exclude objects with these flags set 
    :param int lastUpdatedTimestamp: Match only with events marked with a last updated time greater or equal to this. 
    :param int indexStartTime: Earliest created time of the indices searched. 
    :param int indexEndTime: Last created time of the indices searched. 
    :param bool skipFutureEvents: Whether service should generate endTimestamp by current timestamp. (default false)
    :param bool exactMatchProperties: If set to true, will execute in-memory filtering to only match events that have exact match of properties specified at top level "properties" field of search request. WARN: The count of response would not be reliable, as the filtering is applied in-memory of application server, but the count was done by search engine. (default true)
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns: requests.Response object or dictionary translated from JSON
    """

    route = "/events/v1/aggregated/search".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
        'content': None
    }
    if json:
        headers['content'] = 'application/json'

    body = body or {}
    # Only send subCriteria if the argument was provided, dont send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send signature if the argument was provided, dont send null values
    if signature is not None:
        body.update({"signature": signature})
    # Only send destinationIP if the argument was provided, dont send null values
    if destinationIP is not None:
        body.update({"destinationIP": destinationIP})
    # Only send sourceIP if the argument was provided, dont send null values
    if sourceIP is not None:
        body.update({"sourceIP": sourceIP})
    # Only send ip if the argument was provided, dont send null values
    if ip is not None:
        body.update({"ip": ip})
    # Only send destinationPort if the argument was provided, dont send null values
    if destinationPort is not None:
        body.update({"destinationPort": destinationPort})
    # Only send sourcePort if the argument was provided, dont send null values
    if sourcePort is not None:
        body.update({"sourcePort": sourcePort})
    # Only send port if the argument was provided, dont send null values
    if port is not None:
        body.update({"port": port})
    # Only send minSeverity if the argument was provided, dont send null values
    if minSeverity is not None:
        body.update({"minSeverity": minSeverity})
    # Only send maxSeverity if the argument was provided, dont send null values
    if maxSeverity is not None:
        body.update({"maxSeverity": maxSeverity})
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, dont send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send customerID if the argument was provided, dont send null values
    if customerID is not None:
        body.update({"customerID": customerID})
    # Only send skipFutureEvents if the argument was provided, dont send null values
    if skipFutureEvents is not None:
        body.update({"skipFutureEvents": skipFutureEvents})
    # Only send exclude if the argument was provided, dont send null values
    if exclude is not None:
        body.update({"exclude": exclude})
    # Only send eventIdentifier if the argument was provided, dont send null values
    if eventIdentifier is not None:
        body.update({"eventIdentifier": eventIdentifier})
    # Only send locationID if the argument was provided, dont send null values
    if locationID is not None:
        body.update({"locationID": locationID})
    # Only send severity if the argument was provided, dont send null values
    if severity is not None:
        body.update({"severity": severity})
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send alarmID if the argument was provided, dont send null values
    if alarmID is not None:
        body.update({"alarmID": alarmID})
    # Only send attackCategoryID if the argument was provided, dont send null values
    if attackCategoryID is not None:
        body.update({"attackCategoryID": attackCategoryID})
    # Only send sourceGeoCountry if the argument was provided, dont send null values
    if sourceGeoCountry is not None:
        body.update({"sourceGeoCountry": sourceGeoCountry})
    # Only send destinationGeoCountry if the argument was provided, dont send null values
    if destinationGeoCountry is not None:
        body.update({"destinationGeoCountry": destinationGeoCountry})
    # Only send geoCountry if the argument was provided, dont send null values
    if geoCountry is not None:
        body.update({"geoCountry": geoCountry})
    # Only send properties if the argument was provided, dont send null values
    if properties is not None:
        body.update({"properties": properties})
    # Only send exactMatchProperties if the argument was provided, dont send null values
    if exactMatchProperties is not None:
        body.update({"exactMatchProperties": exactMatchProperties})
    # Only send minCount if the argument was provided, dont send null values
    if minCount is not None:
        body.update({"minCount": minCount})
    # Only send associatedCaseID if the argument was provided, dont send null values
    if associatedCaseID is not None:
        body.update({"associatedCaseID": associatedCaseID})
    # Only send sourceIPMinBits if the argument was provided, dont send null values
    if sourceIPMinBits is not None:
        body.update({"sourceIPMinBits": sourceIPMinBits})
    # Only send destinationIPMinBits if the argument was provided, dont send null values
    if destinationIPMinBits is not None:
        body.update({"destinationIPMinBits": destinationIPMinBits})
    # Only send startTimestamp if the argument was provided, dont send null values
    if startTimestamp is not None:
        body.update({"startTimestamp": startTimestamp})
    # Only send endTimestamp if the argument was provided, dont send null values
    if endTimestamp is not None:
        body.update({"endTimestamp": endTimestamp})
    # Only send sortBy if the argument was provided, dont send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send includeFlags if the argument was provided, dont send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, dont send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send lastUpdatedTimestamp if the argument was provided, dont send null values
    if lastUpdatedTimestamp is not None:
        body.update({"lastUpdatedTimestamp": lastUpdatedTimestamp})
    # Only send indexStartTime if the argument was provided, dont send null values
    if indexStartTime is not None:
        body.update({"indexStartTime": indexStartTime})
    # Only send indexEndTime if the argument was provided, dont send null values
    if indexEndTime is not None:
        body.update({"indexEndTime": indexEndTime})

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("events", "v1", "aggregated"),
    module=argus_cli_module
)
def list_aggregated_events(
    customerID: int = None,
    signature: str = None,
    ip: str = None,
    startTimestamp: str = "-24hours",
    endTimestamp: str = "now",
    limit: int = 25,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Simple search for aggregated events (PUBLIC)
    
    :param list customerID: Limit to customerID
    :param list signature: Limit to signature
    :param list ip: Limit to ip/network
    :param str startTimestamp: Limit to events after this timestamp (default is last 24 hours).
    :param str endTimestamp: Limit to events before this timestamp. Defaults to now.
    :param int limit: Limit results
    :param int offset: Offset results
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns: requests.Response object or dictionary translated from JSON
    """

    route = "/events/v1/aggregated".format(startTimestamp=startTimestamp,
        endTimestamp=endTimestamp,
        limit=limit,
        customerID=customerID,
        signature=signature,
        ip=ip,
        offset=offset)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
        'content': None
    }
    if json:
        headers['content'] = 'application/json'

    body = body or {}

    query_parameters = {}
    # Only send startTimestamp if the argument was provided, dont send null values
    if startTimestamp is not None:
        query_parameters.update({"startTimestamp": startTimestamp})
    # Only send endTimestamp if the argument was provided, dont send null values
    if endTimestamp is not None:
        query_parameters.update({"endTimestamp": endTimestamp})
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send customerID if the argument was provided, dont send null values
    if customerID is not None:
        query_parameters.update({"customerID": customerID})
    # Only send signature if the argument was provided, dont send null values
    if signature is not None:
        query_parameters.update({"signature": signature})
    # Only send ip if the argument was provided, dont send null values
    if ip is not None:
        query_parameters.update({"ip": ip})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("events", "v1", "aggregated"),
    module=argus_cli_module
)
def update_events(
    update: dict = None,
    eventIdentifiers: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Add event assessments (INTERNAL)
    
    :param dict update: 
    :param list eventIdentifiers: Update events specified by full ID (type/timestamp/customerID/eventID) 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises EventsNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/events/v1/aggregated".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send update if the argument was provided, dont send null values
    if update is not None:
        body.update({"update": update})
    # Only send eventIdentifiers if the argument was provided, dont send null values
    if eventIdentifiers is not None:
        body.update({"eventIdentifiers": eventIdentifiers})

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()


@register_command(
    extending=("events", "v1", "aggregated"),
    module=argus_cli_module
)
def update_events_bulk(
    criteria: dict = None,
    update: dict = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Assess events in bulk mode (INTERNAL)
    
    :param dict criteria: 
    :param dict update: 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises EventsNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/events/v1/aggregated/bulk".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send criteria if the argument was provided, dont send null values
    if criteria is not None:
        body.update({"criteria": criteria})
    # Only send update if the argument was provided, dont send null values
    if update is not None:
        body.update({"update": update})

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()

