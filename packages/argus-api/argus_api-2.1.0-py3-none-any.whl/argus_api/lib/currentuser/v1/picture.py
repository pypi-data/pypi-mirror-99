"""Autogenerated API"""
from argus_api import session
from requests import Response



def get_profile_picture(
    width: int = None,
    height: int = None,
    size: str = None,
    default: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> Response:
    """Get current user's profile picture (PUBLIC)
    
    :param int width: If set, rescale image to the smallest size above this width (keep aspect ratio)
    :param int height: If set, rescale image to the smallest size above this height (keep aspect ratio)
    :param str size: If set, rescale image to this predefined size
    :param bool default: If true, return default avatar image if user picture not set. Default is false.
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ProfilePictureNotFoundException: on 404
    :raises ArgusException: on other status codes
    
    :returns: requests.Response object
    
    """

    route = "/currentuser/v1/picture".format(default=default,
        width=width,
        height=height,
        size=size)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
        'content': None
    }

    body = body or {}

    query_parameters = {}
    # Only send default if the argument was provided, dont send null values
    if default is not None:
        query_parameters.update({"default": default})
    # Only send width if the argument was provided, dont send null values
    if width is not None:
        query_parameters.update({"width": width})
    # Only send height if the argument was provided, dont send null values
    if height is not None:
        query_parameters.update({"height": height})
    # Only send size if the argument was provided, dont send null values
    if size is not None:
        query_parameters.update({"size": size})

    

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response
    



def update_profile_picture_json(
    image: str = None,
    mimeType: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Set current user's profile picture (PUBLIC) (PUBLIC)
    
    :param str image: Image bytes 
    :param str mimeType: Image MIME type  => Sanitize by regex .+/.+
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/currentuser/v1/picture".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send image if the argument was provided, dont send null values
    if image is not None:
        body.update({"image": image})
    # Only send mimeType if the argument was provided, dont send null values
    if mimeType is not None:
        body.update({"mimeType": mimeType})

    query_parameters = {}

    

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()

