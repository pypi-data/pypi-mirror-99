"""Autogenerated API"""
from argus_api import session



def set_properties(
    oldPassword: str = None,
    newPassword: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Change current users Argus password. Note that this will only change the password used for SMS, PASSWORD and TOTP, not external authentications like LDAP or RADIUS. (DEV)
    
    :param str oldPassword: Existing password, to validate password change 
    :param str newPassword: New password to change to. 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises InvalidPasswordException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/currentuser/v1/password".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send oldPassword if the argument was provided, dont send null values
    if oldPassword is not None:
        body.update({"oldPassword": oldPassword})
    # Only send newPassword if the argument was provided, dont send null values
    if newPassword is not None:
        body.update({"newPassword": newPassword})

    query_parameters = {}

    

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()

