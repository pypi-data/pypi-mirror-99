"""Autogenerated API"""
from argus_api import session



def search_records(
    query: str = None,
    aggregateResult: bool = None,
    includeAnonymousResults: bool = None,
    rrClass: str = None,
    rrType: str = None,
    customerID: int = None,
    tlp: str = None,
    limit: int = None,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Search against PassiveDNS with criteria and return matching records (DEV)
    
    :param str query: Lookup query 
    :param bool aggregateResult: Whether aggregate results (default true) 
    :param bool includeAnonymousResults: Whether include anonymous results (default true) 
    :param list rrClass: Lookup with specified record classes 
    :param list rrType: Lookup with specified record types 
    :param list customerID: Lookup for specified customer IDs 
    :param list tlp: Lookup with specified TLPs, public usage only TLP white allowed 
    :param int limit: Max number of results to be returned, default unset means default limit 25 will be used, 0 means unlimited 
    :param int offset: Number of results to be skipped first, default 0 (default 0)
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises ResourceLimitExceeded.Exception: on 402
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/pdns/v3/search".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send query if the argument was provided, dont send null values
    if query is not None:
        body.update({"query": query})
    # Only send aggregateResult if the argument was provided, dont send null values
    if aggregateResult is not None:
        body.update({"aggregateResult": aggregateResult})
    # Only send includeAnonymousResults if the argument was provided, dont send null values
    if includeAnonymousResults is not None:
        body.update({"includeAnonymousResults": includeAnonymousResults})
    # Only send rrClass if the argument was provided, dont send null values
    if rrClass is not None:
        body.update({"rrClass": rrClass})
    # Only send rrType if the argument was provided, dont send null values
    if rrType is not None:
        body.update({"rrType": rrType})
    # Only send customerID if the argument was provided, dont send null values
    if customerID is not None:
        body.update({"customerID": customerID})
    # Only send tlp if the argument was provided, dont send null values
    if tlp is not None:
        body.update({"tlp": tlp})
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        body.update({"offset": offset})

    query_parameters = {}

    

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()

