"""Autogenerated API"""
from argus_api import session



def calculate_reputation_for_domain(
    fqdn: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Look up the calculated reputation value for the given Domain (INTERNAL)
    
    :param str fqdn: Domain to look up
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/reputation/v1/calculated/domain/{fqdn}".format(fqdn=fqdn)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}

    

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()



def calculate_reputation_for_i_p(
    ip: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Look up the calculated reputation value for the given IP (INTERNAL)
    
    :param str ip: IP address to look up
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/reputation/v1/calculated/ip/{ip}".format(ip=ip)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}

    

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()



def find_address_reputation(
    minimumValue: float = None,
    sourceID: int = None,
    fromAddress: dict = None,
    afterAddress: dict = None,
    limit: int = None,
    offset: int = None,
    includeDeleted: bool = None,
    includeFlags: int = None,
    excludeFlags: int = None,
    subCriteria: dict = None,
    exclude: bool = None,
    required: bool = None,
    addresses: dict = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Search for calculated IP reputation values (INTERNAL)
    
    :param float minimumValue: 
    :param list sourceID: 
    :param dict fromAddress: 
    :param dict afterAddress: 
    :param int limit: Set this value to set max number of results. By default, no restriction on result set size. 
    :param int offset: Set this value to skip the first (offset) objects. By default, return result from first object. 
    :param bool includeDeleted: Set to true to include deleted objects. By default, exclude deleted objects. 
    :param int includeFlags: Only include objects which have includeFlags set. 
    :param int excludeFlags: Exclude objects which have excludeFlags set. 
    :param list subCriteria: Set additional criterias which are applied using a logical OR. 
    :param bool exclude: Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. 
    :param bool required: Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). 
    :param list addresses: List of IP addresses 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/reputation/v1/calculated/ip/search".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send minimumValue if the argument was provided, dont send null values
    if minimumValue is not None:
        body.update({"minimumValue": minimumValue})
    # Only send sourceID if the argument was provided, dont send null values
    if sourceID is not None:
        body.update({"sourceID": sourceID})
    # Only send fromAddress if the argument was provided, dont send null values
    if fromAddress is not None:
        body.update({"fromAddress": fromAddress})
    # Only send afterAddress if the argument was provided, dont send null values
    if afterAddress is not None:
        body.update({"afterAddress": afterAddress})
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, dont send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send includeFlags if the argument was provided, dont send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, dont send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send subCriteria if the argument was provided, dont send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send exclude if the argument was provided, dont send null values
    if exclude is not None:
        body.update({"exclude": exclude})
    # Only send required if the argument was provided, dont send null values
    if required is not None:
        body.update({"required": required})
    # Only send addresses if the argument was provided, dont send null values
    if addresses is not None:
        body.update({"addresses": addresses})

    query_parameters = {}

    

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()



def find_domain_reputation(
    minimumValue: float = None,
    sourceID: int = None,
    fromDomainName: dict = None,
    afterDomainName: dict = None,
    limit: int = None,
    offset: int = None,
    includeDeleted: bool = None,
    includeFlags: int = None,
    excludeFlags: int = None,
    subCriteria: dict = None,
    exclude: bool = None,
    required: bool = None,
    domainNames: dict = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Search for calculated domain reputation values (INTERNAL)
    
    :param float minimumValue: 
    :param list sourceID: 
    :param dict fromDomainName: 
    :param dict afterDomainName: 
    :param int limit: Set this value to set max number of results. By default, no restriction on result set size. 
    :param int offset: Set this value to skip the first (offset) objects. By default, return result from first object. 
    :param bool includeDeleted: Set to true to include deleted objects. By default, exclude deleted objects. 
    :param int includeFlags: Only include objects which have includeFlags set. 
    :param int excludeFlags: Exclude objects which have excludeFlags set. 
    :param list subCriteria: Set additional criterias which are applied using a logical OR. 
    :param bool exclude: Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. 
    :param bool required: Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). 
    :param list domainNames: Full Qualified Domain Names 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/reputation/v1/calculated/domain/search".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send minimumValue if the argument was provided, dont send null values
    if minimumValue is not None:
        body.update({"minimumValue": minimumValue})
    # Only send sourceID if the argument was provided, dont send null values
    if sourceID is not None:
        body.update({"sourceID": sourceID})
    # Only send fromDomainName if the argument was provided, dont send null values
    if fromDomainName is not None:
        body.update({"fromDomainName": fromDomainName})
    # Only send afterDomainName if the argument was provided, dont send null values
    if afterDomainName is not None:
        body.update({"afterDomainName": afterDomainName})
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, dont send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send includeFlags if the argument was provided, dont send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, dont send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send subCriteria if the argument was provided, dont send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send exclude if the argument was provided, dont send null values
    if exclude is not None:
        body.update({"exclude": exclude})
    # Only send required if the argument was provided, dont send null values
    if required is not None:
        body.update({"required": required})
    # Only send domainNames if the argument was provided, dont send null values
    if domainNames is not None:
        body.update({"domainNames": domainNames})

    query_parameters = {}

    

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()



def list_address_reputation(
    fromAddress: str = None,
    afterAddress: str = None,
    sourceID: int = None,
    minimumValue: float = None,
    limit: int = 25,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """List up calculated IP reputation values (INTERNAL)
    
    :param str fromAddress: List observed domains after this domain, including (sorted by reverse domain)
    :param str afterAddress: List observed domains after this domain, excluding (sorted by reverse domain)
    :param int sourceID: Limit to domains observed in this source
    :param float minimumValue: Limit to domains which have a reputation score at lease this large
    :param int limit: Limit output
    :param int offset: Offset result
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/reputation/v1/calculated/ip".format(limit=limit,
        fromAddress=fromAddress,
        afterAddress=afterAddress,
        sourceID=sourceID,
        minimumValue=minimumValue,
        offset=offset)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send fromAddress if the argument was provided, dont send null values
    if fromAddress is not None:
        query_parameters.update({"fromAddress": fromAddress})
    # Only send afterAddress if the argument was provided, dont send null values
    if afterAddress is not None:
        query_parameters.update({"afterAddress": afterAddress})
    # Only send sourceID if the argument was provided, dont send null values
    if sourceID is not None:
        query_parameters.update({"sourceID": sourceID})
    # Only send minimumValue if the argument was provided, dont send null values
    if minimumValue is not None:
        query_parameters.update({"minimumValue": minimumValue})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()



def list_domain_reputation(
    fromDomain: str = None,
    afterDomain: str = None,
    sourceID: int = None,
    minimumValue: float = None,
    limit: int = 25,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """List up calculated domain reputation values (INTERNAL)
    
    :param str fromDomain: List observed domains after this domain, including (sorted by reverse domain)
    :param str afterDomain: List observed domains after this domain, excluding (sorted by reverse domain)
    :param int sourceID: Limit to domains observed in this source
    :param float minimumValue: Limit to domains which have a reputation score at lease this large
    :param int limit: Limit output
    :param int offset: Offset result
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/reputation/v1/calculated/domain".format(limit=limit,
        fromDomain=fromDomain,
        afterDomain=afterDomain,
        sourceID=sourceID,
        minimumValue=minimumValue,
        offset=offset)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send fromDomain if the argument was provided, dont send null values
    if fromDomain is not None:
        query_parameters.update({"fromDomain": fromDomain})
    # Only send afterDomain if the argument was provided, dont send null values
    if afterDomain is not None:
        query_parameters.update({"afterDomain": afterDomain})
    # Only send sourceID if the argument was provided, dont send null values
    if sourceID is not None:
        query_parameters.update({"sourceID": sourceID})
    # Only send minimumValue if the argument was provided, dont send null values
    if minimumValue is not None:
        query_parameters.update({"minimumValue": minimumValue})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()

