"""Autogenerated API"""
from argus_api import session



def add_open_id_provider(
    shortName: str = None,
    name: str = None,
    clientID: str = None,
    customer: str = None,
    certificate: str = None,
    providerURI: str = None,
    claimsMapping: dict = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Define new OpenID provider (DEV)
    
    :param str shortName: Set a shortname for this provider  => [a-zA-Z0-9_\-\.]*
    :param str name: The name of this provider  => [\s\w\{\}\$\-\(\)\.\[\]"\'_/\\,\*\+\#:@!?;=]*
    :param str clientID: The OAuth ClientID of this provider 
    :param str customer: The id or shortname of the customer this provider is bound to 
    :param str certificate: A valid X509 certificate which can be used to verify OpenID tokens 
    :param str providerURI: The URI to redirect to to initiate OpenID authentication flow  => ((https?|ftp|gopher|telnet|file):((/)|(\\))+[\w\d:\#@%/;$()~_?\\+-=\\\.&]*)
    :param dict claimsMapping: 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises InvalidArgumentException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/authentication/v1/openid/provider".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send shortName if the argument was provided, dont send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send name if the argument was provided, dont send null values
    if name is not None:
        body.update({"name": name})
    # Only send clientID if the argument was provided, dont send null values
    if clientID is not None:
        body.update({"clientID": clientID})
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send certificate if the argument was provided, dont send null values
    if certificate is not None:
        body.update({"certificate": certificate})
    # Only send providerURI if the argument was provided, dont send null values
    if providerURI is not None:
        body.update({"providerURI": providerURI})
    # Only send claimsMapping if the argument was provided, dont send null values
    if claimsMapping is not None:
        body.update({"claimsMapping": claimsMapping})

    query_parameters = {}

    

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()



def delete_open_id_provider(
    idOrShortname: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Delete OpenID provider (DEV)
    
    :param str idOrShortname: ID or shortname of provider to delete
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/authentication/v1/openid/provider/{idOrShortname}".format(idOrShortname=idOrShortname)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}

    

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()



def get_open_id_provider(
    idOrShortname: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Fetch OpenID provider (DEV)
    
    :param str idOrShortname: ID or shortname of provider to fetch
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/authentication/v1/openid/provider/{idOrShortname}".format(idOrShortname=idOrShortname)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}

    

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()



def update_open_id_provider(
    idOrShortname: str,
    shortName: str = None,
    name: str = None,
    clientID: str = None,
    certificate: str = None,
    providerURI: str = None,
    claimsMapping: dict = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Update OpenID provider (DEV)
    
    :param str idOrShortname: ID or shortname of provider to update
    :param str shortName: If set, update the shortname for this provider  => [a-zA-Z0-9_\-\.]*
    :param str name: If set, update the name for this provider  => [\s\w\{\}\$\-\(\)\.\[\]"\'_/\\,\*\+\#:@!?;=]*
    :param str clientID: If set, update the OAuth ClientID for this provider 
    :param str certificate: If set, update the X509 certificate for this provider 
    :param str providerURI: If set, update the URI for this provider  => ((https?|ftp|gopher|telnet|file):((/)|(\\))+[\w\d:\#@%/;$()~_?\\+-=\\\.&]*)
    :param dict claimsMapping: 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises InvalidArgumentsException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/authentication/v1/openid/provider/{idOrShortname}".format(idOrShortname=idOrShortname)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send shortName if the argument was provided, dont send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send name if the argument was provided, dont send null values
    if name is not None:
        body.update({"name": name})
    # Only send clientID if the argument was provided, dont send null values
    if clientID is not None:
        body.update({"clientID": clientID})
    # Only send certificate if the argument was provided, dont send null values
    if certificate is not None:
        body.update({"certificate": certificate})
    # Only send providerURI if the argument was provided, dont send null values
    if providerURI is not None:
        body.update({"providerURI": providerURI})
    # Only send claimsMapping if the argument was provided, dont send null values
    if claimsMapping is not None:
        body.update({"claimsMapping": claimsMapping})

    query_parameters = {}

    

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()

