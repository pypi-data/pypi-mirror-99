"""Autogenerated API"""
from argus_api import session



def add_contact(
    customer: str = None,
    language: str = None,
    user: str = None,
    name: str = None,
    email: str = None,
    workPhone: str = None,
    mobilePhone: str = None,
    description: str = None,
    services: str = None,
    mailSettings: dict = None,
    smsSettings: dict = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Create a new customer contact. (DEV)
    
    :param str customer: Customer this contact is bound to 
    :param str language: Language this contact should receive notifications in. Disregarded if subject is specified. Defaults to english. 
    :param str user: User ID or shortname for user to bind this contact to. If not specified, name and contact settings must be specified. 
    :param str name: The displayName of this contact. If user is set, this is disregarded. 
    :param str email: The email address of this contact. If user is set, this is disregarded.  => format:email
    :param str workPhone: The work phone number of this contact. If user is set, this is disregarded.  => format:phone
    :param str mobilePhone: The mobile phone number of this contact. If user is set, this is disregarded.  => format:phone
    :param str description: A description of this contact. If user is set, this is disregarded. 
    :param list services: A list of service shortnames or IDs for services that this contact should be notified on. 
    :param dict mailSettings: 
    :param dict smsSettings: 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/customers/v1/contact".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send language if the argument was provided, dont send null values
    if language is not None:
        body.update({"language": language})
    # Only send user if the argument was provided, dont send null values
    if user is not None:
        body.update({"user": user})
    # Only send name if the argument was provided, dont send null values
    if name is not None:
        body.update({"name": name})
    # Only send email if the argument was provided, dont send null values
    if email is not None:
        body.update({"email": email})
    # Only send workPhone if the argument was provided, dont send null values
    if workPhone is not None:
        body.update({"workPhone": workPhone})
    # Only send mobilePhone if the argument was provided, dont send null values
    if mobilePhone is not None:
        body.update({"mobilePhone": mobilePhone})
    # Only send description if the argument was provided, dont send null values
    if description is not None:
        body.update({"description": description})
    # Only send services if the argument was provided, dont send null values
    if services is not None:
        body.update({"services": services})
    # Only send mailSettings if the argument was provided, dont send null values
    if mailSettings is not None:
        body.update({"mailSettings": mailSettings})
    # Only send smsSettings if the argument was provided, dont send null values
    if smsSettings is not None:
        body.update({"smsSettings": smsSettings})

    query_parameters = {}

    

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()



def add_contact_service(
    contactID: int,
    service: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Enable a service for a customer contact. (DEV)
    
    :param int contactID: ID of contact
    :param str service: The service to enable for this contact 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/customers/v1/contact/{contactID}/services".format(contactID=contactID)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send service if the argument was provided, dont send null values
    if service is not None:
        body.update({"service": service})

    query_parameters = {}

    

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()



def delete_contact(
    id: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Delete an existing customer contact. (DEV)
    
    :param int id: Contact ID
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/customers/v1/contact/{id}".format(id=id)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}

    

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()



def get_contact(
    id: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Returns a customer contact identified by its ID. (DEV)
    
    :param int id: Contact ID
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/customers/v1/contact/{id}".format(id=id)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}

    

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()



def list_contacts(
    customer: str = None,
    service: str = None,
    user: str = None,
    keywords: str = None,
    limit: int = 25,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Returns all customer contacts matching criteria. (DEV)
    
    :param list customer: Filter by customer ID or shortname
    :param list service: Filter by service ID or shortname
    :param list user: Filter by user ID or shortname
    :param list keywords: Limit search to contacts matching these keywords (for either name, email or description). Note: will not search on associated user.
    :param int limit: Limit number of results
    :param int offset: Skip results
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/customers/v1/contact".format(limit=limit,
        customer=customer,
        service=service,
        user=user,
        keywords=keywords,
        offset=offset)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({"customer": customer})
    # Only send service if the argument was provided, dont send null values
    if service is not None:
        query_parameters.update({"service": service})
    # Only send user if the argument was provided, dont send null values
    if user is not None:
        query_parameters.update({"user": user})
    # Only send keywords if the argument was provided, dont send null values
    if keywords is not None:
        query_parameters.update({"keywords": keywords})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()



def remove_contact_service(
    contactID: int,
    service: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Disable a service for a customer contact. (DEV)
    
    :param int contactID: ID of contact
    :param str service: Name of service to disable
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/customers/v1/contact/{contactID}/services/{service}".format(contactID=contactID,
        service=service)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}

    

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()



def search_contacts(
    customer: str = None,
    service: str = None,
    user: str = None,
    keywords: str = None,
    limit: int = 25,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Returns all customer contacts matching criteria. (DEV)
    
    :param list customer: ID or shortname of customers of contacts to search for. Customer groups will return contacts for all subcustomers. 
    :param list service: ID or shortname of services of contacts to search for. Will return contacts which are bound to any of these services. 
    :param list user: ID or shortname of users of contacts to search for. Will return contacts which is bound to any of these users. 
    :param list keywords: Limit search to contacts matching these keywords (for either name, email or description). Note: will not search on associated user. 
    :param int limit: Limit search results (default 25)
    :param int offset: Skip search results (default 0)
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/customers/v1/contact/search".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send service if the argument was provided, dont send null values
    if service is not None:
        body.update({"service": service})
    # Only send user if the argument was provided, dont send null values
    if user is not None:
        body.update({"user": user})
    # Only send keywords if the argument was provided, dont send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        body.update({"offset": offset})

    query_parameters = {}

    

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()



def update_contact(
    id: int,
    language: str = None,
    name: str = None,
    email: str = None,
    workPhone: str = None,
    mobilePhone: str = None,
    description: str = None,
    services: str = None,
    mailSettings: dict = None,
    smsSettings: dict = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Update an existing customer contact. (DEV)
    
    :param int id: Contact ID
    :param str language: If set, change the language this contact should receive notifications in. If the contact is bound to a user, this field is invalid. 
    :param str name: If set, change the displayName of this contact. If the contact is bound to a user, this field is invalid. 
    :param str email: If set, change the email address of this contact. If the contact is bound to a user, this field is invalid.  => format:email
    :param str workPhone: If set, change the work phone number of this contact. If the contact is bound to a user, this field is invalid.  => format:phone
    :param str mobilePhone: If set, change the mobile phone number of this contact. If the contact is bound to a user, this field is invalid.  => format:phone
    :param str description: If set, change the description of this contact. If the contact is bound to a user, this field is invalid. 
    :param list services: If set, overwrite the list of service shortnames or IDs which this contact is enabled for. 
    :param dict mailSettings: 
    :param dict smsSettings: 
    :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/customers/v1/contact/{id}".format(id=id)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send language if the argument was provided, dont send null values
    if language is not None:
        body.update({"language": language})
    # Only send name if the argument was provided, dont send null values
    if name is not None:
        body.update({"name": name})
    # Only send email if the argument was provided, dont send null values
    if email is not None:
        body.update({"email": email})
    # Only send workPhone if the argument was provided, dont send null values
    if workPhone is not None:
        body.update({"workPhone": workPhone})
    # Only send mobilePhone if the argument was provided, dont send null values
    if mobilePhone is not None:
        body.update({"mobilePhone": mobilePhone})
    # Only send description if the argument was provided, dont send null values
    if description is not None:
        body.update({"description": description})
    # Only send services if the argument was provided, dont send null values
    if services is not None:
        body.update({"services": services})
    # Only send mailSettings if the argument was provided, dont send null values
    if mailSettings is not None:
        body.update({"mailSettings": mailSettings})
    # Only send smsSettings if the argument was provided, dont send null values
    if smsSettings is not None:
        body.update({"smsSettings": smsSettings})

    query_parameters = {}

    

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()

