"""Autogenerated API schema"""
from argus_api import session


submit_events = {'tags': ['events/v2'], 'summary': 'Submit event to central storage. (DEV)', 'description': 'This is a collector API, which will collect and enqueue the events for central storage.When this endpoint returns, the service guarantees that the events are validated and safely received for transport and storage. However, the services makes no guarantees for when the events will be searchable from the search endpoints.\n\nValidated events are enqueued for storage; the response will not indicate whether the event has been inserted or updated. Writing to an event ID (type/timestamp/customerID/UUID) of an existing event, will update/append the existing event with changed fields, and add flags/properties.\n\n If an event attempts to update an existing event which is marked as FINALIZED, the update will be ignored, even if this endpoint accepts the event.', 'operationId': 'submitEvents', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Event create request', 'required': False, 'schema': {'type': 'object', 'properties': {'startTimestamp': {'type': 'int'}, 'endTimestamp': {'type': 'int'}, 'id': {'type': 'dict', 'properties': {'uuid': {'type': 'str'}, 'customerDomain': {'type': 'string'}, 'customer': {'type': 'string'}, 'timestamp': {'type': 'int'}, 'type': 'str', 'options': ['raw', 'aggregated']}}, 'signature': {'type': 'str', 'position': 0, 'description': 'Event signature. If set, the system will automatically assign alarm and attack category based on this value. '}, 'severity': {'type': 'str', 'position': 0, 'description': 'Event severity. When creating a new event, the default severity is low. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'count': {'type': 'int', 'position': 0, 'description': 'Number of occurrences this event represents. The value must be at least 1, which is the default. '}, 'location': {'type': 'str', 'position': 0, 'description': 'The sensor location (id or shortname) where this event was observed. If set, this location must be resolvable for the current user, and must either belong to the same customer as this event, or be a global location. '}, 'protocol': {'type': 'str', 'position': 0, 'description': 'The protocol id or well-known name. Numeric protocol ID must be between 0 and 255. Protocol name must be well known (icmp, tcp, udp, esp, ah) '}, 'source': {'type': 'dict', 'properties': {'ip': {'type': 'str', 'position': 0, 'description': 'IPv4 or IPv6 address (host or CIDR notation). '}, 'port': {'type': 'int', 'position': 0, 'description': 'UDP or TCP port (0 - 65535). '}, 'user': {'type': 'str', 'position': 0, 'description': 'Username or identifier. '}, 'host': {'type': 'str', 'position': 0, 'description': 'Hostname or identifier. '}, 'geoLocation': {'type': 'dict', 'properties': {'countryCode': {'type': 'str', 'position': 0, 'description': '2-letter country code. '}, 'geoLocationID': {'type': 'int', 'position': 0, 'description': 'MaxMind geolocation ID. '}, 'latitude': {'type': 'float', 'position': 0, 'description': 'Latitude for location coordinates '}, 'longitude': {'type': 'float', 'position': 0, 'description': 'Longitude for location coordinates '}}}}}, 'destination': {'type': 'dict', 'properties': {'ip': {'type': 'str', 'position': 0, 'description': 'IPv4 or IPv6 address (host or CIDR notation). '}, 'port': {'type': 'int', 'position': 0, 'description': 'UDP or TCP port (0 - 65535). '}, 'user': {'type': 'str', 'position': 0, 'description': 'Username or identifier. '}, 'host': {'type': 'str', 'position': 0, 'description': 'Hostname or identifier. '}, 'geoLocation': {'type': 'dict', 'properties': {'countryCode': {'type': 'str', 'position': 0, 'description': '2-letter country code. '}, 'geoLocationID': {'type': 'int', 'position': 0, 'description': 'MaxMind geolocation ID. '}, 'latitude': {'type': 'float', 'position': 0, 'description': 'Latitude for location coordinates '}, 'longitude': {'type': 'float', 'position': 0, 'description': 'Longitude for location coordinates '}}}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Event flags requested by the client for this event. On updating an existing event, existing flags will be retained, and flags in the update will be added. Flags that have a PARTIAL flag have custom handling. If FINALIZED flag is set, additional updates to this event will be ignored. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'HAS_PAYLOAD', 'HAS_PCAP', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}}, 'properties': {'type': 'dict', 'position': 0, 'description': 'Custom properties for this event. Each property key may have multiple values. On updating an existing event, setting an existing property will overwrite existing value. ', 'additionalProperties': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}}, 'subEvents': {'type': 'list', 'position': 0, 'description': 'IDs (on form TYPE/timestamp/customer/UUID) for subevents to this event. Subevents may not be stored yet. System will validate that all subevents have the same customer as this event. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'uri': {'type': 'str', 'position': 0, 'description': 'URI observed in this event. '}, 'fqdn': {'type': 'str', 'position': 0, 'description': 'FQDN (fqdn) observed in this event. '}, 'aggregationKey': {'type': 'str', 'position': 0, 'description': 'Client specified aggregation key for this event. '}, 'associatedCaseID': {'type': 'int', 'position': 0, 'description': 'Associated case ID. If set, the associated case must be readable for the current user, and must belong to the same customer as this event. '}, 'associatedCaseIDs': {'type': 'list', 'position': 0, 'description': 'Add one or more case associations to an event, not required. If set, the associated case must be readable for the current user, and must belong to the same customer as this event. ', 'uniqueItems': True, 'items': {'type': 'int'}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of the submitted event. This will reflect the provided type, customerID, timestamp and UUID, or the generated values if these were not specified. '}, 'status': {'type': 'str', 'position': 0, 'description': "The submission status of this event. This will state 'rejected' if the event could not be validated, or 'accepted' if the event was accepted and has been enqueued for storage. ", 'enum': ['accepted', 'rejected']}, 'message': {'type': 'str', 'position': 0, 'description': 'If the event was rejected with a validation error, this field will state the reason for the rejection. '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
submit_events_bulk = {'tags': ['events/v2'], 'summary': 'Submit a bulk of events to central storage. (DEV)', 'description': 'This is a collector API, which will collect and enqueue the events for central storage.When this endpoint returns, the service guarantees that the events are validated and safely received for transport and storage. However, the services makes no guarantees for when the events will be searchable from the search endpoints.\n\nValidated events are enqueued for storage; the response will not indicate whether the event has been inserted or updated. Writing to an event ID (type/timestamp/customerID/UUID) of an existing event, will update/append the existing event with changed fields, and add flags/properties.\n\n If an event attempts to update an existing event which is marked as FINALIZED, the update will be ignored, even if this endpoint accepts the event.', 'operationId': 'submitEventsBulk', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Bulk request', 'required': False, 'schema': {'type': 'object', 'required': ['events'], 'properties': {'events': {'type': 'list', 'position': 0, 'description': 'Events to submit in this bulk. ', 'items': {'type': 'dict', 'properties': {'startTimestamp': {'type': 'int'}, 'endTimestamp': {'type': 'int'}, 'id': {'type': 'dict', 'properties': {'uuid': {'type': 'str'}, 'customerDomain': {'type': 'string'}, 'customer': {'type': 'string'}, 'timestamp': {'type': 'int'}, 'type': 'str', 'options': ['raw', 'aggregated']}}, 'signature': {'type': 'str', 'position': 0, 'description': 'Event signature. If set, the system will automatically assign alarm and attack category based on this value. '}, 'severity': {'type': 'str', 'position': 0, 'description': 'Event severity. When creating a new event, the default severity is low. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'count': {'type': 'int', 'position': 0, 'description': 'Number of occurrences this event represents. The value must be at least 1, which is the default. '}, 'location': {'type': 'str', 'position': 0, 'description': 'The sensor location (id or shortname) where this event was observed. If set, this location must be resolvable for the current user, and must either belong to the same customer as this event, or be a global location. '}, 'protocol': {'type': 'str', 'position': 0, 'description': 'The protocol id or well-known name. Numeric protocol ID must be between 0 and 255. Protocol name must be well known (icmp, tcp, udp, esp, ah) '}, 'source': {'type': 'dict', 'properties': {'ip': {'type': 'str', 'position': 0, 'description': 'IPv4 or IPv6 address (host or CIDR notation). '}, 'port': {'type': 'int', 'position': 0, 'description': 'UDP or TCP port (0 - 65535). '}, 'user': {'type': 'str', 'position': 0, 'description': 'Username or identifier. '}, 'host': {'type': 'str', 'position': 0, 'description': 'Hostname or identifier. '}, 'geoLocation': {'type': 'dict', 'properties': {'countryCode': {'type': 'str', 'position': 0, 'description': '2-letter country code. '}, 'geoLocationID': {'type': 'int', 'position': 0, 'description': 'MaxMind geolocation ID. '}, 'latitude': {'type': 'float', 'position': 0, 'description': 'Latitude for location coordinates '}, 'longitude': {'type': 'float', 'position': 0, 'description': 'Longitude for location coordinates '}}}}}, 'destination': {'type': 'dict', 'properties': {'ip': {'type': 'str', 'position': 0, 'description': 'IPv4 or IPv6 address (host or CIDR notation). '}, 'port': {'type': 'int', 'position': 0, 'description': 'UDP or TCP port (0 - 65535). '}, 'user': {'type': 'str', 'position': 0, 'description': 'Username or identifier. '}, 'host': {'type': 'str', 'position': 0, 'description': 'Hostname or identifier. '}, 'geoLocation': {'type': 'dict', 'properties': {'countryCode': {'type': 'str', 'position': 0, 'description': '2-letter country code. '}, 'geoLocationID': {'type': 'int', 'position': 0, 'description': 'MaxMind geolocation ID. '}, 'latitude': {'type': 'float', 'position': 0, 'description': 'Latitude for location coordinates '}, 'longitude': {'type': 'float', 'position': 0, 'description': 'Longitude for location coordinates '}}}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Event flags requested by the client for this event. On updating an existing event, existing flags will be retained, and flags in the update will be added. Flags that have a PARTIAL flag have custom handling. If FINALIZED flag is set, additional updates to this event will be ignored. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'HAS_PAYLOAD', 'HAS_PCAP', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}}, 'properties': {'type': 'dict', 'position': 0, 'description': 'Custom properties for this event. Each property key may have multiple values. On updating an existing event, setting an existing property will overwrite existing value. ', 'additionalProperties': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}}, 'subEvents': {'type': 'list', 'position': 0, 'description': 'IDs (on form TYPE/timestamp/customer/UUID) for subevents to this event. Subevents may not be stored yet. System will validate that all subevents have the same customer as this event. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'uri': {'type': 'str', 'position': 0, 'description': 'URI observed in this event. '}, 'fqdn': {'type': 'str', 'position': 0, 'description': 'FQDN (fqdn) observed in this event. '}, 'aggregationKey': {'type': 'str', 'position': 0, 'description': 'Client specified aggregation key for this event. '}, 'associatedCaseID': {'type': 'int', 'position': 0, 'description': 'Associated case ID. If set, the associated case must be readable for the current user, and must belong to the same customer as this event. '}, 'associatedCaseIDs': {'type': 'list', 'position': 0, 'description': 'Add one or more case associations to an event, not required. If set, the associated case must be readable for the current user, and must belong to the same customer as this event. ', 'uniqueItems': True, 'items': {'type': 'int'}}}}, 'maxItems': 2147483647, 'minItems': 1}, 'onError': {'type': 'str', 'position': 0, 'description': 'Define how validation errors on single events should be handled. Using mode dropInvalid, invalid events will be ignored and reported in the response. The default mode is rejectAll, which will cause a 412 error on the entire request on a valiation failure for any event. ', 'enum': ['rejectAll', 'dropInvalid']}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'accepted': {'type': 'int', 'position': 0, 'description': 'Number of accepted events '}, 'rejected': {'type': 'int', 'position': 0, 'description': 'Number of rejected events '}, 'events': {'type': 'list', 'position': 0, 'description': 'List of event submission results for each submitted event. This field will have the same number and order of events as the bulk submission request. ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of the submitted event. This will reflect the provided type, customerID, timestamp and UUID, or the generated values if these were not specified. '}, 'status': {'type': 'str', 'position': 0, 'description': "The submission status of this event. This will state 'rejected' if the event could not be validated, or 'accepted' if the event was accepted and has been enqueued for storage. ", 'enum': ['accepted', 'rejected']}, 'message': {'type': 'str', 'position': 0, 'description': 'If the event was rejected with a validation error, this field will state the reason for the rejection. '}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}