"""Autogenerated API schema"""
from argus_api import session


error_stats = {'tags': ['eventfilters/v1'], 'summary': 'Fetch filter error statistics (INTERNAL)', 'description': '', 'operationId': 'errorStats', 'produces': ['application/json'], 'parameters': [{'name': 'includeDetails', 'in': 'query', 'description': 'If true, include detailed error statistics per processing node', 'required': False, 'type': 'bool', 'default': False}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'filterID': {'type': 'int'}, 'instancesWithErrors': {'type': 'int'}, 'initErrorDisabled': {'type': 'int'}, 'errorDisabled': {'type': 'int'}, 'adminDisabled': {'type': 'int'}, 'components': {'type': 'list', 'items': {'type': 'dict', 'properties': {'componentIdentity': {'type': 'dict', 'properties': {'exact': {'type': 'boolean'}, 'identifiers': {'type': 'dict', 'additionalProperties': {'type': 'string'}}}}, 'errorCount': {'type': 'int'}}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
get = {'tags': ['/eventfilters/v1'], 'summary': 'Fetch filter  (INTERNAL)', 'description': '', 'operationId': 'get', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter to fetch', 'required': True, 'type': 'int'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'valid': {'type': 'boolean'}, 'index': {'type': 'int'}, 'labels': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}, 'description': {'type': 'string'}, 'expired': {'type': 'boolean'}, 'enabled': {'type': 'boolean'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'masterID': {'type': 'int'}, 'flags': {'type': 'int'}, 'revision': {'type': 'int'}, 'information': {'type': 'string'}, 'deleted': {'type': 'boolean'}, 'id': {'type': 'int'}, 'type': 'str', 'createdTimestamp': {'type': 'int', 'readOnly': True}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'validFromTimestamp': {'type': 'int', 'readOnly': True}, 'validToTimestamp': {'type': 'int', 'readOnly': True}, 'lastUpdatedTimestamp': {'type': 'int', 'readOnly': True}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
hit_stats = {'tags': ['eventfilters/v1'], 'summary': 'Fetch filter error statistics (INTERNAL)', 'description': '', 'operationId': 'hitStats', 'produces': ['application/json'], 'parameters': [{'name': 'period', 'in': 'query', 'description': 'Time period to fetch hit stats for (milliseconds)', 'required': False, 'type': 'int', 'default': 3600000}, {'name': 'includeDetails', 'in': 'query', 'description': 'If true, include details about hits per processing node', 'required': False, 'type': 'bool', 'default': False}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'filterID': {'type': 'int'}, 'hits': {'type': 'int'}, 'components': {'type': 'list', 'items': {'type': 'dict', 'properties': {'componentIdentity': {'type': 'dict', 'properties': {'exact': {'type': 'boolean'}, 'identifiers': {'type': 'dict', 'additionalProperties': {'type': 'string'}}}}, 'hitCount': {'type': 'int'}}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
list = {'tags': ['/eventfilters/v1'], 'summary': 'List filters (INTERNAL)', 'description': '', 'operationId': 'list', 'produces': ['application/json'], 'parameters': [{'name': 'limit', 'in': 'query', 'description': 'Limit result', 'required': False, 'type': 'int', 'default': 25}, {'name': 'offset', 'in': 'query', 'description': 'Offset result', 'required': False, 'type': 'int', 'default': 0}, {'name': 'search', 'in': 'query', 'description': 'Limit result to filters matching this searchstring', 'required': False, 'type': 'str'}, {'name': 'customerID', 'in': 'query', 'description': 'Limit result to filters for this customerID', 'required': False, 'type': 'list', 'items': {'type': 'int'}, 'collectionFormat': 'multi'}, {'name': 'type', 'in': 'query', 'description': 'Limit result to filters of this type', 'required': False, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'valid': {'type': 'boolean'}, 'index': {'type': 'int'}, 'labels': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}, 'description': {'type': 'string'}, 'expired': {'type': 'boolean'}, 'enabled': {'type': 'boolean'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'masterID': {'type': 'int'}, 'flags': {'type': 'int'}, 'revision': {'type': 'int'}, 'information': {'type': 'string'}, 'deleted': {'type': 'boolean'}, 'id': {'type': 'int'}, 'type': 'str', 'createdTimestamp': {'type': 'int', 'readOnly': True}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'validFromTimestamp': {'type': 'int', 'readOnly': True}, 'validToTimestamp': {'type': 'int', 'readOnly': True}, 'lastUpdatedTimestamp': {'type': 'int', 'readOnly': True}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
move_filter = {'tags': ['eventfilters/v1'], 'summary': 'Move an eventfilter to another customer (DEV)', 'description': '', 'operationId': 'moveFilter', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of event filter', 'required': True, 'type': 'int', 'minimum': 1}, {'in': 'body', 'name': 'body', 'description': 'Move request', 'required': False, 'schema': {'type': 'object', 'properties': {'customer': {'type': 'str', 'position': 0, 'description': 'ID or shortname of customer to move filter to. Required unless global is true. '}, 'global': {'type': 'bool', 'position': 0, 'description': 'Set to true to move filter to a global filter. If true, customer cannot be specified. '}}}}], 'responses': {'401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
revisions = {'tags': ['/eventfilters/v1'], 'summary': 'Fetch filter revisions by filter ID (INTERNAL)', 'description': '', 'operationId': 'revisions', 'produces': ['application/json'], 'parameters': [{'name': 'limit', 'in': 'query', 'description': 'Limit result', 'required': False, 'type': 'int', 'default': 25}, {'name': 'offset', 'in': 'query', 'description': 'Offset result', 'required': False, 'type': 'int', 'default': 0}, {'name': 'id', 'in': 'path', 'description': 'Fetch revisions for filter with this ID', 'required': True, 'type': 'int'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'valid': {'type': 'boolean'}, 'index': {'type': 'int'}, 'labels': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}, 'description': {'type': 'string'}, 'expired': {'type': 'boolean'}, 'enabled': {'type': 'boolean'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'masterID': {'type': 'int'}, 'flags': {'type': 'int'}, 'revision': {'type': 'int'}, 'information': {'type': 'string'}, 'deleted': {'type': 'boolean'}, 'id': {'type': 'int'}, 'type': 'str', 'createdTimestamp': {'type': 'int', 'readOnly': True}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'validFromTimestamp': {'type': 'int', 'readOnly': True}, 'validToTimestamp': {'type': 'int', 'readOnly': True}, 'lastUpdatedTimestamp': {'type': 'int', 'readOnly': True}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
search = {'tags': ['/eventfilters/v1'], 'summary': 'Search filters (INTERNAL)', 'description': '', 'operationId': 'search', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Search criteria', 'required': False, 'schema': {'type': 'object', 'properties': {'limit': {'type': 'int', 'xml': {'attribute': True}, 'position': 0, 'description': 'Limit results '}, 'offset': {'type': 'int', 'xml': {'attribute': True}, 'position': 0, 'description': 'Offset results '}, 'includeDeleted': {'type': 'bool', 'xml': {'attribute': True}, 'position': 0, 'description': 'Also include deleted objects (where implemented) '}, 'includeFlags': {'type': 'int', 'xml': {'attribute': True}, 'position': 0, 'description': 'Search objects with these flags set '}, 'excludeFlags': {'type': 'int', 'xml': {'attribute': True}, 'position': 0, 'description': 'Exclude objects with these flags set '}, 'customerID': {'type': 'list', 'xml': {'name': 'Customers', 'wrapped': True}, 'position': 0, 'description': 'Limit result to objects belonging to these customers ', 'uniqueItems': True, 'items': {'type': 'int', 'xml': {'name': 'CustomerID'}}}, 'type': {'type': 'str', 'position': 0, 'description': 'Limit search to filters of this type '}, 'description': {'type': 'str', 'position': 0, 'description': 'Match filters by words in description '}, 'searchString': {'type': 'str', 'position': 0, 'description': 'Match filters by words in entire filter configuration '}, 'labels': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with any of these filters ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'masterID': {'type': 'int', 'position': 0, 'description': 'Limit search to revisions of this master ID (by default, revisions are excluded) '}, 'userID': {'type': 'list', 'position': 0, 'description': 'Limit search to filters created/updated by any of these users ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'filterID': {'type': 'list', 'position': 0, 'description': 'Limit search to these spesific filters ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'associatedCaseID': {'type': 'list', 'position': 0, 'description': 'Limit search to filters associated to any of the listed cases. AssociatedCaseID 0 will include filters not associated to a case. ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'hitPeriod': {'type': 'int', 'position': 0, 'description': 'When searching by filter hits, look at hits for this period (previous time period in milliseconds) '}, 'minimumHits': {'type': 'int', 'position': 0, 'description': 'Limit search to filters reporting at least this number of hits for the hit period (SLOW) '}, 'maximumHits': {'type': 'int', 'position': 0, 'description': 'Limit search to filters reporting at most this number of hits for the hit period (SLOW) '}, 'includeCreatedTimestamp': {'type': 'bool', 'position': 0, 'description': 'When limiting filters by time, include filters by created timestamp '}, 'includeLastUpdatedTimestamp': {'type': 'bool', 'position': 0, 'description': 'When limiting filters by time, include filters by last updated timestamp '}, 'excludeExpired': {'type': 'bool', 'position': 0, 'description': 'Exclude filters which are expired (validToTimestamp has passed) '}, 'excludeFuture': {'type': 'bool', 'position': 0, 'description': 'Exclude filters which are not yet active (validFromTimestamp is in the future) '}, 'excludeValid': {'type': 'bool', 'position': 0, 'description': 'Exclude filters which are currently valid '}, 'startTimestamp': {'type': 'int', 'xml': {'attribute': True}, 'position': 0, 'description': 'Search objects from this timestamp '}, 'endTimestamp': {'type': 'int', 'xml': {'attribute': True}, 'position': 0, 'description': 'Search objects until this timestamp '}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'Order results by these properties (prefix with - to sort descending) ', 'items': {'type': 'string'}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'valid': {'type': 'boolean'}, 'index': {'type': 'int'}, 'labels': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}, 'description': {'type': 'string'}, 'expired': {'type': 'boolean'}, 'enabled': {'type': 'boolean'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'masterID': {'type': 'int'}, 'flags': {'type': 'int'}, 'revision': {'type': 'int'}, 'information': {'type': 'string'}, 'deleted': {'type': 'boolean'}, 'id': {'type': 'int'}, 'type': 'str', 'createdTimestamp': {'type': 'int', 'readOnly': True}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'validFromTimestamp': {'type': 'int', 'readOnly': True}, 'validToTimestamp': {'type': 'int', 'readOnly': True}, 'lastUpdatedTimestamp': {'type': 'int', 'readOnly': True}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
set_log_level = {'tags': ['eventfilters/v1'], 'summary': 'Set log level for specified filter (INTERNAL)', 'description': '', 'operationId': 'setLogLevel', 'consumes': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of event filter', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'EventFilter set log level request', 'required': False, 'schema': {'type': 'object', 'required': ['level'], 'properties': {'level': {'type': 'str', 'position': 0, 'description': 'Log level to be set for event filter ', 'enum': ['OFF', 'DEBUG', 'INFO', 'WARN', 'ERROR']}, 'instanceID': {'type': 'int', 'position': 0, 'description': 'ID of component instance to set log level for event filter, if not provided will set across instances '}}}}], 'responses': {'401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '408': {'description': 'Operation timeout'}, '412': {'description': 'Validation error'}}}