"""Autogenerated API schema"""
from argus_api import session


get_profile_picture = {'tags': ['currentuser/v1'], 'summary': "Get current user's profile picture (PUBLIC)", 'description': '', 'operationId': 'getProfilePicture', 'produces': ['*/*'], 'parameters': [{'name': 'default', 'in': 'query', 'description': 'If true, return default avatar image if user picture not set. Default is false.', 'required': False, 'type': 'bool', 'default': False}, {'name': 'width', 'in': 'query', 'description': 'If set, rescale image to the smallest size above this width (keep aspect ratio)', 'required': False, 'type': 'int', 'minimum': 1}, {'name': 'height', 'in': 'query', 'description': 'If set, rescale image to the smallest size above this height (keep aspect ratio)', 'required': False, 'type': 'int', 'minimum': 1}, {'name': 'size', 'in': 'query', 'description': 'If set, rescale image to this predefined size', 'required': False, 'type': 'str', 'enum': ['small', 'medium', 'large', 'xlarge']}], 'responses': {'401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Profile picture not found'}}}
update_profile_picture_json = {'tags': ['currentuser/v1'], 'summary': "Set current user's profile picture (PUBLIC) (PUBLIC)", 'description': '', 'operationId': 'updateProfilePictureJson', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Picture update request', 'required': False, 'schema': {'type': 'object', 'required': ['image', 'mimeType'], 'properties': {'image': {'type': 'str', 'position': 0, 'description': 'Image bytes ', 'minLength': 1, 'maxLength': 10000000}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'Image MIME type  => Sanitize by regex .+/.+'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of subject '}, 'userName': {'type': 'str', 'position': 0, 'description': 'User name '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of subject '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Created timestamp in ms '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Last updated timestamp in ms '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'properties': {'type': 'dict', 'position': 0, 'description': 'Properties of subject ', 'additionalProperties': {'type': 'string'}}, 'imageURL': {'type': 'str', 'position': 0, 'description': 'User profile picture image url '}, 'mobile': {'type': 'str', 'position': 0, 'description': 'Mobile number of user '}, 'email': {'type': 'str', 'position': 0, 'description': 'Email of user '}, 'lastLoginTimestamp': {'type': 'int', 'position': 0, 'description': 'Last authentication timestamp in ms '}, 'lastImpersonationTimestamp': {'type': 'int', 'position': 0, 'description': 'Last impersonation timestamp in ms '}, 'lastLoginIP': {'type': 'str', 'position': 0, 'description': 'Last IP the user authenticated from '}, 'timeZone': {'type': 'dict', 'properties': {'description': {'type': 'string'}}}, 'language': {'type': 'str', 'position': 0, 'description': 'Language of user ', 'enum': ['ENGLISH', 'NORWEGIAN']}, 'publicKey': {'type': 'str', 'position': 0, 'description': "User's public key "}, 'ascendantIDs': {'type': 'list', 'position': 0, 'description': 'IDs of ascendants ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DISABLED', 'AUTH_RADIUS', 'AUTH_SMS', 'AUTH_LDAP', 'AUTH_LOCAL', 'BLOCKED', 'FORCE_PWCHANGE', 'DAEMON_ACCOUNT', 'PASSWORD_NOT_SET', 'AUTH_CRYPTO', 'AUTH_TOTP', 'AUTH_APIKEY', 'ANONYMOUS_USER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}}}