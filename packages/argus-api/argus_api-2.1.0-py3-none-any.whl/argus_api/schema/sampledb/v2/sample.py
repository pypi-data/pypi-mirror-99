"""Autogenerated API schema"""
from argus_api import session


add_analysis = {'tags': ['sampledb/v2'], 'summary': 'Adds an analysis to a sample (DEV)', 'description': '', 'operationId': 'addAnalysis', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to add analysis result to', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Add analysis request', 'required': False, 'schema': {'type': 'object', 'required': ['analysisResult', 'customer', 'tlp', 'userAgent'], 'properties': {'analysisResult': {'type': 'dict', 'description': 'The result of the analysis as a JSON object'}, 'customer': {'type': 'str', 'position': 0, 'description': 'The shortname or ID of customer the analysis belongs to '}, 'userAgent': {'type': 'dict', 'required': ['name', 'version'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent, should be updated for each code or configuration change  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the analysis ', 'enum': ['red', 'amber', 'green', 'white']}, 'acl': {'type': 'list', 'position': 0, 'description': 'The shortname or IDs of users or groups that will be given explicit access ', 'items': {'type': 'string'}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'analysisResult': {'type': 'dict', 'description': 'The result of the analysis'}, 'sampleID': {'type': 'str', 'position': 0, 'description': 'The ID of the sample the analysis is for '}, 'analysisID': {'type': 'str', 'position': 0, 'description': 'The ID of the analysis '}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the analysis was created '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent '}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent '}}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the analysis ', 'enum': ['red', 'amber', 'green', 'white']}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of users given explicit access ', 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'grantedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted '}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
add_evidence = {'tags': ['sampledb/v2'], 'summary': 'Adds evidence to an analysis (DEV)', 'description': '', 'operationId': 'addEvidence', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample that holds the analysis', 'required': True, 'type': 'str'}, {'name': 'analysisID', 'in': 'path', 'description': 'UUID of analysis to add evidence to', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Add evidence request', 'required': False, 'schema': {'type': 'object', 'required': ['evidence', 'mimeType', 'name'], 'properties': {'evidence': {'type': 'str', 'position': 0, 'description': 'Base64 encoded evidence ', 'minLength': 1, 'maxLength': 10000000}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The mimeType of the evidence '}, 'name': {'type': 'str', 'position': 0, 'description': 'The name given to the evidence '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object. '}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the analysis was created '}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The MIME type of the evidence '}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the evidence '}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the evidence in bytes '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
add_link = {'tags': ['sampledb/v2'], 'summary': 'Adds an link to a sample (DEV)', 'description': '', 'operationId': 'addLink', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to add link to', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Add link request', 'required': False, 'schema': {'type': 'object', 'required': ['reference', 'tlp', 'type', 'userAgent'], 'properties': {'customer': {'type': 'str', 'position': 0, 'description': 'The shortname or ID of customer the link belongs to '}, 'userAgent': {'type': 'dict', 'required': ['name', 'version'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent, should be updated for each code or configuration change  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the link ', 'enum': ['red', 'amber', 'green', 'white']}, 'acl': {'type': 'list', 'position': 0, 'description': 'The shortname or IDs of users or groups that will be given explicit access ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'type': {'type': 'str', 'position': 0, 'description': 'The nature of the link between the two samples ', 'enum': ['child', 'downloads', 'loads', 'executes']}, 'reference': {'type': 'str', 'position': 0, 'description': 'The ID of the sample the link references  => Sanitize by regex [A-Fa-f0-9]{64}'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object. '}, 'sampleID': {'type': 'str', 'position': 0, 'description': 'The ID of the sample '}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the analysis was created '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent '}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent '}}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the link ', 'enum': ['red', 'amber', 'green', 'white']}, 'type': 'str', 'reference': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of the sample '}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes '}}}, 'options': ['child', 'downloads', 'loads', 'executes']}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
add_sample = {'tags': ['sampledb/v2'], 'summary': 'Upload a new sample file (DEV)', 'description': '', 'operationId': 'addSample', 'consumes': ['*'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'The sample file content', 'required': False, 'schema': {'type': 'object'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'exists': {'type': 'bool', 'position': 0, 'description': 'Whether the sample already existed '}, 'sample': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of the sample '}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes '}}}, 'challenge': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The id of the challenge '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'The challenge token '}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'An error occurred'}, '412': {'description': 'Validation error'}}}
add_submission = {'tags': ['sampledb/v2'], 'summary': 'Add a new sample submission. Requires a challenge token. A challenge token is a solution to a challenge generated by the challenge endpoint (DEV)', 'description': '', 'operationId': 'addSubmission', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to add submission for', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Add submission request', 'required': False, 'schema': {'type': 'object', 'required': ['challengeToken', 'fileName', 'mimeType', 'userAgent'], 'properties': {'fileName': {'type': 'str', 'position': 0, 'description': 'The filename of the sample '}, 'customer': {'type': 'str', 'position': 0, 'description': "The shortname or ID of customer the submission belongs to. Default value is the currernt user's customer "}, 'observedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of when the sample was observed. Defaults to the current time '}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The sample mime type '}, 'metaData': {'type': 'dict', 'position': 0, 'description': 'Meta data about the sample ', 'additionalProperties': {'type': 'string'}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'TLP color of the submission. Defaults to amber ', 'enum': ['red', 'amber', 'green', 'white']}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of user IDs or shortnames that are given explicit access to the submission ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userAgent': {'type': 'dict', 'required': ['name', 'version'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent, should be updated for each code or configuration change  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}}}, 'challengeToken': {'type': 'dict', 'required': ['id', 'sha256'], 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The id of the challenge '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'The challenge token '}}}}}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object. '}, 'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sample this submission belongs to '}, 'fileName': {'type': 'str', 'position': 0, 'description': 'The filename of the sample '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}, 'observedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the sample was observed '}, 'submittedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the submission was added '}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The sample mime type '}, 'metaData': {'type': 'dict', 'position': 0, 'description': 'Meta data about the sample ', 'additionalProperties': {'type': 'string'}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'TLP color of the submission ', 'enum': ['red', 'amber', 'green', 'white']}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of access controls that describe explicit access given to users or groups for this submission ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'grantedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted '}}}}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent '}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent '}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
download_raw_sample = {'tags': ['sampledb/v2'], 'summary': 'Download a raw sample file. Warning: The file returned may be malicious. Take caution (DEV)', 'description': '', 'operationId': 'downloadRawSample', 'produces': ['application/octet-stream'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'Successful operation'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'An error occurred'}, '412': {'description': 'Validation error'}}}
download_safe_sample = {'tags': ['sampledb/v2'], 'summary': 'Download a zipped sample file, password protected with the password "infected". Warning: The zipped file may be malicious. Take caution (DEV)', 'description': '', 'operationId': 'downloadSafeSample', 'produces': ['application/zip'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'Successful operation'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'An error occurred'}, '412': {'description': 'Validation error'}}}
get_analysis = {'tags': ['sampledb/v2'], 'summary': 'Fetches the analysis for the sample with the given ID (DEV)', 'description': '', 'operationId': 'getAnalysis', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the analysis from', 'required': True, 'type': 'str'}, {'name': 'analysisID', 'in': 'path', 'description': 'ID of the analysis to fetch', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'analysisResult': {'type': 'dict', 'description': 'The result of the analysis'}, 'sampleID': {'type': 'str', 'position': 0, 'description': 'The ID of the sample the analysis is for '}, 'analysisID': {'type': 'str', 'position': 0, 'description': 'The ID of the analysis '}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the analysis was created '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent '}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent '}}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the analysis ', 'enum': ['red', 'amber', 'green', 'white']}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of users given explicit access ', 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'grantedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted '}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_evidence = {'tags': ['sampledb/v2'], 'summary': 'Fetches the evidence metadata for the analysis for the sample with the given ID (DEV)', 'description': '', 'operationId': 'getEvidence', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the analysis from', 'required': True, 'type': 'str'}, {'name': 'analysisID', 'in': 'path', 'description': 'ID of the analysis the evidence is for', 'required': True, 'type': 'str'}, {'name': 'evidenceID', 'in': 'path', 'description': 'ID of the evidence to fetch', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object. '}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the analysis was created '}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The MIME type of the evidence '}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the evidence '}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the evidence in bytes '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_evidence_data = {'tags': ['sampledb/v2'], 'summary': 'Returns the evidence file. (DEV)', 'description': '', 'operationId': 'getEvidenceData', 'produces': ['*/*'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample the analysis is from', 'required': True, 'type': 'str'}, {'name': 'analysisID', 'in': 'path', 'description': 'The ID of the analysis you want to fetch evidence from', 'required': True, 'type': 'str'}, {'name': 'evidenceID', 'in': 'path', 'description': 'The ID of the evidence data you want to fetch', 'required': True, 'type': 'str'}], 'responses': {'401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_link = {'tags': ['sampledb/v2'], 'summary': 'Fetches the link for the sample with the given ID (DEV)', 'description': '', 'operationId': 'getLink', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the link from', 'required': True, 'type': 'str'}, {'name': 'linkID', 'in': 'path', 'description': 'ID of the link to fetch', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object. '}, 'sampleID': {'type': 'str', 'position': 0, 'description': 'The ID of the sample '}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the analysis was created '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent '}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent '}}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the link ', 'enum': ['red', 'amber', 'green', 'white']}, 'type': 'str', 'reference': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of the sample '}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes '}}}, 'options': ['child', 'downloads', 'loads', 'executes']}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_sample_meta_data = {'tags': ['sampledb/v2'], 'summary': 'Fetch meta data about a sample file (DEV)', 'description': '', 'operationId': 'getSampleMetaData', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'sha256': {'type': 'str', 'position': 0, 'description': 'The ID of the sample '}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes '}, 'timestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the sample was created '}, 'classifications': {'type': 'list', 'position': 0, 'description': 'The classifications for this sample. Sorted, with the newest first, and the oldest last ', 'items': {'type': 'dict', 'properties': {'version': {'type': 'str', 'position': 0, 'description': 'The version of the classifier used to generate this classification '}, 'type': 'str', 'superType': {'type': 'str', 'position': 0, 'description': 'The super type of file for the sample '}, 'arch': {'type': 'str', 'position': 0, 'description': 'The architecture for the sample '}, 'platform': {'type': 'str', 'position': 0, 'description': 'The platform for the sample '}, 'meta': {'type': 'dict', 'position': 0, 'description': 'Meta data for the sample ', 'additionalProperties': {'type': 'object'}}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'An error occurred'}, '412': {'description': 'Validation error'}}}
get_submission = {'tags': ['sampledb/v2'], 'summary': 'Fetch a submission for the sample with the given ID (DEV)', 'description': '', 'operationId': 'getSubmission', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample the submission belongs to', 'required': True, 'type': 'str'}, {'name': 'submissionID', 'in': 'path', 'description': 'The ID of the submission to fetch', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object. '}, 'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sample this submission belongs to '}, 'fileName': {'type': 'str', 'position': 0, 'description': 'The filename of the sample '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}, 'observedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the sample was observed '}, 'submittedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the submission was added '}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The sample mime type '}, 'metaData': {'type': 'dict', 'position': 0, 'description': 'Meta data about the sample ', 'additionalProperties': {'type': 'string'}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'TLP color of the submission ', 'enum': ['red', 'amber', 'green', 'white']}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of access controls that describe explicit access given to users or groups for this submission ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'grantedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted '}}}}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent '}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent '}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'The sample could not be found'}, '412': {'description': 'Validation error'}}}
get_upload_challenge = {'tags': ['sampledb/v2'], 'summary': "Generate a new challenge for a sample. The solution of the challenge is SHA256(x) where x is 'length' bytes of data starting from 'offset' bytes into the sample file (DEV)", 'description': '', 'operationId': 'getUploadChallenge', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to get submission challenge for', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The id of the challenge '}, 'offset': {'type': 'int', 'position': 0, 'description': 'The offset into the sample file from where to start calculating the hash '}, 'length': {'type': 'int', 'position': 0, 'description': 'The number of bytes to process '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'The sample could not be found'}, '412': {'description': 'Validation error'}, '422': {'description': 'The sample file is too small. Upload the full sample and use the challenge token returned in that response as proof'}}}
list_analysis = {'tags': ['sampledb/v2'], 'summary': 'Lists the analysis for the sample (DEV)', 'description': '', 'operationId': 'listAnalysis', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the analysis from', 'required': True, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'analysisResult': {'type': 'dict', 'description': 'The result of the analysis'}, 'sampleID': {'type': 'str', 'position': 0, 'description': 'The ID of the sample the analysis is for '}, 'analysisID': {'type': 'str', 'position': 0, 'description': 'The ID of the analysis '}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the analysis was created '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent '}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent '}}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the analysis ', 'enum': ['red', 'amber', 'green', 'white']}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of users given explicit access ', 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'grantedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted '}}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_evidence = {'tags': ['sampledb/v2'], 'summary': 'Lists the evidence metadata for the analysis (DEV)', 'description': '', 'operationId': 'listEvidence', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample the analysis is from', 'required': True, 'type': 'str'}, {'name': 'analysisID', 'in': 'path', 'description': 'The ID of the analysis you want to list evidence from', 'required': True, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object. '}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the analysis was created '}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The MIME type of the evidence '}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the evidence '}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the evidence in bytes '}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_links = {'tags': ['sampledb/v2'], 'summary': 'Lists the links for the sample (DEV)', 'description': '', 'operationId': 'listLinks', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the link from', 'required': True, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object. '}, 'sampleID': {'type': 'str', 'position': 0, 'description': 'The ID of the sample '}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the analysis was created '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent '}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent '}}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the link ', 'enum': ['red', 'amber', 'green', 'white']}, 'type': 'str', 'reference': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of the sample '}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes '}}}, 'options': ['child', 'downloads', 'loads', 'executes']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_submissions = {'tags': ['sampledb/v2'], 'summary': 'List all the submissions for a sample (DEV)', 'description': '', 'operationId': 'listSubmissions', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample to fetch submissions for', 'required': True, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object. '}, 'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sample this submission belongs to '}, 'fileName': {'type': 'str', 'position': 0, 'description': 'The filename of the sample '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}, 'observedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the sample was observed '}, 'submittedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the submission was added '}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The sample mime type '}, 'metaData': {'type': 'dict', 'position': 0, 'description': 'Meta data about the sample ', 'additionalProperties': {'type': 'string'}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'TLP color of the submission ', 'enum': ['red', 'amber', 'green', 'white']}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of access controls that describe explicit access given to users or groups for this submission ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'grantedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted '}}}}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent '}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent '}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'The sample could not be found'}, '412': {'description': 'Validation error'}}}