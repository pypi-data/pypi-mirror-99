"""Autogenerated API schema"""
from argus_api import session


get_evil_samples = {'tags': ['sampledb/v1'], 'summary': 'Searches for evil samples. (PUBLIC)', 'description': '', 'operationId': 'getEvilSamples', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Search criteria', 'required': False, 'schema': {'type': 'object', 'required': ['customerID', 'tlp'], 'properties': {'customerID': {'type': 'list', 'position': 0, 'description': 'Set of customer IDs to limit samples result. ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. (default 25)', 'minimum': 0, 'default': 25}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object. (default 0)', 'minimum': 0, 'default': 0}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Start of time search period for submission creation date. (default 24 hours before timestamp of request.)', 'minimum': 0}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'End of time search period for submission creation date. (default Timestamp of request.)', 'minimum': 0}, 'tlp': {'type': 'list', 'position': 0, 'description': 'Set of TLPs to search for. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['WHITE', 'GREEN', 'AMBER', 'RED']}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'sha256': {'type': 'string'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'Mimetype of the sample '}, 'entropy': {'type': 'float', 'position': 0, 'description': 'Entropy of the sample '}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of creation of the sample '}, 'ssDeep': {'type': 'str', 'position': 0, 'description': 'ssDeep of the sample '}, 'size': {'type': 'int', 'position': 0, 'description': 'Size of the sample '}, 'tlp': {'type': 'str', 'position': 0, 'description': 'TLP color of the sample ', 'readOnly': True, 'enum': ['WHITE', 'GREEN', 'AMBER', 'RED']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['EVIL', 'SAFE']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
get_sample = {'tags': ['sampledb/v1'], 'summary': 'Fetch sample info identified by SHA256. (PUBLIC)', 'description': '', 'operationId': 'getSample', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'SHA256 to identify sample info', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'sha256': {'type': 'string'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'Mimetype of the sample '}, 'entropy': {'type': 'float', 'position': 0, 'description': 'Entropy of the sample '}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of creation of the sample '}, 'ssDeep': {'type': 'str', 'position': 0, 'description': 'ssDeep of the sample '}, 'size': {'type': 'int', 'position': 0, 'description': 'Size of the sample '}, 'tlp': {'type': 'str', 'position': 0, 'description': 'TLP color of the sample ', 'readOnly': True, 'enum': ['WHITE', 'GREEN', 'AMBER', 'RED']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['EVIL', 'SAFE']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_sample_aggregated = {'tags': ['sampledb/v1'], 'summary': 'Fetch sample aggregated info identified by SHA256. (PUBLIC)', 'description': '', 'operationId': 'getSampleAggregated', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'SHA256 to identify sample aggregated info', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'sha256': {'type': 'string'}, 'firstSubmittedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of the first submission '}, 'lastSubmittedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of the last submission '}, 'filenames': {'type': 'list', 'position': 0, 'description': 'Names of the files in the sample ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'parents': {'type': 'list', 'position': 0, 'description': 'Set of SHA256 found in PARENT_SHA256 metafield of submissions. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'totalSubmissions': {'type': 'int', 'position': 0, 'description': 'Total number of submissions for this sample '}, 'archives': {'type': 'list', 'position': 0, 'description': 'Set of SHA256 found in ARCHIVE metafield of submissions. ', 'uniqueItems': True, 'items': {'type': 'string'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_sample_children = {'tags': ['sampledb/v1'], 'summary': 'Get sample children submissions with search defined by query params (PUBLIC)', 'description': '', 'operationId': 'getSampleChildren', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'SHA256 to identify parent sample', 'required': True, 'type': 'str'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'customerID', 'in': 'query', 'description': 'Search by customer IDs', 'required': False, 'type': 'list', 'items': {'type': 'int'}, 'collectionFormat': 'multi'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'sha256': {'type': 'str', 'position': 0, 'description': 'SHA256 of the sample '}, 'customerInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of creation of the submission '}, 'owner': {'type': 'str', 'position': 0, 'description': 'Owner of the submission '}, 'properties': {'type': 'dict', 'position': 0, 'description': 'Metadata of the submission ', 'additionalProperties': {'type': 'string'}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'TLP color of the submission ', 'readOnly': True, 'enum': ['WHITE', 'GREEN', 'AMBER', 'RED']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_sample_download = {'tags': ['sampledb/v1'], 'summary': 'Fetch and download sample by SHA256 (PUBLIC)', 'description': 'Download sample zip file by specified SHA256', 'operationId': 'getSampleDownload', 'produces': ['application/zip', 'application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'SHA256 to identify sample', 'required': True, 'type': 'str'}], 'responses': {'401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_sample_tags = {'tags': ['sampledb/v1'], 'summary': 'Fetch tags of sample which sample is identified by SHA256. (PUBLIC)', 'description': '', 'operationId': 'getSampleTags', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'SHA256 to identify sample which tags belongs to', 'required': True, 'type': 'str'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'sha256': {'type': 'str', 'position': 0, 'description': 'SHA256 of associated sample '}, 'producer': {'type': 'str', 'position': 0, 'description': 'Antivirus vendor '}, 'producerMeta': {'type': 'str', 'position': 0, 'description': 'Engine and update version '}, 'value': {'type': 'str', 'position': 0, 'description': 'Antivirus signature '}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of creation of the tag '}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_sandbox_pcap = {'tags': ['sampledb/v1'], 'summary': 'Fetch and download sandbox pcap by sample SHA256 (PUBLIC)', 'description': 'Download sandbox pcap by specified sample SHA256', 'operationId': 'getSandboxPcap', 'produces': ['application/octet-stream', 'application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'SHA256 to identify sample which sandbox pcap belongs to', 'required': True, 'type': 'str'}], 'responses': {'401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_sandbox_procgraph = {'tags': ['sampledb/v1'], 'summary': 'Fetch sandbox procgraph by sample SHA256 and id (PUBLIC)', 'description': 'Fetch sandbox procgraph by specified sample SHA256 and id', 'operationId': 'getSandboxProcgraph', 'produces': ['image/*', 'application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'SHA256 to identify sample which sandbox procgraph belongs to', 'required': True, 'type': 'str'}, {'name': 'runUUID', 'in': 'path', 'description': 'Sandbox procgraph ID', 'required': True, 'type': 'str'}], 'responses': {'401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_sandbox_runs = {'tags': ['sampledb/v1'], 'summary': 'Fetch sandbox runs of sample which sample is identified by SHA256. (PUBLIC)', 'description': '', 'operationId': 'getSandboxRuns', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'SHA256 to identify sample which sandbox runs belongs to', 'required': True, 'type': 'str'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'sha256': {'type': 'str', 'position': 0, 'description': 'SHA256 of the sample '}, 'runUUID': {'type': 'str', 'position': 0, 'description': 'Run UUID '}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of start of the run '}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestampl of end of the run '}, 'ip': {'type': 'str', 'position': 0, 'description': 'Client IP '}, 'version': {'type': 'str', 'position': 0, 'description': 'Version of the sandbox type '}, 'duration': {'type': 'int', 'position': 0, 'description': 'Duration of the run '}, 'type': 'str', 'result': {'type': 'dict', 'position': 0, 'description': 'Result of sandbox run, data structure varies depends on type and version of sandbox, no fixed schema is assigned '}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_submissions_by_sample_id = {'tags': ['sampledb/v1'], 'summary': 'Search for submissions with defined by query params (PUBLIC)', 'description': '', 'operationId': 'listSubmissionsBySampleID', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'SHA256 to identify sample submissions', 'required': True, 'type': 'str'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'customerID', 'in': 'query', 'description': 'Search by customer IDs', 'required': False, 'type': 'list', 'items': {'type': 'int'}, 'collectionFormat': 'multi'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'sha256': {'type': 'str', 'position': 0, 'description': 'SHA256 of the sample '}, 'customerInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of creation of the submission '}, 'owner': {'type': 'str', 'position': 0, 'description': 'Owner of the submission '}, 'properties': {'type': 'dict', 'position': 0, 'description': 'Metadata of the submission ', 'additionalProperties': {'type': 'string'}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'TLP color of the submission ', 'readOnly': True, 'enum': ['WHITE', 'GREEN', 'AMBER', 'RED']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
submit = {'tags': ['sampledb/v1'], 'summary': 'Submit a sample for analysis (PUBLIC)', 'description': '', 'operationId': 'submit', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Sample submission request', 'required': False, 'schema': {'type': 'object', 'required': ['customer', 'data', 'fileName', 'tlp'], 'properties': {'customer': {'type': 'str', 'position': 0, 'description': 'Customer ID or short name of the customer to register this sample to. '}, 'tlp': {'type': 'str', 'position': 0, 'description': 'TLP level of the sample. ', 'enum': ['WHITE', 'GREEN', 'AMBER', 'RED']}, 'data': {'type': 'str', 'position': 0, 'description': 'The sample data. '}, 'enableSandboxAnalysis': {'type': 'bool', 'position': 0, 'description': 'Enable sandbox analysis of sample. (default true)', 'default': True}, 'allowSandboxInternetAccess': {'type': 'bool', 'position': 0, 'description': 'Allow internet access to sandbox. (default false)', 'default': False}, 'enableAntivirusScan': {'type': 'bool', 'position': 0, 'description': 'Enable antivirus scan of sample. (default true)', 'default': True}, 'clientName': {'type': 'str', 'position': 0, 'description': 'Name of client application.  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'fileName': {'type': 'str', 'position': 0, 'description': 'Name of submitted file.  => Sanitize by regex [a-zA-Z0-9ÅåØøÆæ_\\-\\. ]*'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'sha256': {'type': 'str', 'position': 0, 'description': 'SHA256 of the sample '}, 'customerInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of creation of the submission '}, 'owner': {'type': 'str', 'position': 0, 'description': 'Owner of the submission '}, 'properties': {'type': 'dict', 'position': 0, 'description': 'Metadata of the submission ', 'additionalProperties': {'type': 'string'}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'TLP color of the submission ', 'readOnly': True, 'enum': ['WHITE', 'GREEN', 'AMBER', 'RED']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}