"""Autogenerated API schema"""
from argus_api import session


add_document = {'tags': ['documents/v1'], 'summary': 'Create a new document (PUBLIC)', 'description': "In order to create plain text document, use 'text' property and send text. Otherwise use 'data' property populated with base64 encoded representation of the document. Sending the both parameters will result in error.", 'operationId': 'addDocument', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'folderID', 'in': 'path', 'description': 'Parent folder ID', 'required': True, 'type': 'int', 'minimum': 1}, {'in': 'body', 'name': 'body', 'description': 'Document add request', 'required': False, 'schema': {'type': 'object', 'required': ['accessMode', 'data', 'inheritExplicitPermissions', 'mimeType', 'name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name of new document  => Sanitize by regex \\A[^\\\\\\/:*"\'?<>|]{1,254}\\z'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'MIME type of document content '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of new document (default roleBased)', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'lockRequestTime': {'type': 'int', 'position': 0, 'description': 'Specify how long the document should be locked (default 0)', 'default': 0}, 'overwriteExisting': {'type': 'bool', 'position': 0, 'description': 'If true, overwrite existing document with same name in parent folder, as a new revision. '}, 'data': {'type': 'str', 'position': 0, 'description': "Base64 encoded document content formatted according to the given MIME type. It is required if 'text' parameter is not defined ", 'minLength': 1, 'maxLength': 2147483647}, 'inheritExplicitPermissions': {'type': 'bool', 'position': 0, 'description': 'Inherit explicit permissions from parent folder (default false)', 'default': False}, 'notificationOptions': {'type': 'dict', 'properties': {'skip': {'type': 'bool', 'position': 0, 'description': 'If true, skip notification for current operation. '}}}, 'text': {'type': 'str', 'position': 0, 'description': 'Plain text document content. If set change document content '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'state': {'type': 'str', 'position': 0, 'description': 'Current state of the document ', 'enum': ['draft', 'published', 'discarded', 'incomplete']}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'masterID': {'type': 'int', 'position': 0, 'description': 'Points to the master document of this revision '}, 'revision': {'type': 'int', 'position': 0, 'description': 'Revision count '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document was published '}, 'publishDueTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document must be published (due date) '}, 'lockedUntilTimestamp': {'type': 'int', 'position': 0, 'description': 'Until when the document is locked '}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lockedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'MIME type of the document content '}, 'dataSize': {'type': 'int', 'position': 0, 'description': 'Size of the document content in bytes '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'SHA256 digest of this document '}, 'labels': {'type': 'list', 'position': 0, 'description': 'Free-text labels assigned to the document ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'currentUserLockStatus': {'type': 'str', 'position': 0, 'description': 'The lock status of this document, for the current user. ', 'enum': ['unlocked', 'lockedOtherUser', 'lockedCurrentUser', 'lockedOtherUserCanOverride']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document', 'folder']}, 'documentType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ATTACHMENT', 'CONTROLLED_VERSION', 'UNCOMMITTED', 'LOCKED_BY_CURRENTUSER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Parent folder not found'}, '412': {'description': 'Validation failed'}}}
add_document_raw = {'tags': ['documents/v1'], 'summary': 'Create a new document with the specified name into the parent folder (DEV)', 'description': 'Submit document data as raw data to this request. The content type specified in the request will be used.', 'operationId': 'addDocumentRaw', 'consumes': ['*'], 'produces': ['application/json'], 'parameters': [{'name': 'folderID', 'in': 'path', 'description': 'Parent folder ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'documentName', 'in': 'path', 'description': 'Document name', 'required': True, 'type': 'str'}, {'name': 'accessMode', 'in': 'query', 'description': 'Access mode to set on new document', 'required': False, 'type': 'str', 'default': 'roleBased', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, {'name': 'Content-Type', 'in': 'header', 'description': 'Document MIME-type', 'required': False, 'type': 'string'}, {'name': 'overwriteExisting', 'in': 'query', 'description': 'If true, overwrite existing document with the same name', 'required': False, 'type': 'bool', 'default': False}, {'in': 'body', 'name': 'body', 'required': False, 'schema': {'type': 'object'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'state': {'type': 'str', 'position': 0, 'description': 'Current state of the document ', 'enum': ['draft', 'published', 'discarded', 'incomplete']}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'masterID': {'type': 'int', 'position': 0, 'description': 'Points to the master document of this revision '}, 'revision': {'type': 'int', 'position': 0, 'description': 'Revision count '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document was published '}, 'publishDueTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document must be published (due date) '}, 'lockedUntilTimestamp': {'type': 'int', 'position': 0, 'description': 'Until when the document is locked '}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lockedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'MIME type of the document content '}, 'dataSize': {'type': 'int', 'position': 0, 'description': 'Size of the document content in bytes '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'SHA256 digest of this document '}, 'labels': {'type': 'list', 'position': 0, 'description': 'Free-text labels assigned to the document ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'currentUserLockStatus': {'type': 'str', 'position': 0, 'description': 'The lock status of this document, for the current user. ', 'enum': ['unlocked', 'lockedOtherUser', 'lockedCurrentUser', 'lockedOtherUserCanOverride']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document', 'folder']}, 'documentType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ATTACHMENT', 'CONTROLLED_VERSION', 'UNCOMMITTED', 'LOCKED_BY_CURRENTUSER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Parent folder not found'}, '412': {'description': 'Validation failed'}}}
add_folder = {'tags': ['documents/v1'], 'summary': 'Create a new subfolder (PUBLIC)', 'description': '', 'operationId': 'addFolder', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'parentID', 'in': 'path', 'description': 'ID of parent folder', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Folder add request', 'required': False, 'schema': {'type': 'object', 'required': ['accessMode', 'inheritExplicitPermissions', 'name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name of new folder  => Sanitize by regex \\A[^\\\\\\/:*"?<>|]{1,254}\\z'}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of new folder (default roleBased)', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'inheritExplicitPermissions': {'type': 'bool', 'position': 0, 'description': 'Inherit explicit permissions from parent folder (default false)', 'default': False}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'folder' ", 'enum': ['document', 'folder']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'ROOT_FOLDER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Parent folder not found'}, '412': {'description': 'Validation failed'}}}
add_folder_by_path = {'tags': ['documents/v1'], 'summary': 'Create a new subfolder in specified parent folder.', 'description': 'If createMissingFolders is set, any missing parts of the path will be attempted created. If the target folder to create already exists, the endpont will return 200. If a folder was actually created, the endpoint will return 201.', 'operationId': 'addFolderByPath', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'parentFolderPath', 'in': 'path', 'description': 'Path from customer root to the parent folder (if not specified, add the folder in the root folder)', 'required': True, 'type': 'str', 'pattern': '(/.+)?', 'allowEmptyValue': True}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to fetch from (default is current users customer', 'required': False, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Folder add request', 'required': False, 'schema': {'type': 'object', 'required': ['accessMode', 'name'], 'properties': {'createMissingFolders': {'type': 'bool', 'position': 0, 'description': 'If true, create any missing parent folder elements (default false)', 'default': False}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of new folder  => Sanitize by regex \\A[^\\\\\\/:*"?<>|]{1,254}\\z'}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of new folder (default roleBased)', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}], 'responses': {'200': {'description': 'If folder already existed and createMissingFolders is false'}, '201': {'description': 'If folder was created'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Parent folder not found'}, '412': {'description': 'Validation failed'}}}
add_folder_watcher = {'tags': ['documents/v1'], 'summary': 'Add watcher to specified folder. Requires write access to specified folder. (DEV)', 'description': '', 'operationId': 'addFolderWatcher', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'folderID', 'in': 'path', 'description': 'ID of folder', 'required': True, 'type': 'int', 'minimum': 1}, {'in': 'body', 'name': 'body', 'description': 'Folder watcher add request', 'required': False, 'schema': {'type': 'object', 'required': ['subject'], 'properties': {'subjectDomain': {'type': 'str', 'position': 0, 'description': 'Domain to resolve subject shortname in. Defaults to current users domain. '}, 'subject': {'type': 'str', 'position': 0, 'description': 'ID or shortname of subject to add as watcher. '}, 'negated': {'type': 'bool', 'position': 0, 'description': 'If true, register an explicitly negated watcher entry. Default is to add a new active watcher. (default false)', 'default': False}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'elementInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'type': 'str', 'name': {'type': 'str', 'position': 0, 'description': 'The foldername or filename of this element '}, 'parentElements': {'type': 'list', 'position': 0, 'description': 'The list of ancestor elements from this element to the document root ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'options': ['folder', 'document']}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was created '}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was deleted, or 0 (if not deleted) '}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'deletedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'flags': {'type': 'list', 'position': 0, 'description': 'Active flags for this watcher ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'negated', 'inherited', 'memberNegated', 'disabledAccess']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
add_folder_watcher_by_path = {'tags': ['documents/v1'], 'summary': 'Add watcher to specified folder', 'description': '', 'operationId': 'addFolderWatcherByPath', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'path', 'in': 'path', 'description': 'Path to folder', 'required': True, 'type': 'str', 'pattern': '(/.+)?'}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to lookup folder in (default is current users customer)', 'required': False, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Folder watcher add request', 'required': False, 'schema': {'type': 'object', 'required': ['subject'], 'properties': {'subjectDomain': {'type': 'str', 'position': 0, 'description': 'Domain to resolve subject shortname in. Defaults to current users domain. '}, 'subject': {'type': 'str', 'position': 0, 'description': 'ID or shortname of subject to add as watcher. '}, 'negated': {'type': 'bool', 'position': 0, 'description': 'If true, register an explicitly negated watcher entry. Default is to add a new active watcher. (default false)', 'default': False}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'elementInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'type': 'str', 'name': {'type': 'str', 'position': 0, 'description': 'The foldername or filename of this element '}, 'parentElements': {'type': 'list', 'position': 0, 'description': 'The list of ancestor elements from this element to the document root ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'options': ['folder', 'document']}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was created '}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was deleted, or 0 (if not deleted) '}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'deletedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'flags': {'type': 'list', 'position': 0, 'description': 'Active flags for this watcher ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'negated', 'inherited', 'memberNegated', 'disabledAccess']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
browse_folder = {'tags': ['documents/v1'], 'summary': 'Fetch specified folder entries (PUBLIC)', 'description': '', 'operationId': 'browseFolder', 'produces': ['application/json'], 'parameters': [{'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'folderID', 'in': 'path', 'description': 'ID of folder to browse', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'elementType': {'type': 'str', 'position': 0, 'description': 'Type of the folder/document ', 'enum': ['document', 'folder']}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Folder not found'}, '412': {'description': 'Validation failed'}}}
browse_folder_by_path = {'tags': ['documents/v1'], 'summary': 'Fetch specified folder entries', 'description': '', 'operationId': 'browseFolderByPath', 'produces': ['application/json'], 'parameters': [{'name': 'path', 'in': 'path', 'description': 'Path from customer root (if not specified, this returns the root', 'required': True, 'type': 'str', 'pattern': '(/.+)?', 'allowEmptyValue': True}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to fetch from (default is current users customer', 'required': False, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'folder' ", 'enum': ['document', 'folder']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'ROOT_FOLDER']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Folder not found'}, '412': {'description': 'Validation failed'}}}
delete_folder = {'tags': ['documents/v1'], 'summary': 'Delete specified folder, possibly recursively discarding contained documents (PUBLIC)', 'description': "If folder contains undeleted documents, the mode must be DELETE_CASCADE_ALL or DELETE_CASCADE_LISTED_DOCUMENTS with a list of documents to delete. If mode is DELETE_IF_EMPTY (default) and folder contains undeleted documents, the request will fail with a 409 CONFLICT and a metadata key 'documentID' listing documents which are not deleted.", 'operationId': 'deleteFolder', 'produces': ['application/json'], 'parameters': [{'name': 'folderID', 'in': 'path', 'description': 'ID of folder to delete', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}, {'name': 'mode', 'in': 'query', 'description': 'Recursive folder delete strategy, default is DELETE_IF_EMPTY', 'required': False, 'type': 'str', 'default': 'DELETE_IF_EMPTY', 'enum': ['DELETE_IF_EMPTY', 'DELETE_CASCADE_LISTED_DOCUMENTS', 'DELETE_CASCADE_ALL']}, {'name': 'cascadeDocumentID', 'in': 'query', 'description': 'List with IDs of documents which can be discarded (with mode DELETE_CASCADE_LISTED_DOCUMENTS)', 'required': False, 'type': 'list', 'items': {'type': 'int'}, 'collectionFormat': 'multi'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'folder' ", 'enum': ['document', 'folder']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'ROOT_FOLDER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '409': {'description': 'Conflict on delete (folder contains undeleted document(s))', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': {'type': 'string', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'integer', 'format': 'int64'}}}}, 'data': {'type': 'array', 'description': 'Contains an array of results', 'items': {'type': 'object', 'properties': {'elementType': {'type': 'string', 'position': 0, 'description': 'Type of the element ', 'enum': ['document', 'folder']}, 'elementID': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'Unique identifier of the element '}, 'elementName': {'type': 'string', 'position': 0, 'description': 'Name of the element '}}}}}}}, '412': {'description': 'Validation failed'}, '423': {'description': 'Document(s) locked', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': {'type': 'string', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'integer', 'format': 'int64'}}}}, 'data': {'type': 'array', 'description': 'Contains an array of results', 'items': {'type': 'object', 'properties': {'userID': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'ID of the user who locked the element. '}, 'userName': {'type': 'string', 'position': 0, 'description': 'Username of the user who locked the element. '}, 'lockedUntil': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'Until when the element is locked '}, 'elementType': {'type': 'string', 'position': 0, 'description': 'Type of the element ', 'enum': ['document', 'folder']}, 'elementID': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'Unique identifier of the element '}, 'elementName': {'type': 'string', 'position': 0, 'description': 'Name of the element '}}}}}}}}}
delete_folder_by_path = {'tags': ['documents/v1'], 'summary': 'Delete specified folder, possibly recursively discarding contained documents', 'description': "If folder contains undeleted documents, the mode must be DELETE_CASCADE_ALL or DELETE_CASCADE_LISTED_DOCUMENTS with a list of documents to delete. If mode is DELETE_IF_EMPTY (default) and folder contains undeleted documents, the request will fail with a 409 CONFLICT and a metadata key 'documentID' listing documents which are not deleted.", 'operationId': 'deleteFolderByPath', 'produces': ['application/json'], 'parameters': [{'name': 'parentFolderPath', 'in': 'path', 'description': 'Path from customer root to the parent folder (if not specified, fetch target folder from root folder)', 'required': True, 'type': 'str', 'pattern': '(/.+)?', 'allowEmptyValue': True}, {'name': 'folderName', 'in': 'path', 'description': 'Folder name', 'required': True, 'type': 'str'}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to fetch from (default is current users customer', 'required': False, 'type': 'str'}, {'name': 'mode', 'in': 'query', 'description': 'Recursive folder delete strategy, default is DELETE_IF_EMPTY', 'required': False, 'type': 'str', 'default': 'DELETE_IF_EMPTY', 'enum': ['DELETE_IF_EMPTY', 'DELETE_CASCADE_LISTED_DOCUMENTS', 'DELETE_CASCADE_ALL']}, {'name': 'cascadeDocumentID', 'in': 'query', 'description': 'List with IDs of documents which can be discarded (with mode DELETE_CASCADE_LISTED_DOCUMENTS)', 'required': False, 'type': 'list', 'items': {'type': 'int'}, 'collectionFormat': 'multi'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'folder' ", 'enum': ['document', 'folder']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'ROOT_FOLDER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '409': {'description': 'Conflict on delete (folder contains undeleted document(s))', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': {'type': 'string', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'integer', 'format': 'int64'}}}}, 'data': {'type': 'array', 'description': 'Contains an array of results', 'items': {'type': 'object', 'properties': {'elementType': {'type': 'string', 'position': 0, 'description': 'Type of the element ', 'enum': ['document', 'folder']}, 'elementID': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'Unique identifier of the element '}, 'elementName': {'type': 'string', 'position': 0, 'description': 'Name of the element '}}}}}}}, '412': {'description': 'Validation failed'}, '423': {'description': 'Document(s) locked', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': {'type': 'string', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'integer', 'format': 'int64'}}}}, 'data': {'type': 'array', 'description': 'Contains an array of results', 'items': {'type': 'object', 'properties': {'userID': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'ID of the user who locked the element. '}, 'userName': {'type': 'string', 'position': 0, 'description': 'Username of the user who locked the element. '}, 'lockedUntil': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'Until when the element is locked '}, 'elementType': {'type': 'string', 'position': 0, 'description': 'Type of the element ', 'enum': ['document', 'folder']}, 'elementID': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'Unique identifier of the element '}, 'elementName': {'type': 'string', 'position': 0, 'description': 'Name of the element '}}}}}}}}}
delete_folder_watcher = {'tags': ['documents/v1'], 'summary': 'Delete watcher entry from folder. Requires write access to specified folder. (DEV)', 'description': '', 'operationId': 'deleteFolderWatcher', 'produces': ['application/json'], 'parameters': [{'name': 'folderID', 'in': 'path', 'description': 'ID of folder', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'entryID', 'in': 'path', 'description': 'ID of watcher entry', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'elementInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'type': 'str', 'name': {'type': 'str', 'position': 0, 'description': 'The foldername or filename of this element '}, 'parentElements': {'type': 'list', 'position': 0, 'description': 'The list of ancestor elements from this element to the document root ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'options': ['folder', 'document']}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was created '}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was deleted, or 0 (if not deleted) '}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'deletedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'flags': {'type': 'list', 'position': 0, 'description': 'Active flags for this watcher ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'negated', 'inherited', 'memberNegated', 'disabledAccess']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
delete_folder_watcher_by_path = {'tags': ['documents/v1'], 'summary': 'Delete watcher entry from folder', 'description': '', 'operationId': 'deleteFolderWatcherByPath', 'produces': ['application/json'], 'parameters': [{'name': 'path', 'in': 'path', 'description': 'Path to folder', 'required': True, 'type': 'str', 'pattern': '(/.+)?'}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to lookup folder in (default is current users customer)', 'required': False, 'type': 'str'}, {'name': 'entryID', 'in': 'path', 'description': 'ID of watcher entry', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'elementInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'type': 'str', 'name': {'type': 'str', 'position': 0, 'description': 'The foldername or filename of this element '}, 'parentElements': {'type': 'list', 'position': 0, 'description': 'The list of ancestor elements from this element to the document root ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'options': ['folder', 'document']}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was created '}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was deleted, or 0 (if not deleted) '}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'deletedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'flags': {'type': 'list', 'position': 0, 'description': 'Active flags for this watcher ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'negated', 'inherited', 'memberNegated', 'disabledAccess']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
get_current_user_folder_watch_status = {'tags': ['documents/v1'], 'summary': 'Get current user watcher status for folder (DEV)', 'description': '', 'operationId': 'getCurrentUserFolderWatchStatus', 'produces': ['application/json'], 'parameters': [{'name': 'folderID', 'in': 'path', 'description': 'ID of folder', 'required': True, 'type': 'int', 'minimum': 1}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'watcherID': {'type': 'str', 'position': 0, 'description': 'If currentuser is a watcher, this points to the ID of the closed watcher entry. Returns null if currentuser is not a watcher. '}, 'element': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'type': 'str', 'name': {'type': 'str', 'position': 0, 'description': 'The foldername or filename of this element '}, 'parentElements': {'type': 'list', 'position': 0, 'description': 'The list of ancestor elements from this element to the document root ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'options': ['folder', 'document']}}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'status': {'type': 'str', 'position': 0, 'description': "This status reflects the current state of the currentuser for the current document or folder. If the currentuser is not a watcher for this document, this will return 'none'. ", 'enum': ['user', 'group', 'inherited', 'negated', 'none']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
get_current_user_folder_watch_status_by_path = {'tags': ['documents/v1'], 'summary': 'Get current user watcher status for folder', 'description': '', 'operationId': 'getCurrentUserFolderWatchStatusByPath', 'produces': ['application/json'], 'parameters': [{'name': 'path', 'in': 'path', 'description': 'Path to folder', 'required': True, 'type': 'str', 'pattern': '(/.+)?'}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to fetch from (default is current users customer)', 'required': False, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'watcherID': {'type': 'str', 'position': 0, 'description': 'If currentuser is a watcher, this points to the ID of the closed watcher entry. Returns null if currentuser is not a watcher. '}, 'element': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'type': 'str', 'name': {'type': 'str', 'position': 0, 'description': 'The foldername or filename of this element '}, 'parentElements': {'type': 'list', 'position': 0, 'description': 'The list of ancestor elements from this element to the document root ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'options': ['folder', 'document']}}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'status': {'type': 'str', 'position': 0, 'description': "This status reflects the current state of the currentuser for the current document or folder. If the currentuser is not a watcher for this document, this will return 'none'. ", 'enum': ['user', 'group', 'inherited', 'negated', 'none']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
get_current_user_root_folder = {'tags': ['documents/v1'], 'summary': 'Fetch root folder for the customers that current user has access to (PUBLIC)', 'description': "If the current user has access to a single customer it returns the content of that customer's root folder, otherwise it returns the list of root folders for each customer, without a content.", 'operationId': 'getCurrentUserRootFolder', 'produces': ['application/json'], 'parameters': [{'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'elementType': {'type': 'str', 'position': 0, 'description': 'Type of the folder/document ', 'enum': ['document', 'folder']}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
get_folder_meta_info_by_id = {'tags': ['documents/v1'], 'summary': 'Fetch specified folder metadata (PUBLIC)', 'description': '', 'operationId': 'getFolderMetaInfoById', 'produces': ['application/json'], 'parameters': [{'name': 'folderID', 'in': 'path', 'description': 'ID of folder to fetch', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'folder' ", 'enum': ['document', 'folder']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'ROOT_FOLDER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
get_folder_meta_info_by_path = {'tags': ['documents/v1'], 'summary': 'Fetch specified folder metadata', 'description': '', 'operationId': 'getFolderMetaInfoByPath', 'produces': ['application/json'], 'parameters': [{'name': 'path', 'in': 'path', 'description': 'Path from customer root (if not specified, this returns the root)', 'required': True, 'type': 'str', 'pattern': '(/.+)?', 'allowEmptyValue': True}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to fetch from (default is current users customer', 'required': False, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'folder' ", 'enum': ['document', 'folder']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'ROOT_FOLDER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
grant_folder_access = {'tags': ['documents/v1'], 'summary': 'Grant access to specified folder (PUBLIC)', 'description': 'If the access level is folder, the user is allowed to obtain the information about the folder (without folder content). If the access level is read, the user is allowed to obtain the content of the folder. If the access level is write, the user is allowed to update the folder.', 'operationId': 'grantFolderAccess', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'folderID', 'in': 'path', 'description': 'Folder ID', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'required': False, 'schema': {'type': 'object', 'required': ['level', 'subject'], 'properties': {'subject': {'type': 'str', 'position': 0, 'description': 'Specify user/group to grant access to '}, 'level': {'type': 'str', 'position': 0, 'description': 'Specify access level to grant to user/group ', 'enum': ['folder', 'read', 'write']}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'level': {'type': 'str', 'position': 0, 'description': 'What access level was granted ', 'enum': ['none', 'folder', 'read', 'write']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
grant_folder_access_by_path = {'tags': ['documents/v1'], 'summary': 'Grant access to specified folder', 'description': 'If the access level is folder, the user is allowed to obtain the information about the folder (without folder content). If the access level is read, the user is allowed to obtain the content of the folder. If the access level is write, the user is allowed to update the folder.', 'operationId': 'grantFolderAccessByPath', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'path', 'in': 'path', 'description': 'Path from customer root (if not specified, this returns the root', 'required': True, 'type': 'str', 'pattern': '(/.+)?', 'allowEmptyValue': True}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to fetch from (default is current users customer', 'required': False, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Request specifying access to grant', 'required': False, 'schema': {'type': 'object', 'required': ['level', 'subject'], 'properties': {'subject': {'type': 'str', 'position': 0, 'description': 'Specify user/group to grant access to '}, 'level': {'type': 'str', 'position': 0, 'description': 'Specify access level to grant to user/group ', 'enum': ['folder', 'read', 'write']}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'level': {'type': 'str', 'position': 0, 'description': 'What access level was granted ', 'enum': ['none', 'folder', 'read', 'write']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
list_document_watchers_1 = {'tags': ['documents/v1'], 'summary': 'Get all watchers for folder (DEV)', 'description': '', 'operationId': 'listDocumentWatchers_1', 'produces': ['application/json'], 'parameters': [{'name': 'folderID', 'in': 'path', 'description': 'ID of folder', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'limit', 'in': 'query', 'description': 'Limit the result', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip this number of results', 'required': False, 'type': 'int', 'minimum': 0}, {'name': 'includeInherited', 'in': 'query', 'description': 'If true, also fetch watchers defined on parent folders', 'required': False, 'type': 'bool', 'default': True}, {'name': 'includeNegated', 'in': 'query', 'description': 'If true, also fetch explicit unwatch records', 'required': False, 'type': 'bool'}, {'name': 'includeDeleted', 'in': 'query', 'description': 'If true, also fetch deleted watcher records', 'required': False, 'type': 'bool'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'elementInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'type': 'str', 'name': {'type': 'str', 'position': 0, 'description': 'The foldername or filename of this element '}, 'parentElements': {'type': 'list', 'position': 0, 'description': 'The list of ancestor elements from this element to the document root ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'options': ['folder', 'document']}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was created '}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was deleted, or 0 (if not deleted) '}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'deletedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'flags': {'type': 'list', 'position': 0, 'description': 'Active flags for this watcher ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'negated', 'inherited', 'memberNegated', 'disabledAccess']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
list_document_watchers_2 = {'tags': ['documents/v1'], 'summary': 'Get all watchers for folder', 'description': '', 'operationId': 'listDocumentWatchers_2', 'produces': ['application/json'], 'parameters': [{'name': 'path', 'in': 'path', 'description': 'Path to folder', 'required': True, 'type': 'str', 'pattern': '(/.+)?'}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to lookup folder in (default is current users customer)', 'required': False, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Limit the result', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip this number of results', 'required': False, 'type': 'int', 'minimum': 0}, {'name': 'includeInherited', 'in': 'query', 'description': 'If true, also fetch watchers defined on parent folders', 'required': False, 'type': 'bool', 'default': True}, {'name': 'includeNegated', 'in': 'query', 'description': 'If true, also fetch explicit unwatch records', 'required': False, 'type': 'bool'}, {'name': 'includeDeleted', 'in': 'query', 'description': 'If true, also fetch deleted watcher records', 'required': False, 'type': 'bool'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'elementInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'type': 'str', 'name': {'type': 'str', 'position': 0, 'description': 'The foldername or filename of this element '}, 'parentElements': {'type': 'list', 'position': 0, 'description': 'The list of ancestor elements from this element to the document root ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'options': ['folder', 'document']}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was created '}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was deleted, or 0 (if not deleted) '}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'deletedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'flags': {'type': 'list', 'position': 0, 'description': 'Active flags for this watcher ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'negated', 'inherited', 'memberNegated', 'disabledAccess']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
list_folder_access = {'tags': ['documents/v1'], 'summary': 'Fetch ACL for specified folder (PUBLIC)', 'description': '', 'operationId': 'listFolderAccess', 'produces': ['application/json'], 'parameters': [{'name': 'folderID', 'in': 'path', 'description': 'Folder ID', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'level': {'type': 'str', 'position': 0, 'description': 'What access level was granted ', 'enum': ['none', 'folder', 'read', 'write']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
list_folder_access_by_path = {'tags': ['documents/v1'], 'summary': 'Fetch ACL for specified folder', 'description': '', 'operationId': 'listFolderAccessByPath', 'produces': ['application/json'], 'parameters': [{'name': 'path', 'in': 'path', 'description': 'Path from customer root (if not specified, this returns the root', 'required': True, 'type': 'str', 'pattern': '(/.+)?', 'allowEmptyValue': True}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to fetch from (default is current users customer', 'required': False, 'type': 'str'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'level': {'type': 'str', 'position': 0, 'description': 'What access level was granted ', 'enum': ['none', 'folder', 'read', 'write']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
move_folder = {'tags': ['documents/v1'], 'summary': 'Move specified folder (PUBLIC)', 'description': '', 'operationId': 'moveFolder', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'folderID', 'in': 'path', 'description': 'ID of folder to update', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Folder update request', 'required': False, 'schema': {'type': 'object', 'properties': {'newFolderID': {'type': 'int', 'minimum': 1}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'folder' ", 'enum': ['document', 'folder']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'ROOT_FOLDER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
revoke_folder_access = {'tags': ['documents/v1'], 'summary': 'Revoke specified explicit access from folder (PUBLIC)', 'description': '', 'operationId': 'revokeFolderAccess', 'produces': ['application/json'], 'parameters': [{'name': 'folderID', 'in': 'path', 'description': 'Folder ID', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}, {'name': 'accessID', 'in': 'path', 'description': 'Access ID', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'level': {'type': 'str', 'position': 0, 'description': 'What access level was granted ', 'enum': ['none', 'folder', 'read', 'write']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
revoke_folder_access_by_path = {'tags': ['documents/v1'], 'summary': 'Revoke specified explicit access from folder', 'description': '', 'operationId': 'revokeFolderAccessByPath', 'produces': ['application/json'], 'parameters': [{'name': 'path', 'in': 'path', 'description': 'Path from customer root (if not specified, this returns the root)', 'required': True, 'type': 'str', 'pattern': '(/.+)?', 'allowEmptyValue': True}, {'name': 'accessID', 'in': 'path', 'description': 'Access ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to fetch from (default is current users customer', 'required': False, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'level': {'type': 'str', 'position': 0, 'description': 'What access level was granted ', 'enum': ['none', 'folder', 'read', 'write']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
set_current_user_folder_watch_status = {'tags': ['documents/v1'], 'summary': 'Change current user watcher status for folder. Requires read access to folder. (DEV)', 'description': '', 'operationId': 'setCurrentUserFolderWatchStatus', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'folderID', 'in': 'path', 'description': 'ID of folder', 'required': True, 'type': 'int', 'minimum': 1}, {'in': 'body', 'name': 'body', 'description': 'Request specifying status change', 'required': False, 'schema': {'type': 'object', 'properties': {'watch': {'type': 'bool', 'position': 0, 'description': 'If true, enable an explicit watcher for the current user for the target folder. If false, add an explicit negation for the current user. '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'watcherID': {'type': 'str', 'position': 0, 'description': 'If currentuser is a watcher, this points to the ID of the closed watcher entry. Returns null if currentuser is not a watcher. '}, 'element': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'type': 'str', 'name': {'type': 'str', 'position': 0, 'description': 'The foldername or filename of this element '}, 'parentElements': {'type': 'list', 'position': 0, 'description': 'The list of ancestor elements from this element to the document root ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'options': ['folder', 'document']}}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'status': {'type': 'str', 'position': 0, 'description': "This status reflects the current state of the currentuser for the current document or folder. If the currentuser is not a watcher for this document, this will return 'none'. ", 'enum': ['user', 'group', 'inherited', 'negated', 'none']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
set_current_user_folder_watch_status_1 = {'tags': ['documents/v1'], 'summary': 'Set current user watcher status for folder', 'description': '', 'operationId': 'setCurrentUserFolderWatchStatus_1', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'path', 'in': 'path', 'description': 'Path to folder', 'required': True, 'type': 'str', 'pattern': '(/.+)?'}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to lookup folder in (default is current users customer)', 'required': False, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Request specifying status change', 'required': False, 'schema': {'type': 'object', 'properties': {'watch': {'type': 'bool', 'position': 0, 'description': 'If true, enable an explicit watcher for the current user for the target folder. If false, add an explicit negation for the current user. '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'watcherID': {'type': 'str', 'position': 0, 'description': 'If currentuser is a watcher, this points to the ID of the closed watcher entry. Returns null if currentuser is not a watcher. '}, 'element': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'type': 'str', 'name': {'type': 'str', 'position': 0, 'description': 'The foldername or filename of this element '}, 'parentElements': {'type': 'list', 'position': 0, 'description': 'The list of ancestor elements from this element to the document root ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'options': ['folder', 'document']}}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'status': {'type': 'str', 'position': 0, 'description': "This status reflects the current state of the currentuser for the current document or folder. If the currentuser is not a watcher for this document, this will return 'none'. ", 'enum': ['user', 'group', 'inherited', 'negated', 'none']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
update_document_access_settings_1 = {'tags': ['documents/v1'], 'summary': 'Change access settings on specified folder (PUBLIC)', 'description': "If the access mode is roleBased, user accessing the folder must have appropriate role, set by administrator. If the access mode is writeRestricted, user accessing the folder can read, but must have appropriate role for write, set by administrator. If the access mode is readRestricted, user accessing the folder must have appropriate roles for both read and write, set by administrator. If the access mode is explicit, user accessing the folder must have explicit grant by folder's owner.", 'operationId': 'updateDocumentAccessSettings_1', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'folderID', 'in': 'path', 'description': 'Folder ID', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'required': False, 'schema': {'type': 'object', 'required': ['accessMode'], 'properties': {'accessMode': {'type': 'str', 'position': 0, 'description': 'Specify general access mode for document/folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'folder' ", 'enum': ['document', 'folder']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'ROOT_FOLDER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
update_document_access_settings_by_path_1 = {'tags': ['documents/v1'], 'summary': 'Change access settings on specified folder', 'description': "If the access mode is roleBased, user accessing the folder must have appropriate role, set by administrator. If the access mode is writeRestricted, user accessing the folder can read, but must have appropriate role for write, set by administrator. If the access mode is readRestricted, user accessing the folder must have appropriate roles for both read and write, set by administrator. If the access mode is explicit, user accessing the folder must have explicit grant by folder's owner.", 'operationId': 'updateDocumentAccessSettingsByPath_1', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'path', 'in': 'path', 'description': 'Path from customer root (if not specified, this returns the root)', 'required': True, 'type': 'str', 'pattern': '(/.+)?', 'allowEmptyValue': True}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to fetch from (default is current users customer)', 'required': False, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Request specifying access mode change', 'required': False, 'schema': {'type': 'object', 'required': ['accessMode'], 'properties': {'accessMode': {'type': 'str', 'position': 0, 'description': 'Specify general access mode for document/folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'folder' ", 'enum': ['document', 'folder']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'ROOT_FOLDER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
update_folder = {'tags': ['documents/v1'], 'summary': 'Update specified folder (PUBLIC)', 'description': '', 'operationId': 'updateFolder', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'folderID', 'in': 'path', 'description': 'ID of folder to update', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Folder update request', 'required': False, 'schema': {'type': 'object', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'If set change folder name  => Sanitize by regex \\A[^\\\\\\/:*"?<>|]{1,254}\\z'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'folder' ", 'enum': ['document', 'folder']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'ROOT_FOLDER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
update_folder_by_path = {'tags': ['documents/v1'], 'summary': 'Update specified folder', 'description': '', 'operationId': 'updateFolderByPath', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'path', 'in': 'path', 'description': 'Path from customer root (if not specified, this returns the root)', 'required': True, 'type': 'str', 'pattern': '(/.+)?', 'allowEmptyValue': True}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to fetch from (default is current users customer', 'required': False, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Folder update request', 'required': False, 'schema': {'type': 'object', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'If set change folder name  => Sanitize by regex \\A[^\\\\\\/:*"?<>|]{1,254}\\z'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'folder' ", 'enum': ['document', 'folder']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'ROOT_FOLDER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}