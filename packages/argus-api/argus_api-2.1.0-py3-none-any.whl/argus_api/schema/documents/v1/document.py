"""Autogenerated API schema"""
from argus_api import session


add_document_by_path_raw = {'tags': ['documents/v1'], 'summary': 'Create a new document with the specified name into the parent folder', 'description': 'Submit document data as raw data to this request. The content type specified in the request will be used.', 'operationId': 'addDocumentByPathRaw', 'consumes': ['*'], 'produces': ['application/json'], 'parameters': [{'name': 'parentFolderPath', 'in': 'path', 'description': 'Path from customer root to the parent folder (if not specified, add the folder in the root folder)', 'required': True, 'type': 'str', 'pattern': '(/.+)?', 'allowEmptyValue': True}, {'name': 'documentName', 'in': 'path', 'description': 'Document name', 'required': True, 'type': 'str'}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to fetch from (default is current users customer', 'required': False, 'type': 'str'}, {'name': 'accessMode', 'in': 'query', 'description': 'Access mode to set on new document', 'required': False, 'type': 'str', 'default': 'roleBased', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, {'name': 'createMissing', 'in': 'query', 'description': 'If true, create any missing folders before adding document', 'required': False, 'type': 'bool', 'default': False}, {'name': 'overwriteExisting', 'in': 'query', 'description': 'If true, overwrite existing document with the same name', 'required': False, 'type': 'bool', 'default': False}, {'name': 'Content-Type', 'in': 'header', 'description': 'Document MIME-type', 'required': False, 'type': 'string'}, {'in': 'body', 'name': 'body', 'required': False, 'schema': {'type': 'object'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'state': {'type': 'str', 'position': 0, 'description': 'Current state of the document ', 'enum': ['draft', 'published', 'discarded', 'incomplete']}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'masterID': {'type': 'int', 'position': 0, 'description': 'Points to the master document of this revision '}, 'revision': {'type': 'int', 'position': 0, 'description': 'Revision count '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document was published '}, 'publishDueTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document must be published (due date) '}, 'lockedUntilTimestamp': {'type': 'int', 'position': 0, 'description': 'Until when the document is locked '}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lockedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'MIME type of the document content '}, 'dataSize': {'type': 'int', 'position': 0, 'description': 'Size of the document content in bytes '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'SHA256 digest of this document '}, 'labels': {'type': 'list', 'position': 0, 'description': 'Free-text labels assigned to the document ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'currentUserLockStatus': {'type': 'str', 'position': 0, 'description': 'The lock status of this document, for the current user. ', 'enum': ['unlocked', 'lockedOtherUser', 'lockedCurrentUser', 'lockedOtherUserCanOverride']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document', 'folder']}, 'documentType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ATTACHMENT', 'CONTROLLED_VERSION', 'UNCOMMITTED', 'LOCKED_BY_CURRENTUSER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Parent folder not found'}, '412': {'description': 'Validation failed'}}}
add_document_watcher = {'tags': ['documents/v1'], 'summary': 'Add watcher to specified document. Requires write access to the document. (DEV)', 'description': '', 'operationId': 'addDocumentWatcher', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'documentID', 'in': 'path', 'description': 'ID of document', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Document watcher add request', 'required': False, 'schema': {'type': 'object', 'required': ['subject'], 'properties': {'subjectDomain': {'type': 'str', 'position': 0, 'description': 'Domain to resolve subject shortname in. Defaults to current users domain. '}, 'subject': {'type': 'str', 'position': 0, 'description': 'ID or shortname of subject to add as watcher. '}, 'negated': {'type': 'bool', 'position': 0, 'description': 'If true, register an explicitly negated watcher entry. Default is to add a new active watcher. (default false)', 'default': False}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'elementInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'type': 'str', 'name': {'type': 'str', 'position': 0, 'description': 'The foldername or filename of this element '}, 'parentElements': {'type': 'list', 'position': 0, 'description': 'The list of ancestor elements from this element to the document root ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'options': ['folder', 'document']}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was created '}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was deleted, or 0 (if not deleted) '}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'deletedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'flags': {'type': 'list', 'position': 0, 'description': 'Active flags for this watcher ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'negated', 'inherited', 'memberNegated', 'disabledAccess']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
add_document_watcher_by_path = {'tags': ['documents/v1'], 'summary': 'Add watcher to specified document. Requires write access to the document.', 'description': '', 'operationId': 'addDocumentWatcherByPath', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'parentFolderPath', 'in': 'path', 'description': 'Path to parent folder (if not specified, select document from root folder)', 'required': True, 'type': 'str', 'pattern': '(/.+)?'}, {'name': 'documentName', 'in': 'path', 'description': 'Document name', 'required': True, 'type': 'str'}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to lookup folder in (default is current users customer)', 'required': False, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Document watcher add request', 'required': False, 'schema': {'type': 'object', 'required': ['subject'], 'properties': {'subjectDomain': {'type': 'str', 'position': 0, 'description': 'Domain to resolve subject shortname in. Defaults to current users domain. '}, 'subject': {'type': 'str', 'position': 0, 'description': 'ID or shortname of subject to add as watcher. '}, 'negated': {'type': 'bool', 'position': 0, 'description': 'If true, register an explicitly negated watcher entry. Default is to add a new active watcher. (default false)', 'default': False}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'elementInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'type': 'str', 'name': {'type': 'str', 'position': 0, 'description': 'The foldername or filename of this element '}, 'parentElements': {'type': 'list', 'position': 0, 'description': 'The list of ancestor elements from this element to the document root ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'options': ['folder', 'document']}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was created '}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was deleted, or 0 (if not deleted) '}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'deletedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'flags': {'type': 'list', 'position': 0, 'description': 'Active flags for this watcher ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'negated', 'inherited', 'memberNegated', 'disabledAccess']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
commit_document = {'tags': ['documents/v1'], 'summary': 'Commit specified document (PUBLIC)', 'description': '', 'operationId': 'commitDocument', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'documentID', 'in': 'path', 'description': 'ID of document to commit', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Document commit request', 'required': False, 'schema': {'type': 'object', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'If set change document name  => Sanitize by regex \\A[^\\\\\\/:*"?<>|]{1,254}\\z'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'If set change document MIME type '}, 'data': {'type': 'str', 'position': 0, 'description': 'Base64 encoded document content formatted according to the given MIME type. If set change document content ', 'minLength': 1, 'maxLength': 2147483647}, 'lockRequestTime': {'type': 'int', 'position': 0, 'description': 'Specify how long the document should be locked (default 0)', 'default': 0}, 'notificationOptions': {'type': 'dict', 'properties': {'skip': {'type': 'bool', 'position': 0, 'description': 'If true, skip notification for current operation. '}}}, 'text': {'type': 'str', 'position': 0, 'description': 'Plain text document content. If set change document content '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'state': {'type': 'str', 'position': 0, 'description': 'Current state of the document ', 'enum': ['draft', 'published', 'discarded', 'incomplete']}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'masterID': {'type': 'int', 'position': 0, 'description': 'Points to the master document of this revision '}, 'revision': {'type': 'int', 'position': 0, 'description': 'Revision count '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document was published '}, 'publishDueTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document must be published (due date) '}, 'lockedUntilTimestamp': {'type': 'int', 'position': 0, 'description': 'Until when the document is locked '}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lockedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'MIME type of the document content '}, 'dataSize': {'type': 'int', 'position': 0, 'description': 'Size of the document content in bytes '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'SHA256 digest of this document '}, 'labels': {'type': 'list', 'position': 0, 'description': 'Free-text labels assigned to the document ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'currentUserLockStatus': {'type': 'str', 'position': 0, 'description': 'The lock status of this document, for the current user. ', 'enum': ['unlocked', 'lockedOtherUser', 'lockedCurrentUser', 'lockedOtherUserCanOverride']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document', 'folder']}, 'documentType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ATTACHMENT', 'CONTROLLED_VERSION', 'UNCOMMITTED', 'LOCKED_BY_CURRENTUSER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}, '423': {'description': 'Document locked', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': {'type': 'string', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'integer', 'format': 'int64'}}}}, 'data': {'type': 'object', 'properties': {'userID': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'ID of the user who locked the element. '}, 'userName': {'type': 'string', 'position': 0, 'description': 'Username of the user who locked the element. '}, 'lockedUntil': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'Until when the element is locked '}, 'elementType': {'type': 'string', 'position': 0, 'description': 'Type of the element ', 'enum': ['document', 'folder']}, 'elementID': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'Unique identifier of the element '}, 'elementName': {'type': 'string', 'position': 0, 'description': 'Name of the element '}}}}}}}}
delete_document = {'tags': ['documents/v1'], 'summary': 'Discard specified document (PUBLIC)', 'description': '', 'operationId': 'deleteDocument', 'produces': ['application/json'], 'parameters': [{'name': 'documentID', 'in': 'path', 'description': 'ID of document to discard', 'required': True, 'type': 'int', 'minimum': 1}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'state': {'type': 'str', 'position': 0, 'description': 'Current state of the document ', 'enum': ['draft', 'published', 'discarded', 'incomplete']}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'masterID': {'type': 'int', 'position': 0, 'description': 'Points to the master document of this revision '}, 'revision': {'type': 'int', 'position': 0, 'description': 'Revision count '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document was published '}, 'publishDueTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document must be published (due date) '}, 'lockedUntilTimestamp': {'type': 'int', 'position': 0, 'description': 'Until when the document is locked '}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lockedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'MIME type of the document content '}, 'dataSize': {'type': 'int', 'position': 0, 'description': 'Size of the document content in bytes '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'SHA256 digest of this document '}, 'labels': {'type': 'list', 'position': 0, 'description': 'Free-text labels assigned to the document ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'currentUserLockStatus': {'type': 'str', 'position': 0, 'description': 'The lock status of this document, for the current user. ', 'enum': ['unlocked', 'lockedOtherUser', 'lockedCurrentUser', 'lockedOtherUserCanOverride']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document', 'folder']}, 'documentType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ATTACHMENT', 'CONTROLLED_VERSION', 'UNCOMMITTED', 'LOCKED_BY_CURRENTUSER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}, '423': {'description': 'Document locked', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': {'type': 'string', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'integer', 'format': 'int64'}}}}, 'data': {'type': 'object', 'properties': {'userID': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'ID of the user who locked the element. '}, 'userName': {'type': 'string', 'position': 0, 'description': 'Username of the user who locked the element. '}, 'lockedUntil': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'Until when the element is locked '}, 'elementType': {'type': 'string', 'position': 0, 'description': 'Type of the element ', 'enum': ['document', 'folder']}, 'elementID': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'Unique identifier of the element '}, 'elementName': {'type': 'string', 'position': 0, 'description': 'Name of the element '}}}}}}}}
delete_document_by_path = {'tags': ['documents/v1'], 'summary': 'Discard specified document', 'description': '', 'operationId': 'deleteDocumentByPath', 'produces': ['application/json'], 'parameters': [{'name': 'parentFolderPath', 'in': 'path', 'description': 'Path from customer root to the parent folder (if not specified, fetch document from root folder)', 'required': True, 'type': 'str', 'pattern': '(/.+)?', 'allowEmptyValue': True}, {'name': 'documentName', 'in': 'path', 'description': 'Document name', 'required': True, 'type': 'str'}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to fetch from (default is current users customer', 'required': False, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'state': {'type': 'str', 'position': 0, 'description': 'Current state of the document ', 'enum': ['draft', 'published', 'discarded', 'incomplete']}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'masterID': {'type': 'int', 'position': 0, 'description': 'Points to the master document of this revision '}, 'revision': {'type': 'int', 'position': 0, 'description': 'Revision count '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document was published '}, 'publishDueTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document must be published (due date) '}, 'lockedUntilTimestamp': {'type': 'int', 'position': 0, 'description': 'Until when the document is locked '}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lockedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'MIME type of the document content '}, 'dataSize': {'type': 'int', 'position': 0, 'description': 'Size of the document content in bytes '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'SHA256 digest of this document '}, 'labels': {'type': 'list', 'position': 0, 'description': 'Free-text labels assigned to the document ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'currentUserLockStatus': {'type': 'str', 'position': 0, 'description': 'The lock status of this document, for the current user. ', 'enum': ['unlocked', 'lockedOtherUser', 'lockedCurrentUser', 'lockedOtherUserCanOverride']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document', 'folder']}, 'documentType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ATTACHMENT', 'CONTROLLED_VERSION', 'UNCOMMITTED', 'LOCKED_BY_CURRENTUSER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}, '423': {'description': 'Document locked', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': {'type': 'string', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'integer', 'format': 'int64'}}}}, 'data': {'type': 'object', 'properties': {'userID': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'ID of the user who locked the element. '}, 'userName': {'type': 'string', 'position': 0, 'description': 'Username of the user who locked the element. '}, 'lockedUntil': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'Until when the element is locked '}, 'elementType': {'type': 'string', 'position': 0, 'description': 'Type of the element ', 'enum': ['document', 'folder']}, 'elementID': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'Unique identifier of the element '}, 'elementName': {'type': 'string', 'position': 0, 'description': 'Name of the element '}}}}}}}}
delete_document_watcher = {'tags': ['documents/v1'], 'summary': 'Delete watcher entry on document. Requires write access to document. (DEV)', 'description': '', 'operationId': 'deleteDocumentWatcher', 'produces': ['application/json'], 'parameters': [{'name': 'documentID', 'in': 'path', 'description': 'ID of document', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}, {'name': 'entryID', 'in': 'path', 'description': 'ID of watcher entry', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'elementInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'type': 'str', 'name': {'type': 'str', 'position': 0, 'description': 'The foldername or filename of this element '}, 'parentElements': {'type': 'list', 'position': 0, 'description': 'The list of ancestor elements from this element to the document root ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'options': ['folder', 'document']}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was created '}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was deleted, or 0 (if not deleted) '}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'deletedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'flags': {'type': 'list', 'position': 0, 'description': 'Active flags for this watcher ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'negated', 'inherited', 'memberNegated', 'disabledAccess']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
delete_document_watcher_by_path = {'tags': ['documents/v1'], 'summary': 'Delete watcher entry on document. Requires write access to document.', 'description': '', 'operationId': 'deleteDocumentWatcherByPath', 'produces': ['application/json'], 'parameters': [{'name': 'parentFolderPath', 'in': 'path', 'description': 'Path to parent folder (if not specified, select document from root folder)', 'required': True, 'type': 'str', 'pattern': '(/.+)?'}, {'name': 'documentName', 'in': 'path', 'description': 'Document name', 'required': True, 'type': 'str'}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to lookup folder in (default is current users customer)', 'required': False, 'type': 'str'}, {'name': 'entryID', 'in': 'path', 'description': 'ID of watcher entry', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'elementInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'type': 'str', 'name': {'type': 'str', 'position': 0, 'description': 'The foldername or filename of this element '}, 'parentElements': {'type': 'list', 'position': 0, 'description': 'The list of ancestor elements from this element to the document root ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'options': ['folder', 'document']}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was created '}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was deleted, or 0 (if not deleted) '}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'deletedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'flags': {'type': 'list', 'position': 0, 'description': 'Active flags for this watcher ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'negated', 'inherited', 'memberNegated', 'disabledAccess']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
get_current_user_document_watch_status = {'tags': ['documents/v1'], 'summary': 'Get current user watcher status for document (DEV)', 'description': '', 'operationId': 'getCurrentUserDocumentWatchStatus', 'produces': ['application/json'], 'parameters': [{'name': 'documentID', 'in': 'path', 'description': 'ID of document', 'required': True, 'type': 'int', 'minimum': 1}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'watcherID': {'type': 'str', 'position': 0, 'description': 'If currentuser is a watcher, this points to the ID of the closed watcher entry. Returns null if currentuser is not a watcher. '}, 'element': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'type': 'str', 'name': {'type': 'str', 'position': 0, 'description': 'The foldername or filename of this element '}, 'parentElements': {'type': 'list', 'position': 0, 'description': 'The list of ancestor elements from this element to the document root ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'options': ['folder', 'document']}}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'status': {'type': 'str', 'position': 0, 'description': "This status reflects the current state of the currentuser for the current document or folder. If the currentuser is not a watcher for this document, this will return 'none'. ", 'enum': ['user', 'group', 'inherited', 'negated', 'none']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
get_current_user_document_watch_status_by_path = {'tags': ['documents/v1'], 'summary': 'Get current user watcher status for document', 'description': '', 'operationId': 'getCurrentUserDocumentWatchStatusByPath', 'produces': ['application/json'], 'parameters': [{'name': 'parentFolderPath', 'in': 'path', 'description': 'Path to parent folder (if not specified, select document from root folder)', 'required': True, 'type': 'str', 'pattern': '(/.+)?'}, {'name': 'documentName', 'in': 'path', 'description': 'Document name', 'required': True, 'type': 'str'}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to lookup folder in (default is current users customer)', 'required': False, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'watcherID': {'type': 'str', 'position': 0, 'description': 'If currentuser is a watcher, this points to the ID of the closed watcher entry. Returns null if currentuser is not a watcher. '}, 'element': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'type': 'str', 'name': {'type': 'str', 'position': 0, 'description': 'The foldername or filename of this element '}, 'parentElements': {'type': 'list', 'position': 0, 'description': 'The list of ancestor elements from this element to the document root ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'options': ['folder', 'document']}}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'status': {'type': 'str', 'position': 0, 'description': "This status reflects the current state of the currentuser for the current document or folder. If the currentuser is not a watcher for this document, this will return 'none'. ", 'enum': ['user', 'group', 'inherited', 'negated', 'none']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
get_document_content_by_id = {'tags': ['documents/v1'], 'summary': 'Download content as a file for specified document (PUBLIC)', 'description': '', 'operationId': 'getDocumentContentById', 'produces': ['application/octet-stream'], 'parameters': [{'name': 'documentID', 'in': 'path', 'description': 'ID of document to fetch', 'required': True, 'type': 'int', 'minimum': 1}], 'responses': {'401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
get_document_content_by_path = {'tags': ['documents/v1'], 'summary': 'Download content as a file for specified document', 'description': '', 'operationId': 'getDocumentContentByPath', 'produces': ['application/json'], 'parameters': [{'name': 'parentFolderPath', 'in': 'path', 'description': 'Path from customer root to the parent folder (if not specified, fetch document from root folder)', 'required': True, 'type': 'str', 'pattern': '(/.+)?', 'allowEmptyValue': True}, {'name': 'documentName', 'in': 'path', 'description': 'Document name', 'required': True, 'type': 'str'}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to fetch from (default is current users customer', 'required': False, 'type': 'str'}], 'responses': {'401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
get_document_revisions = {'tags': ['documents/v1'], 'summary': 'Fetch specified document revisions (PUBLIC)', 'description': '', 'operationId': 'getDocumentRevisions', 'produces': ['application/json'], 'parameters': [{'name': 'documentID', 'in': 'path', 'description': 'ID of document to fetch revisions', 'required': True, 'type': 'int'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'state': {'type': 'str', 'position': 0, 'description': 'Current state of the document ', 'enum': ['draft', 'published', 'discarded', 'incomplete']}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'masterID': {'type': 'int', 'position': 0, 'description': 'Points to the master document of this revision '}, 'revision': {'type': 'int', 'position': 0, 'description': 'Revision count '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document was published '}, 'publishDueTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document must be published (due date) '}, 'lockedUntilTimestamp': {'type': 'int', 'position': 0, 'description': 'Until when the document is locked '}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lockedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'MIME type of the document content '}, 'dataSize': {'type': 'int', 'position': 0, 'description': 'Size of the document content in bytes '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'SHA256 digest of this document '}, 'labels': {'type': 'list', 'position': 0, 'description': 'Free-text labels assigned to the document ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'currentUserLockStatus': {'type': 'str', 'position': 0, 'description': 'The lock status of this document, for the current user. ', 'enum': ['unlocked', 'lockedOtherUser', 'lockedCurrentUser', 'lockedOtherUserCanOverride']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document', 'folder']}, 'documentType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ATTACHMENT', 'CONTROLLED_VERSION', 'UNCOMMITTED', 'LOCKED_BY_CURRENTUSER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
get_meta_info_by_id = {'tags': ['documents/v1'], 'summary': 'Fetch specified document excluding content (PUBLIC)', 'description': '', 'operationId': 'getMetaInfoById', 'produces': ['application/json'], 'parameters': [{'name': 'documentID', 'in': 'path', 'description': 'ID of document to fetch', 'required': True, 'type': 'int', 'minimum': 1}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'state': {'type': 'str', 'position': 0, 'description': 'Current state of the document ', 'enum': ['draft', 'published', 'discarded', 'incomplete']}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'masterID': {'type': 'int', 'position': 0, 'description': 'Points to the master document of this revision '}, 'revision': {'type': 'int', 'position': 0, 'description': 'Revision count '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document was published '}, 'publishDueTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document must be published (due date) '}, 'lockedUntilTimestamp': {'type': 'int', 'position': 0, 'description': 'Until when the document is locked '}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lockedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'MIME type of the document content '}, 'dataSize': {'type': 'int', 'position': 0, 'description': 'Size of the document content in bytes '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'SHA256 digest of this document '}, 'labels': {'type': 'list', 'position': 0, 'description': 'Free-text labels assigned to the document ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'currentUserLockStatus': {'type': 'str', 'position': 0, 'description': 'The lock status of this document, for the current user. ', 'enum': ['unlocked', 'lockedOtherUser', 'lockedCurrentUser', 'lockedOtherUserCanOverride']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document', 'folder']}, 'documentType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ATTACHMENT', 'CONTROLLED_VERSION', 'UNCOMMITTED', 'LOCKED_BY_CURRENTUSER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
get_meta_info_by_path = {'tags': ['documents/v1'], 'summary': 'Fetch specified document meta data', 'description': '', 'operationId': 'getMetaInfoByPath', 'produces': ['application/json'], 'parameters': [{'name': 'parentFolderPath', 'in': 'path', 'description': 'Path from customer root to the parent folder (if not specified, fetch document from root folder)', 'required': True, 'type': 'str', 'pattern': '(/.+)?', 'allowEmptyValue': True}, {'name': 'documentName', 'in': 'path', 'description': 'Document name', 'required': True, 'type': 'str'}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to fetch from (default is current users customer', 'required': False, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'state': {'type': 'str', 'position': 0, 'description': 'Current state of the document ', 'enum': ['draft', 'published', 'discarded', 'incomplete']}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'masterID': {'type': 'int', 'position': 0, 'description': 'Points to the master document of this revision '}, 'revision': {'type': 'int', 'position': 0, 'description': 'Revision count '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document was published '}, 'publishDueTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document must be published (due date) '}, 'lockedUntilTimestamp': {'type': 'int', 'position': 0, 'description': 'Until when the document is locked '}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lockedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'MIME type of the document content '}, 'dataSize': {'type': 'int', 'position': 0, 'description': 'Size of the document content in bytes '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'SHA256 digest of this document '}, 'labels': {'type': 'list', 'position': 0, 'description': 'Free-text labels assigned to the document ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'currentUserLockStatus': {'type': 'str', 'position': 0, 'description': 'The lock status of this document, for the current user. ', 'enum': ['unlocked', 'lockedOtherUser', 'lockedCurrentUser', 'lockedOtherUserCanOverride']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document', 'folder']}, 'documentType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ATTACHMENT', 'CONTROLLED_VERSION', 'UNCOMMITTED', 'LOCKED_BY_CURRENTUSER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
grant_document_access = {'tags': ['documents/v1'], 'summary': 'Grant access to specified document (PUBLIC)', 'description': 'If the access level is folder, the user is allowed to obtain the information about the document (without content). If the access level is read, the user is allowed to obtain the content of the document. If the access level is write, the user is allowed to update the document.', 'operationId': 'grantDocumentAccess', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'documentID', 'in': 'path', 'description': 'Document ID', 'required': True, 'type': 'int', 'minimum': 1}, {'in': 'body', 'name': 'body', 'required': False, 'schema': {'type': 'object', 'required': ['level', 'subject'], 'properties': {'subject': {'type': 'str', 'position': 0, 'description': 'Specify user/group to grant access to '}, 'level': {'type': 'str', 'position': 0, 'description': 'Specify access level to grant to user/group ', 'enum': ['folder', 'read', 'write']}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'level': {'type': 'str', 'position': 0, 'description': 'What access level was granted ', 'enum': ['none', 'folder', 'read', 'write']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
grant_document_access_by_path = {'tags': ['documents/v1'], 'summary': 'Grant access to specified document', 'description': 'If the access level is folder, the user is allowed to obtain the information about the document (without content). If the access level is read, the user is allowed to obtain the content of the document. If the access level is write, the user is allowed to update the document.', 'operationId': 'grantDocumentAccessByPath', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'parentFolderPath', 'in': 'path', 'description': 'Path from customer root (if not specified, this returns the root)', 'required': True, 'type': 'str', 'pattern': '(/.+)?', 'allowEmptyValue': True}, {'name': 'documentName', 'in': 'path', 'description': 'Document name', 'required': True, 'type': 'str'}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to fetch from (default is current users customer)', 'required': False, 'type': 'str'}, {'in': 'body', 'name': 'body', 'required': False, 'schema': {'type': 'object', 'required': ['level', 'subject'], 'properties': {'subject': {'type': 'str', 'position': 0, 'description': 'Specify user/group to grant access to '}, 'level': {'type': 'str', 'position': 0, 'description': 'Specify access level to grant to user/group ', 'enum': ['folder', 'read', 'write']}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'level': {'type': 'str', 'position': 0, 'description': 'What access level was granted ', 'enum': ['none', 'folder', 'read', 'write']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
list_document_access = {'tags': ['documents/v1'], 'summary': 'Fetch ACL for specified document (PUBLIC)', 'description': '', 'operationId': 'listDocumentAccess', 'produces': ['application/json'], 'parameters': [{'name': 'documentID', 'in': 'path', 'description': 'Document ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'level': {'type': 'str', 'position': 0, 'description': 'What access level was granted ', 'enum': ['none', 'folder', 'read', 'write']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
list_document_access_by_path = {'tags': ['documents/v1'], 'summary': 'Fetch ACL for specified document', 'description': '', 'operationId': 'listDocumentAccessByPath', 'produces': ['application/json'], 'parameters': [{'name': 'parentFolderPath', 'in': 'path', 'description': 'Path from customer root (if not specified, this returns the root)', 'required': True, 'type': 'str', 'pattern': '(/.+)?', 'allowEmptyValue': True}, {'name': 'documentName', 'in': 'path', 'description': 'Document name', 'required': True, 'type': 'str'}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to fetch from (default is current users customer)', 'required': False, 'type': 'str'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'level': {'type': 'str', 'position': 0, 'description': 'What access level was granted ', 'enum': ['none', 'folder', 'read', 'write']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
list_document_watchers = {'tags': ['documents/v1'], 'summary': 'Get all watchers for document (DEV)', 'description': '', 'operationId': 'listDocumentWatchers', 'produces': ['application/json'], 'parameters': [{'name': 'documentID', 'in': 'path', 'description': 'ID of document', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'limit', 'in': 'query', 'description': 'Limit the result', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip this number of results', 'required': False, 'type': 'int', 'minimum': 0}, {'name': 'includeInherited', 'in': 'query', 'description': 'If true, also fetch watchers defined on parent folders', 'required': False, 'type': 'bool', 'default': True}, {'name': 'includeNegated', 'in': 'query', 'description': 'If true, also fetch explicit unwatch records', 'required': False, 'type': 'bool'}, {'name': 'includeDeleted', 'in': 'query', 'description': 'If true, also fetch deleted watcher records', 'required': False, 'type': 'bool'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'elementInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'type': 'str', 'name': {'type': 'str', 'position': 0, 'description': 'The foldername or filename of this element '}, 'parentElements': {'type': 'list', 'position': 0, 'description': 'The list of ancestor elements from this element to the document root ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'options': ['folder', 'document']}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was created '}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was deleted, or 0 (if not deleted) '}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'deletedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'flags': {'type': 'list', 'position': 0, 'description': 'Active flags for this watcher ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'negated', 'inherited', 'memberNegated', 'disabledAccess']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
list_document_watchers_by_path = {'tags': ['documents/v1'], 'summary': 'Get all watchers for document', 'description': '', 'operationId': 'listDocumentWatchersByPath', 'produces': ['application/json'], 'parameters': [{'name': 'parentFolderPath', 'in': 'path', 'description': 'Path to parent folder (if not specified, select document from root folder)', 'required': True, 'type': 'str', 'pattern': '(/.+)?'}, {'name': 'documentName', 'in': 'path', 'description': 'Document name', 'required': True, 'type': 'str'}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to lookup folder in (default is current users customer)', 'required': False, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Limit the result', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip this number of results', 'required': False, 'type': 'int', 'minimum': 0}, {'name': 'includeInherited', 'in': 'query', 'description': 'If true, also fetch watchers defined on parent folders', 'required': False, 'type': 'bool', 'default': True}, {'name': 'includeNegated', 'in': 'query', 'description': 'If true, also fetch explicit unwatch records', 'required': False, 'type': 'bool'}, {'name': 'includeDeleted', 'in': 'query', 'description': 'If true, also fetch deleted watcher records', 'required': False, 'type': 'bool'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'elementInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'type': 'str', 'name': {'type': 'str', 'position': 0, 'description': 'The foldername or filename of this element '}, 'parentElements': {'type': 'list', 'position': 0, 'description': 'The list of ancestor elements from this element to the document root ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'options': ['folder', 'document']}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was created '}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this watcher was deleted, or 0 (if not deleted) '}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'deletedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, {'type': 'dict', 'properties': {}}]}, 'flags': {'type': 'list', 'position': 0, 'description': 'Active flags for this watcher ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'negated', 'inherited', 'memberNegated', 'disabledAccess']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
list_documents = {'tags': ['documents/v1'], 'summary': 'List documents (DEV)', 'description': '', 'operationId': 'listDocuments', 'produces': ['application/json'], 'parameters': [{'name': 'customerID', 'in': 'query', 'description': 'Filter documents by customerID', 'required': False, 'type': 'list', 'items': {'type': 'int'}, 'collectionFormat': 'multi'}, {'name': 'keywords', 'in': 'query', 'description': 'Filter documents by keywords', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'state': {'type': 'str', 'position': 0, 'description': 'Current state of the document ', 'enum': ['draft', 'published', 'discarded', 'incomplete']}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'masterID': {'type': 'int', 'position': 0, 'description': 'Points to the master document of this revision '}, 'revision': {'type': 'int', 'position': 0, 'description': 'Revision count '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document was published '}, 'publishDueTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document must be published (due date) '}, 'lockedUntilTimestamp': {'type': 'int', 'position': 0, 'description': 'Until when the document is locked '}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lockedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'MIME type of the document content '}, 'dataSize': {'type': 'int', 'position': 0, 'description': 'Size of the document content in bytes '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'SHA256 digest of this document '}, 'labels': {'type': 'list', 'position': 0, 'description': 'Free-text labels assigned to the document ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'currentUserLockStatus': {'type': 'str', 'position': 0, 'description': 'The lock status of this document, for the current user. ', 'enum': ['unlocked', 'lockedOtherUser', 'lockedCurrentUser', 'lockedOtherUserCanOverride']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document', 'folder']}, 'documentType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ATTACHMENT', 'CONTROLLED_VERSION', 'UNCOMMITTED', 'LOCKED_BY_CURRENTUSER']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
lock_document = {'tags': ['documents/v1'], 'summary': 'Lock/Unlock specified document (PUBLIC)', 'description': '', 'operationId': 'lockDocument', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'documentID', 'in': 'path', 'description': 'ID of document to lock/unlock', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Document lock request', 'required': False, 'schema': {'type': 'object', 'required': ['mode'], 'properties': {'lockRequestTime': {'type': 'int', 'position': 0, 'description': "If 'mode' is set to LOCK, specify how long the document should be locked ", 'minimum': 0}, 'mode': {'type': 'str', 'position': 0, 'description': 'Specify whether to lock or unlock the document, or to override an existing lock (default LOCK)', 'enum': ['UNLOCK', 'OVERRIDE', 'LOCK']}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'state': {'type': 'str', 'position': 0, 'description': 'Current state of the document ', 'enum': ['draft', 'published', 'discarded', 'incomplete']}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'masterID': {'type': 'int', 'position': 0, 'description': 'Points to the master document of this revision '}, 'revision': {'type': 'int', 'position': 0, 'description': 'Revision count '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document was published '}, 'publishDueTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document must be published (due date) '}, 'lockedUntilTimestamp': {'type': 'int', 'position': 0, 'description': 'Until when the document is locked '}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lockedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'MIME type of the document content '}, 'dataSize': {'type': 'int', 'position': 0, 'description': 'Size of the document content in bytes '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'SHA256 digest of this document '}, 'labels': {'type': 'list', 'position': 0, 'description': 'Free-text labels assigned to the document ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'currentUserLockStatus': {'type': 'str', 'position': 0, 'description': 'The lock status of this document, for the current user. ', 'enum': ['unlocked', 'lockedOtherUser', 'lockedCurrentUser', 'lockedOtherUserCanOverride']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document', 'folder']}, 'documentType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ATTACHMENT', 'CONTROLLED_VERSION', 'UNCOMMITTED', 'LOCKED_BY_CURRENTUSER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}, '423': {'description': 'Document locked', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': {'type': 'string', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'integer', 'format': 'int64'}}}}, 'data': {'type': 'object', 'properties': {'userID': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'ID of the user who locked the element. '}, 'userName': {'type': 'string', 'position': 0, 'description': 'Username of the user who locked the element. '}, 'lockedUntil': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'Until when the element is locked '}, 'elementType': {'type': 'string', 'position': 0, 'description': 'Type of the element ', 'enum': ['document', 'folder']}, 'elementID': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'Unique identifier of the element '}, 'elementName': {'type': 'string', 'position': 0, 'description': 'Name of the element '}}}}}}}}
move_document = {'tags': ['documents/v1'], 'summary': 'Move document to a different folder (PUBLIC)', 'description': '', 'operationId': 'moveDocument', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'documentID', 'in': 'path', 'description': 'ID of document to move', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Document move request', 'required': False, 'schema': {'type': 'object', 'properties': {'newFolderID': {'type': 'int', 'minimum': 1}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'state': {'type': 'str', 'position': 0, 'description': 'Current state of the document ', 'enum': ['draft', 'published', 'discarded', 'incomplete']}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'masterID': {'type': 'int', 'position': 0, 'description': 'Points to the master document of this revision '}, 'revision': {'type': 'int', 'position': 0, 'description': 'Revision count '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document was published '}, 'publishDueTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document must be published (due date) '}, 'lockedUntilTimestamp': {'type': 'int', 'position': 0, 'description': 'Until when the document is locked '}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lockedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'MIME type of the document content '}, 'dataSize': {'type': 'int', 'position': 0, 'description': 'Size of the document content in bytes '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'SHA256 digest of this document '}, 'labels': {'type': 'list', 'position': 0, 'description': 'Free-text labels assigned to the document ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'currentUserLockStatus': {'type': 'str', 'position': 0, 'description': 'The lock status of this document, for the current user. ', 'enum': ['unlocked', 'lockedOtherUser', 'lockedCurrentUser', 'lockedOtherUserCanOverride']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document', 'folder']}, 'documentType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ATTACHMENT', 'CONTROLLED_VERSION', 'UNCOMMITTED', 'LOCKED_BY_CURRENTUSER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}, '423': {'description': 'Document locked', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': {'type': 'string', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'integer', 'format': 'int64'}}}}, 'data': {'type': 'object', 'properties': {'userID': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'ID of the user who locked the element. '}, 'userName': {'type': 'string', 'position': 0, 'description': 'Username of the user who locked the element. '}, 'lockedUntil': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'Until when the element is locked '}, 'elementType': {'type': 'string', 'position': 0, 'description': 'Type of the element ', 'enum': ['document', 'folder']}, 'elementID': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'Unique identifier of the element '}, 'elementName': {'type': 'string', 'position': 0, 'description': 'Name of the element '}}}}}}}}
revoke_document_access = {'tags': ['documents/v1'], 'summary': 'Revoke specified explicit access from document (PUBLIC)', 'description': '', 'operationId': 'revokeDocumentAccess', 'produces': ['application/json'], 'parameters': [{'name': 'documentID', 'in': 'path', 'description': 'Document ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'accessID', 'in': 'path', 'description': 'Access ID', 'required': True, 'type': 'int', 'minimum': 1}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'level': {'type': 'str', 'position': 0, 'description': 'What access level was granted ', 'enum': ['none', 'folder', 'read', 'write']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
revoke_document_access_by_path = {'tags': ['documents/v1'], 'summary': 'Revoke specified explicit access from document', 'description': '', 'operationId': 'revokeDocumentAccessByPath', 'produces': ['application/json'], 'parameters': [{'name': 'parentFolderPath', 'in': 'path', 'description': 'Path from customer root (if not specified, this returns the root)', 'required': True, 'type': 'str', 'pattern': '(/.+)?', 'allowEmptyValue': True}, {'name': 'documentName', 'in': 'path', 'description': 'Document name', 'required': True, 'type': 'str'}, {'name': 'accessID', 'in': 'path', 'description': 'Access ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to fetch from (default is current users customer)', 'required': False, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'level': {'type': 'str', 'position': 0, 'description': 'What access level was granted ', 'enum': ['none', 'folder', 'read', 'write']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
search_documents = {'tags': ['documents/v1'], 'summary': 'Search for specific documents (DEV)', 'description': '', 'operationId': 'searchDocuments', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Document search criteria', 'required': False, 'schema': {'type': 'object', 'properties': {'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. By default, no restriction on result set size. '}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object. '}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects. '}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. By default, no restriction on result set size. '}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object. '}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects. '}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR. ', 'uniqueItems': True, 'items': []}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. '}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers. ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'id': {'type': 'list', 'position': 0, 'description': 'ID of documents to match ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'userID': {'type': 'list', 'position': 0, 'description': 'Restrict search to documents associated with any of these users. ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which user fields will be used for searching for documents associated to userID field. (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ownedByUser', 'lastUpdatedByUser', 'lockedByUser', 'all']}}, 'accessMode': {'type': 'list', 'position': 0, 'description': 'Match these access modes ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}, 'state': {'type': 'list', 'position': 0, 'description': 'The status of the documents to match ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['draft', 'published', 'discarded']}}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Start of time search period '}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'End of time search period '}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'TimeMatchStrategy to define how to match startTimestamp and endTimestamp with fields. (default any)', 'enum': ['all', 'any']}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'TimeFieldStrategy to define which timestamp field(s) to match. (default createdTimestamp)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdTimestamp', 'lastUpdatedTimestamp', 'all']}}, 'keywords': {'type': 'list', 'position': 0, 'description': 'A set of keywords matched against documents based on the set KeywordFieldStrategy and KeywordMatchStrategy. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'KeywordMatchStrategy to define how to match keywords with fields. (default any)', 'enum': ['all', 'any']}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'KeywordFieldStrategy to define which document field(s) to match. (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['name', 'labels', 'all']}}, 'labels': {'type': 'list', 'position': 0, 'description': 'Match documents with any of these labels ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'folderID': {'type': 'list', 'position': 0, 'description': 'Search for documents within any of these folders. Use folderID=0 to search root folders. ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'recursive': {'type': 'bool', 'position': 0, 'description': 'Search all subfolders below selected folders (default true)', 'default': True}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending). ', 'items': {'type': 'str', 'enum': ['type', 'state', 'parentFolder', 'customer', 'name', 'created', 'lastUpdated', 'published', 'publishDue', 'owner', 'lastUpdatedByUser', 'approved', 'period', 'periodFrom', 'approvedByUser', 'assignedToUser']}}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Only include objects which have includeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ATTACHMENT', 'CONTROLLED_VERSION', 'UNCOMMITTED']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Exclude objects which have excludeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ATTACHMENT', 'CONTROLLED_VERSION', 'UNCOMMITTED']}}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. '}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers. ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'id': {'type': 'list', 'position': 0, 'description': 'ID of documents to match ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'userID': {'type': 'list', 'position': 0, 'description': 'Restrict search to documents associated with any of these users. ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which user fields will be used for searching for documents associated to userID field. (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ownedByUser', 'lastUpdatedByUser', 'lockedByUser', 'all']}}, 'accessMode': {'type': 'list', 'position': 0, 'description': 'Match these access modes ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}, 'state': {'type': 'list', 'position': 0, 'description': 'The status of the documents to match ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['draft', 'published', 'discarded']}}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Start of time search period '}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'End of time search period '}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'TimeMatchStrategy to define how to match startTimestamp and endTimestamp with fields. (default any)', 'enum': ['all', 'any']}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'TimeFieldStrategy to define which timestamp field(s) to match. (default createdTimestamp)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdTimestamp', 'lastUpdatedTimestamp', 'all']}}, 'keywords': {'type': 'list', 'position': 0, 'description': 'A set of keywords matched against documents based on the set KeywordFieldStrategy and KeywordMatchStrategy. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'KeywordMatchStrategy to define how to match keywords with fields. (default any)', 'enum': ['all', 'any']}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'KeywordFieldStrategy to define which document field(s) to match. (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['name', 'labels', 'all']}}, 'labels': {'type': 'list', 'position': 0, 'description': 'Match documents with any of these labels ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'folderID': {'type': 'list', 'position': 0, 'description': 'Search for documents within any of these folders. Use folderID=0 to search root folders. ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'recursive': {'type': 'bool', 'position': 0, 'description': 'Search all subfolders below selected folders (default true)', 'default': True}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending). ', 'items': {'type': 'str', 'enum': ['type', 'state', 'parentFolder', 'customer', 'name', 'created', 'lastUpdated', 'published', 'publishDue', 'owner', 'lastUpdatedByUser', 'approved', 'period', 'periodFrom', 'approvedByUser', 'assignedToUser']}}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Only include objects which have includeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ATTACHMENT', 'CONTROLLED_VERSION', 'UNCOMMITTED']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Exclude objects which have excludeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ATTACHMENT', 'CONTROLLED_VERSION', 'UNCOMMITTED']}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'state': {'type': 'str', 'position': 0, 'description': 'Current state of the document ', 'enum': ['draft', 'published', 'discarded', 'incomplete']}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'masterID': {'type': 'int', 'position': 0, 'description': 'Points to the master document of this revision '}, 'revision': {'type': 'int', 'position': 0, 'description': 'Revision count '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document was published '}, 'publishDueTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document must be published (due date) '}, 'lockedUntilTimestamp': {'type': 'int', 'position': 0, 'description': 'Until when the document is locked '}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lockedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'MIME type of the document content '}, 'dataSize': {'type': 'int', 'position': 0, 'description': 'Size of the document content in bytes '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'SHA256 digest of this document '}, 'labels': {'type': 'list', 'position': 0, 'description': 'Free-text labels assigned to the document ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'currentUserLockStatus': {'type': 'str', 'position': 0, 'description': 'The lock status of this document, for the current user. ', 'enum': ['unlocked', 'lockedOtherUser', 'lockedCurrentUser', 'lockedOtherUserCanOverride']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document', 'folder']}, 'documentType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ATTACHMENT', 'CONTROLLED_VERSION', 'UNCOMMITTED', 'LOCKED_BY_CURRENTUSER']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
set_current_user_document_watch_status = {'tags': ['documents/v1'], 'summary': 'Change current user watcher status for document. Requires read access to the document. (DEV)', 'description': '', 'operationId': 'setCurrentUserDocumentWatchStatus', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'documentID', 'in': 'path', 'description': 'ID of document', 'required': True, 'type': 'int', 'minimum': 1}, {'in': 'body', 'name': 'body', 'description': 'Request specifying status change', 'required': False, 'schema': {'type': 'object', 'properties': {'watch': {'type': 'bool', 'position': 0, 'description': 'If true, enable an explicit watcher for the current user for the target document. If false, add an explicit negation for the current user. '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'watcherID': {'type': 'str', 'position': 0, 'description': 'If currentuser is a watcher, this points to the ID of the closed watcher entry. Returns null if currentuser is not a watcher. '}, 'element': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'type': 'str', 'name': {'type': 'str', 'position': 0, 'description': 'The foldername or filename of this element '}, 'parentElements': {'type': 'list', 'position': 0, 'description': 'The list of ancestor elements from this element to the document root ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'options': ['folder', 'document']}}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'status': {'type': 'str', 'position': 0, 'description': "This status reflects the current state of the currentuser for the current document or folder. If the currentuser is not a watcher for this document, this will return 'none'. ", 'enum': ['user', 'group', 'inherited', 'negated', 'none']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
set_current_user_document_watch_status_by_path = {'tags': ['documents/v1'], 'summary': 'Change current user watcher status for document. Requires read access to the document.', 'description': '', 'operationId': 'setCurrentUserDocumentWatchStatusByPath', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'parentFolderPath', 'in': 'path', 'description': 'Path to parent folder (if not specified, select document from root folder)', 'required': True, 'type': 'str', 'pattern': '(/.+)?'}, {'name': 'documentName', 'in': 'path', 'description': 'Document name', 'required': True, 'type': 'str'}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to lookup folder in (default is current users customer)', 'required': False, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Request specifying status change', 'required': False, 'schema': {'type': 'object', 'properties': {'watch': {'type': 'bool', 'position': 0, 'description': 'If true, enable an explicit watcher for the current user for the target document. If false, add an explicit negation for the current user. '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'watcherID': {'type': 'str', 'position': 0, 'description': 'If currentuser is a watcher, this points to the ID of the closed watcher entry. Returns null if currentuser is not a watcher. '}, 'element': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'type': 'str', 'name': {'type': 'str', 'position': 0, 'description': 'The foldername or filename of this element '}, 'parentElements': {'type': 'list', 'position': 0, 'description': 'The list of ancestor elements from this element to the document root ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'options': ['folder', 'document']}}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'status': {'type': 'str', 'position': 0, 'description': "This status reflects the current state of the currentuser for the current document or folder. If the currentuser is not a watcher for this document, this will return 'none'. ", 'enum': ['user', 'group', 'inherited', 'negated', 'none']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
update_document = {'tags': ['documents/v1'], 'summary': 'Update specified document (PUBLIC)', 'description': '', 'operationId': 'updateDocument', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'documentID', 'in': 'path', 'description': 'ID of document to update', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Document update request', 'required': False, 'schema': {'type': 'object', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'If set change document name  => Sanitize by regex \\A[^\\\\\\/:*"?<>|]{1,254}\\z'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'If set change document MIME type '}, 'data': {'type': 'str', 'position': 0, 'description': 'Base64 encoded document content formatted according to the given MIME type. If set change document content ', 'minLength': 1, 'maxLength': 2147483647}, 'lockRequestTime': {'type': 'int', 'position': 0, 'description': 'Specify how long the document should be locked (default 0)', 'default': 0}, 'notificationOptions': {'type': 'dict', 'properties': {'skip': {'type': 'bool', 'position': 0, 'description': 'If true, skip notification for current operation. '}}}, 'text': {'type': 'str', 'position': 0, 'description': 'Plain text document content. If set change document content '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'state': {'type': 'str', 'position': 0, 'description': 'Current state of the document ', 'enum': ['draft', 'published', 'discarded', 'incomplete']}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'masterID': {'type': 'int', 'position': 0, 'description': 'Points to the master document of this revision '}, 'revision': {'type': 'int', 'position': 0, 'description': 'Revision count '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document was published '}, 'publishDueTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document must be published (due date) '}, 'lockedUntilTimestamp': {'type': 'int', 'position': 0, 'description': 'Until when the document is locked '}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lockedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'MIME type of the document content '}, 'dataSize': {'type': 'int', 'position': 0, 'description': 'Size of the document content in bytes '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'SHA256 digest of this document '}, 'labels': {'type': 'list', 'position': 0, 'description': 'Free-text labels assigned to the document ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'currentUserLockStatus': {'type': 'str', 'position': 0, 'description': 'The lock status of this document, for the current user. ', 'enum': ['unlocked', 'lockedOtherUser', 'lockedCurrentUser', 'lockedOtherUserCanOverride']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document', 'folder']}, 'documentType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ATTACHMENT', 'CONTROLLED_VERSION', 'UNCOMMITTED', 'LOCKED_BY_CURRENTUSER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}, '423': {'description': 'Document locked', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': {'type': 'string', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'integer', 'format': 'int64'}}}}, 'data': {'type': 'object', 'properties': {'userID': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'ID of the user who locked the element. '}, 'userName': {'type': 'string', 'position': 0, 'description': 'Username of the user who locked the element. '}, 'lockedUntil': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'Until when the element is locked '}, 'elementType': {'type': 'string', 'position': 0, 'description': 'Type of the element ', 'enum': ['document', 'folder']}, 'elementID': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'Unique identifier of the element '}, 'elementName': {'type': 'string', 'position': 0, 'description': 'Name of the element '}}}}}}}}
update_document_access_settings = {'tags': ['documents/v1'], 'summary': 'Change access settings on specified document (PUBLIC)', 'description': "If the access mode is roleBased, user accessing the document must have appropriate role, set by administrator. If the access mode is writeRestricted, user accessing the document can read, but must have appropriate role for write, set by administrator. If the access mode is readRestricted, user accessing the document must have appropriate roles for both read and write, set by administrator. If the access mode is explicit, user accessing the document must have explicit grant by document's owner.", 'operationId': 'updateDocumentAccessSettings', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'documentID', 'in': 'path', 'description': 'Document ID', 'required': True, 'type': 'int', 'minimum': 1}, {'in': 'body', 'name': 'body', 'required': False, 'schema': {'type': 'object', 'required': ['accessMode'], 'properties': {'accessMode': {'type': 'str', 'position': 0, 'description': 'Specify general access mode for document/folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'state': {'type': 'str', 'position': 0, 'description': 'Current state of the document ', 'enum': ['draft', 'published', 'discarded', 'incomplete']}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'masterID': {'type': 'int', 'position': 0, 'description': 'Points to the master document of this revision '}, 'revision': {'type': 'int', 'position': 0, 'description': 'Revision count '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document was published '}, 'publishDueTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document must be published (due date) '}, 'lockedUntilTimestamp': {'type': 'int', 'position': 0, 'description': 'Until when the document is locked '}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lockedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'MIME type of the document content '}, 'dataSize': {'type': 'int', 'position': 0, 'description': 'Size of the document content in bytes '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'SHA256 digest of this document '}, 'labels': {'type': 'list', 'position': 0, 'description': 'Free-text labels assigned to the document ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'currentUserLockStatus': {'type': 'str', 'position': 0, 'description': 'The lock status of this document, for the current user. ', 'enum': ['unlocked', 'lockedOtherUser', 'lockedCurrentUser', 'lockedOtherUserCanOverride']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document', 'folder']}, 'documentType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ATTACHMENT', 'CONTROLLED_VERSION', 'UNCOMMITTED', 'LOCKED_BY_CURRENTUSER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
update_document_access_settings_by_path = {'tags': ['documents/v1'], 'summary': 'Change access settings on specified document', 'description': "If the access mode is roleBased, user accessing the document must have appropriate role, set by administrator. If the access mode is writeRestricted, user accessing the document can read, but must have appropriate role for write, set by administrator. If the access mode is readRestricted, user accessing the document must have appropriate roles for both read and write, set by administrator. If the access mode is explicit, user accessing the document must have explicit grant by document's owner.", 'operationId': 'updateDocumentAccessSettingsByPath', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'parentFolderPath', 'in': 'path', 'description': 'Path from customer root (if not specified, this returns the root)', 'required': True, 'type': 'str', 'pattern': '(/.+)?', 'allowEmptyValue': True}, {'name': 'documentName', 'in': 'path', 'description': 'Document name', 'required': True, 'type': 'str'}, {'name': 'customer', 'in': 'query', 'description': 'Customer space to fetch from (default is current users customer)', 'required': False, 'type': 'str'}, {'in': 'body', 'name': 'body', 'required': False, 'schema': {'type': 'object', 'required': ['accessMode'], 'properties': {'accessMode': {'type': 'str', 'position': 0, 'description': 'Specify general access mode for document/folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder/document '}, 'state': {'type': 'str', 'position': 0, 'description': 'Current state of the document ', 'enum': ['draft', 'published', 'discarded', 'incomplete']}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'General access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'effectiveAccessMode': {'type': 'str', 'position': 0, 'description': 'Effective access mode of the folder/document ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}, 'currentUserAccessLevel': {'type': 'str', 'position': 0, 'description': 'Access level granted to the user viewing the folder/document ', 'enum': ['none', 'folder', 'read', 'write']}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder/document '}, 'masterID': {'type': 'int', 'position': 0, 'description': 'Points to the master document of this revision '}, 'revision': {'type': 'int', 'position': 0, 'description': 'Revision count '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was created '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the folder/document was last updated '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document was published '}, 'publishDueTimestamp': {'type': 'int', 'position': 0, 'description': 'When the document must be published (due date) '}, 'lockedUntilTimestamp': {'type': 'int', 'position': 0, 'description': 'Until when the document is locked '}, 'ownedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lockedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'MIME type of the document content '}, 'dataSize': {'type': 'int', 'position': 0, 'description': 'Size of the document content in bytes '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'SHA256 digest of this document '}, 'labels': {'type': 'list', 'position': 0, 'description': 'Free-text labels assigned to the document ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'parentElements': {'type': 'list', 'position': 0, 'description': "Full path of the folder's/document's parent folders (ordered from root to parent folder; empty if root folder) ", 'items': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'Unique identifier of the folder '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the folder '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'The configured access mode set on this folder ', 'enum': ['roleBased', 'writeRestricted', 'readRestricted', 'explicit']}}}}, 'currentUserLockStatus': {'type': 'str', 'position': 0, 'description': 'The lock status of this document, for the current user. ', 'enum': ['unlocked', 'lockedOtherUser', 'lockedCurrentUser', 'lockedOtherUserCanOverride']}, 'elementType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document', 'folder']}, 'documentType': {'type': 'str', 'position': 0, 'description': "Will be 'document' ", 'enum': ['document']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ATTACHMENT', 'CONTROLLED_VERSION', 'UNCOMMITTED', 'LOCKED_BY_CURRENTUSER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}