"""Autogenerated API schema"""
from argus_api import session


find_groups = {'tags': ['users/v1'], 'summary': 'Search group profiles (PUBLIC)', 'description': '', 'operationId': 'findGroups', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Search criteria', 'required': False, 'schema': {'type': 'object', 'properties': {'domain': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}, 'type': {'type': 'str', 'enum': ['USER', 'GROUP']}, 'subjectID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'excludeSubjectID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'parentID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'ancestorID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'get_aclAncestorID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'get_aclCustomerID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'excludeAncestorID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'userName': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}, 'email': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}, 'mobile': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}, 'searchString': {'type': 'string'}, 'requiredFunctionID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'requiredFunctionCustomerID': {'type': 'int'}, 'requireAllFunctions': {'type': 'boolean'}, 'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. By default, no restriction on result set size. '}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object. '}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects. '}, 'includeFlags': {'type': 'int', 'position': 0, 'description': 'Only include objects which have includeFlags set. '}, 'excludeFlags': {'type': 'int', 'position': 0, 'description': 'Exclude objects which have excludeFlags set. '}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'domain': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}, 'type': 'str', 'subjectID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'excludeSubjectID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'parentID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'ancestorID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'get_aclAncestorID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'get_aclCustomerID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'excludeAncestorID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'userName': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}, 'email': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}, 'mobile': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}, 'searchString': {'type': 'string'}, 'requiredFunctionID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'requiredFunctionCustomerID': {'type': 'int'}, 'requireAllFunctions': {'type': 'boolean'}, 'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. By default, no restriction on result set size. '}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object. '}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects. '}, 'includeFlags': {'type': 'int', 'position': 0, 'description': 'Only include objects which have includeFlags set. '}, 'excludeFlags': {'type': 'int', 'position': 0, 'description': 'Exclude objects which have excludeFlags set. '}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR. ', 'uniqueItems': True, 'items': []}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. '}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers. ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'options': ['USER', 'GROUP']}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. '}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers. ', 'uniqueItems': True, 'items': {'type': 'int'}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'description': {'type': 'string'}, 'groupName': {'type': 'string'}, 'id': {'type': 'int', 'position': 0, 'description': 'ID of subject '}, 'userName': {'type': 'str', 'position': 0, 'description': 'User name '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of subject '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Created timestamp in ms '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Last updated timestamp in ms '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'properties': {'type': 'dict', 'position': 0, 'description': 'Properties of subject ', 'additionalProperties': {'type': 'string'}}, 'ascendantIDs': {'type': 'list', 'position': 0, 'description': 'IDs of ascendants ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DISABLED', 'AUTH_RADIUS', 'AUTH_SMS', 'AUTH_LDAP', 'AUTH_LOCAL', 'BLOCKED', 'FORCE_PWCHANGE', 'DAEMON_ACCOUNT', 'PASSWORD_NOT_SET', 'AUTH_CRYPTO', 'AUTH_TOTP', 'AUTH_APIKEY', 'ANONYMOUS_USER']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
get_gropu_by_id = {'tags': ['users/v1'], 'summary': 'Get group profile by ID (PUBLIC)', 'description': '', 'operationId': 'getGropuByID', 'produces': ['application/json'], 'parameters': [{'name': 'groupId', 'in': 'path', 'description': 'ID of group', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'allOf': [{'type': 'object', 'discriminator': 'type', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'customer': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'integer', 'format': 'int64'}}}, {'type': 'object', 'properties': {'description': {'type': 'string'}}}]}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_group_by_name = {'tags': ['users/v1'], 'summary': 'Get group profile by name (PUBLIC)', 'description': '', 'operationId': 'getGroupByName', 'produces': ['application/json'], 'parameters': [{'name': 'groupName', 'in': 'path', 'description': 'Group shortname', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_groups = {'tags': ['users/v1'], 'summary': 'Get group information (PUBLIC)', 'description': '', 'operationId': 'listGroups', 'produces': ['application/json'], 'parameters': [{'name': 'subjectID', 'in': 'query', 'description': 'IDs of groups', 'required': False, 'type': 'list', 'items': {'type': 'int'}, 'collectionFormat': 'multi'}, {'name': 'offset', 'in': 'query', 'description': 'Offset results', 'required': False, 'type': 'int'}, {'name': 'limit', 'in': 'query', 'description': 'Limit results', 'required': False, 'type': 'int', 'default': 25}], 'responses': {'200': {'description': 'successful operation', 'schema': {'type': 'array', 'items': {'allOf': [{'type': 'object', 'discriminator': 'type', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'customer': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'integer', 'format': 'int64'}}}, {'type': 'object', 'properties': {'description': {'type': 'string'}}}]}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}