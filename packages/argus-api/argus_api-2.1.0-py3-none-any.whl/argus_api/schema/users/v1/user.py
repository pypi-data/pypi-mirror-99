"""Autogenerated API schema"""
from argus_api import session


check_permission = {'tags': ['users/v1'], 'summary': 'Validate user permission to perform function (PUBLIC)', 'description': '', 'operationId': 'checkPermission', 'produces': ['application/json'], 'parameters': [{'name': 'userId', 'in': 'path', 'description': 'ID of user', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'name': 'function', 'in': 'path', 'description': 'Function name', 'required': True, 'type': 'str'}], 'responses': {'401': {'description': 'Authentication failed'}, '403': {'description': 'Forbidden permission'}, '404': {'description': 'User not found'}, '412': {'description': 'Validation failed'}}}
find_users = {'tags': ['users/v1'], 'summary': 'Search user profiles (PUBLIC)', 'description': '', 'operationId': 'findUsers', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Search criteria', 'required': False, 'schema': {'type': 'object', 'properties': {'domain': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}, 'type': {'type': 'str', 'enum': ['USER', 'GROUP']}, 'subjectID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'excludeSubjectID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'parentID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'ancestorID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'get_aclAncestorID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'get_aclCustomerID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'excludeAncestorID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'userName': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}, 'email': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}, 'mobile': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}, 'searchString': {'type': 'string'}, 'requiredFunctionID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'requiredFunctionCustomerID': {'type': 'int'}, 'requireAllFunctions': {'type': 'boolean'}, 'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. By default, no restriction on result set size. '}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object. '}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects. '}, 'includeFlags': {'type': 'int', 'position': 0, 'description': 'Only include objects which have includeFlags set. '}, 'excludeFlags': {'type': 'int', 'position': 0, 'description': 'Exclude objects which have excludeFlags set. '}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'domain': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}, 'type': 'str', 'subjectID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'excludeSubjectID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'parentID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'ancestorID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'get_aclAncestorID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'get_aclCustomerID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'excludeAncestorID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'userName': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}, 'email': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}, 'mobile': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'string'}}, 'searchString': {'type': 'string'}, 'requiredFunctionID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'requiredFunctionCustomerID': {'type': 'int'}, 'requireAllFunctions': {'type': 'boolean'}, 'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. By default, no restriction on result set size. '}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object. '}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects. '}, 'includeFlags': {'type': 'int', 'position': 0, 'description': 'Only include objects which have includeFlags set. '}, 'excludeFlags': {'type': 'int', 'position': 0, 'description': 'Exclude objects which have excludeFlags set. '}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR. ', 'uniqueItems': True, 'items': []}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. '}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers. ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'options': ['USER', 'GROUP']}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. '}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers. ', 'uniqueItems': True, 'items': {'type': 'int'}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
get_functions = {'tags': ['users/v1'], 'summary': "List a user's permission functions regardless of customer (PUBLIC)", 'description': '', 'operationId': 'getFunctions', 'produces': ['application/json'], 'parameters': [{'name': 'userId', 'in': 'path', 'description': 'ID of user', 'required': True, 'type': 'int', 'minimum': 0, 'pattern': '[0-9]+'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of functions', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned functions', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'onlyRoles', 'in': 'query', 'description': 'Only return functions marked as roles', 'required': False, 'type': 'bool'}, {'name': 'keywords', 'in': 'query', 'description': 'Filter functions by keywords on name and description', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name '}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description '}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level ', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'User not found'}, '412': {'description': 'Validation error'}}}
get_profile = {'tags': ['users/v1'], 'summary': 'Get user profile by ID (PUBLIC)', 'description': '', 'operationId': 'getProfile', 'produces': ['application/json'], 'parameters': [{'name': 'userId', 'in': 'path', 'description': 'ID of user', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_user_by_username = {'tags': ['users/v1'], 'summary': 'Get user profile by username (PUBLIC)', 'description': '', 'operationId': 'getUserByUsername', 'produces': ['application/json'], 'parameters': [{'name': 'userName', 'in': 'path', 'description': 'Username', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_user_customers = {'tags': ['users/v1'], 'summary': "List a user's customers. (DEV)", 'description': '', 'operationId': 'getUserCustomers', 'produces': ['application/json'], 'parameters': [{'name': 'userId', 'in': 'path', 'description': 'ID of user', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'name': 'offset', 'in': 'query', 'description': 'Offset results', 'required': False, 'type': 'int'}, {'name': 'limit', 'in': 'query', 'description': 'Limit results', 'required': False, 'type': 'int', 'default': 25}, {'name': 'keywords', 'in': 'query', 'description': 'Search by keywords', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'keywordMatch', 'in': 'query', 'description': 'Set match strategy for keyword search', 'required': False, 'type': 'str', 'default': 'all', 'enum': ['all', 'any']}, {'name': 'keywordField', 'in': 'query', 'description': 'Set field strategy for keyword search', 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': 'all', 'enum': ['name', 'shortName', 'all']}, 'collectionFormat': 'multi'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'User not found'}, '412': {'description': 'Validation error'}}}
get_user_profile_picture = {'tags': ['users/v1'], 'summary': 'Returns user profile picture. (PUBLIC)', 'description': '', 'operationId': 'getUserProfilePicture', 'produces': ['image/*'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or username', 'required': True, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'Domain ID or shortname (optional, defaults to current user domain)', 'required': False, 'type': 'str'}, {'name': 'default', 'in': 'query', 'description': 'If true, return default avatar image if user picture not set. Default is false.', 'required': False, 'type': 'bool', 'default': False}], 'responses': {'401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_users = {'tags': ['users/v1'], 'summary': 'Get user profiles (PUBLIC)', 'description': '', 'operationId': 'listUsers', 'produces': ['application/json'], 'parameters': [{'name': 'subjectID', 'in': 'query', 'description': 'IDs of users', 'required': False, 'type': 'list', 'items': {'type': 'int'}, 'collectionFormat': 'multi'}, {'name': 'offset', 'in': 'query', 'description': 'Offset results', 'required': False, 'type': 'int'}, {'name': 'limit', 'in': 'query', 'description': 'Limit results', 'required': False, 'type': 'int', 'default': 25}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
update_profile_picture_for_user_form = {'tags': ['users/v1'], 'summary': 'Upload and modify the user image (PUBLIC)', 'description': '', 'operationId': 'updateProfilePictureForUserForm', 'consumes': ['application/x-www-form-urlencoded'], 'produces': ['application/json'], 'parameters': [{'name': 'userID', 'in': 'path', 'description': 'ID or username of user to change image for', 'required': True, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'Domain of the user (defaults to current users domain', 'required': False, 'type': 'str'}, {'name': 'picture', 'in': 'formData', 'description': 'Image data URL', 'required': True, 'type': 'string'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of subject '}, 'userName': {'type': 'str', 'position': 0, 'description': 'User name '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of subject '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Created timestamp in ms '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Last updated timestamp in ms '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'properties': {'type': 'dict', 'position': 0, 'description': 'Properties of subject ', 'additionalProperties': {'type': 'string'}}, 'imageURL': {'type': 'str', 'position': 0, 'description': 'User profile picture image url '}, 'mobile': {'type': 'str', 'position': 0, 'description': 'Mobile number of user '}, 'email': {'type': 'str', 'position': 0, 'description': 'Email of user '}, 'lastLoginTimestamp': {'type': 'int', 'position': 0, 'description': 'Last authentication timestamp in ms '}, 'lastImpersonationTimestamp': {'type': 'int', 'position': 0, 'description': 'Last impersonation timestamp in ms '}, 'lastLoginIP': {'type': 'str', 'position': 0, 'description': 'Last IP the user authenticated from '}, 'timeZone': {'type': 'dict', 'properties': {'description': {'type': 'string'}}}, 'language': {'type': 'str', 'position': 0, 'description': 'Language of user ', 'enum': ['ENGLISH', 'NORWEGIAN']}, 'publicKey': {'type': 'str', 'position': 0, 'description': "User's public key "}, 'ascendantIDs': {'type': 'list', 'position': 0, 'description': 'IDs of ascendants ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DISABLED', 'AUTH_RADIUS', 'AUTH_SMS', 'AUTH_LDAP', 'AUTH_LOCAL', 'BLOCKED', 'FORCE_PWCHANGE', 'DAEMON_ACCOUNT', 'PASSWORD_NOT_SET', 'AUTH_CRYPTO', 'AUTH_TOTP', 'AUTH_APIKEY', 'ANONYMOUS_USER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
update_profile_picture_for_user_j_s_o_n = {'tags': ['users/v1'], 'summary': 'Upload and modify the user image (PUBLIC)', 'description': '', 'operationId': 'updateProfilePictureForUserJSON', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'userId', 'in': 'path', 'description': 'ID or username of user to change image for', 'required': True, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'Domain of the user (defaults to current users domain', 'required': False, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Update request', 'required': False, 'schema': {'type': 'object', 'required': ['image', 'mimeType'], 'properties': {'image': {'type': 'str', 'position': 0, 'description': 'The image to upload (in base64) ', 'minLength': 1, 'maxLength': 10000000}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The MIME type of the image  => Sanitize by regex .+/.+'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of subject '}, 'userName': {'type': 'str', 'position': 0, 'description': 'User name '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of subject '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Created timestamp in ms '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Last updated timestamp in ms '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'properties': {'type': 'dict', 'position': 0, 'description': 'Properties of subject ', 'additionalProperties': {'type': 'string'}}, 'imageURL': {'type': 'str', 'position': 0, 'description': 'User profile picture image url '}, 'mobile': {'type': 'str', 'position': 0, 'description': 'Mobile number of user '}, 'email': {'type': 'str', 'position': 0, 'description': 'Email of user '}, 'lastLoginTimestamp': {'type': 'int', 'position': 0, 'description': 'Last authentication timestamp in ms '}, 'lastImpersonationTimestamp': {'type': 'int', 'position': 0, 'description': 'Last impersonation timestamp in ms '}, 'lastLoginIP': {'type': 'str', 'position': 0, 'description': 'Last IP the user authenticated from '}, 'timeZone': {'type': 'dict', 'properties': {'description': {'type': 'string'}}}, 'language': {'type': 'str', 'position': 0, 'description': 'Language of user ', 'enum': ['ENGLISH', 'NORWEGIAN']}, 'publicKey': {'type': 'str', 'position': 0, 'description': "User's public key "}, 'ascendantIDs': {'type': 'list', 'position': 0, 'description': 'IDs of ascendants ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DISABLED', 'AUTH_RADIUS', 'AUTH_SMS', 'AUTH_LDAP', 'AUTH_LOCAL', 'BLOCKED', 'FORCE_PWCHANGE', 'DAEMON_ACCOUNT', 'PASSWORD_NOT_SET', 'AUTH_CRYPTO', 'AUTH_TOTP', 'AUTH_APIKEY', 'ANONYMOUS_USER']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
update_user_preferences = {'tags': ['users/v1'], 'summary': 'Updates users preferences. Body should be a map of preferences to set.Any preference with a null value will be deleted. (DEV)', 'description': '', 'operationId': 'updateUserPreferences', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or username', 'required': True, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'Domain ID or shortname (optional, defaults to current user domain)', 'required': False, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'User preferences update request', 'required': False, 'schema': {'type': 'object'}}], 'responses': {'401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
view_user_preferences = {'tags': ['users/v1'], 'summary': 'View users preferences. (DEV)', 'description': '', 'operationId': 'viewUserPreferences', 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or username', 'required': True, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'Domain ID or shortname (optional, defaults to current user domain)', 'required': False, 'type': 'str'}], 'responses': {'401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}