"""Autogenerated API schema"""
from argus_api import session


add_data_store_descriptor = {'tags': ['datastores/v1'], 'summary': 'Adds a new datastore descriptor. (PUBLIC)', 'description': '', 'operationId': 'addDataStoreDescriptor', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Add request', 'required': False, 'schema': {'type': 'object', 'required': ['behaviourType', 'dataType', 'description', 'name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name for new datastore. Name must be unique.  => [a-zA-Z0-9_\\-\\.]*', 'minLength': 0, 'maxLength': 255}, 'description': {'type': 'str', 'position': 0, 'description': 'Description of the datastore.  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*', 'minLength': 0, 'maxLength': 2048}, 'globalData': {'type': 'bool', 'position': 0, 'description': 'If true, datastore only accepts global data (not customer bound). '}, 'expireData': {'type': 'bool', 'position': 0, 'description': 'If true, datastore entries will expire after the configured time period since added/last updated. '}, 'lifeTime': {'type': 'int', 'position': 0, 'description': 'The requested expiry time in milliseconds. Requires a positive value (if expireData is true). ', 'minimum': 1}, 'behaviourType': {'type': 'str', 'position': 0, 'description': 'Datastore behaviour. CENTRAL stores are only updated centrally, but may be used in distributed processing. LOCAL and DISTRIBUTED stores are not stored centrally, but updated in the distributed system. DISTRIBUTED may be shared between processing nodes. (default CENTRAL)', 'enum': ['LOCAL', 'DISTRIBUTED', 'CENTRAL']}, 'dataType': {'type': 'str', 'position': 0, 'description': 'Select data type: list of values or key/value store. (default MAP (key/value store))', 'enum': ['MAP', 'LIST']}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'dataStoreName': {'type': 'string'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'lastUpdatedTimestamp': {'type': 'int'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'key': {'type': 'string'}, 'value': {'type': 'string'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
delete_data_store_descriptor = {'tags': ['datastores/v1'], 'summary': 'Deletes an existing datastore descriptor. (PUBLIC)', 'description': '', 'operationId': 'deleteDataStoreDescriptor', 'produces': ['application/json'], 'parameters': [{'name': 'dataStore', 'in': 'path', 'description': 'Store name', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'dataStoreName': {'type': 'string'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'lastUpdatedTimestamp': {'type': 'int'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'key': {'type': 'string'}, 'value': {'type': 'string'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Store not found'}, '412': {'description': 'Validation error'}}}
get_descriptor = {'tags': ['datastores/v1'], 'summary': 'Returns a Datastore descriptor identified by its name. (PUBLIC)', 'description': '', 'operationId': 'getDescriptor', 'produces': ['application/json'], 'parameters': [{'name': 'dataStore', 'in': 'path', 'description': 'Descriptor name', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'deleted': {'type': 'boolean'}, 'name': {'type': 'str', 'position': 0, 'description': 'Datastore name (identifier) '}, 'description': {'type': 'str', 'position': 0, 'description': 'Datastore description '}, 'dataType': {'type': 'str', 'position': 0, 'description': 'Data type (MAP or LIST). Maps have keys with values, lists only have keys. ', 'enum': ['MAP', 'LIST']}, 'behaviourType': {'type': 'str', 'position': 0, 'description': 'Datastore behaviour. CENTRAL datastores define their data in the central Argus application. LOCAL and DISTRIBUTED datastores are used to control expiry and format for stores used in distributed processing. ', 'enum': ['LOCAL', 'DISTRIBUTED', 'CENTRAL']}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for the last update of this datastore descriptor. '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lifeTime': {'type': 'int', 'position': 0, 'description': 'For datastores with expireData, the lifeTime defines the time period (in milliseconds) the data will live after last put before being expired. '}, 'globalData': {'type': 'bool', 'position': 0, 'description': 'Datastores with globalData do not accept data per customer, but only to a common global store. '}, 'expireData': {'type': 'bool', 'position': 0, 'description': 'Datastores with expireData will automatically expire data which is older than lifeTime millis. '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
search_descriptors = {'tags': ['datastores/v1'], 'summary': 'Returns an array of DataStore descriptors matching search criteria (PUBLIC)', 'description': '', 'operationId': 'searchDescriptors', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Search criteria', 'required': False, 'schema': {'type': 'object', 'properties': {'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. By default, no restriction on result set size. '}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object. '}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects. '}, 'includeFlags': {'type': 'int', 'position': 0, 'description': 'Only include objects which have includeFlags set. '}, 'excludeFlags': {'type': 'int', 'position': 0, 'description': 'Exclude objects which have excludeFlags set. '}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. By default, no restriction on result set size. '}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object. '}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects. '}, 'includeFlags': {'type': 'int', 'position': 0, 'description': 'Only include objects which have includeFlags set. '}, 'excludeFlags': {'type': 'int', 'position': 0, 'description': 'Exclude objects which have excludeFlags set. '}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR. ', 'uniqueItems': True, 'items': []}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. '}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for datastores matching keyword ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields). ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['name', 'description', 'all']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines the MatchStrategy for keywords (default match all keywords). ', 'enum': ['all', 'any']}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending). ', 'items': {'type': 'str', 'enum': ['name', 'lastUpdatedTimestamp']}}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. '}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for datastores matching keyword ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields). ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['name', 'description', 'all']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines the MatchStrategy for keywords (default match all keywords). ', 'enum': ['all', 'any']}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending). ', 'items': {'type': 'str', 'enum': ['name', 'lastUpdatedTimestamp']}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'deleted': {'type': 'boolean'}, 'name': {'type': 'str', 'position': 0, 'description': 'Datastore name (identifier) '}, 'description': {'type': 'str', 'position': 0, 'description': 'Datastore description '}, 'dataType': {'type': 'str', 'position': 0, 'description': 'Data type (MAP or LIST). Maps have keys with values, lists only have keys. ', 'enum': ['MAP', 'LIST']}, 'behaviourType': {'type': 'str', 'position': 0, 'description': 'Datastore behaviour. CENTRAL datastores define their data in the central Argus application. LOCAL and DISTRIBUTED datastores are used to control expiry and format for stores used in distributed processing. ', 'enum': ['LOCAL', 'DISTRIBUTED', 'CENTRAL']}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for the last update of this datastore descriptor. '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lifeTime': {'type': 'int', 'position': 0, 'description': 'For datastores with expireData, the lifeTime defines the time period (in milliseconds) the data will live after last put before being expired. '}, 'globalData': {'type': 'bool', 'position': 0, 'description': 'Datastores with globalData do not accept data per customer, but only to a common global store. '}, 'expireData': {'type': 'bool', 'position': 0, 'description': 'Datastores with expireData will automatically expire data which is older than lifeTime millis. '}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
search_descriptors_simple = {'tags': ['datastores/v1'], 'summary': 'Returns an array of DataStore descriptors matching search parameters (PUBLIC)', 'description': '', 'operationId': 'searchDescriptorsSimple', 'produces': ['application/json'], 'parameters': [{'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'keywords', 'in': 'query', 'description': 'Search by keywords', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'keywordMatch', 'in': 'query', 'description': 'Set match strategy for keyword search', 'required': False, 'type': 'str', 'default': 'all', 'enum': ['all', 'any']}, {'name': 'keywordField', 'in': 'query', 'description': 'Set field strategy for keyword search', 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': 'all', 'enum': ['name', 'description', 'all']}, 'collectionFormat': 'multi'}, {'name': 'sortBy', 'in': 'query', 'description': 'Sort search result', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'deleted': {'type': 'boolean'}, 'name': {'type': 'str', 'position': 0, 'description': 'Datastore name (identifier) '}, 'description': {'type': 'str', 'position': 0, 'description': 'Datastore description '}, 'dataType': {'type': 'str', 'position': 0, 'description': 'Data type (MAP or LIST). Maps have keys with values, lists only have keys. ', 'enum': ['MAP', 'LIST']}, 'behaviourType': {'type': 'str', 'position': 0, 'description': 'Datastore behaviour. CENTRAL datastores define their data in the central Argus application. LOCAL and DISTRIBUTED datastores are used to control expiry and format for stores used in distributed processing. ', 'enum': ['LOCAL', 'DISTRIBUTED', 'CENTRAL']}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for the last update of this datastore descriptor. '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lifeTime': {'type': 'int', 'position': 0, 'description': 'For datastores with expireData, the lifeTime defines the time period (in milliseconds) the data will live after last put before being expired. '}, 'globalData': {'type': 'bool', 'position': 0, 'description': 'Datastores with globalData do not accept data per customer, but only to a common global store. '}, 'expireData': {'type': 'bool', 'position': 0, 'description': 'Datastores with expireData will automatically expire data which is older than lifeTime millis. '}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
update_data_store_descriptor = {'tags': ['datastores/v1'], 'summary': 'Updates an existing datastore descriptor. (PUBLIC)', 'description': '', 'operationId': 'updateDataStoreDescriptor', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'dataStore', 'in': 'path', 'description': 'Store name', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Update request', 'required': False, 'schema': {'type': 'object', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'If set, request datastore to change name. All entries will be updated (so may take long time for large stores).  => [a-zA-Z0-9_\\-\\.]*', 'minLength': 0, 'maxLength': 255}, 'description': {'type': 'str', 'position': 0, 'description': 'If set, update description on datastore.  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*', 'minLength': 0, 'maxLength': 2048}, 'globalData': {'type': 'bool', 'position': 0, 'description': 'If set, change the global data flag on this datastore. Default is no change. '}, 'expireData': {'type': 'bool', 'position': 0, 'description': 'If set, change the expire data flag on this datastore. Default is no change. '}, 'lifeTime': {'type': 'int', 'position': 0, 'description': 'If set (to positive value), change the expiry time for this datastore. Requires that the store has enabled expireData. Default is no change. ', 'minimum': 1}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'dataStoreName': {'type': 'string'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'lastUpdatedTimestamp': {'type': 'int'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'key': {'type': 'string'}, 'value': {'type': 'string'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Store not found'}, '412': {'description': 'Validation error'}}}