"""Autogenerated API schema"""
from argus_api import session


add_customer_network = {'tags': ['customernetworks/v1'], 'summary': 'Add new customer network (PUBLIC)', 'description': '', 'operationId': 'addCustomerNetwork', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Customer network add request', 'required': False, 'schema': {'type': 'object', 'required': ['customer', 'description', 'location', 'networkAddress', 'zone'], 'properties': {'customer': {'type': 'str', 'position': 0, 'description': 'Customer ID or short name of the customer that the network belongs to '}, 'location': {'type': 'str', 'position': 0, 'description': 'Location ID or short name of the location where the network is located '}, 'flagsToSet': {'type': 'list', 'position': 0, 'description': 'Flags to set for the network ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['AUTO', 'NAT', 'PROXY', 'SCANNER', 'CLIENT', 'SERVER', 'DNS', 'GUEST', 'UNASSIGNED', 'DOMAIN_CONTROLLER', 'UNVERIFIED']}}, 'zone': {'type': 'str', 'position': 0, 'description': 'Zone of the network ', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'description': {'type': 'str', 'position': 0, 'description': 'Description of the customer network. Maximum number of characters is 255.  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'networkAddress': {'type': 'str', 'position': 0, 'description': 'IP address of the customer network  => format:ip'}, 'verified': {'type': 'bool', 'position': 0, 'description': 'Whether to create the network already Verified. (default false)', 'default': False}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'zone': {'type': 'str', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'location': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'shortName': {'type': 'string'}, 'name': {'type': 'string'}, 'timeZone': {'type': 'string'}}}, 'description': {'type': 'str', 'position': 0, 'description': 'Description of the customer network '}, 'networkAddress': {'type': 'dict', 'properties': {'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of last update of the customer network '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of creation of the customer network '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['AUTO', 'NAT', 'PROXY', 'SCANNER', 'CLIENT', 'SERVER', 'DNS', 'GUEST', 'UNASSIGNED', 'DELETED', 'DOMAIN_CONTROLLER', 'SHARED_HOST', 'UNVERIFIED']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
add_customer_network_comment = {'tags': ['customernetworks/v1'], 'summary': 'Add comment for customer network (PUBLIC)', 'description': '', 'operationId': 'addCustomerNetworkComment', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'networkID', 'in': 'path', 'description': 'ID of network to update', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Network update request', 'required': False, 'schema': {'type': 'object', 'required': ['comment'], 'properties': {'comment': {'type': 'str', 'position': 0, 'description': 'Comment to add to the network  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'timestamp': {'type': 'int', 'position': 0, 'description': 'When the comment was added. '}, 'user': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'comment': {'type': 'str', 'position': 0, 'description': "The comment's text. "}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
bulk_add_customer_networks = {'tags': ['customernetworks/v1'], 'summary': 'Bulk add/update customer networks (PUBLIC)', 'description': '', 'operationId': 'bulkAddCustomerNetworks', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Customer network bulk add request', 'required': False, 'schema': {'type': 'object', 'required': ['customer', 'networks'], 'properties': {'networks': {'type': 'list', 'items': {'type': 'dict', 'required': ['description', 'location', 'networkAddress', 'zone'], 'properties': {'location': {'type': 'str', 'position': 0, 'description': 'Location ID or short name of the location where the network is located '}, 'flagsToSet': {'type': 'list', 'position': 0, 'description': 'Flags to set for the network ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['AUTO', 'NAT', 'PROXY', 'SCANNER', 'CLIENT', 'SERVER', 'DNS', 'GUEST', 'UNASSIGNED', 'DOMAIN_CONTROLLER', 'UNVERIFIED']}}, 'zone': {'type': 'str', 'position': 0, 'description': 'Zone of the network ', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'description': {'type': 'str', 'position': 0, 'description': 'Description of the customer network. Maximum number of characters is 255.  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'networkAddress': {'type': 'str', 'position': 0, 'description': 'IP address of the customer network  => format:ip'}}}, 'maxItems': 2147483647, 'minItems': 1}, 'customer': {'type': 'str', 'position': 0, 'description': 'Customer ID or short name of the customer that the networks belong to '}, 'overwrite': {'type': 'bool', 'position': 0, 'description': 'Overwrite existing networks configuration (default true)', 'default': True}, 'verified': {'type': 'bool', 'position': 0, 'description': 'Whether to create the networks already Verified. (default false)', 'default': False}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'zone': {'type': 'str', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'location': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'shortName': {'type': 'string'}, 'name': {'type': 'string'}, 'timeZone': {'type': 'string'}}}, 'description': {'type': 'str', 'position': 0, 'description': 'Description of the customer network '}, 'networkAddress': {'type': 'dict', 'properties': {'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of last update of the customer network '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of creation of the customer network '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['AUTO', 'NAT', 'PROXY', 'SCANNER', 'CLIENT', 'SERVER', 'DNS', 'GUEST', 'UNASSIGNED', 'DELETED', 'DOMAIN_CONTROLLER', 'SHARED_HOST', 'UNVERIFIED']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
delete_customer_network = {'tags': ['customernetworks/v1'], 'summary': 'Delete customer network (PUBLIC)', 'description': '', 'operationId': 'deleteCustomerNetwork', 'produces': ['application/json'], 'parameters': [{'name': 'networkID', 'in': 'path', 'description': 'ID of network to delete', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'zone': {'type': 'str', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'location': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'shortName': {'type': 'string'}, 'name': {'type': 'string'}, 'timeZone': {'type': 'string'}}}, 'description': {'type': 'str', 'position': 0, 'description': 'Description of the customer network '}, 'networkAddress': {'type': 'dict', 'properties': {'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of last update of the customer network '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of creation of the customer network '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['AUTO', 'NAT', 'PROXY', 'SCANNER', 'CLIENT', 'SERVER', 'DNS', 'GUEST', 'UNASSIGNED', 'DELETED', 'DOMAIN_CONTROLLER', 'SHARED_HOST', 'UNVERIFIED']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
delete_customer_network_comment = {'tags': ['customernetworks/v1'], 'summary': 'Delete comment from customer network (PUBLIC)', 'description': '', 'operationId': 'deleteCustomerNetworkComment', 'produces': ['application/json'], 'parameters': [{'name': 'networkID', 'in': 'path', 'description': 'ID of parent network', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}, {'name': 'commentID', 'in': 'path', 'description': 'ID of comment to delete', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'timestamp': {'type': 'int', 'position': 0, 'description': 'When the comment was added. '}, 'user': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'comment': {'type': 'str', 'position': 0, 'description': "The comment's text. "}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
get_customer_network = {'tags': ['customernetworks/v1'], 'summary': 'Get customer network (PUBLIC)', 'description': '', 'operationId': 'getCustomerNetwork', 'produces': ['application/json'], 'parameters': [{'name': 'networkID', 'in': 'path', 'description': 'ID of network to get', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'zone': {'type': 'str', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'location': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'shortName': {'type': 'string'}, 'name': {'type': 'string'}, 'timeZone': {'type': 'string'}}}, 'description': {'type': 'str', 'position': 0, 'description': 'Description of the customer network '}, 'networkAddress': {'type': 'dict', 'properties': {'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of last update of the customer network '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of creation of the customer network '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['AUTO', 'NAT', 'PROXY', 'SCANNER', 'CLIENT', 'SERVER', 'DNS', 'GUEST', 'UNASSIGNED', 'DELETED', 'DOMAIN_CONTROLLER', 'SHARED_HOST', 'UNVERIFIED']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
get_customer_network_comments = {'tags': ['customernetworks/v1'], 'summary': "Get network's comments (PUBLIC)", 'description': '', 'operationId': 'getCustomerNetworkComments', 'produces': ['application/json'], 'parameters': [{'name': 'networkID', 'in': 'path', 'description': 'ID of network', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of comments', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned comments', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'zone': {'type': 'str', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'location': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'shortName': {'type': 'string'}, 'name': {'type': 'string'}, 'timeZone': {'type': 'string'}}}, 'description': {'type': 'str', 'position': 0, 'description': 'Description of the customer network '}, 'networkAddress': {'type': 'dict', 'properties': {'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of last update of the customer network '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of creation of the customer network '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['AUTO', 'NAT', 'PROXY', 'SCANNER', 'CLIENT', 'SERVER', 'DNS', 'GUEST', 'UNASSIGNED', 'DELETED', 'DOMAIN_CONTROLLER', 'SHARED_HOST', 'UNVERIFIED']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
get_customer_networks = {'tags': ['customernetworks/v1'], 'summary': 'Get networks belonging to customer(s) (PUBLIC)', 'description': '', 'operationId': 'getCustomerNetworks', 'produces': ['application/json', 'text/csv'], 'parameters': [{'name': 'Accept', 'in': 'header', 'required': False, 'type': 'string'}, {'name': 'customerID', 'in': 'query', 'description': 'ID of customer(s)', 'required': False, 'type': 'list', 'items': {'type': 'int'}, 'collectionFormat': 'multi'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of networks', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned networks', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'zone': {'type': 'str', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'location': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'shortName': {'type': 'string'}, 'name': {'type': 'string'}, 'timeZone': {'type': 'string'}}}, 'description': {'type': 'str', 'position': 0, 'description': 'Description of the customer network '}, 'networkAddress': {'type': 'dict', 'properties': {'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of last update of the customer network '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of creation of the customer network '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['AUTO', 'NAT', 'PROXY', 'SCANNER', 'CLIENT', 'SERVER', 'DNS', 'GUEST', 'UNASSIGNED', 'DELETED', 'DOMAIN_CONTROLLER', 'SHARED_HOST', 'UNVERIFIED']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
search_customer_network = {'tags': ['customernetworks/v1'], 'summary': 'Search customer network (PUBLIC)', 'description': '', 'operationId': 'searchCustomerNetwork', 'consumes': ['application/json'], 'produces': ['application/json', 'text/csv'], 'parameters': [{'name': 'Accept', 'in': 'header', 'required': False, 'type': 'string'}, {'in': 'body', 'name': 'body', 'description': 'Search criteria', 'required': False, 'schema': {'type': 'object', 'properties': {'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. By default, no restriction on result set size. '}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object. '}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects. '}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. By default, no restriction on result set size. '}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object. '}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects. '}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR. ', 'uniqueItems': True, 'items': []}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. '}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers. ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'addresses': {'type': 'list', 'position': 0, 'description': 'A set of IP addresses matched against networks ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'includeSupernet': {'type': 'bool', 'position': 0, 'description': 'Network in search criteria will be searched for matching supernets (default true)', 'default': True}, 'includeSubnet': {'type': 'bool', 'position': 0, 'description': 'Network in search criteria will be searched for matching subnets (default true)', 'default': True}, 'keywords': {'type': 'list', 'position': 0, 'description': "A set of keywords matched against network's description ", 'uniqueItems': True, 'items': {'type': 'string'}}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Start of time search period '}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'End of time search period '}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'TimeMatchStrategy to define how to match startTimestamp and endTimestamp with provided timeFieldStrategies (default any)', 'enum': ['all', 'any']}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'TimeFieldStrategy to define which timestamp field(s) to match. (default createdTimestamp)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdTimestamp', 'lastUpdatedTimestamp', 'all']}}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Only include objects which have includeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['AUTO', 'NAT', 'PROXY', 'SCANNER', 'CLIENT', 'SERVER', 'DNS', 'GUEST', 'UNASSIGNED', 'DOMAIN_CONTROLLER', 'SHARED_HOST', 'UNVERIFIED', 'RFC1918']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Exclude objects which have excludeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['AUTO', 'NAT', 'PROXY', 'SCANNER', 'CLIENT', 'SERVER', 'DNS', 'GUEST', 'UNASSIGNED', 'DOMAIN_CONTROLLER', 'SHARED_HOST', 'UNVERIFIED', 'RFC1918']}}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. '}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers. ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'addresses': {'type': 'list', 'position': 0, 'description': 'A set of IP addresses matched against networks ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'includeSupernet': {'type': 'bool', 'position': 0, 'description': 'Network in search criteria will be searched for matching supernets (default true)', 'default': True}, 'includeSubnet': {'type': 'bool', 'position': 0, 'description': 'Network in search criteria will be searched for matching subnets (default true)', 'default': True}, 'keywords': {'type': 'list', 'position': 0, 'description': "A set of keywords matched against network's description ", 'uniqueItems': True, 'items': {'type': 'string'}}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Start of time search period '}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'End of time search period '}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'TimeMatchStrategy to define how to match startTimestamp and endTimestamp with provided timeFieldStrategies (default any)', 'enum': ['all', 'any']}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'TimeFieldStrategy to define which timestamp field(s) to match. (default createdTimestamp)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdTimestamp', 'lastUpdatedTimestamp', 'all']}}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Only include objects which have includeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['AUTO', 'NAT', 'PROXY', 'SCANNER', 'CLIENT', 'SERVER', 'DNS', 'GUEST', 'UNASSIGNED', 'DOMAIN_CONTROLLER', 'SHARED_HOST', 'UNVERIFIED', 'RFC1918']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Exclude objects which have excludeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['AUTO', 'NAT', 'PROXY', 'SCANNER', 'CLIENT', 'SERVER', 'DNS', 'GUEST', 'UNASSIGNED', 'DOMAIN_CONTROLLER', 'SHARED_HOST', 'UNVERIFIED', 'RFC1918']}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'zone': {'type': 'str', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'location': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'shortName': {'type': 'string'}, 'name': {'type': 'string'}, 'timeZone': {'type': 'string'}}}, 'description': {'type': 'str', 'position': 0, 'description': 'Description of the customer network '}, 'networkAddress': {'type': 'dict', 'properties': {'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of last update of the customer network '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of creation of the customer network '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['AUTO', 'NAT', 'PROXY', 'SCANNER', 'CLIENT', 'SERVER', 'DNS', 'GUEST', 'UNASSIGNED', 'DELETED', 'DOMAIN_CONTROLLER', 'SHARED_HOST', 'UNVERIFIED']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
update_customer_network = {'tags': ['customernetworks/v1'], 'summary': 'Update customer network (PUBLIC)', 'description': '', 'operationId': 'updateCustomerNetwork', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'networkID', 'in': 'path', 'description': 'ID of network to update', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Customer network update request', 'required': False, 'schema': {'type': 'object', 'properties': {'location': {'type': 'str', 'position': 0, 'description': 'Location ID or short name of the location where the network is located '}, 'description': {'type': 'str', 'position': 0, 'description': 'Description of the customer network. Maximum number of characters is 255.  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'flagsToSet': {'type': 'list', 'position': 0, 'description': 'Flags to set for the network. This property takes precedence over the content of flagsToEnable and flagsToDisable properties. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['AUTO', 'NAT', 'PROXY', 'SCANNER', 'CLIENT', 'SERVER', 'DNS', 'GUEST', 'UNASSIGNED', 'DOMAIN_CONTROLLER', 'UNVERIFIED']}}, 'flagsToEnable': {'type': 'list', 'position': 0, 'description': 'Flags to enable for the network ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['AUTO', 'NAT', 'PROXY', 'SCANNER', 'CLIENT', 'SERVER', 'DNS', 'GUEST', 'UNASSIGNED', 'DOMAIN_CONTROLLER', 'UNVERIFIED']}}, 'flagsToDisable': {'type': 'list', 'position': 0, 'description': 'Flags to disable for the network ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['AUTO', 'NAT', 'PROXY', 'SCANNER', 'CLIENT', 'SERVER', 'DNS', 'GUEST', 'UNASSIGNED', 'DOMAIN_CONTROLLER', 'UNVERIFIED']}}, 'zone': {'type': 'str', 'position': 0, 'description': 'Zone of the network ', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'zone': {'type': 'str', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'location': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'shortName': {'type': 'string'}, 'name': {'type': 'string'}, 'timeZone': {'type': 'string'}}}, 'description': {'type': 'str', 'position': 0, 'description': 'Description of the customer network '}, 'networkAddress': {'type': 'dict', 'properties': {'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of last update of the customer network '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of creation of the customer network '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['AUTO', 'NAT', 'PROXY', 'SCANNER', 'CLIENT', 'SERVER', 'DNS', 'GUEST', 'UNASSIGNED', 'DELETED', 'DOMAIN_CONTROLLER', 'SHARED_HOST', 'UNVERIFIED']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
verify_customer_network = {'tags': ['customernetworks/v1'], 'summary': 'Verifies an unverified customer network (PUBLIC)', 'description': '', 'operationId': 'verifyCustomerNetwork', 'produces': ['application/json'], 'parameters': [{'name': 'networkID', 'in': 'path', 'description': 'ID of network to verify', 'required': True, 'type': 'int', 'minimum': 1, 'pattern': '[0-9]+'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'zone': {'type': 'str', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'location': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'shortName': {'type': 'string'}, 'name': {'type': 'string'}, 'timeZone': {'type': 'string'}}}, 'description': {'type': 'str', 'position': 0, 'description': 'Description of the customer network '}, 'networkAddress': {'type': 'dict', 'properties': {'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of last update of the customer network '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of creation of the customer network '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['AUTO', 'NAT', 'PROXY', 'SCANNER', 'CLIENT', 'SERVER', 'DNS', 'GUEST', 'UNASSIGNED', 'DELETED', 'DOMAIN_CONTROLLER', 'SHARED_HOST', 'UNVERIFIED']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}