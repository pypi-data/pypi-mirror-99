"""Autogenerated API schema"""
from argus_api import session


abort_fragmented_upload = {'tags': ['cases/v2/case'], 'summary': 'Abort fragmented upload of an attachment (DEV)', 'description': '', 'operationId': 'abortFragmentedUpload', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'attachmentID', 'in': 'path', 'description': 'Attachment ID', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'name': {'type': 'str', 'position': 0, 'description': 'Attachment file name '}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'Attachment mimetype '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MERGED', 'ZIP_ENCRYPTED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_TECH', 'MAIL_UPDATE', 'INCOMPLETE']}}, 'size': {'type': 'int', 'position': 0, 'description': 'Attachment file size (in bytes) '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'Attachment checksum '}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'Attachment origin email address (only present if attachment is marked as a mail update) '}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
acknowledge_workflow = {'tags': ['cases/v2/case'], 'summary': 'Acknowledge workflow on case (PUBLIC)', 'description': '', 'operationId': 'acknowledgeWorkflow', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'workflow', 'in': 'path', 'description': 'Workflow to acknowledge', 'required': True, 'type': 'str', 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, {'in': 'body', 'name': 'body', 'description': 'Workflow request details', 'required': False, 'schema': {'type': 'object', 'properties': {'comment': {'type': 'str', 'position': 0, 'description': 'Optional acknowledgement comment to add. Html is allowed, will be sanitized. '}, 'publicComment': {'type': 'bool', 'position': 0, 'description': 'If true, the comment is marked as public, and is made visible to customer. '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['workflow'], 'properties': {'id': {'type': 'str'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'workflow': {'type': 'str', 'position': 0, 'description': 'Name of workflow. ', 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, 'acknowledgedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'acknowledgedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time when this workflow was acknowledged, or 0 if not acknowledged. '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'PUBLIC_REQUEST_COMMENT', 'PUBLIC_ACKNOWLEDGED_COMMENT']}}, 'requestComment': {'type': 'str', 'position': 0, 'description': 'Comment set when requesting this workflow. May contain sanitized HTML. '}, 'acknowledgedComment': {'type': 'str', 'position': 0, 'description': 'Comment set for acknowledging this workflow. May contain sanitized HTML. '}, 'externalReference': {'type': 'str', 'position': 0, 'description': 'An external reference for this workflow. '}, 'state': {'type': 'str', 'position': 0, 'description': 'The state of the workflow ', 'enum': ['requested', 'acknowledged']}, 'acknowledgedTime': {'type': 'str', 'position': 0, 'description': 'Time when this workflow was acknowledged (in ISO-8601 time format) '}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
add_attachment = {'tags': ['cases/v2/case'], 'summary': 'Add new attachment (PUBLIC)', 'description': 'Upload new attachment as JSON object with base64-encoded data', 'operationId': 'addAttachment', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'in': 'body', 'name': 'body', 'description': 'Attachment add request', 'required': False, 'schema': {'type': 'object', 'required': ['data', 'mimeType', 'name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name of attachment to add.  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'MimeType for attachment to add.  => Sanitize by regex [^ /]+/[^ /]+'}, 'data': {'type': 'str', 'position': 0, 'description': 'Attachment bytes ', 'minLength': 1, 'maxLength': 2147483647}, 'encryptedZip': {'type': 'bool', 'position': 0, 'description': "If set, mark this attachment as an encrypted zip (should have password 'argus'). NOTE: the service does not encrypt or zip the attachment, this should be done by the client. (default false)", 'default': False}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'If update is made from an email, specify origin email address here  => format:email'}, 'notification': {'type': 'dict', 'properties': {'extraRecipients': {'type': 'list', 'position': 0, 'description': 'Additional recipients (email addresses or phone numbers) to be notified of this operation.  ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'skipEmail': {'type': 'bool', 'position': 0, 'description': 'If true, skip default email notification. ExtraRecipients will still be notified. Default is false. '}, 'skipSMS': {'type': 'bool', 'position': 0, 'description': 'If true, skip default sms notification. Default is false. '}, 'includeAttachments': {'type': 'bool', 'position': 0, 'description': 'If true, attachments are requested included in email notifications. Configuration may still override this for some/all destinations. Default is false. '}}}}}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'name': {'type': 'str', 'position': 0, 'description': 'Attachment file name '}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'Attachment mimetype '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MERGED', 'ZIP_ENCRYPTED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_TECH', 'MAIL_UPDATE', 'INCOMPLETE']}}, 'size': {'type': 'int', 'position': 0, 'description': 'Attachment file size (in bytes) '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'Attachment checksum '}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'Attachment origin email address (only present if attachment is marked as a mail update) '}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
add_case_link = {'tags': ['cases/v2/case'], 'summary': 'Add link to case (PUBLIC)', 'description': '', 'operationId': 'addCaseLink', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'ID of case to link from', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'linkToCaseID', 'in': 'path', 'description': 'ID of case to link to', 'required': True, 'type': 'int', 'minimum': 1}, {'in': 'body', 'name': 'body', 'description': 'Link add request parameters', 'required': False, 'schema': {'type': 'object', 'required': ['type'], 'properties': {'type': {'type': 'str', 'position': 0, 'description': 'Type of link to add ', 'enum': ['subcase', 'related', 'dependency', 'duplicate']}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'linkedCase': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customerID': {'type': 'int'}, 'subject': {'type': 'string'}, 'service': {'type': 'string'}, 'status': {'type': 'str', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'priority': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MERGED']}}, 'type': 'str', 'direction': {'type': 'str', 'position': 0, 'description': 'The direction of this link (incoming if this is a link TO the requested case, outgoing if this is a link FROM the requested case) ', 'enum': ['incoming', 'outgoing']}, 'parentCase': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customerID': {'type': 'int'}, 'subject': {'type': 'string'}, 'service': {'type': 'string'}, 'status': {'type': 'str', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'priority': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}}}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}, 'options': ['merged', 'subcase', 'related', 'duplicate', 'dependency']}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
add_case_tag = {'tags': ['cases/v2/case'], 'summary': 'Add tag to case (PUBLIC)', 'description': '', 'operationId': 'addCaseTag', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'in': 'body', 'name': 'body', 'description': 'Tag add request', 'required': False, 'schema': {'type': 'object', 'properties': {'tags': {'type': 'list', 'position': 0, 'description': 'Add multiple tags as key/value strings or JSON objects ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'key': {'type': 'str', 'position': 0, 'description': 'Tag key  => [a-zA-Z0-9_\\-\\.]*', 'readOnly': True}, 'value': {'type': 'str', 'position': 0, 'description': 'Tag value  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*', 'readOnly': True}}}, 'maxItems': 2147483647, 'minItems': 1}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'key': {'type': 'string'}, 'value': {'type': 'string'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MERGED']}}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
add_case_watcher = {'tags': ['cases/v2/case'], 'summary': 'Add watcher to case (PUBLIC)', 'description': '', 'operationId': 'addCaseWatcher', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'in': 'body', 'name': 'body', 'description': 'Watcher add request', 'required': False, 'schema': {'type': 'object', 'required': ['type'], 'properties': {'subjectID': {'type': 'int'}, 'type': {'type': 'str', 'position': 0, 'description': 'Type of watcher to add (default email)', 'enum': ['sms', 'email']}, 'userOrGroup': {'type': 'str', 'position': 0, 'description': 'User or group to add watcher for, by ID or shortname. Shortname will be resolved in current users domain. '}, 'destination': {'type': 'str', 'position': 0, 'description': 'Contact information to add as watcher (email address or phone number). If subject is specified, this is ignored. '}, 'verbose': {'type': 'bool', 'position': 0, 'description': 'If set, explicitly set verbosity for watcher (will override default settings on subject) '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'contactID': {'type': 'int'}, 'role': {'type': 'str', 'enum': ['contact', 'watcher']}, 'type': 'str', 'destination': {'type': 'string'}, 'minimumPriority': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'NEGATIVE_ENTRY', 'VERBOSE', 'DISABLED', 'MERGED']}}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}, 'options': ['sms', 'email']}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
add_comment = {'tags': ['cases/v2/case'], 'summary': 'Submit new comment to case (PUBLIC)', 'description': '', 'operationId': 'addComment', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'in': 'body', 'name': 'body', 'description': 'Comment add request', 'required': False, 'schema': {'type': 'object', 'required': ['comment'], 'properties': {'asReplyTo': {'type': 'str', 'position': 0, 'description': 'Optional ID of comment to reply to. '}, 'comment': {'type': 'str', 'position': 0, 'description': 'Comment to add. Html is allowed, will be sanitized. '}, 'internal': {'type': 'bool', 'position': 0, 'description': 'If true, mark comment as internal, only visible to service techs. Default is false. '}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'If comment is added from an email, specify origin email address here.  => format:email'}, 'notification': {'type': 'dict', 'properties': {'extraRecipients': {'type': 'list', 'position': 0, 'description': 'Additional recipients (email addresses or phone numbers) to be notified of this operation.  ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'skipEmail': {'type': 'bool', 'position': 0, 'description': 'If true, skip default email notification. ExtraRecipients will still be notified. Default is false. '}, 'skipSMS': {'type': 'bool', 'position': 0, 'description': 'If true, skip default sms notification. Default is false. '}, 'includeAttachments': {'type': 'bool', 'position': 0, 'description': 'If true, attachments are requested included in email notifications. Configuration may still override this for some/all destinations. Default is false. '}}}, 'associatedAttachmentID': {'type': 'list', 'position': 0, 'description': 'If set, associate this comment with the listed attachments. ', 'uniqueItems': True, 'items': {'type': 'str'}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'comment': {'type': 'str', 'position': 0, 'description': 'Comment text. May be HTML. Sanitized on input. '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'REPLACED', 'UPDATED', 'INTERNAL', 'MERGED', 'MAIL_UPDATE', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_TECH']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Last update timestamp for this comment. '}, 'status': {'type': 'str', 'position': 0, 'description': 'The status of the case when this comment was added. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'priority': {'type': 'str', 'position': 0, 'description': 'The priority of the case when this comment was added. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'Comment origin email address. Only present if comment is marked as a mail update. '}, 'associatedAttachments': {'type': 'list', 'position': 0, 'description': 'Attachments which this comment references. Only set if associated attachments are set. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'readOnly': True}}}}, 'references': {'type': 'list', 'position': 0, 'description': 'References to other comments. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'type': 'str', 'commentID': {'type': 'str'}, 'options': ['original', 'replacedBy', 'replacing', 'replyTo', 'repliedBy']}}}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Last update time for this comment (in ISO-8601 time format). '}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
advanced_case_search = {'tags': ['cases/v2/case'], 'summary': 'Returns cases matching the defined CaseSearchCriteria (PUBLIC)', 'description': '', 'operationId': 'advancedCaseSearch', 'consumes': ['application/json'], 'produces': ['application/json', 'text/csv'], 'parameters': [{'name': 'Accept', 'in': 'header', 'required': False, 'type': 'string'}, {'in': 'body', 'name': 'body', 'description': 'Search criteria', 'required': False, 'schema': {'type': 'object', 'properties': {'startTimestamp': {'type': 'int'}, 'endTimestamp': {'type': 'int'}, 'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. By default, no restriction on result set size. '}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object. '}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects. '}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'startTimestamp': {'type': 'int'}, 'endTimestamp': {'type': 'int'}, 'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. By default, no restriction on result set size. '}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object. '}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects. '}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR. ', 'uniqueItems': True, 'items': []}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. '}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers. ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'caseID': {'type': 'list', 'position': 0, 'description': 'Restrict search to specific cases (by ID). ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Restrict search to specific customers (by ID or shortname). ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'type': 'list', 'service': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries of one of these services (by service shortname or ID). ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'category': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries of one of these categories (by category shortname or ID). ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'status': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries of one of these statuses. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}}, 'initialStatus': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries where the initial status is one of these statuses. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}}, 'priority': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries with given priorties ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}}, 'initialPriority': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries where the initial priority is one of these priorties ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}}, 'assetID': {'type': 'list', 'position': 0, 'description': 'Restrict search to cases associated with specified assets (hosts, services or processes) ', 'uniqueItems': True, 'items': {'type': 'str'}}, 'tag': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries matching the given tag criteria. ', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['key'], 'properties': {'key': {'type': 'str', 'position': 0, 'description': 'Key of tag to search for '}, 'values': {'type': 'list', 'position': 0, 'description': 'Values of tag to search for (any of them). If no value is set, this matches any entry where this tag is set. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If true, invert this criteria. If no value is set, exclude any entry having this tag. '}}}}, 'workflow': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries matching the given workflow criteria. ', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['flow'], 'properties': {'flow': {'type': 'str', 'position': 0, 'description': 'Name of flow to search for ', 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, 'acknowledged': {'type': 'bool', 'position': 0, 'description': 'If true/false, limit to acknowledged/unacknowledged flows, respectively. If not set, filter on all flows of this type. '}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If false (default), limit to cases matching this flow criteria. If true, exclude cases matching this flow criteria. '}}}}, 'field': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries matching the given field criteria. ', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['field'], 'properties': {'field': {'type': 'str', 'position': 0, 'description': 'Name of field to search for '}, 'values': {'type': 'list', 'position': 0, 'description': 'Values of tag to search for (any of them). If no value is set, this matches any entry where this field is set. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If true, invert this criteria. If no value is set, exclude any entry having this field. '}}}}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for keywords. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps will be included in the search (default all). ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdTimestamp', 'lastUpdatedTimestamp', 'closedTimestamp', 'publishedTimestamp', 'all']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) ', 'enum': ['all', 'any']}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields). ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['subject', 'description', 'comments', 'customerReference', 'id', 'all']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines the MatchStrategy for keywords (default match all keywords). ', 'enum': ['all', 'any']}, 'user': {'type': 'list', 'position': 0, 'description': 'Restrict search to cases associated with these users or user groups (by ID or shortname). ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userID': {'type': 'list', 'position': 0, 'description': "This field is deprecated. Use field 'user' instead. ", 'uniqueItems': True, 'items': {'type': 'int'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which user fields will be searched (default match all user fields). ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['reporter', 'assignedUser', 'assignedTech', 'createdByUser', 'lastUpdatedByUser', 'closedByUser', 'publishedByUser', 'commentedByUser', 'watchedByUser', 'all']}}, 'userAssigned': {'type': 'bool', 'position': 0, 'description': 'If set, limit search to cases where assignedUser field is set/unset '}, 'techAssigned': {'type': 'bool', 'position': 0, 'description': 'If set, limit search to cases where assignedTech field is set/unset '}, 'includeWorkflows': {'type': 'bool', 'position': 0, 'description': 'If true, include list of workflows in result. Default is false (not present). '}, 'includeDescription': {'type': 'bool', 'position': 0, 'description': 'If false, omit description from response. Default is true (description is present). '}, 'accessMode': {'type': 'list', 'position': 0, 'description': 'If set, only match cases which is set to one of these access modes ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['roleBased', 'readRestricted', 'writeRestricted', 'explicit']}}, 'explicitAccess': {'type': 'list', 'position': 0, 'description': 'If set, only match cases which have explicit access grants matching the specified criteria ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'subject': {'type': 'list', 'position': 0, 'description': 'Match only access granted to specified user or group (id or shortname) ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'includeSubjectAnscendants': {'type': 'bool', 'position': 0, 'description': 'If true, also return cases where any of the specified subjects are granted access through parent groups. '}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Match access granted after this timestamp '}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Match access granted before this timestamp '}, 'level': {'type': 'list', 'position': 0, 'description': 'Match access granted for specified access levels ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['read', 'write', 'owner']}}}}}, 'includeTestData': {'type': 'bool', 'position': 0, 'description': 'If true, also include cases marked as TEST_DATA in search result. This option is restricted to users with permission viewCaseTestData. Default is false (excluded). '}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending). ', 'items': {'type': 'str', 'enum': ['reporter', 'createdByUser', 'createdTimestamp', 'lastUpdatedByUser', 'lastUpdatedTimestamp', 'assignedUser', 'assignedTech', 'closedByUser', 'closedTimestamp', 'publishedByUser', 'publishedTimestamp', 'customer', 'priority', 'status', 'type', 'service', 'category', 'subject']}}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Only include objects which have includeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Exclude objects which have excludeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. '}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers. ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'caseID': {'type': 'list', 'position': 0, 'description': 'Restrict search to specific cases (by ID). ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Restrict search to specific customers (by ID or shortname). ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'type': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries of one of these types. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['securityIncident', 'operationalIncident', 'informational', 'change']}}, 'service': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries of one of these services (by service shortname or ID). ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'category': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries of one of these categories (by category shortname or ID). ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'status': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries of one of these statuses. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}}, 'initialStatus': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries where the initial status is one of these statuses. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}}, 'priority': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries with given priorties ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}}, 'initialPriority': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries where the initial priority is one of these priorties ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}}, 'assetID': {'type': 'list', 'position': 0, 'description': 'Restrict search to cases associated with specified assets (hosts, services or processes) ', 'uniqueItems': True, 'items': {'type': 'str'}}, 'tag': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries matching the given tag criteria. ', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['key'], 'properties': {'key': {'type': 'str', 'position': 0, 'description': 'Key of tag to search for '}, 'values': {'type': 'list', 'position': 0, 'description': 'Values of tag to search for (any of them). If no value is set, this matches any entry where this tag is set. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If true, invert this criteria. If no value is set, exclude any entry having this tag. '}}}}, 'workflow': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries matching the given workflow criteria. ', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['flow'], 'properties': {'flow': {'type': 'str', 'position': 0, 'description': 'Name of flow to search for ', 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, 'acknowledged': {'type': 'bool', 'position': 0, 'description': 'If true/false, limit to acknowledged/unacknowledged flows, respectively. If not set, filter on all flows of this type. '}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If false (default), limit to cases matching this flow criteria. If true, exclude cases matching this flow criteria. '}}}}, 'field': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries matching the given field criteria. ', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['field'], 'properties': {'field': {'type': 'str', 'position': 0, 'description': 'Name of field to search for '}, 'values': {'type': 'list', 'position': 0, 'description': 'Values of tag to search for (any of them). If no value is set, this matches any entry where this field is set. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If true, invert this criteria. If no value is set, exclude any entry having this field. '}}}}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for keywords. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps will be included in the search (default all). ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdTimestamp', 'lastUpdatedTimestamp', 'closedTimestamp', 'publishedTimestamp', 'all']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) ', 'enum': ['all', 'any']}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields). ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['subject', 'description', 'comments', 'customerReference', 'id', 'all']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines the MatchStrategy for keywords (default match all keywords). ', 'enum': ['all', 'any']}, 'user': {'type': 'list', 'position': 0, 'description': 'Restrict search to cases associated with these users or user groups (by ID or shortname). ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userID': {'type': 'list', 'position': 0, 'description': "This field is deprecated. Use field 'user' instead. ", 'uniqueItems': True, 'items': {'type': 'int'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which user fields will be searched (default match all user fields). ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['reporter', 'assignedUser', 'assignedTech', 'createdByUser', 'lastUpdatedByUser', 'closedByUser', 'publishedByUser', 'commentedByUser', 'watchedByUser', 'all']}}, 'userAssigned': {'type': 'bool', 'position': 0, 'description': 'If set, limit search to cases where assignedUser field is set/unset '}, 'techAssigned': {'type': 'bool', 'position': 0, 'description': 'If set, limit search to cases where assignedTech field is set/unset '}, 'includeWorkflows': {'type': 'bool', 'position': 0, 'description': 'If true, include list of workflows in result. Default is false (not present). '}, 'includeDescription': {'type': 'bool', 'position': 0, 'description': 'If false, omit description from response. Default is true (description is present). '}, 'accessMode': {'type': 'list', 'position': 0, 'description': 'If set, only match cases which is set to one of these access modes ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['roleBased', 'readRestricted', 'writeRestricted', 'explicit']}}, 'explicitAccess': {'type': 'list', 'position': 0, 'description': 'If set, only match cases which have explicit access grants matching the specified criteria ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'subject': {'type': 'list', 'position': 0, 'description': 'Match only access granted to specified user or group (id or shortname) ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'includeSubjectAnscendants': {'type': 'bool', 'position': 0, 'description': 'If true, also return cases where any of the specified subjects are granted access through parent groups. '}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Match access granted after this timestamp '}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Match access granted before this timestamp '}, 'level': {'type': 'list', 'position': 0, 'description': 'Match access granted for specified access levels ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['read', 'write', 'owner']}}}}}, 'includeTestData': {'type': 'bool', 'position': 0, 'description': 'If true, also include cases marked as TEST_DATA in search result. This option is restricted to users with permission viewCaseTestData. Default is false (excluded). '}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending). ', 'items': {'type': 'str', 'enum': ['reporter', 'createdByUser', 'createdTimestamp', 'lastUpdatedByUser', 'lastUpdatedTimestamp', 'assignedUser', 'assignedTech', 'closedByUser', 'closedTimestamp', 'publishedByUser', 'publishedTimestamp', 'customer', 'priority', 'status', 'type', 'service', 'category', 'subject']}}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Only include objects which have includeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Exclude objects which have excludeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'required': ['accessMode', 'closedByUser', 'closedTimestamp', 'createdByUser', 'createdTime', 'createdTimestamp', 'currentUserAccess', 'customer', 'description', 'descriptionTimestamp', 'initialPriority', 'initialStatus', 'lastUpdatedByUser', 'lastUpdatedTime', 'lastUpdatedTimestamp', 'priority', 'publishedByUser', 'publishedTimestamp', 'reporter', 'service', 'status', 'subject', 'type'], 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'service': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'category': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'type': 'str', 'initialStatus': {'type': 'str', 'position': 0, 'description': 'The initial status this case was assigned on create. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'status': {'type': 'str', 'position': 0, 'description': 'The current status of this case. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'initialPriority': {'type': 'str', 'position': 0, 'description': 'The initial priority this case was assigned on create. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'priority': {'type': 'str', 'position': 0, 'description': 'The current priority of this case. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'subject': {'type': 'str', 'position': 0, 'description': 'Subject of this case. '}, 'description': {'type': 'str', 'position': 0, 'description': 'Textual description of this case. Contains sanitized HTML. '}, 'customerReference': {'type': 'str', 'position': 0, 'description': 'If set, this contains a customer reference of this case. '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'Access mode of this case. ', 'enum': ['roleBased', 'readRestricted', 'writeRestricted', 'explicit']}, 'reporter': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedTech': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Creation timestamp of this case (in millis since epoch). '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Last update timestamp of this case (in millis since epoch). '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'closedTimestamp': {'type': 'int', 'position': 0, 'description': 'The most recent closing timestamp of this case (in millis since epoch), or 0 if not closed. '}, 'closedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp this case was published (in millis since epoch), or 0 if not published. '}, 'descriptionTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in millis since epoch). '}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}, 'currentUserAccess': {'type': 'dict', 'properties': {'level': {'type': 'str', 'position': 0, 'description': 'The current users access level on this case. ', 'readOnly': True, 'enum': ['read', 'write', 'owner']}, 'role': {'type': 'str', 'position': 0, 'description': 'The current users access role on this case. ', 'readOnly': True, 'enum': ['user', 'tech', 'admin']}}}, 'workflows': {'type': 'list', 'position': 0, 'description': 'If requested by client, workflows contains a summary of active workflows on this case. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'workflow': {'type': 'str', 'position': 0, 'description': 'The name of the workflow ', 'readOnly': True, 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, 'state': {'type': 'str', 'position': 0, 'description': 'The state of the workflow ', 'readOnly': True, 'enum': ['requested', 'acknowledged']}}}}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'The email address which this case originated from. Only present if flag MAIL_UPDATE is set. '}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Creation time of this case (in ISO-8601 time format) '}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Last updated time of this case (in ISO-8601 time format). '}, 'closedTime': {'type': 'str', 'position': 0, 'description': 'Close time of this case (in ISO-8601 time format), or null if not closed. '}, 'descriptionTime': {'type': 'str', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in ISO-8601 time format). '}, 'publishedTime': {'type': 'str', 'position': 0, 'description': 'Publish time of this case (in ISO-8601 time format), or null if not published. '}, 'options': ['securityIncident', 'operationalIncident', 'informational', 'change']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
change_access_settings = {'tags': ['cases/v2/case'], 'summary': 'Change general access settings (PUBLIC)', 'description': '', 'operationId': 'changeAccessSettings', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'in': 'body', 'name': 'body', 'description': 'Access settings request', 'required': False, 'schema': {'type': 'object', 'required': ['accessMode'], 'properties': {'accessMode': {'type': 'str', 'position': 0, 'description': 'If set, this will alter the access mode of the case. ', 'enum': ['roleBased', 'readRestricted', 'writeRestricted', 'explicit']}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['accessMode', 'closedByUser', 'closedTimestamp', 'createdByUser', 'createdTime', 'createdTimestamp', 'currentUserAccess', 'customer', 'description', 'descriptionTimestamp', 'initialPriority', 'initialStatus', 'lastUpdatedByUser', 'lastUpdatedTime', 'lastUpdatedTimestamp', 'priority', 'publishedByUser', 'publishedTimestamp', 'reporter', 'service', 'status', 'subject', 'type'], 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'service': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'category': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'type': 'str', 'initialStatus': {'type': 'str', 'position': 0, 'description': 'The initial status this case was assigned on create. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'status': {'type': 'str', 'position': 0, 'description': 'The current status of this case. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'initialPriority': {'type': 'str', 'position': 0, 'description': 'The initial priority this case was assigned on create. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'priority': {'type': 'str', 'position': 0, 'description': 'The current priority of this case. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'subject': {'type': 'str', 'position': 0, 'description': 'Subject of this case. '}, 'description': {'type': 'str', 'position': 0, 'description': 'Textual description of this case. Contains sanitized HTML. '}, 'customerReference': {'type': 'str', 'position': 0, 'description': 'If set, this contains a customer reference of this case. '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'Access mode of this case. ', 'enum': ['roleBased', 'readRestricted', 'writeRestricted', 'explicit']}, 'reporter': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedTech': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Creation timestamp of this case (in millis since epoch). '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Last update timestamp of this case (in millis since epoch). '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'closedTimestamp': {'type': 'int', 'position': 0, 'description': 'The most recent closing timestamp of this case (in millis since epoch), or 0 if not closed. '}, 'closedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp this case was published (in millis since epoch), or 0 if not published. '}, 'descriptionTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in millis since epoch). '}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}, 'currentUserAccess': {'type': 'dict', 'properties': {'level': {'type': 'str', 'position': 0, 'description': 'The current users access level on this case. ', 'readOnly': True, 'enum': ['read', 'write', 'owner']}, 'role': {'type': 'str', 'position': 0, 'description': 'The current users access role on this case. ', 'readOnly': True, 'enum': ['user', 'tech', 'admin']}}}, 'workflows': {'type': 'list', 'position': 0, 'description': 'If requested by client, workflows contains a summary of active workflows on this case. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'workflow': {'type': 'str', 'position': 0, 'description': 'The name of the workflow ', 'readOnly': True, 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, 'state': {'type': 'str', 'position': 0, 'description': 'The state of the workflow ', 'readOnly': True, 'enum': ['requested', 'acknowledged']}}}}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'The email address which this case originated from. Only present if flag MAIL_UPDATE is set. '}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Creation time of this case (in ISO-8601 time format) '}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Last updated time of this case (in ISO-8601 time format). '}, 'closedTime': {'type': 'str', 'position': 0, 'description': 'Close time of this case (in ISO-8601 time format), or null if not closed. '}, 'descriptionTime': {'type': 'str', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in ISO-8601 time format). '}, 'publishedTime': {'type': 'str', 'position': 0, 'description': 'Publish time of this case (in ISO-8601 time format), or null if not published. '}, 'options': ['securityIncident', 'operationalIncident', 'informational', 'change']}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
clear_field = {'tags': ['cases/v2/case'], 'summary': 'Clear specific field for a case, by either field ID or field name. For multivalue fields, the field may contain multiple values. (DEV)', 'description': '', 'operationId': 'clearField', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'ID of the case to clear fields for', 'required': True, 'type': 'int', 'minimum': 0}, {'name': 'field', 'in': 'path', 'description': 'ID or fieldName of the field to clear', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'caseID': {'type': 'int'}, 'descriptor': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this field. May be overridden by displayName in field policies. ', 'readOnly': True}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'readOnly': True, 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE']}}, 'valueType': {'type': 'str', 'position': 0, 'description': 'The value type of this field. Field values will be validated to ensure that the type is valid. If the field is a multivalue field, each value must be of the correct type. ', 'readOnly': True, 'enum': ['integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType']}}}, 'displayName': {'type': 'str', 'position': 0, 'description': 'Display name of this field (as set in the field policy) '}, 'value': {'type': 'dict', 'properties': {'key': {'type': 'dict', 'position': 0, 'description': 'Value key. May be a string, number or boolean value. '}, 'label': {'type': 'str', 'position': 0, 'description': 'Value label. String representation of the value. If not a mapped value, this is a string version of the key. '}, 'info': {'type': 'dict', 'position': 0, 'description': 'Info object. This is an optional complex object depending on the value type of the field. '}}}, 'values': {'type': 'list', 'position': 0, 'description': 'Current field values for multivalue fields. ', 'items': {'type': 'dict', 'properties': {'key': {'type': 'dict', 'position': 0, 'description': 'Value key. May be a string, number or boolean value. '}, 'label': {'type': 'str', 'position': 0, 'description': 'Value label. String representation of the value. If not a mapped value, this is a string version of the key. '}, 'info': {'type': 'dict', 'position': 0, 'description': 'Info object. This is an optional complex object depending on the value type of the field. '}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
close_case = {'tags': ['cases/v2/case'], 'summary': 'Close an open case (PUBLIC)', 'description': '', 'operationId': 'closeCase', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'in': 'body', 'name': 'body', 'description': 'Close request', 'required': False, 'schema': {'type': 'object', 'properties': {'comment': {'type': 'str', 'position': 0, 'description': 'Closing comment to add to case. May use HTML, will be sanitized. '}, 'notification': {'type': 'dict', 'properties': {'extraRecipients': {'type': 'list', 'position': 0, 'description': 'Additional recipients (email addresses or phone numbers) to be notified of this operation.  ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'skipEmail': {'type': 'bool', 'position': 0, 'description': 'If true, skip default email notification. ExtraRecipients will still be notified. Default is false. '}, 'skipSMS': {'type': 'bool', 'position': 0, 'description': 'If true, skip default sms notification. Default is false. '}, 'includeAttachments': {'type': 'bool', 'position': 0, 'description': 'If true, attachments are requested included in email notifications. Configuration may still override this for some/all destinations. Default is false. '}}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['accessMode', 'closedByUser', 'closedTimestamp', 'createdByUser', 'createdTime', 'createdTimestamp', 'currentUserAccess', 'customer', 'description', 'descriptionTimestamp', 'initialPriority', 'initialStatus', 'lastUpdatedByUser', 'lastUpdatedTime', 'lastUpdatedTimestamp', 'priority', 'publishedByUser', 'publishedTimestamp', 'reporter', 'service', 'status', 'subject', 'type'], 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'service': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'category': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'type': 'str', 'initialStatus': {'type': 'str', 'position': 0, 'description': 'The initial status this case was assigned on create. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'status': {'type': 'str', 'position': 0, 'description': 'The current status of this case. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'initialPriority': {'type': 'str', 'position': 0, 'description': 'The initial priority this case was assigned on create. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'priority': {'type': 'str', 'position': 0, 'description': 'The current priority of this case. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'subject': {'type': 'str', 'position': 0, 'description': 'Subject of this case. '}, 'description': {'type': 'str', 'position': 0, 'description': 'Textual description of this case. Contains sanitized HTML. '}, 'customerReference': {'type': 'str', 'position': 0, 'description': 'If set, this contains a customer reference of this case. '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'Access mode of this case. ', 'enum': ['roleBased', 'readRestricted', 'writeRestricted', 'explicit']}, 'reporter': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedTech': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Creation timestamp of this case (in millis since epoch). '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Last update timestamp of this case (in millis since epoch). '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'closedTimestamp': {'type': 'int', 'position': 0, 'description': 'The most recent closing timestamp of this case (in millis since epoch), or 0 if not closed. '}, 'closedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp this case was published (in millis since epoch), or 0 if not published. '}, 'descriptionTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in millis since epoch). '}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}, 'currentUserAccess': {'type': 'dict', 'properties': {'level': {'type': 'str', 'position': 0, 'description': 'The current users access level on this case. ', 'readOnly': True, 'enum': ['read', 'write', 'owner']}, 'role': {'type': 'str', 'position': 0, 'description': 'The current users access role on this case. ', 'readOnly': True, 'enum': ['user', 'tech', 'admin']}}}, 'workflows': {'type': 'list', 'position': 0, 'description': 'If requested by client, workflows contains a summary of active workflows on this case. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'workflow': {'type': 'str', 'position': 0, 'description': 'The name of the workflow ', 'readOnly': True, 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, 'state': {'type': 'str', 'position': 0, 'description': 'The state of the workflow ', 'readOnly': True, 'enum': ['requested', 'acknowledged']}}}}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'The email address which this case originated from. Only present if flag MAIL_UPDATE is set. '}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Creation time of this case (in ISO-8601 time format) '}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Last updated time of this case (in ISO-8601 time format). '}, 'closedTime': {'type': 'str', 'position': 0, 'description': 'Close time of this case (in ISO-8601 time format), or null if not closed. '}, 'descriptionTime': {'type': 'str', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in ISO-8601 time format). '}, 'publishedTime': {'type': 'str', 'position': 0, 'description': 'Publish time of this case (in ISO-8601 time format), or null if not published. '}, 'options': ['securityIncident', 'operationalIncident', 'informational', 'change']}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
complete_fragmented_upload = {'tags': ['cases/v2/case'], 'summary': 'Complete fragmented upload of an attachment (DEV)', 'description': '', 'operationId': 'completeFragmentedUpload', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'attachmentID', 'in': 'path', 'description': 'Attachment ID', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Complete request', 'required': False, 'schema': {'type': 'object', 'required': ['sha256'], 'properties': {'attachmentID': {'type': 'str'}, 'sha256': {'type': 'str', 'position': 0, 'description': 'The sha256 of the entire document. '}, 'notification': {'type': 'dict', 'properties': {'extraRecipients': {'type': 'list', 'position': 0, 'description': 'Additional recipients (email addresses or phone numbers) to be notified of this operation.  ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'skipEmail': {'type': 'bool', 'position': 0, 'description': 'If true, skip default email notification. ExtraRecipients will still be notified. Default is false. '}, 'skipSMS': {'type': 'bool', 'position': 0, 'description': 'If true, skip default sms notification. Default is false. '}, 'includeAttachments': {'type': 'bool', 'position': 0, 'description': 'If true, attachments are requested included in email notifications. Configuration may still override this for some/all destinations. Default is false. '}}}}}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'name': {'type': 'str', 'position': 0, 'description': 'Attachment file name '}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'Attachment mimetype '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MERGED', 'ZIP_ENCRYPTED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_TECH', 'MAIL_UPDATE', 'INCOMPLETE']}}, 'size': {'type': 'int', 'position': 0, 'description': 'Attachment file size (in bytes) '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'Attachment checksum '}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'Attachment origin email address (only present if attachment is marked as a mail update) '}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
create_case = {'tags': ['cases/v2/case'], 'summary': 'Create a new case defined by CaseCreateRequest (PUBLIC)', 'description': '', 'operationId': 'createCase', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Create request', 'required': False, 'schema': {'type': 'object', 'required': ['accessMode', 'description', 'priority', 'service', 'subject', 'type'], 'properties': {'customerID': {'type': 'int', 'position': 0, 'description': 'DEPRECATED. Use customer instead '}, 'customer': {'type': 'str', 'position': 0, 'description': 'ID or shortname of customer to create case for. Defaults to current users customer '}, 'service': {'type': 'str', 'position': 0, 'description': 'ID of service to create case for '}, 'category': {'type': 'str', 'position': 0, 'description': 'If set, assign given category to new case (by category shortname). '}, 'type': {'type': 'str', 'position': 0, 'description': 'Type of case to create ', 'enum': ['securityIncident', 'operationalIncident', 'informational', 'change']}, 'status': {'type': 'str', 'position': 0, 'description': 'Status of case to create. If not set, system will select automatically. Creating a new case with status closed is not permitted. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose']}, 'publish': {'type': 'bool', 'position': 0, 'description': 'Whether to publish new case. Creating an unpublished case requires special permission. (default true)', 'default': True}, 'defaultWatchers': {'type': 'bool', 'position': 0, 'description': 'Whether to enable default watchers for this case. If set to false, default watchers will not be enabled, and will not be notified upon creation of this case. (default true)', 'default': True}, 'watchers': {'type': 'list', 'position': 0, 'description': 'Explicit watchers to add to this case. ', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['type'], 'properties': {'type': 'str', 'userOrGroup': {'type': 'str', 'position': 0, 'description': 'User or group to add watcher for. If not specified, watcher will not be bound to user, only destination is used. '}, 'subjectID': {'type': 'int', 'position': 0, 'description': "This field is deprecated. Use field 'userOrGroup' instead. "}, 'destination': {'type': 'str', 'position': 0, 'description': 'Contact information to add as watcher (email address or phone number). If subject is specified, this is ignored. '}, 'verbose': {'type': 'bool', 'position': 0, 'description': 'If set, explicitly set verbosity for watcher (will override default settings on subject) '}, 'options': ['sms', 'email']}}}, 'fields': {'type': 'list', 'position': 0, 'description': 'Fields to set on case creation. Fields in the policy for requested service and customer specifies fields available. If any of the fields in the policy are required on create, and do not have a default value,those fields must be set in the case create request, or the request will fail. ', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['field'], 'properties': {'field': {'type': 'str', 'position': 0, 'description': 'UUID or field name for the field to set. '}, 'value': {'type': 'str', 'position': 0, 'description': 'Value to set on field. Multivalue fields will reject requests using this parameter. '}, 'values': {'type': 'list', 'position': 0, 'description': 'Value to set on a multivalue field. Singlevalue fields will reject requests using this parameter. ', 'uniqueItems': True, 'items': {'type': 'string'}}}}}, 'tags': {'type': 'list', 'position': 0, 'description': 'Tags to add on case creation. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'key': {'type': 'str', 'position': 0, 'description': 'Tag key  => [a-zA-Z0-9_\\-\\.]*', 'readOnly': True}, 'value': {'type': 'str', 'position': 0, 'description': 'Tag value  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*', 'readOnly': True}}}}, 'subject': {'type': 'str', 'position': 0, 'description': 'Subject of case to create.  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'description': {'type': 'str', 'position': 0, 'description': 'Case description. May use HTML, which will be sanitized. '}, 'customerReference': {'type': 'str', 'position': 0, 'description': 'Customer reference for case.  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'priority': {'type': 'str', 'position': 0, 'description': 'Priority of case to create. (default medium)', 'enum': ['low', 'medium', 'high', 'critical']}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'Access mode for new case. (default roleBased)', 'enum': ['roleBased', 'readRestricted', 'writeRestricted', 'explicit']}, 'aclMembers': {'type': 'list', 'position': 0, 'description': 'Explicit ACL members to add to case. ', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['level'], 'properties': {'userOrGroup': {'type': 'str', 'position': 0, 'description': 'ID or shortname of user or group to grant access to. Shortname will be resolved in current users domain. '}, 'subjectID': {'type': 'int', 'position': 0, 'description': "This field is deprecated. Use field 'userOrGroup' instead. "}, 'level': {'type': 'str', 'position': 0, 'description': 'Access level to grant. (default read)', 'enum': ['read', 'write', 'owner']}}}}, 'notification': {'type': 'dict', 'properties': {'extraRecipients': {'type': 'list', 'position': 0, 'description': 'Additional recipients (email addresses or phone numbers) to be notified of this operation.  ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'skipEmail': {'type': 'bool', 'position': 0, 'description': 'If true, skip default email notification. ExtraRecipients will still be notified. Default is false. '}, 'skipSMS': {'type': 'bool', 'position': 0, 'description': 'If true, skip default sms notification. Default is false. '}, 'includeAttachments': {'type': 'bool', 'position': 0, 'description': 'If true, attachments are requested included in email notifications. Configuration may still override this for some/all destinations. Default is false. '}}}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'If case is created from an email, specify origin email address here  => format:email'}, 'triggers': {'type': 'dict', 'properties': {'severityAlert': {'type': 'bool', 'position': 0, 'description': 'If true, enable trigger to check for severity alert workflow '}}}, 'assignedUser': {'type': 'str', 'position': 0, 'description': 'If set, assign given user to case (by ID or shortname). Shortname will be resolved in the current users domain. '}, 'assignedTech': {'type': 'str', 'position': 0, 'description': 'If set, assign given technical user (solution engineer) to case (by ID or shortname). Shortname will be resolved in the current users domain. '}, 'testData': {'type': 'bool', 'position': 0, 'description': 'If true, this case will be marked as TEST_DATA. TEST_DATA cases are excluded from search results by default. '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['accessMode', 'closedByUser', 'closedTimestamp', 'createdByUser', 'createdTime', 'createdTimestamp', 'currentUserAccess', 'customer', 'description', 'descriptionTimestamp', 'initialPriority', 'initialStatus', 'lastUpdatedByUser', 'lastUpdatedTime', 'lastUpdatedTimestamp', 'priority', 'publishedByUser', 'publishedTimestamp', 'reporter', 'service', 'status', 'subject', 'type'], 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'service': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'category': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'type': 'str', 'initialStatus': {'type': 'str', 'position': 0, 'description': 'The initial status this case was assigned on create. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'status': {'type': 'str', 'position': 0, 'description': 'The current status of this case. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'initialPriority': {'type': 'str', 'position': 0, 'description': 'The initial priority this case was assigned on create. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'priority': {'type': 'str', 'position': 0, 'description': 'The current priority of this case. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'subject': {'type': 'str', 'position': 0, 'description': 'Subject of this case. '}, 'description': {'type': 'str', 'position': 0, 'description': 'Textual description of this case. Contains sanitized HTML. '}, 'customerReference': {'type': 'str', 'position': 0, 'description': 'If set, this contains a customer reference of this case. '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'Access mode of this case. ', 'enum': ['roleBased', 'readRestricted', 'writeRestricted', 'explicit']}, 'reporter': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedTech': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Creation timestamp of this case (in millis since epoch). '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Last update timestamp of this case (in millis since epoch). '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'closedTimestamp': {'type': 'int', 'position': 0, 'description': 'The most recent closing timestamp of this case (in millis since epoch), or 0 if not closed. '}, 'closedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp this case was published (in millis since epoch), or 0 if not published. '}, 'descriptionTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in millis since epoch). '}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}, 'currentUserAccess': {'type': 'dict', 'properties': {'level': {'type': 'str', 'position': 0, 'description': 'The current users access level on this case. ', 'readOnly': True, 'enum': ['read', 'write', 'owner']}, 'role': {'type': 'str', 'position': 0, 'description': 'The current users access role on this case. ', 'readOnly': True, 'enum': ['user', 'tech', 'admin']}}}, 'workflows': {'type': 'list', 'position': 0, 'description': 'If requested by client, workflows contains a summary of active workflows on this case. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'workflow': {'type': 'str', 'position': 0, 'description': 'The name of the workflow ', 'readOnly': True, 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, 'state': {'type': 'str', 'position': 0, 'description': 'The state of the workflow ', 'readOnly': True, 'enum': ['requested', 'acknowledged']}}}}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'The email address which this case originated from. Only present if flag MAIL_UPDATE is set. '}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Creation time of this case (in ISO-8601 time format) '}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Last updated time of this case (in ISO-8601 time format). '}, 'closedTime': {'type': 'str', 'position': 0, 'description': 'Close time of this case (in ISO-8601 time format), or null if not closed. '}, 'descriptionTime': {'type': 'str', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in ISO-8601 time format). '}, 'publishedTime': {'type': 'str', 'position': 0, 'description': 'Publish time of this case (in ISO-8601 time format), or null if not published. '}, 'options': ['securityIncident', 'operationalIncident', 'informational', 'change']}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
current_user_watcher_status = {'tags': ['cases/v2/case'], 'summary': 'Query and set watcher status for the current user on this case (PUBLIC)', 'description': '', 'operationId': 'currentUserWatcherStatus', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'in': 'body', 'name': 'body', 'description': 'Watcher update request', 'required': False, 'schema': {'type': 'object', 'properties': {'email': {'type': 'bool', 'position': 0, 'description': 'If true, enable email notification for current user. If false, disable email. Default is no change. '}, 'sms': {'type': 'bool', 'position': 0, 'description': 'If true, enable SMS notification for current user. If false, disable SMS. Default is no change. '}, 'verbose': {'type': 'bool', 'position': 0, 'description': 'If set, explicitly set verbosity for watcher for enabled contact methods (will override default settings on current user) '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'contactID': {'type': 'int'}, 'role': {'type': 'str', 'enum': ['contact', 'watcher']}, 'type': 'str', 'destination': {'type': 'string'}, 'minimumPriority': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'NEGATIVE_ENTRY', 'VERBOSE', 'DISABLED', 'MERGED']}}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}, 'options': ['sms', 'email']}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
delete_attachment = {'tags': ['cases/v2/case'], 'summary': 'Delete specified attachment from case (PUBLIC)', 'description': '', 'operationId': 'deleteAttachment', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'attachmentID', 'in': 'path', 'description': 'Attachment ID', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'name': {'type': 'str', 'position': 0, 'description': 'Attachment file name '}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'Attachment mimetype '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MERGED', 'ZIP_ENCRYPTED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_TECH', 'MAIL_UPDATE', 'INCOMPLETE']}}, 'size': {'type': 'int', 'position': 0, 'description': 'Attachment file size (in bytes) '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'Attachment checksum '}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'Attachment origin email address (only present if attachment is marked as a mail update) '}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
delete_case = {'tags': ['cases/v2/case'], 'summary': 'Mark existing case as deleted (PUBLIC)', 'description': '', 'operationId': 'deleteCase', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['accessMode', 'closedByUser', 'closedTimestamp', 'createdByUser', 'createdTime', 'createdTimestamp', 'currentUserAccess', 'customer', 'description', 'descriptionTimestamp', 'initialPriority', 'initialStatus', 'lastUpdatedByUser', 'lastUpdatedTime', 'lastUpdatedTimestamp', 'priority', 'publishedByUser', 'publishedTimestamp', 'reporter', 'service', 'status', 'subject', 'type'], 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'service': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'category': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'type': 'str', 'initialStatus': {'type': 'str', 'position': 0, 'description': 'The initial status this case was assigned on create. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'status': {'type': 'str', 'position': 0, 'description': 'The current status of this case. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'initialPriority': {'type': 'str', 'position': 0, 'description': 'The initial priority this case was assigned on create. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'priority': {'type': 'str', 'position': 0, 'description': 'The current priority of this case. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'subject': {'type': 'str', 'position': 0, 'description': 'Subject of this case. '}, 'description': {'type': 'str', 'position': 0, 'description': 'Textual description of this case. Contains sanitized HTML. '}, 'customerReference': {'type': 'str', 'position': 0, 'description': 'If set, this contains a customer reference of this case. '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'Access mode of this case. ', 'enum': ['roleBased', 'readRestricted', 'writeRestricted', 'explicit']}, 'reporter': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedTech': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Creation timestamp of this case (in millis since epoch). '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Last update timestamp of this case (in millis since epoch). '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'closedTimestamp': {'type': 'int', 'position': 0, 'description': 'The most recent closing timestamp of this case (in millis since epoch), or 0 if not closed. '}, 'closedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp this case was published (in millis since epoch), or 0 if not published. '}, 'descriptionTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in millis since epoch). '}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}, 'currentUserAccess': {'type': 'dict', 'properties': {'level': {'type': 'str', 'position': 0, 'description': 'The current users access level on this case. ', 'readOnly': True, 'enum': ['read', 'write', 'owner']}, 'role': {'type': 'str', 'position': 0, 'description': 'The current users access role on this case. ', 'readOnly': True, 'enum': ['user', 'tech', 'admin']}}}, 'workflows': {'type': 'list', 'position': 0, 'description': 'If requested by client, workflows contains a summary of active workflows on this case. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'workflow': {'type': 'str', 'position': 0, 'description': 'The name of the workflow ', 'readOnly': True, 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, 'state': {'type': 'str', 'position': 0, 'description': 'The state of the workflow ', 'readOnly': True, 'enum': ['requested', 'acknowledged']}}}}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'The email address which this case originated from. Only present if flag MAIL_UPDATE is set. '}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Creation time of this case (in ISO-8601 time format) '}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Last updated time of this case (in ISO-8601 time format). '}, 'closedTime': {'type': 'str', 'position': 0, 'description': 'Close time of this case (in ISO-8601 time format), or null if not closed. '}, 'descriptionTime': {'type': 'str', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in ISO-8601 time format). '}, 'publishedTime': {'type': 'str', 'position': 0, 'description': 'Publish time of this case (in ISO-8601 time format), or null if not published. '}, 'options': ['securityIncident', 'operationalIncident', 'informational', 'change']}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
delete_case_link = {'tags': ['cases/v2/case'], 'summary': 'Remove existing case link (PUBLIC)', 'description': '', 'operationId': 'deleteCaseLink', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'linkID', 'in': 'path', 'description': 'Link ID', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'linkedCase': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customerID': {'type': 'int'}, 'subject': {'type': 'string'}, 'service': {'type': 'string'}, 'status': {'type': 'str', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'priority': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MERGED']}}, 'type': 'str', 'direction': {'type': 'str', 'position': 0, 'description': 'The direction of this link (incoming if this is a link TO the requested case, outgoing if this is a link FROM the requested case) ', 'enum': ['incoming', 'outgoing']}, 'parentCase': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customerID': {'type': 'int'}, 'subject': {'type': 'string'}, 'service': {'type': 'string'}, 'status': {'type': 'str', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'priority': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}}}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}, 'options': ['merged', 'subcase', 'related', 'duplicate', 'dependency']}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
delete_comment = {'tags': ['cases/v2/case'], 'summary': 'Mark existing comment as deleted (PUBLIC)', 'description': '', 'operationId': 'deleteComment', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'commentID', 'in': 'path', 'description': 'Comment ID', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'comment': {'type': 'str', 'position': 0, 'description': 'Comment text. May be HTML. Sanitized on input. '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'REPLACED', 'UPDATED', 'INTERNAL', 'MERGED', 'MAIL_UPDATE', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_TECH']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Last update timestamp for this comment. '}, 'status': {'type': 'str', 'position': 0, 'description': 'The status of the case when this comment was added. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'priority': {'type': 'str', 'position': 0, 'description': 'The priority of the case when this comment was added. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'Comment origin email address. Only present if comment is marked as a mail update. '}, 'associatedAttachments': {'type': 'list', 'position': 0, 'description': 'Attachments which this comment references. Only set if associated attachments are set. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'readOnly': True}}}}, 'references': {'type': 'list', 'position': 0, 'description': 'References to other comments. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'type': 'str', 'commentID': {'type': 'str'}, 'options': ['original', 'replacedBy', 'replacing', 'replyTo', 'repliedBy']}}}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Last update time for this comment (in ISO-8601 time format). '}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
download_attachment = {'tags': ['cases/v2/case'], 'summary': 'Download specific attachment contents. (PUBLIC)', 'description': 'Returns data stream with the attachments mimetype, and attachment disposition with filename.\nUse /cases/v1/case/{caseID}/attachments/{attachmentID} to fetch metadata about this attachment.', 'operationId': 'downloadAttachment', 'produces': ['*/*'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'attachmentID', 'in': 'path', 'description': 'Attachment ID', 'required': True, 'type': 'str'}], 'responses': {'401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
edit_comment = {'tags': ['cases/v2/case'], 'summary': 'Edit existing comment (PUBLIC)', 'description': '', 'operationId': 'editComment', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'commentID', 'in': 'path', 'description': 'Comment ID', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Comment edit request', 'required': False, 'schema': {'type': 'object', 'required': ['comment'], 'properties': {'comment': {'type': 'str', 'position': 0, 'description': 'Updated comment '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'comment': {'type': 'str', 'position': 0, 'description': 'Comment text. May be HTML. Sanitized on input. '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'REPLACED', 'UPDATED', 'INTERNAL', 'MERGED', 'MAIL_UPDATE', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_TECH']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Last update timestamp for this comment. '}, 'status': {'type': 'str', 'position': 0, 'description': 'The status of the case when this comment was added. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'priority': {'type': 'str', 'position': 0, 'description': 'The priority of the case when this comment was added. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'Comment origin email address. Only present if comment is marked as a mail update. '}, 'associatedAttachments': {'type': 'list', 'position': 0, 'description': 'Attachments which this comment references. Only set if associated attachments are set. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'readOnly': True}}}}, 'references': {'type': 'list', 'position': 0, 'description': 'References to other comments. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'type': 'str', 'commentID': {'type': 'str'}, 'options': ['original', 'replacedBy', 'replacing', 'replyTo', 'repliedBy']}}}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Last update time for this comment (in ISO-8601 time format). '}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_attachment = {'tags': ['cases/v2/case'], 'summary': 'Fetch specific attachment metadata (PUBLIC)', 'description': 'Use /cases/v1/case/{caseID}/attachments/{attachmentID}/download to download attachment contents.', 'operationId': 'getAttachment', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'attachmentID', 'in': 'path', 'description': 'Attachment ID', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'name': {'type': 'str', 'position': 0, 'description': 'Attachment file name '}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'Attachment mimetype '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MERGED', 'ZIP_ENCRYPTED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_TECH', 'MAIL_UPDATE', 'INCOMPLETE']}}, 'size': {'type': 'int', 'position': 0, 'description': 'Attachment file size (in bytes) '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'Attachment checksum '}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'Attachment origin email address (only present if attachment is marked as a mail update) '}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_case_comment = {'tags': ['cases/v2/case'], 'summary': 'Fetch specific comment (PUBLIC)', 'description': '', 'operationId': 'getCaseComment', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'commentID', 'in': 'path', 'description': 'Comment ID', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'comment': {'type': 'str', 'position': 0, 'description': 'Comment text. May be HTML. Sanitized on input. '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'REPLACED', 'UPDATED', 'INTERNAL', 'MERGED', 'MAIL_UPDATE', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_TECH']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Last update timestamp for this comment. '}, 'status': {'type': 'str', 'position': 0, 'description': 'The status of the case when this comment was added. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'priority': {'type': 'str', 'position': 0, 'description': 'The priority of the case when this comment was added. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'Comment origin email address. Only present if comment is marked as a mail update. '}, 'associatedAttachments': {'type': 'list', 'position': 0, 'description': 'Attachments which this comment references. Only set if associated attachments are set. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'readOnly': True}}}}, 'references': {'type': 'list', 'position': 0, 'description': 'References to other comments. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'type': 'str', 'commentID': {'type': 'str'}, 'options': ['original', 'replacedBy', 'replacing', 'replyTo', 'repliedBy']}}}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Last update time for this comment (in ISO-8601 time format). '}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_case_comment_notifications = {'tags': ['cases/v2/case'], 'summary': 'Fetch notifications recorded for specified comment (DEV)', 'description': '', 'operationId': 'getCaseCommentNotifications', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'commentID', 'in': 'path', 'description': 'Comment ID', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name of the notified person or entity '}, 'contact': {'type': 'str', 'position': 0, 'description': 'Contact information (email or phone number) '}, 'type': 'str', 'user': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'options': ['sms', 'email', 'verboseEmail', 'app', 'verboseApp']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_case_metadata_by_id = {'tags': ['cases/v2/case'], 'summary': 'Returns the basic case descriptor for the case identified by ID (PUBLIC)', 'description': '', 'operationId': 'getCaseMetadataByID', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'skipRedirect', 'in': 'query', 'description': 'If true, skip automatic redirect (for merged cases)', 'required': False, 'type': 'bool', 'default': False}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['accessMode', 'closedByUser', 'closedTimestamp', 'createdByUser', 'createdTime', 'createdTimestamp', 'currentUserAccess', 'customer', 'description', 'descriptionTimestamp', 'initialPriority', 'initialStatus', 'lastUpdatedByUser', 'lastUpdatedTime', 'lastUpdatedTimestamp', 'priority', 'publishedByUser', 'publishedTimestamp', 'reporter', 'service', 'status', 'subject', 'type'], 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'service': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'category': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'type': 'str', 'initialStatus': {'type': 'str', 'position': 0, 'description': 'The initial status this case was assigned on create. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'status': {'type': 'str', 'position': 0, 'description': 'The current status of this case. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'initialPriority': {'type': 'str', 'position': 0, 'description': 'The initial priority this case was assigned on create. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'priority': {'type': 'str', 'position': 0, 'description': 'The current priority of this case. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'subject': {'type': 'str', 'position': 0, 'description': 'Subject of this case. '}, 'description': {'type': 'str', 'position': 0, 'description': 'Textual description of this case. Contains sanitized HTML. '}, 'customerReference': {'type': 'str', 'position': 0, 'description': 'If set, this contains a customer reference of this case. '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'Access mode of this case. ', 'enum': ['roleBased', 'readRestricted', 'writeRestricted', 'explicit']}, 'reporter': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedTech': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Creation timestamp of this case (in millis since epoch). '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Last update timestamp of this case (in millis since epoch). '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'closedTimestamp': {'type': 'int', 'position': 0, 'description': 'The most recent closing timestamp of this case (in millis since epoch), or 0 if not closed. '}, 'closedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp this case was published (in millis since epoch), or 0 if not published. '}, 'descriptionTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in millis since epoch). '}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}, 'currentUserAccess': {'type': 'dict', 'properties': {'level': {'type': 'str', 'position': 0, 'description': 'The current users access level on this case. ', 'readOnly': True, 'enum': ['read', 'write', 'owner']}, 'role': {'type': 'str', 'position': 0, 'description': 'The current users access role on this case. ', 'readOnly': True, 'enum': ['user', 'tech', 'admin']}}}, 'workflows': {'type': 'list', 'position': 0, 'description': 'If requested by client, workflows contains a summary of active workflows on this case. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'workflow': {'type': 'str', 'position': 0, 'description': 'The name of the workflow ', 'readOnly': True, 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, 'state': {'type': 'str', 'position': 0, 'description': 'The state of the workflow ', 'readOnly': True, 'enum': ['requested', 'acknowledged']}}}}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'The email address which this case originated from. Only present if flag MAIL_UPDATE is set. '}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Creation time of this case (in ISO-8601 time format) '}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Last updated time of this case (in ISO-8601 time format). '}, 'closedTime': {'type': 'str', 'position': 0, 'description': 'Close time of this case (in ISO-8601 time format), or null if not closed. '}, 'descriptionTime': {'type': 'str', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in ISO-8601 time format). '}, 'publishedTime': {'type': 'str', 'position': 0, 'description': 'Publish time of this case (in ISO-8601 time format), or null if not published. '}, 'options': ['securityIncident', 'operationalIncident', 'informational', 'change']}}}}}, '301': {'description': 'Case has been merged/moved, will redirect to another case'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_case_service = {'tags': ['cases/v2/case'], 'summary': 'Returns the service descriptor for the case identified by ID (PUBLIC)', 'description': '', 'operationId': 'getCaseService', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Service shortname '}, 'name': {'type': 'str', 'position': 0, 'description': 'Service name '}, 'localizedName': {'type': 'str', 'position': 0, 'description': 'Localized name (current users language) '}, 'localizedNames': {'type': 'dict', 'position': 0, 'description': 'Localized names ', 'additionalProperties': {'type': 'string'}}, 'description': {'type': 'str', 'position': 0, 'description': 'Service description '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'HANDLED_BY_SOC', 'MONITORED_BY_SOC_OUTSIDE_OFFICEHOURS', 'NOTIFICATION_ON_CREATE', 'NOTIFICATION_ON_UPDATE', 'NOTIFICATION_ON_CLOSE', 'NOTIFICATION_FORMAT_FULL', 'DEPRECATED', 'ASSIGN_DEFAULT_TECH', 'ASSIGN_DEFAULT_USER', 'EVENT_ENABLED']}}, 'logoURL': {'type': 'str', 'position': 0, 'description': 'The logo data-URL used for this service '}, 'notificationEmail': {'type': 'str', 'position': 0, 'description': 'The notification email configured for this service '}, 'readFunction': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name '}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description '}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level ', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}, 'readDetailedFunction': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name '}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description '}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level ', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}, 'writeFunction': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name '}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description '}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level ', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}, 'techFunction': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name '}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description '}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level ', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}, 'adminFunction': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name '}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description '}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level ', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}, 'defineFunction': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name '}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description '}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level ', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this service was created '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this service was last updated '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'fieldPolicy': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'position': 0, 'description': 'The policy name ', 'readOnly': True}}}, 'caseTypes': {'type': 'list', 'position': 0, 'description': 'The case types which are enabled for this service. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['securityIncident', 'operationalIncident', 'informational', 'change']}}, 'workflows': {'type': 'list', 'position': 0, 'description': 'The workflows which are enabled for this service ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Time when this service was created (in ISO-8601 time format) '}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Time when this service was last updated (in ISO-8601 time format) '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_case_transaction = {'tags': ['cases/v2/case'], 'summary': 'Returns a single case transaction transactions (DEV)', 'description': '', 'operationId': 'getCaseTransaction', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'transactionID', 'in': 'path', 'description': 'Transaction ID', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'timestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this transaction was executed '}, 'user': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'operation': {'type': 'str', 'position': 0, 'description': 'The operation invoked in this transaction ', 'enum': ['createCase', 'updateCase', 'deleteCase', 'moveCase', 'publishCase', 'closeCase', 'mergeCases', 'updateCaseAccessSettings', 'addCaseComment', 'editCaseComment', 'deleteCaseComment', 'addCaseAttachment', 'deleteCaseAttachment', 'addCaseLink', 'deleteCaseLink', 'addCaseWatcher', 'updateCaseWatcher', 'deleteCaseWatcher', 'currentUser', 'updateWatcherSettings', 'requestWorkflow', 'acknowledgeWorkflow', 'updateWorkflow', 'addCaseTag', 'removeCaseTag', 'grantCaseAccess', 'revokeCaseAccess', 'setCaseField', 'clearCaseField']}, 'notified': {'type': 'int', 'position': 0, 'description': 'The number of notifications recorded for this transaction '}, 'changes': {'type': 'list', 'position': 0, 'description': 'List of change events recorded for this transaction ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'transactionIndex': {'type': 'int', 'position': 0, 'description': 'Order of this change in the transaction (count from 0) '}, 'field': {'type': 'str', 'position': 0, 'description': 'The field affected by this change, or null if not bound to a specific field. ', 'enum': ['customerID', 'service', 'category', 'type', 'status', 'fieldAdded', 'fieldRemoved', 'priority', 'subject', 'description', 'setProperties', 'removeProperties', 'customerReference', 'accessMode', 'reporterID', 'assignedUserID', 'assignedTechID', 'setFlag', 'unsetFlag', 'addComment', 'addTag', 'addWatcher', 'addLink', 'updateWatcher', 'deleteWatcher', 'sentNotification', 'resetWorkflow', 'updateWorkflow', 'deleteWorkflow', 'enableVerbose', 'disableVerbose']}, 'value': {'type': 'str', 'position': 0, 'description': 'String format of the new value associated with this change, or null if not relevant. '}, 'object': {'type': 'object'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['TECH_EVENT', 'TECH_CONTENT', 'TECH_CONTENT_REDACTED', 'SKIP_NOTIFICATION']}}, 'objectType': {'type': 'str', 'position': 0, 'description': 'The type of the associated value. ', 'enum': ['access', 'attachment', 'caseVO', 'caseType', 'category', 'comment', 'customer', 'field', 'flag', 'link', 'notification', 'priority', 'service', 'status', 'string', 'tag', 'user', 'watcher', 'workflow']}}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['TECH_TX', 'SKIP_NOTIFICATION']}}, 'time': {'type': 'str', 'position': 0, 'description': 'The time of this transaction '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_field = {'tags': ['cases/v2/case'], 'summary': 'Fetch specific field for a case, by either field ID or field name. For multivalue fields, the field may contain multiple values. (DEV)', 'description': '', 'operationId': 'getField', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'ID of the case to fetch fields for', 'required': True, 'type': 'int', 'minimum': 0}, {'name': 'field', 'in': 'path', 'description': 'ID or fieldName of the field to fetch', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'caseID': {'type': 'int'}, 'descriptor': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this field. May be overridden by displayName in field policies. ', 'readOnly': True}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'readOnly': True, 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE']}}, 'valueType': {'type': 'str', 'position': 0, 'description': 'The value type of this field. Field values will be validated to ensure that the type is valid. If the field is a multivalue field, each value must be of the correct type. ', 'readOnly': True, 'enum': ['integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType']}}}, 'displayName': {'type': 'str', 'position': 0, 'description': 'Display name of this field (as set in the field policy) '}, 'value': {'type': 'dict', 'properties': {'key': {'type': 'dict', 'position': 0, 'description': 'Value key. May be a string, number or boolean value. '}, 'label': {'type': 'str', 'position': 0, 'description': 'Value label. String representation of the value. If not a mapped value, this is a string version of the key. '}, 'info': {'type': 'dict', 'position': 0, 'description': 'Info object. This is an optional complex object depending on the value type of the field. '}}}, 'values': {'type': 'list', 'position': 0, 'description': 'Current field values for multivalue fields. ', 'items': {'type': 'dict', 'properties': {'key': {'type': 'dict', 'position': 0, 'description': 'Value key. May be a string, number or boolean value. '}, 'label': {'type': 'str', 'position': 0, 'description': 'Value label. String representation of the value. If not a mapped value, this is a string version of the key. '}, 'info': {'type': 'dict', 'position': 0, 'description': 'Info object. This is an optional complex object depending on the value type of the field. '}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_field_policy_by_case = {'tags': ['cases/v2/field'], 'summary': 'Fetch field policy for a specific case (DEV)', 'description': 'Fetch the field policy that applies to the specified case. This endpoint is useful to fetch the field policy that applies to an existing case. The endpoint will allow user access to the field policy for a case for which the user has explicit access, regardless if the user is missing general access to this policy.', 'operationId': 'getFieldPolicyByCase', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'ID of case to fetch policy for', 'required': True, 'type': 'int', 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'name': {'type': 'str', 'position': 0, 'description': 'The policy name '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the creation of this policy. '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp for the last update of this policy. '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'bindings': {'type': 'list', 'position': 0, 'description': 'The fields bound to this policy. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'field': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this field. May be overridden by displayName in field policies. ', 'readOnly': True}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'readOnly': True, 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE']}}, 'valueType': {'type': 'str', 'position': 0, 'description': 'The value type of this field. Field values will be validated to ensure that the type is valid. If the field is a multivalue field, each value must be of the correct type. ', 'readOnly': True, 'enum': ['integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType']}}}, 'displayName': {'type': 'str', 'position': 0, 'description': 'The display name of the field. Default is the field name. '}, 'readRole': {'type': 'str', 'position': 0, 'description': 'The service role required to read this field. ', 'enum': ['user', 'tech', 'admin']}, 'writeRole': {'type': 'str', 'position': 0, 'description': 'The service role required to set/update this field. ', 'enum': ['user', 'tech', 'admin']}, 'requirementPolicy': {'type': 'str', 'position': 0, 'description': 'The requirement policy for this field in this field policy. ', 'enum': ['optional', 'requiredOnCreate', 'requiredOnClose']}}}}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Time when this policy was created (in ISO-8601 time format) '}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Time when this policy was last updated (in ISO-8601 time format) '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
grant_access = {'tags': ['cases/v2/case'], 'summary': 'Grant access to a case (PUBLIC)', 'description': '', 'operationId': 'grantAccess', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'in': 'body', 'name': 'body', 'description': 'Access grant request', 'required': False, 'schema': {'type': 'object', 'properties': {'userOrGroup': {'type': 'str', 'position': 0, 'description': 'ID or shortname of user or group to grant access to. Shortname will be resolved in current users domain. '}, 'subjectID': {'type': 'int', 'position': 0, 'description': "This field is deprecated. Use field 'userOrGroup' instead. "}, 'level': {'type': 'str', 'position': 0, 'description': 'Level to grant for subject. (default read)', 'enum': ['read', 'write', 'owner']}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'grantedSubject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'level': {'type': 'str', 'enum': ['read', 'write', 'owner']}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_case_a_c_l = {'tags': ['cases/v2/case'], 'summary': 'List ACL entries for an existing case (PUBLIC)', 'description': '', 'operationId': 'listCaseACL', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'grantedSubject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'level': {'type': 'str', 'enum': ['read', 'write', 'owner']}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_case_attachments = {'tags': ['cases/v2/case'], 'summary': 'List attachments for an existing case (PUBLIC)', 'description': '', 'operationId': 'listCaseAttachments', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'name': {'type': 'str', 'position': 0, 'description': 'Attachment file name '}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'Attachment mimetype '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MERGED', 'ZIP_ENCRYPTED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_TECH', 'MAIL_UPDATE', 'INCOMPLETE']}}, 'size': {'type': 'int', 'position': 0, 'description': 'Attachment file size (in bytes) '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'Attachment checksum '}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'Attachment origin email address (only present if attachment is marked as a mail update) '}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_case_comments = {'tags': ['cases/v2/case'], 'summary': 'List comments for an existing case (PUBLIC)', 'description': '', 'operationId': 'listCaseComments', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'beforeComment', 'in': 'query', 'description': 'Limit to comments before this comment ID (in sort order)', 'required': False, 'type': 'str'}, {'name': 'afterComment', 'in': 'query', 'description': 'Limit to comments after this comment ID (in sort order)', 'required': False, 'type': 'str'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'sortBy', 'in': 'query', 'description': 'Sort ordering. Default is addedTimestamp (ascending)', 'required': False, 'type': 'list', 'items': {'type': 'str', 'enum': ['addedTimestamp', '-addedTimestamp']}, 'collectionFormat': 'multi'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'comment': {'type': 'str', 'position': 0, 'description': 'Comment text. May be HTML. Sanitized on input. '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'REPLACED', 'UPDATED', 'INTERNAL', 'MERGED', 'MAIL_UPDATE', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_TECH']}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Last update timestamp for this comment. '}, 'status': {'type': 'str', 'position': 0, 'description': 'The status of the case when this comment was added. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'priority': {'type': 'str', 'position': 0, 'description': 'The priority of the case when this comment was added. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'Comment origin email address. Only present if comment is marked as a mail update. '}, 'associatedAttachments': {'type': 'list', 'position': 0, 'description': 'Attachments which this comment references. Only set if associated attachments are set. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'readOnly': True}}}}, 'references': {'type': 'list', 'position': 0, 'description': 'References to other comments. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'type': 'str', 'commentID': {'type': 'str'}, 'options': ['original', 'replacedBy', 'replacing', 'replyTo', 'repliedBy']}}}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Last update time for this comment (in ISO-8601 time format). '}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_case_history = {'tags': ['cases/v2/case'], 'summary': 'Returns the history of case transactions (DEV)', 'description': '', 'operationId': 'listCaseHistory', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'type', 'in': 'query', 'description': 'Transaction types to fetch', 'required': False, 'type': 'list', 'items': {'type': 'str', 'enum': ['actions', 'status', 'priority', 'description', 'category', 'assignments', 'comments', 'attachments', 'access', 'fields', 'links', 'workflow', 'watchers']}, 'collectionFormat': 'multi'}, {'name': 'operation', 'in': 'query', 'description': 'Include operations', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'field', 'in': 'query', 'description': 'Include fields', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'userID', 'in': 'query', 'description': 'Filter out transactions by specified users', 'required': False, 'type': 'list', 'items': {'type': 'int'}, 'collectionFormat': 'multi'}, {'name': 'transactionID', 'in': 'query', 'description': 'Filter out specific transactions', 'required': False, 'type': 'list', 'items': {'type': 'str'}, 'collectionFormat': 'multi'}, {'name': 'beforeTransaction', 'in': 'query', 'description': 'Limit to transactions before this transaction (in sort order)', 'required': False, 'type': 'str'}, {'name': 'afterTransaction', 'in': 'query', 'description': 'Limit to transactions after this transaction (in sort order)', 'required': False, 'type': 'str'}, {'name': 'startTimestamp', 'in': 'query', 'description': 'Limit to transactions after this timestamp', 'required': False, 'type': 'str'}, {'name': 'endTimestamp', 'in': 'query', 'description': 'Limit to transactions before this timestamp', 'required': False, 'type': 'str'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'sortBy', 'in': 'query', 'description': 'Sort ordering. Default is timestamp (ascending)', 'required': False, 'type': 'list', 'items': {'type': 'str', 'enum': ['timestamp', '-timestamp']}, 'collectionFormat': 'multi'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'timestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this transaction was executed '}, 'user': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'operation': {'type': 'str', 'position': 0, 'description': 'The operation invoked in this transaction ', 'enum': ['createCase', 'updateCase', 'deleteCase', 'moveCase', 'publishCase', 'closeCase', 'mergeCases', 'updateCaseAccessSettings', 'addCaseComment', 'editCaseComment', 'deleteCaseComment', 'addCaseAttachment', 'deleteCaseAttachment', 'addCaseLink', 'deleteCaseLink', 'addCaseWatcher', 'updateCaseWatcher', 'deleteCaseWatcher', 'currentUser', 'updateWatcherSettings', 'requestWorkflow', 'acknowledgeWorkflow', 'updateWorkflow', 'addCaseTag', 'removeCaseTag', 'grantCaseAccess', 'revokeCaseAccess', 'setCaseField', 'clearCaseField']}, 'notified': {'type': 'int', 'position': 0, 'description': 'The number of notifications recorded for this transaction '}, 'changes': {'type': 'list', 'position': 0, 'description': 'List of change events recorded for this transaction ', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'transactionIndex': {'type': 'int', 'position': 0, 'description': 'Order of this change in the transaction (count from 0) '}, 'field': {'type': 'str', 'position': 0, 'description': 'The field affected by this change, or null if not bound to a specific field. ', 'enum': ['customerID', 'service', 'category', 'type', 'status', 'fieldAdded', 'fieldRemoved', 'priority', 'subject', 'description', 'setProperties', 'removeProperties', 'customerReference', 'accessMode', 'reporterID', 'assignedUserID', 'assignedTechID', 'setFlag', 'unsetFlag', 'addComment', 'addTag', 'addWatcher', 'addLink', 'updateWatcher', 'deleteWatcher', 'sentNotification', 'resetWorkflow', 'updateWorkflow', 'deleteWorkflow', 'enableVerbose', 'disableVerbose']}, 'value': {'type': 'str', 'position': 0, 'description': 'String format of the new value associated with this change, or null if not relevant. '}, 'object': {'type': 'object'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['TECH_EVENT', 'TECH_CONTENT', 'TECH_CONTENT_REDACTED', 'SKIP_NOTIFICATION']}}, 'objectType': {'type': 'str', 'position': 0, 'description': 'The type of the associated value. ', 'enum': ['access', 'attachment', 'caseVO', 'caseType', 'category', 'comment', 'customer', 'field', 'flag', 'link', 'notification', 'priority', 'service', 'status', 'string', 'tag', 'user', 'watcher', 'workflow']}}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['TECH_TX', 'SKIP_NOTIFICATION']}}, 'time': {'type': 'str', 'position': 0, 'description': 'The time of this transaction '}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_case_links = {'tags': ['cases/v2/case'], 'summary': 'List links for an existing case (PUBLIC)', 'description': '', 'operationId': 'listCaseLinks', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'direction', 'in': 'query', 'description': 'Specify direction of links to fetch (default all)', 'required': False, 'type': 'str', 'enum': ['incoming', 'outgoing']}, {'name': 'type', 'in': 'query', 'description': 'Specify link types to fetch (default all)', 'required': False, 'type': 'list', 'items': {'type': 'str', 'enum': ['subcase', 'related', 'dependency', 'duplicate']}, 'collectionFormat': 'multi'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'linkedCase': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customerID': {'type': 'int'}, 'subject': {'type': 'string'}, 'service': {'type': 'string'}, 'status': {'type': 'str', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'priority': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MERGED']}}, 'type': 'str', 'direction': {'type': 'str', 'position': 0, 'description': 'The direction of this link (incoming if this is a link TO the requested case, outgoing if this is a link FROM the requested case) ', 'enum': ['incoming', 'outgoing']}, 'parentCase': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customerID': {'type': 'int'}, 'subject': {'type': 'string'}, 'service': {'type': 'string'}, 'status': {'type': 'str', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'priority': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}}}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}, 'options': ['merged', 'subcase', 'related', 'duplicate', 'dependency']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_case_tags = {'tags': ['cases/v2/case'], 'summary': 'List tags for an existing case (PUBLIC)', 'description': '', 'operationId': 'listCaseTags', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'key': {'type': 'string'}, 'value': {'type': 'string'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MERGED']}}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_case_watchers = {'tags': ['cases/v2/case'], 'summary': 'List watchers for an existing case (PUBLIC)', 'description': '', 'operationId': 'listCaseWatchers', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'includeExplicit', 'in': 'query', 'description': 'Include explicit watchers (default true)', 'required': False, 'type': 'bool', 'default': True}, {'name': 'includeDefault', 'in': 'query', 'description': 'Include default watchers (default true)', 'required': False, 'type': 'bool', 'default': True}, {'name': 'includeDisabled', 'in': 'query', 'description': 'Include disabled watchers (default false)', 'required': False, 'type': 'bool', 'default': False}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'contactID': {'type': 'int'}, 'role': {'type': 'str', 'enum': ['contact', 'watcher']}, 'type': 'str', 'destination': {'type': 'string'}, 'minimumPriority': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'NEGATIVE_ENTRY', 'VERBOSE', 'DISABLED', 'MERGED']}}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}, 'options': ['sms', 'email']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_fields = {'tags': ['cases/v2/case'], 'summary': 'List fields on case. Each field represents a defined field which has a value set for this case. For multivalue fields, the field may contain multiple values. (DEV)', 'description': '', 'operationId': 'listFields', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'ID of the case to fetch fields for', 'required': True, 'type': 'int', 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'caseID': {'type': 'int'}, 'descriptor': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this field. May be overridden by displayName in field policies. ', 'readOnly': True}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'readOnly': True, 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE']}}, 'valueType': {'type': 'str', 'position': 0, 'description': 'The value type of this field. Field values will be validated to ensure that the type is valid. If the field is a multivalue field, each value must be of the correct type. ', 'readOnly': True, 'enum': ['integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType']}}}, 'displayName': {'type': 'str', 'position': 0, 'description': 'Display name of this field (as set in the field policy) '}, 'value': {'type': 'dict', 'properties': {'key': {'type': 'dict', 'position': 0, 'description': 'Value key. May be a string, number or boolean value. '}, 'label': {'type': 'str', 'position': 0, 'description': 'Value label. String representation of the value. If not a mapped value, this is a string version of the key. '}, 'info': {'type': 'dict', 'position': 0, 'description': 'Info object. This is an optional complex object depending on the value type of the field. '}}}, 'values': {'type': 'list', 'position': 0, 'description': 'Current field values for multivalue fields. ', 'items': {'type': 'dict', 'properties': {'key': {'type': 'dict', 'position': 0, 'description': 'Value key. May be a string, number or boolean value. '}, 'label': {'type': 'str', 'position': 0, 'description': 'Value label. String representation of the value. If not a mapped value, this is a string version of the key. '}, 'info': {'type': 'dict', 'position': 0, 'description': 'Info object. This is an optional complex object depending on the value type of the field. '}}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_transaction_notifications = {'tags': ['cases/v2/case'], 'summary': 'Returns the notifications of a specified transaction (DEV)', 'description': '', 'operationId': 'listTransactionNotifications', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'transactionID', 'in': 'path', 'description': 'Transaction ID', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name of the notified person or entity '}, 'contact': {'type': 'str', 'position': 0, 'description': 'Contact information (email or phone number) '}, 'type': 'str', 'user': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'options': ['sms', 'email', 'verboseEmail', 'app', 'verboseApp']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_workflows = {'tags': ['cases/v2/case'], 'summary': 'List workflows for an existing case (PUBLIC)', 'description': '', 'operationId': 'listWorkflows', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'includeDeleted', 'in': 'query', 'description': 'If true, include deleted workflows', 'required': False, 'type': 'bool', 'default': False}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'required': ['workflow'], 'properties': {'id': {'type': 'str'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'workflow': {'type': 'str', 'position': 0, 'description': 'Name of workflow. ', 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, 'acknowledgedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'acknowledgedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time when this workflow was acknowledged, or 0 if not acknowledged. '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'PUBLIC_REQUEST_COMMENT', 'PUBLIC_ACKNOWLEDGED_COMMENT']}}, 'requestComment': {'type': 'str', 'position': 0, 'description': 'Comment set when requesting this workflow. May contain sanitized HTML. '}, 'acknowledgedComment': {'type': 'str', 'position': 0, 'description': 'Comment set for acknowledging this workflow. May contain sanitized HTML. '}, 'externalReference': {'type': 'str', 'position': 0, 'description': 'An external reference for this workflow. '}, 'state': {'type': 'str', 'position': 0, 'description': 'The state of the workflow ', 'enum': ['requested', 'acknowledged']}, 'acknowledgedTime': {'type': 'str', 'position': 0, 'description': 'Time when this workflow was acknowledged (in ISO-8601 time format) '}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
merge_cases = {'tags': ['cases/v2/case'], 'summary': 'Merge two cases (PUBLIC)', 'description': 'This will merge the contents of the mergeFrom case into the mergeInto case.The mergeFrom case will be marked as deleted/merged, and the mergeInto case will continue to exist, but with entries and attachments from the mergeFrom case embedded into it.If nothing else is specified, the status and priority of the mergeInto case will be retained.', 'operationId': 'mergeCases', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'mergeInto', 'in': 'path', 'description': 'ID of case to merge into', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'mergeFrom', 'in': 'path', 'description': 'ID of case to merge', 'required': True, 'type': 'int', 'minimum': 1}, {'in': 'body', 'name': 'body', 'description': 'Merge request', 'required': False, 'schema': {'type': 'object', 'properties': {'description': {'type': 'str', 'position': 0, 'description': 'Case description of merged case. May use HTML, which will be sanitized. If not set, the description of both cases will be combined. '}, 'priority': {'type': 'str', 'position': 0, 'description': 'Priority of merged case. If not set, keep priority of mergeInto case. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'status': {'type': 'str', 'position': 0, 'description': 'Status of merged case. If not set, keep status of mergeInto case. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose']}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['accessMode', 'closedByUser', 'closedTimestamp', 'createdByUser', 'createdTime', 'createdTimestamp', 'currentUserAccess', 'customer', 'description', 'descriptionTimestamp', 'initialPriority', 'initialStatus', 'lastUpdatedByUser', 'lastUpdatedTime', 'lastUpdatedTimestamp', 'priority', 'publishedByUser', 'publishedTimestamp', 'reporter', 'service', 'status', 'subject', 'type'], 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'service': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'category': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'type': 'str', 'initialStatus': {'type': 'str', 'position': 0, 'description': 'The initial status this case was assigned on create. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'status': {'type': 'str', 'position': 0, 'description': 'The current status of this case. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'initialPriority': {'type': 'str', 'position': 0, 'description': 'The initial priority this case was assigned on create. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'priority': {'type': 'str', 'position': 0, 'description': 'The current priority of this case. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'subject': {'type': 'str', 'position': 0, 'description': 'Subject of this case. '}, 'description': {'type': 'str', 'position': 0, 'description': 'Textual description of this case. Contains sanitized HTML. '}, 'customerReference': {'type': 'str', 'position': 0, 'description': 'If set, this contains a customer reference of this case. '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'Access mode of this case. ', 'enum': ['roleBased', 'readRestricted', 'writeRestricted', 'explicit']}, 'reporter': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedTech': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Creation timestamp of this case (in millis since epoch). '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Last update timestamp of this case (in millis since epoch). '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'closedTimestamp': {'type': 'int', 'position': 0, 'description': 'The most recent closing timestamp of this case (in millis since epoch), or 0 if not closed. '}, 'closedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp this case was published (in millis since epoch), or 0 if not published. '}, 'descriptionTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in millis since epoch). '}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}, 'currentUserAccess': {'type': 'dict', 'properties': {'level': {'type': 'str', 'position': 0, 'description': 'The current users access level on this case. ', 'readOnly': True, 'enum': ['read', 'write', 'owner']}, 'role': {'type': 'str', 'position': 0, 'description': 'The current users access role on this case. ', 'readOnly': True, 'enum': ['user', 'tech', 'admin']}}}, 'workflows': {'type': 'list', 'position': 0, 'description': 'If requested by client, workflows contains a summary of active workflows on this case. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'workflow': {'type': 'str', 'position': 0, 'description': 'The name of the workflow ', 'readOnly': True, 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, 'state': {'type': 'str', 'position': 0, 'description': 'The state of the workflow ', 'readOnly': True, 'enum': ['requested', 'acknowledged']}}}}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'The email address which this case originated from. Only present if flag MAIL_UPDATE is set. '}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Creation time of this case (in ISO-8601 time format) '}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Last updated time of this case (in ISO-8601 time format). '}, 'closedTime': {'type': 'str', 'position': 0, 'description': 'Close time of this case (in ISO-8601 time format), or null if not closed. '}, 'descriptionTime': {'type': 'str', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in ISO-8601 time format). '}, 'publishedTime': {'type': 'str', 'position': 0, 'description': 'Publish time of this case (in ISO-8601 time format), or null if not published. '}, 'options': ['securityIncident', 'operationalIncident', 'informational', 'change']}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
move_case = {'tags': ['cases/v2/case'], 'summary': 'Move a case to a differnet category, service or customer (PUBLIC)', 'description': '', 'operationId': 'moveCase', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'in': 'body', 'name': 'body', 'description': 'Move request', 'required': False, 'schema': {'type': 'object', 'properties': {'customerID': {'type': 'int', 'position': 0, 'description': 'DEPRECATED. Use customer instead '}, 'customer': {'type': 'str', 'position': 0, 'description': 'If set, move case to specified customer (id or shortname). '}, 'service': {'type': 'str', 'position': 0, 'description': 'If set, move case to specified service (id or shortname). '}, 'category': {'type': 'str', 'position': 0, 'description': 'If set, assign given category to specified category (by category id or shortname). Set value to empty string to unset category. '}, 'type': {'type': 'str', 'position': 0, 'description': 'If set, move case to specified type. ', 'enum': ['securityIncident', 'operationalIncident', 'informational', 'change']}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['accessMode', 'closedByUser', 'closedTimestamp', 'createdByUser', 'createdTime', 'createdTimestamp', 'currentUserAccess', 'customer', 'description', 'descriptionTimestamp', 'initialPriority', 'initialStatus', 'lastUpdatedByUser', 'lastUpdatedTime', 'lastUpdatedTimestamp', 'priority', 'publishedByUser', 'publishedTimestamp', 'reporter', 'service', 'status', 'subject', 'type'], 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'service': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'category': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'type': 'str', 'initialStatus': {'type': 'str', 'position': 0, 'description': 'The initial status this case was assigned on create. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'status': {'type': 'str', 'position': 0, 'description': 'The current status of this case. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'initialPriority': {'type': 'str', 'position': 0, 'description': 'The initial priority this case was assigned on create. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'priority': {'type': 'str', 'position': 0, 'description': 'The current priority of this case. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'subject': {'type': 'str', 'position': 0, 'description': 'Subject of this case. '}, 'description': {'type': 'str', 'position': 0, 'description': 'Textual description of this case. Contains sanitized HTML. '}, 'customerReference': {'type': 'str', 'position': 0, 'description': 'If set, this contains a customer reference of this case. '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'Access mode of this case. ', 'enum': ['roleBased', 'readRestricted', 'writeRestricted', 'explicit']}, 'reporter': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedTech': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Creation timestamp of this case (in millis since epoch). '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Last update timestamp of this case (in millis since epoch). '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'closedTimestamp': {'type': 'int', 'position': 0, 'description': 'The most recent closing timestamp of this case (in millis since epoch), or 0 if not closed. '}, 'closedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp this case was published (in millis since epoch), or 0 if not published. '}, 'descriptionTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in millis since epoch). '}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}, 'currentUserAccess': {'type': 'dict', 'properties': {'level': {'type': 'str', 'position': 0, 'description': 'The current users access level on this case. ', 'readOnly': True, 'enum': ['read', 'write', 'owner']}, 'role': {'type': 'str', 'position': 0, 'description': 'The current users access role on this case. ', 'readOnly': True, 'enum': ['user', 'tech', 'admin']}}}, 'workflows': {'type': 'list', 'position': 0, 'description': 'If requested by client, workflows contains a summary of active workflows on this case. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'workflow': {'type': 'str', 'position': 0, 'description': 'The name of the workflow ', 'readOnly': True, 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, 'state': {'type': 'str', 'position': 0, 'description': 'The state of the workflow ', 'readOnly': True, 'enum': ['requested', 'acknowledged']}}}}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'The email address which this case originated from. Only present if flag MAIL_UPDATE is set. '}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Creation time of this case (in ISO-8601 time format) '}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Last updated time of this case (in ISO-8601 time format). '}, 'closedTime': {'type': 'str', 'position': 0, 'description': 'Close time of this case (in ISO-8601 time format), or null if not closed. '}, 'descriptionTime': {'type': 'str', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in ISO-8601 time format). '}, 'publishedTime': {'type': 'str', 'position': 0, 'description': 'Publish time of this case (in ISO-8601 time format), or null if not published. '}, 'options': ['securityIncident', 'operationalIncident', 'informational', 'change']}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
prepare_attachment_upload = {'tags': ['cases/v2/case'], 'summary': 'Prepare new fragmentedattachment upload (DEV)', 'description': 'Request a new attachment upload state to perform fragmented upload', 'operationId': 'prepareAttachmentUpload', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'in': 'body', 'name': 'body', 'description': 'Attachment add request', 'required': False, 'schema': {'type': 'object', 'required': ['mimeType', 'name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name of attachment to add.  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'MimeType for attachment to add.  => Sanitize by regex [^ /]+/[^ /]+'}, 'encryptedZip': {'type': 'bool', 'position': 0, 'description': "If set, mark this attachment as an encrypted zip (should have password 'argus'). NOTE: the service does not encrypt or zip the attachment, this should be done by the client. (default false)", 'default': False}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'If update is made from an email, specify origin email address here  => format:email'}}}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'name': {'type': 'str', 'position': 0, 'description': 'Attachment file name '}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'Attachment mimetype '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MERGED', 'ZIP_ENCRYPTED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_TECH', 'MAIL_UPDATE', 'INCOMPLETE']}}, 'size': {'type': 'int', 'position': 0, 'description': 'Attachment file size (in bytes) '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'Attachment checksum '}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'Attachment origin email address (only present if attachment is marked as a mail update) '}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
publish_case = {'tags': ['cases/v2/case'], 'summary': 'Publish existing case not marked as published (PUBLIC)', 'description': '', 'operationId': 'publishCase', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['accessMode', 'closedByUser', 'closedTimestamp', 'createdByUser', 'createdTime', 'createdTimestamp', 'currentUserAccess', 'customer', 'description', 'descriptionTimestamp', 'initialPriority', 'initialStatus', 'lastUpdatedByUser', 'lastUpdatedTime', 'lastUpdatedTimestamp', 'priority', 'publishedByUser', 'publishedTimestamp', 'reporter', 'service', 'status', 'subject', 'type'], 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'service': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'category': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'type': 'str', 'initialStatus': {'type': 'str', 'position': 0, 'description': 'The initial status this case was assigned on create. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'status': {'type': 'str', 'position': 0, 'description': 'The current status of this case. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'initialPriority': {'type': 'str', 'position': 0, 'description': 'The initial priority this case was assigned on create. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'priority': {'type': 'str', 'position': 0, 'description': 'The current priority of this case. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'subject': {'type': 'str', 'position': 0, 'description': 'Subject of this case. '}, 'description': {'type': 'str', 'position': 0, 'description': 'Textual description of this case. Contains sanitized HTML. '}, 'customerReference': {'type': 'str', 'position': 0, 'description': 'If set, this contains a customer reference of this case. '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'Access mode of this case. ', 'enum': ['roleBased', 'readRestricted', 'writeRestricted', 'explicit']}, 'reporter': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedTech': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Creation timestamp of this case (in millis since epoch). '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Last update timestamp of this case (in millis since epoch). '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'closedTimestamp': {'type': 'int', 'position': 0, 'description': 'The most recent closing timestamp of this case (in millis since epoch), or 0 if not closed. '}, 'closedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp this case was published (in millis since epoch), or 0 if not published. '}, 'descriptionTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in millis since epoch). '}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}, 'currentUserAccess': {'type': 'dict', 'properties': {'level': {'type': 'str', 'position': 0, 'description': 'The current users access level on this case. ', 'readOnly': True, 'enum': ['read', 'write', 'owner']}, 'role': {'type': 'str', 'position': 0, 'description': 'The current users access role on this case. ', 'readOnly': True, 'enum': ['user', 'tech', 'admin']}}}, 'workflows': {'type': 'list', 'position': 0, 'description': 'If requested by client, workflows contains a summary of active workflows on this case. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'workflow': {'type': 'str', 'position': 0, 'description': 'The name of the workflow ', 'readOnly': True, 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, 'state': {'type': 'str', 'position': 0, 'description': 'The state of the workflow ', 'readOnly': True, 'enum': ['requested', 'acknowledged']}}}}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'The email address which this case originated from. Only present if flag MAIL_UPDATE is set. '}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Creation time of this case (in ISO-8601 time format) '}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Last updated time of this case (in ISO-8601 time format). '}, 'closedTime': {'type': 'str', 'position': 0, 'description': 'Close time of this case (in ISO-8601 time format), or null if not closed. '}, 'descriptionTime': {'type': 'str', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in ISO-8601 time format). '}, 'publishedTime': {'type': 'str', 'position': 0, 'description': 'Publish time of this case (in ISO-8601 time format), or null if not published. '}, 'options': ['securityIncident', 'operationalIncident', 'informational', 'change']}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
remove_access = {'tags': ['cases/v2/case'], 'summary': 'Revoke access from a case (PUBLIC)', 'description': '', 'operationId': 'removeAccess', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'aclEntryID', 'in': 'path', 'description': 'ACL entry to revoke', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'grantedSubject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'level': {'type': 'str', 'enum': ['read', 'write', 'owner']}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
remove_case_contact_watcher = {'tags': ['cases/v2/case'], 'summary': 'Remove a specific contact listed in the default watchers from watching this case (PUBLIC)', 'description': '', 'operationId': 'removeCaseContactWatcher', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'contactID', 'in': 'path', 'description': 'Contact ID', 'required': True, 'type': 'int', 'minimum': 1}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'contactID': {'type': 'int'}, 'role': {'type': 'str', 'enum': ['contact', 'watcher']}, 'type': 'str', 'destination': {'type': 'string'}, 'minimumPriority': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'NEGATIVE_ENTRY', 'VERBOSE', 'DISABLED', 'MERGED']}}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}, 'options': ['sms', 'email']}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
remove_case_tag_by_id = {'tags': ['cases/v2/case'], 'summary': 'Remove existing tag (PUBLIC)', 'description': '', 'operationId': 'removeCaseTagByID', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'tagID', 'in': 'path', 'description': 'Tag ID', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'key': {'type': 'string'}, 'value': {'type': 'string'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MERGED']}}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
remove_case_tag_by_key_value = {'tags': ['cases/v2/case'], 'summary': 'Remove existing tag (PUBLIC)', 'description': '', 'operationId': 'removeCaseTagByKeyValue', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'tagKey', 'in': 'path', 'description': 'Tag Key', 'required': True, 'type': 'str'}, {'name': 'tagValue', 'in': 'path', 'description': 'Tag Value', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'key': {'type': 'string'}, 'value': {'type': 'string'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MERGED']}}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
remove_case_watcher = {'tags': ['cases/v2/case'], 'summary': 'Remove specific watcher from a case (PUBLIC)', 'description': '', 'operationId': 'removeCaseWatcher', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'watcherID', 'in': 'path', 'description': 'Watcher ID', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'contactID': {'type': 'int'}, 'role': {'type': 'str', 'enum': ['contact', 'watcher']}, 'type': 'str', 'destination': {'type': 'string'}, 'minimumPriority': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'NEGATIVE_ENTRY', 'VERBOSE', 'DISABLED', 'MERGED']}}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}, 'options': ['sms', 'email']}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
remove_current_user_watcher = {'tags': ['cases/v2/case'], 'summary': 'Remove the current user from the watchlist of this case.If the currentuser is a contact, this will override the contact settings for the current user for this case. (PUBLIC)', 'description': '', 'operationId': 'removeCurrentUserWatcher', 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'role': {'type': 'str', 'enum': ['reporter', 'owner', 'tech', 'contact', 'watcher']}, 'sms': {'type': 'boolean'}, 'email': {'type': 'boolean'}, 'caseID': {'type': 'int'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
request_workflow = {'tags': ['cases/v2/case'], 'summary': 'Request new workflow on case (PUBLIC)', 'description': '', 'operationId': 'requestWorkflow', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'workflow', 'in': 'path', 'description': 'Workflow to request', 'required': True, 'type': 'str', 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, {'in': 'body', 'name': 'body', 'description': 'Workflow request details', 'required': False, 'schema': {'type': 'object', 'properties': {'comment': {'type': 'str', 'position': 0, 'description': 'Optional comment to add. Html is allowed, will be sanitized. '}, 'externalReference': {'type': 'str', 'position': 0, 'description': 'Optional external reference to add. Should be a link or an issue number. '}, 'publicComment': {'type': 'bool', 'position': 0, 'description': 'If true, the comment is marked as public, and is made visible to customer. '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['workflow'], 'properties': {'id': {'type': 'str'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'workflow': {'type': 'str', 'position': 0, 'description': 'Name of workflow. ', 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, 'acknowledgedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'acknowledgedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time when this workflow was acknowledged, or 0 if not acknowledged. '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'PUBLIC_REQUEST_COMMENT', 'PUBLIC_ACKNOWLEDGED_COMMENT']}}, 'requestComment': {'type': 'str', 'position': 0, 'description': 'Comment set when requesting this workflow. May contain sanitized HTML. '}, 'acknowledgedComment': {'type': 'str', 'position': 0, 'description': 'Comment set for acknowledging this workflow. May contain sanitized HTML. '}, 'externalReference': {'type': 'str', 'position': 0, 'description': 'An external reference for this workflow. '}, 'state': {'type': 'str', 'position': 0, 'description': 'The state of the workflow ', 'enum': ['requested', 'acknowledged']}, 'acknowledgedTime': {'type': 'str', 'position': 0, 'description': 'Time when this workflow was acknowledged (in ISO-8601 time format) '}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
search_case_statistics = {'tags': ['cases/v2/case'], 'summary': 'Returns statistics data matching the defined CaseStatsSearchCriteria (PUBLIC)', 'description': '', 'operationId': 'searchCaseStatistics', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Criteria defining statistics to fetch', 'required': False, 'schema': {'type': 'object', 'properties': {'startTimestamp': {'type': 'int'}, 'endTimestamp': {'type': 'int'}, 'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. By default, no restriction on result set size. '}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object. '}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects. '}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'startTimestamp': {'type': 'int'}, 'endTimestamp': {'type': 'int'}, 'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. By default, no restriction on result set size. '}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object. '}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects. '}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'startTimestamp': {'type': 'int'}, 'endTimestamp': {'type': 'int'}, 'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. By default, no restriction on result set size. '}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object. '}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects. '}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR. ', 'uniqueItems': True, 'items': []}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. '}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers. ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'caseID': {'type': 'list', 'position': 0, 'description': 'Restrict search to specific cases (by ID). ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Restrict search to specific customers (by ID or shortname). ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'type': 'list', 'service': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries of one of these services (by service shortname or ID). ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'category': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries of one of these categories (by category shortname or ID). ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'status': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries of one of these statuses. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}}, 'initialStatus': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries where the initial status is one of these statuses. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}}, 'priority': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries with given priorties ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}}, 'initialPriority': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries where the initial priority is one of these priorties ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}}, 'assetID': {'type': 'list', 'position': 0, 'description': 'Restrict search to cases associated with specified assets (hosts, services or processes) ', 'uniqueItems': True, 'items': {'type': 'str'}}, 'tag': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries matching the given tag criteria. ', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['key'], 'properties': {'key': {'type': 'str', 'position': 0, 'description': 'Key of tag to search for '}, 'values': {'type': 'list', 'position': 0, 'description': 'Values of tag to search for (any of them). If no value is set, this matches any entry where this tag is set. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If true, invert this criteria. If no value is set, exclude any entry having this tag. '}}}}, 'workflow': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries matching the given workflow criteria. ', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['flow'], 'properties': {'flow': {'type': 'str', 'position': 0, 'description': 'Name of flow to search for ', 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, 'acknowledged': {'type': 'bool', 'position': 0, 'description': 'If true/false, limit to acknowledged/unacknowledged flows, respectively. If not set, filter on all flows of this type. '}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If false (default), limit to cases matching this flow criteria. If true, exclude cases matching this flow criteria. '}}}}, 'field': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries matching the given field criteria. ', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['field'], 'properties': {'field': {'type': 'str', 'position': 0, 'description': 'Name of field to search for '}, 'values': {'type': 'list', 'position': 0, 'description': 'Values of tag to search for (any of them). If no value is set, this matches any entry where this field is set. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If true, invert this criteria. If no value is set, exclude any entry having this field. '}}}}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for keywords. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps will be included in the search (default all). ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdTimestamp', 'lastUpdatedTimestamp', 'closedTimestamp', 'publishedTimestamp', 'all']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) ', 'enum': ['all', 'any']}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields). ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['subject', 'description', 'comments', 'customerReference', 'id', 'all']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines the MatchStrategy for keywords (default match all keywords). ', 'enum': ['all', 'any']}, 'user': {'type': 'list', 'position': 0, 'description': 'Restrict search to cases associated with these users or user groups (by ID or shortname). ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userID': {'type': 'list', 'position': 0, 'description': "This field is deprecated. Use field 'user' instead. ", 'uniqueItems': True, 'items': {'type': 'int'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which user fields will be searched (default match all user fields). ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['reporter', 'assignedUser', 'assignedTech', 'createdByUser', 'lastUpdatedByUser', 'closedByUser', 'publishedByUser', 'commentedByUser', 'watchedByUser', 'all']}}, 'userAssigned': {'type': 'bool', 'position': 0, 'description': 'If set, limit search to cases where assignedUser field is set/unset '}, 'techAssigned': {'type': 'bool', 'position': 0, 'description': 'If set, limit search to cases where assignedTech field is set/unset '}, 'includeWorkflows': {'type': 'bool', 'position': 0, 'description': 'If true, include list of workflows in result. Default is false (not present). '}, 'includeDescription': {'type': 'bool', 'position': 0, 'description': 'If false, omit description from response. Default is true (description is present). '}, 'accessMode': {'type': 'list', 'position': 0, 'description': 'If set, only match cases which is set to one of these access modes ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['roleBased', 'readRestricted', 'writeRestricted', 'explicit']}}, 'explicitAccess': {'type': 'list', 'position': 0, 'description': 'If set, only match cases which have explicit access grants matching the specified criteria ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'subject': {'type': 'list', 'position': 0, 'description': 'Match only access granted to specified user or group (id or shortname) ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'includeSubjectAnscendants': {'type': 'bool', 'position': 0, 'description': 'If true, also return cases where any of the specified subjects are granted access through parent groups. '}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Match access granted after this timestamp '}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Match access granted before this timestamp '}, 'level': {'type': 'list', 'position': 0, 'description': 'Match access granted for specified access levels ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['read', 'write', 'owner']}}}}}, 'includeTestData': {'type': 'bool', 'position': 0, 'description': 'If true, also include cases marked as TEST_DATA in search result. This option is restricted to users with permission viewCaseTestData. Default is false (excluded). '}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending). ', 'items': {'type': 'str', 'enum': ['reporter', 'createdByUser', 'createdTimestamp', 'lastUpdatedByUser', 'lastUpdatedTimestamp', 'assignedUser', 'assignedTech', 'closedByUser', 'closedTimestamp', 'publishedByUser', 'publishedTimestamp', 'customer', 'priority', 'status', 'type', 'service', 'category', 'subject']}}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Only include objects which have includeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Exclude objects which have excludeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. '}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers. ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'caseID': {'type': 'list', 'position': 0, 'description': 'Restrict search to specific cases (by ID). ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Restrict search to specific customers (by ID or shortname). ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'type': 'list', 'service': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries of one of these services (by service shortname or ID). ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'category': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries of one of these categories (by category shortname or ID). ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'status': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries of one of these statuses. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}}, 'initialStatus': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries where the initial status is one of these statuses. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}}, 'priority': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries with given priorties ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}}, 'initialPriority': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries where the initial priority is one of these priorties ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}}, 'assetID': {'type': 'list', 'position': 0, 'description': 'Restrict search to cases associated with specified assets (hosts, services or processes) ', 'uniqueItems': True, 'items': {'type': 'str'}}, 'tag': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries matching the given tag criteria. ', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['key'], 'properties': {'key': {'type': 'str', 'position': 0, 'description': 'Key of tag to search for '}, 'values': {'type': 'list', 'position': 0, 'description': 'Values of tag to search for (any of them). If no value is set, this matches any entry where this tag is set. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If true, invert this criteria. If no value is set, exclude any entry having this tag. '}}}}, 'workflow': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries matching the given workflow criteria. ', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['flow'], 'properties': {'flow': {'type': 'str', 'position': 0, 'description': 'Name of flow to search for ', 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, 'acknowledged': {'type': 'bool', 'position': 0, 'description': 'If true/false, limit to acknowledged/unacknowledged flows, respectively. If not set, filter on all flows of this type. '}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If false (default), limit to cases matching this flow criteria. If true, exclude cases matching this flow criteria. '}}}}, 'field': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries matching the given field criteria. ', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['field'], 'properties': {'field': {'type': 'str', 'position': 0, 'description': 'Name of field to search for '}, 'values': {'type': 'list', 'position': 0, 'description': 'Values of tag to search for (any of them). If no value is set, this matches any entry where this field is set. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If true, invert this criteria. If no value is set, exclude any entry having this field. '}}}}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for keywords. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps will be included in the search (default all). ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdTimestamp', 'lastUpdatedTimestamp', 'closedTimestamp', 'publishedTimestamp', 'all']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) ', 'enum': ['all', 'any']}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields). ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['subject', 'description', 'comments', 'customerReference', 'id', 'all']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines the MatchStrategy for keywords (default match all keywords). ', 'enum': ['all', 'any']}, 'user': {'type': 'list', 'position': 0, 'description': 'Restrict search to cases associated with these users or user groups (by ID or shortname). ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userID': {'type': 'list', 'position': 0, 'description': "This field is deprecated. Use field 'user' instead. ", 'uniqueItems': True, 'items': {'type': 'int'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which user fields will be searched (default match all user fields). ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['reporter', 'assignedUser', 'assignedTech', 'createdByUser', 'lastUpdatedByUser', 'closedByUser', 'publishedByUser', 'commentedByUser', 'watchedByUser', 'all']}}, 'userAssigned': {'type': 'bool', 'position': 0, 'description': 'If set, limit search to cases where assignedUser field is set/unset '}, 'techAssigned': {'type': 'bool', 'position': 0, 'description': 'If set, limit search to cases where assignedTech field is set/unset '}, 'includeWorkflows': {'type': 'bool', 'position': 0, 'description': 'If true, include list of workflows in result. Default is false (not present). '}, 'includeDescription': {'type': 'bool', 'position': 0, 'description': 'If false, omit description from response. Default is true (description is present). '}, 'accessMode': {'type': 'list', 'position': 0, 'description': 'If set, only match cases which is set to one of these access modes ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['roleBased', 'readRestricted', 'writeRestricted', 'explicit']}}, 'explicitAccess': {'type': 'list', 'position': 0, 'description': 'If set, only match cases which have explicit access grants matching the specified criteria ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'subject': {'type': 'list', 'position': 0, 'description': 'Match only access granted to specified user or group (id or shortname) ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'includeSubjectAnscendants': {'type': 'bool', 'position': 0, 'description': 'If true, also return cases where any of the specified subjects are granted access through parent groups. '}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Match access granted after this timestamp '}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Match access granted before this timestamp '}, 'level': {'type': 'list', 'position': 0, 'description': 'Match access granted for specified access levels ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['read', 'write', 'owner']}}}}}, 'includeTestData': {'type': 'bool', 'position': 0, 'description': 'If true, also include cases marked as TEST_DATA in search result. This option is restricted to users with permission viewCaseTestData. Default is false (excluded). '}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending). ', 'items': {'type': 'str', 'enum': ['reporter', 'createdByUser', 'createdTimestamp', 'lastUpdatedByUser', 'lastUpdatedTimestamp', 'assignedUser', 'assignedTech', 'closedByUser', 'closedTimestamp', 'publishedByUser', 'publishedTimestamp', 'customer', 'priority', 'status', 'type', 'service', 'category', 'subject']}}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Only include objects which have includeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Exclude objects which have excludeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. '}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers. ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'caseID': {'type': 'list', 'position': 0, 'description': 'Restrict search to specific cases (by ID). ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Restrict search to specific customers (by ID or shortname). ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'type': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries of one of these types. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['securityIncident', 'operationalIncident', 'informational', 'change']}}, 'service': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries of one of these services (by service shortname or ID). ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'category': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries of one of these categories (by category shortname or ID). ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'status': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries of one of these statuses. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}}, 'initialStatus': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries where the initial status is one of these statuses. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}}, 'priority': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries with given priorties ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}}, 'initialPriority': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries where the initial priority is one of these priorties ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}}, 'assetID': {'type': 'list', 'position': 0, 'description': 'Restrict search to cases associated with specified assets (hosts, services or processes) ', 'uniqueItems': True, 'items': {'type': 'str'}}, 'tag': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries matching the given tag criteria. ', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['key'], 'properties': {'key': {'type': 'str', 'position': 0, 'description': 'Key of tag to search for '}, 'values': {'type': 'list', 'position': 0, 'description': 'Values of tag to search for (any of them). If no value is set, this matches any entry where this tag is set. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If true, invert this criteria. If no value is set, exclude any entry having this tag. '}}}}, 'workflow': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries matching the given workflow criteria. ', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['flow'], 'properties': {'flow': {'type': 'str', 'position': 0, 'description': 'Name of flow to search for ', 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, 'acknowledged': {'type': 'bool', 'position': 0, 'description': 'If true/false, limit to acknowledged/unacknowledged flows, respectively. If not set, filter on all flows of this type. '}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If false (default), limit to cases matching this flow criteria. If true, exclude cases matching this flow criteria. '}}}}, 'field': {'type': 'list', 'position': 0, 'description': 'Restrict search to entries matching the given field criteria. ', 'uniqueItems': True, 'items': {'type': 'dict', 'required': ['field'], 'properties': {'field': {'type': 'str', 'position': 0, 'description': 'Name of field to search for '}, 'values': {'type': 'list', 'position': 0, 'description': 'Values of tag to search for (any of them). If no value is set, this matches any entry where this field is set. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If true, invert this criteria. If no value is set, exclude any entry having this field. '}}}}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for keywords. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps will be included in the search (default all). ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdTimestamp', 'lastUpdatedTimestamp', 'closedTimestamp', 'publishedTimestamp', 'all']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) ', 'enum': ['all', 'any']}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields). ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['subject', 'description', 'comments', 'customerReference', 'id', 'all']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines the MatchStrategy for keywords (default match all keywords). ', 'enum': ['all', 'any']}, 'user': {'type': 'list', 'position': 0, 'description': 'Restrict search to cases associated with these users or user groups (by ID or shortname). ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userID': {'type': 'list', 'position': 0, 'description': "This field is deprecated. Use field 'user' instead. ", 'uniqueItems': True, 'items': {'type': 'int'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which user fields will be searched (default match all user fields). ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['reporter', 'assignedUser', 'assignedTech', 'createdByUser', 'lastUpdatedByUser', 'closedByUser', 'publishedByUser', 'commentedByUser', 'watchedByUser', 'all']}}, 'userAssigned': {'type': 'bool', 'position': 0, 'description': 'If set, limit search to cases where assignedUser field is set/unset '}, 'techAssigned': {'type': 'bool', 'position': 0, 'description': 'If set, limit search to cases where assignedTech field is set/unset '}, 'includeWorkflows': {'type': 'bool', 'position': 0, 'description': 'If true, include list of workflows in result. Default is false (not present). '}, 'includeDescription': {'type': 'bool', 'position': 0, 'description': 'If false, omit description from response. Default is true (description is present). '}, 'accessMode': {'type': 'list', 'position': 0, 'description': 'If set, only match cases which is set to one of these access modes ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['roleBased', 'readRestricted', 'writeRestricted', 'explicit']}}, 'explicitAccess': {'type': 'list', 'position': 0, 'description': 'If set, only match cases which have explicit access grants matching the specified criteria ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'subject': {'type': 'list', 'position': 0, 'description': 'Match only access granted to specified user or group (id or shortname) ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'includeSubjectAnscendants': {'type': 'bool', 'position': 0, 'description': 'If true, also return cases where any of the specified subjects are granted access through parent groups. '}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Match access granted after this timestamp '}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Match access granted before this timestamp '}, 'level': {'type': 'list', 'position': 0, 'description': 'Match access granted for specified access levels ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['read', 'write', 'owner']}}}}}, 'includeTestData': {'type': 'bool', 'position': 0, 'description': 'If true, also include cases marked as TEST_DATA in search result. This option is restricted to users with permission viewCaseTestData. Default is false (excluded). '}, 'groupBy': {'type': 'list', 'position': 0, 'description': 'Specify which fields will be grouped by in stats ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['customer', 'service', 'category', 'priority', 'status', 'type']}}, 'values': {'type': 'list', 'position': 0, 'description': 'Specify which values will be included in stats (default created) ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['created', 'open', 'closed']}, 'maxItems': 2147483647, 'minItems': 1}, 'resolution': {'type': 'int', 'position': 0, 'description': 'Stats resolution period (unit specified by resolutionUnit), if is 0 means to generate non-timeline statistics ', 'minimum': 0}, 'resolutionUnit': {'type': 'str', 'position': 0, 'description': 'Stats resolution period time unit. (default milliseconds)', 'enum': ['milliseconds', 'seconds', 'minutes', 'hours', 'days', 'weeks', 'months']}, 'cutoff': {'type': 'int', 'position': 0, 'description': 'This option is deprecated. Use cutoffFields instead. ', 'minimum': 0}, 'cutoffFields': {'type': 'dict', 'position': 0, 'description': 'Reduce stats keys to max amount of distinct values per field. Fields which are not listed will not be reduced. ', 'additionalProperties': {'type': 'int'}}, 'cutoffValue': {'type': 'str', 'position': 0, 'description': 'Specify which value to be cutoff on (default created) ', 'enum': ['created', 'open', 'closed']}, 'includeOthers': {'type': 'bool', 'position': 0, 'description': 'If reduce (cutoff>0), true means remaining keys (other than cutoff keys) are collected into an "other" key, default false '}, 'sortByField': {'type': 'str', 'position': 0, 'description': 'If set, sort by this field. The returned field must be in the groupBy list. If not set, the container will be sorted by value. ', 'enum': ['customer', 'service', 'category', 'priority', 'status', 'type']}, 'sortByValue': {'type': 'str', 'position': 0, 'description': 'If set, sort by this value (descending by value). The specified value must be in the values list. If not set, it defaults to the first returned value. This field cannot be set if sortByField id set.. ', 'enum': ['created', 'open', 'closed']}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending). ', 'items': {'type': 'str', 'enum': ['reporter', 'createdByUser', 'createdTimestamp', 'lastUpdatedByUser', 'lastUpdatedTimestamp', 'assignedUser', 'assignedTech', 'closedByUser', 'closedTimestamp', 'publishedByUser', 'publishedTimestamp', 'customer', 'priority', 'status', 'type', 'service', 'category', 'subject']}}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Only include objects which have includeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Exclude objects which have excludeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'statsID': {'type': 'int', 'position': 0, 'description': 'Statistics ID '}, 'customerID': {'type': 'int', 'position': 0, 'description': 'Customer ID '}, 'resolution': {'type': 'int', 'position': 0, 'description': 'Statistics time frame period length '}, 'resolutionUnit': {'type': 'str', 'position': 0, 'description': 'Time unit for the resolution ', 'enum': ['milliseconds', 'seconds', 'minutes', 'hours', 'days', 'weeks', 'months', 'years']}, 'records': {'type': 'int', 'position': 0, 'description': 'Amount of records '}, 'hitCount': {'type': 'dict', 'position': 0, 'description': 'Total amount of hits per value ', 'additionalProperties': {'type': 'int'}}, 'keyNames': {'type': 'list', 'position': 0, 'description': 'List of key names ', 'items': {'type': 'string'}}, 'valueNames': {'type': 'list', 'position': 0, 'description': 'List of value names ', 'items': {'type': 'string'}}, 'keys': {'type': 'list', 'position': 0, 'description': 'List of statistics keys e.g. {"id":1, "key1Name":"key1", "key2Name":"key2"} ', 'items': {'type': 'dict', 'additionalProperties': {'type': 'object'}}}, 'timeFrames': {'type': 'list', 'position': 0, 'description': 'List of statistics records grouped by time frame ', 'items': {'type': 'dict', 'properties': {'records': {'type': 'list', 'items': {'type': 'dict', 'properties': {'keyID': {'type': 'int'}, 'value': {'type': 'dict', 'additionalProperties': {'type': 'int'}}}}}, 'timeFrame': {'type': 'dict', 'properties': {'startTime': {'type': 'int'}, 'endTime': {'type': 'int'}}}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
set_field = {'tags': ['cases/v2/case'], 'summary': 'Set specific field for a case, by either field ID or field name. For multivalue fields, the field may contain multiple values. (DEV)', 'description': '', 'operationId': 'setField', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'ID of the case to set fields for', 'required': True, 'type': 'int', 'minimum': 0}, {'name': 'field', 'in': 'path', 'description': 'ID or fieldName of the field to set', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Field set request', 'required': False, 'schema': {'type': 'object', 'properties': {'value': {'type': 'str', 'position': 0, 'description': 'Value to set on field. Multivalue fields will reject requests using this parameter. '}, 'valuesToAdd': {'type': 'list', 'position': 0, 'description': 'Value to add to a multivalue field. Existing values will be retained. Singlevalue fields will reject requests using this parameter. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'valuesToSet': {'type': 'list', 'position': 0, 'description': 'Value to set on a multivalue field. Existing values will be discarded. Singlevalue fields will reject requests using this parameter. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'valuesToRemove': {'type': 'list', 'position': 0, 'description': 'Value to remove from a multivalue field. Singlevalue fields will reject requests using this parameter. ', 'uniqueItems': True, 'items': {'type': 'string'}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'caseID': {'type': 'int'}, 'descriptor': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of this field. May be overridden by displayName in field policies. ', 'readOnly': True}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'readOnly': True, 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MULTIVALUE', 'HAS_VALUE_SOURCE']}}, 'valueType': {'type': 'str', 'position': 0, 'description': 'The value type of this field. Field values will be validated to ensure that the type is valid. If the field is a multivalue field, each value must be of the correct type. ', 'readOnly': True, 'enum': ['integerType', 'floatType', 'stringType', 'textType', 'timestampType', 'ipType', 'subjectType', 'caseType', 'documentType', 'assetType']}}}, 'displayName': {'type': 'str', 'position': 0, 'description': 'Display name of this field (as set in the field policy) '}, 'value': {'type': 'dict', 'properties': {'key': {'type': 'dict', 'position': 0, 'description': 'Value key. May be a string, number or boolean value. '}, 'label': {'type': 'str', 'position': 0, 'description': 'Value label. String representation of the value. If not a mapped value, this is a string version of the key. '}, 'info': {'type': 'dict', 'position': 0, 'description': 'Info object. This is an optional complex object depending on the value type of the field. '}}}, 'values': {'type': 'list', 'position': 0, 'description': 'Current field values for multivalue fields. ', 'items': {'type': 'dict', 'properties': {'key': {'type': 'dict', 'position': 0, 'description': 'Value key. May be a string, number or boolean value. '}, 'label': {'type': 'str', 'position': 0, 'description': 'Value label. String representation of the value. If not a mapped value, this is a string version of the key. '}, 'info': {'type': 'dict', 'position': 0, 'description': 'Info object. This is an optional complex object depending on the value type of the field. '}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
simple_case_search = {'tags': ['cases/v2/case'], 'summary': 'Returns cases matching the query parameters (PUBLIC)', 'description': '', 'operationId': 'simpleCaseSearch', 'produces': ['application/json', 'text/csv'], 'parameters': [{'name': 'Accept', 'in': 'header', 'required': False, 'type': 'string'}, {'name': 'customerID', 'in': 'query', 'required': False, 'type': 'list', 'items': {'type': 'int'}, 'collectionFormat': 'multi'}, {'name': 'customer', 'in': 'query', 'description': 'Limit result to specified customers (by id or shortname)', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'service', 'in': 'query', 'description': 'Limit result to specified services (service shortname)', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'status', 'in': 'query', 'description': 'Limit result to specified statuses', 'required': False, 'type': 'list', 'items': {'type': 'str', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'collectionFormat': 'multi'}, {'name': 'type', 'in': 'query', 'description': 'Limit result to specified types', 'required': False, 'type': 'list', 'items': {'type': 'str', 'enum': ['securityIncident', 'operationalIncident', 'informational', 'change']}, 'collectionFormat': 'multi'}, {'name': 'keywords', 'in': 'query', 'description': 'Search by keywords', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'sortBy', 'in': 'query', 'description': 'Sort order (see /cases/v2/case/search documentation for details)', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'required': ['accessMode', 'closedByUser', 'closedTimestamp', 'createdByUser', 'createdTime', 'createdTimestamp', 'currentUserAccess', 'customer', 'description', 'descriptionTimestamp', 'initialPriority', 'initialStatus', 'lastUpdatedByUser', 'lastUpdatedTime', 'lastUpdatedTimestamp', 'priority', 'publishedByUser', 'publishedTimestamp', 'reporter', 'service', 'status', 'subject', 'type'], 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'service': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'category': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'type': 'str', 'initialStatus': {'type': 'str', 'position': 0, 'description': 'The initial status this case was assigned on create. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'status': {'type': 'str', 'position': 0, 'description': 'The current status of this case. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'initialPriority': {'type': 'str', 'position': 0, 'description': 'The initial priority this case was assigned on create. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'priority': {'type': 'str', 'position': 0, 'description': 'The current priority of this case. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'subject': {'type': 'str', 'position': 0, 'description': 'Subject of this case. '}, 'description': {'type': 'str', 'position': 0, 'description': 'Textual description of this case. Contains sanitized HTML. '}, 'customerReference': {'type': 'str', 'position': 0, 'description': 'If set, this contains a customer reference of this case. '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'Access mode of this case. ', 'enum': ['roleBased', 'readRestricted', 'writeRestricted', 'explicit']}, 'reporter': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedTech': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Creation timestamp of this case (in millis since epoch). '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Last update timestamp of this case (in millis since epoch). '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'closedTimestamp': {'type': 'int', 'position': 0, 'description': 'The most recent closing timestamp of this case (in millis since epoch), or 0 if not closed. '}, 'closedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp this case was published (in millis since epoch), or 0 if not published. '}, 'descriptionTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in millis since epoch). '}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}, 'currentUserAccess': {'type': 'dict', 'properties': {'level': {'type': 'str', 'position': 0, 'description': 'The current users access level on this case. ', 'readOnly': True, 'enum': ['read', 'write', 'owner']}, 'role': {'type': 'str', 'position': 0, 'description': 'The current users access role on this case. ', 'readOnly': True, 'enum': ['user', 'tech', 'admin']}}}, 'workflows': {'type': 'list', 'position': 0, 'description': 'If requested by client, workflows contains a summary of active workflows on this case. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'workflow': {'type': 'str', 'position': 0, 'description': 'The name of the workflow ', 'readOnly': True, 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, 'state': {'type': 'str', 'position': 0, 'description': 'The state of the workflow ', 'readOnly': True, 'enum': ['requested', 'acknowledged']}}}}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'The email address which this case originated from. Only present if flag MAIL_UPDATE is set. '}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Creation time of this case (in ISO-8601 time format) '}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Last updated time of this case (in ISO-8601 time format). '}, 'closedTime': {'type': 'str', 'position': 0, 'description': 'Close time of this case (in ISO-8601 time format), or null if not closed. '}, 'descriptionTime': {'type': 'str', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in ISO-8601 time format). '}, 'publishedTime': {'type': 'str', 'position': 0, 'description': 'Publish time of this case (in ISO-8601 time format), or null if not published. '}, 'options': ['securityIncident', 'operationalIncident', 'informational', 'change']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
update_case = {'tags': ['cases/v2/case'], 'summary': 'Request changes to basic fields of an existing case (PUBLIC)', 'description': '', 'operationId': 'updateCase', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'in': 'body', 'name': 'body', 'description': 'Update request', 'required': False, 'schema': {'type': 'object', 'properties': {'subject': {'type': 'str', 'position': 0, 'description': 'If set, change subject of case.  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'description': {'type': 'str', 'position': 0, 'description': 'If set, change description of case. May use HTML, will be sanitized. '}, 'priority': {'type': 'str', 'position': 0, 'description': 'If set, change priority of case. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'category': {'type': 'str', 'position': 0, 'description': 'If set, assign given category to specified category (by category shortname). Set value to empty string to unset category. '}, 'reporter': {'type': 'str', 'position': 0, 'description': 'If set, set given user as reporter for case (by ID or shortname). Shortname will be resolved in the current users domain. '}, 'assignedUser': {'type': 'str', 'position': 0, 'description': 'If set, assign given user to case (by ID or shortname). Shortname will be resolved in the current users domain. If blank, this will unset assignedUser. '}, 'assignedTech': {'type': 'str', 'position': 0, 'description': 'If set, assign given technical user (solution engineer) to case (by ID or shortname). Shortname will be resolved in the current users domain. If blank, this will unset assignedTech. '}, 'customerReference': {'type': 'str', 'position': 0, 'description': 'If set, change customer reference for case.  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'comment': {'type': 'str', 'position': 0, 'description': 'If set, add comment to case. May use HTML, will be sanitized. '}, 'internalComment': {'type': 'bool', 'position': 0, 'description': 'If true, add comment as internal. (default false)', 'default': False}, 'notification': {'type': 'dict', 'properties': {'extraRecipients': {'type': 'list', 'position': 0, 'description': 'Additional recipients (email addresses or phone numbers) to be notified of this operation.  ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'skipEmail': {'type': 'bool', 'position': 0, 'description': 'If true, skip default email notification. ExtraRecipients will still be notified. Default is false. '}, 'skipSMS': {'type': 'bool', 'position': 0, 'description': 'If true, skip default sms notification. Default is false. '}, 'includeAttachments': {'type': 'bool', 'position': 0, 'description': 'If true, attachments are requested included in email notifications. Configuration may still override this for some/all destinations. Default is false. '}}}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'If update is made from an email, specify origin email address here  => format:email'}, 'hasEvents': {'type': 'bool', 'position': 0, 'description': 'If set, update the hasEvents flag for this case, signalling that this case may have events associated to it. '}, 'status': {'type': 'str', 'position': 0, 'description': 'If set, change status of case ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose']}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['accessMode', 'closedByUser', 'closedTimestamp', 'createdByUser', 'createdTime', 'createdTimestamp', 'currentUserAccess', 'customer', 'description', 'descriptionTimestamp', 'initialPriority', 'initialStatus', 'lastUpdatedByUser', 'lastUpdatedTime', 'lastUpdatedTimestamp', 'priority', 'publishedByUser', 'publishedTimestamp', 'reporter', 'service', 'status', 'subject', 'type'], 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'service': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'category': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'type': 'str', 'initialStatus': {'type': 'str', 'position': 0, 'description': 'The initial status this case was assigned on create. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'status': {'type': 'str', 'position': 0, 'description': 'The current status of this case. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'initialPriority': {'type': 'str', 'position': 0, 'description': 'The initial priority this case was assigned on create. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'priority': {'type': 'str', 'position': 0, 'description': 'The current priority of this case. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'subject': {'type': 'str', 'position': 0, 'description': 'Subject of this case. '}, 'description': {'type': 'str', 'position': 0, 'description': 'Textual description of this case. Contains sanitized HTML. '}, 'customerReference': {'type': 'str', 'position': 0, 'description': 'If set, this contains a customer reference of this case. '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'Access mode of this case. ', 'enum': ['roleBased', 'readRestricted', 'writeRestricted', 'explicit']}, 'reporter': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedTech': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Creation timestamp of this case (in millis since epoch). '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Last update timestamp of this case (in millis since epoch). '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'closedTimestamp': {'type': 'int', 'position': 0, 'description': 'The most recent closing timestamp of this case (in millis since epoch), or 0 if not closed. '}, 'closedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp this case was published (in millis since epoch), or 0 if not published. '}, 'descriptionTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in millis since epoch). '}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}, 'currentUserAccess': {'type': 'dict', 'properties': {'level': {'type': 'str', 'position': 0, 'description': 'The current users access level on this case. ', 'readOnly': True, 'enum': ['read', 'write', 'owner']}, 'role': {'type': 'str', 'position': 0, 'description': 'The current users access role on this case. ', 'readOnly': True, 'enum': ['user', 'tech', 'admin']}}}, 'workflows': {'type': 'list', 'position': 0, 'description': 'If requested by client, workflows contains a summary of active workflows on this case. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'workflow': {'type': 'str', 'position': 0, 'description': 'The name of the workflow ', 'readOnly': True, 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, 'state': {'type': 'str', 'position': 0, 'description': 'The state of the workflow ', 'readOnly': True, 'enum': ['requested', 'acknowledged']}}}}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'The email address which this case originated from. Only present if flag MAIL_UPDATE is set. '}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Creation time of this case (in ISO-8601 time format) '}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Last updated time of this case (in ISO-8601 time format). '}, 'closedTime': {'type': 'str', 'position': 0, 'description': 'Close time of this case (in ISO-8601 time format), or null if not closed. '}, 'descriptionTime': {'type': 'str', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in ISO-8601 time format). '}, 'publishedTime': {'type': 'str', 'position': 0, 'description': 'Publish time of this case (in ISO-8601 time format), or null if not published. '}, 'options': ['securityIncident', 'operationalIncident', 'informational', 'change']}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
update_case_watcher = {'tags': ['cases/v2/case'], 'summary': 'Update settings for a specific watcher on a case (PUBLIC)', 'description': '', 'operationId': 'updateCaseWatcher', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'watcherID', 'in': 'path', 'description': 'Watcher ID', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Watcher update request', 'required': False, 'schema': {'type': 'object', 'properties': {'verbose': {'type': 'bool', 'position': 0, 'description': 'If set, will enable/disable verbose status for this watcher. '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'contactID': {'type': 'int'}, 'role': {'type': 'str', 'enum': ['contact', 'watcher']}, 'type': 'str', 'destination': {'type': 'string'}, 'minimumPriority': {'type': 'str', 'enum': ['low', 'medium', 'high', 'critical']}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'NEGATIVE_ENTRY', 'VERBOSE', 'DISABLED', 'MERGED']}}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}, 'options': ['sms', 'email']}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
update_watcher_settings = {'tags': ['cases/v2/case'], 'summary': 'Update general watcher settings on a case (PUBLIC)', 'description': '', 'operationId': 'updateWatcherSettings', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'in': 'body', 'name': 'body', 'description': 'Watcher settings request', 'required': False, 'schema': {'type': 'object', 'required': ['defaultWatchers'], 'properties': {'defaultWatchers': {'type': 'bool', 'position': 0, 'description': 'If set, will enable/disable use of default watchers on this case. '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['accessMode', 'closedByUser', 'closedTimestamp', 'createdByUser', 'createdTime', 'createdTimestamp', 'currentUserAccess', 'customer', 'description', 'descriptionTimestamp', 'initialPriority', 'initialStatus', 'lastUpdatedByUser', 'lastUpdatedTime', 'lastUpdatedTimestamp', 'priority', 'publishedByUser', 'publishedTimestamp', 'reporter', 'service', 'status', 'subject', 'type'], 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'service': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'category': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'type': 'str', 'initialStatus': {'type': 'str', 'position': 0, 'description': 'The initial status this case was assigned on create. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'status': {'type': 'str', 'position': 0, 'description': 'The current status of this case. ', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'initialPriority': {'type': 'str', 'position': 0, 'description': 'The initial priority this case was assigned on create. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'priority': {'type': 'str', 'position': 0, 'description': 'The current priority of this case. ', 'enum': ['low', 'medium', 'high', 'critical']}, 'subject': {'type': 'str', 'position': 0, 'description': 'Subject of this case. '}, 'description': {'type': 'str', 'position': 0, 'description': 'Textual description of this case. Contains sanitized HTML. '}, 'customerReference': {'type': 'str', 'position': 0, 'description': 'If set, this contains a customer reference of this case. '}, 'accessMode': {'type': 'str', 'position': 0, 'description': 'Access mode of this case. ', 'enum': ['roleBased', 'readRestricted', 'writeRestricted', 'explicit']}, 'reporter': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'assignedTech': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Creation timestamp of this case (in millis since epoch). '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Last update timestamp of this case (in millis since epoch). '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'closedTimestamp': {'type': 'int', 'position': 0, 'description': 'The most recent closing timestamp of this case (in millis since epoch), or 0 if not closed. '}, 'closedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'publishedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp this case was published (in millis since epoch), or 0 if not published. '}, 'descriptionTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in millis since epoch). '}, 'publishedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'EXTERNAL_SYNC', 'HAS_ATTACHMENT', 'INTERNAL', 'MAIL_UPDATE', 'MERGED', 'NOTIFIED', 'PUBLISHED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_OTHER_USER', 'DEFAULT_CONTACTS', 'DESCRIPTION_EDITED', 'SUBMITTED_BY_TECH', 'SUBJECT_EDITED', 'HAS_EVENTS', 'TEST_DATA']}}, 'currentUserAccess': {'type': 'dict', 'properties': {'level': {'type': 'str', 'position': 0, 'description': 'The current users access level on this case. ', 'readOnly': True, 'enum': ['read', 'write', 'owner']}, 'role': {'type': 'str', 'position': 0, 'description': 'The current users access role on this case. ', 'readOnly': True, 'enum': ['user', 'tech', 'admin']}}}, 'workflows': {'type': 'list', 'position': 0, 'description': 'If requested by client, workflows contains a summary of active workflows on this case. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'workflow': {'type': 'str', 'position': 0, 'description': 'The name of the workflow ', 'readOnly': True, 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, 'state': {'type': 'str', 'position': 0, 'description': 'The state of the workflow ', 'readOnly': True, 'enum': ['requested', 'acknowledged']}}}}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'The email address which this case originated from. Only present if flag MAIL_UPDATE is set. '}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Creation time of this case (in ISO-8601 time format) '}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Last updated time of this case (in ISO-8601 time format). '}, 'closedTime': {'type': 'str', 'position': 0, 'description': 'Close time of this case (in ISO-8601 time format), or null if not closed. '}, 'descriptionTime': {'type': 'str', 'position': 0, 'description': 'The timestamp of the last change of the description of this case (in ISO-8601 time format). '}, 'publishedTime': {'type': 'str', 'position': 0, 'description': 'Publish time of this case (in ISO-8601 time format), or null if not published. '}, 'options': ['securityIncident', 'operationalIncident', 'informational', 'change']}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
update_workflow = {'tags': ['cases/v2/case'], 'summary': 'Update workflow on case (PUBLIC)', 'description': '', 'operationId': 'updateWorkflow', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'workflow', 'in': 'path', 'description': 'Workflow to update', 'required': True, 'type': 'str', 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, {'in': 'body', 'name': 'body', 'description': 'Workflow request details', 'required': False, 'schema': {'type': 'object', 'properties': {'requestComment': {'type': 'str', 'position': 0, 'description': 'If set, modify request comment. Html is allowed, will be sanitized.  => format:html'}, 'acknowledgedComment': {'type': 'str', 'position': 0, 'description': 'If set, modify acknowledged comment. Html is allowed, will be sanitized.  => format:html'}, 'externalReference': {'type': 'str', 'position': 0, 'description': 'If set, modify external reference. Should be a link or an issue number. Empty string will delete existing reference. '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['workflow'], 'properties': {'id': {'type': 'str'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'workflow': {'type': 'str', 'position': 0, 'description': 'Name of workflow. ', 'enum': ['validation', 'tuning', 'escalation', 'customerUpdate', 'escalateTI', 'escalateNSA', 'escalateLog', 'escalateInfra', 'escalateMSI', 'severityAlert', 'slaViolation', 'internalSlaViolation', 'delegateToSOC', 'escalateDEV', 'escalateTRS', 'escalateMSSAnalyst']}, 'acknowledgedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'acknowledgedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time when this workflow was acknowledged, or 0 if not acknowledged. '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'PUBLIC_REQUEST_COMMENT', 'PUBLIC_ACKNOWLEDGED_COMMENT']}}, 'requestComment': {'type': 'str', 'position': 0, 'description': 'Comment set when requesting this workflow. May contain sanitized HTML. '}, 'acknowledgedComment': {'type': 'str', 'position': 0, 'description': 'Comment set for acknowledging this workflow. May contain sanitized HTML. '}, 'externalReference': {'type': 'str', 'position': 0, 'description': 'An external reference for this workflow. '}, 'state': {'type': 'str', 'position': 0, 'description': 'The state of the workflow ', 'enum': ['requested', 'acknowledged']}, 'acknowledgedTime': {'type': 'str', 'position': 0, 'description': 'Time when this workflow was acknowledged (in ISO-8601 time format) '}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
upload_attachment_fragment = {'tags': ['cases/v2/case'], 'summary': 'Upload fragment of an attachment (DEV)', 'description': 'Fragments must be uploaded in correct order', 'operationId': 'uploadAttachmentFragment', 'consumes': ['*'], 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'attachmentID', 'in': 'path', 'description': 'Attachment ID', 'required': True, 'type': 'str'}, {'name': 'idx', 'in': 'path', 'description': 'Attachment Fragment Index', 'required': True, 'type': 'int', 'minimum': 0}, {'in': 'body', 'name': 'body', 'required': False, 'schema': {'type': 'object'}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'name': {'type': 'str', 'position': 0, 'description': 'Attachment file name '}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'Attachment mimetype '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MERGED', 'ZIP_ENCRYPTED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_TECH', 'MAIL_UPDATE', 'INCOMPLETE']}}, 'size': {'type': 'int', 'position': 0, 'description': 'Attachment file size (in bytes) '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'Attachment checksum '}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'Attachment origin email address (only present if attachment is marked as a mail update) '}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
upload_streaming_attachment = {'tags': ['cases/v2/case'], 'summary': 'Add new attachment (PUBLIC)', 'description': 'Upload new attachment as data stream', 'operationId': 'uploadStreamingAttachment', 'consumes': ['*'], 'produces': ['application/json'], 'parameters': [{'name': 'caseID', 'in': 'path', 'description': 'Case ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'filename', 'in': 'path', 'description': 'Attachment filename', 'required': True, 'type': 'str'}, {'name': 'Content-Type', 'in': 'header', 'description': 'Mime type', 'required': False, 'type': 'string'}, {'name': 'encryptedZip', 'in': 'query', 'description': 'If true, mark attachment as an encrypted zipfile', 'required': False, 'type': 'bool'}, {'name': 'skipNotification', 'in': 'query', 'description': 'If true, skip notification', 'required': False, 'type': 'bool'}, {'name': 'originEmailAddress', 'in': 'query', 'description': 'If set, mark attachment with this origin email address', 'required': False, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Attachment data', 'required': False, 'schema': {'type': 'object'}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'addedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this value was added (in millis since epoch) '}, 'addedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'name': {'type': 'str', 'position': 0, 'description': 'Attachment file name '}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'Attachment mimetype '}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED', 'MERGED', 'ZIP_ENCRYPTED', 'SUBMITTED_BY_ANONYMOUS_USER', 'SUBMITTED_BY_TECH', 'MAIL_UPDATE', 'INCOMPLETE']}}, 'size': {'type': 'int', 'position': 0, 'description': 'Attachment file size (in bytes) '}, 'sha256': {'type': 'str', 'position': 0, 'description': 'Attachment checksum '}, 'originEmailAddress': {'type': 'str', 'position': 0, 'description': 'Attachment origin email address (only present if attachment is marked as a mail update) '}, 'addedTime': {'type': 'str', 'position': 0, 'description': 'Time when this value was added (in ISO-8601 time format) '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}