"""Autogenerated API schema"""
from argus_api import session


add_customer_service_subscription = {'tags': ['cases/v2/servicesubscription'], 'summary': 'Subscribe a customer to a service (INTERNAL)', 'description': '', 'operationId': 'addCustomerServiceSubscription', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Subscription request', 'required': False, 'schema': {'type': 'object', 'required': ['customer', 'service'], 'properties': {'customer': {'type': 'str', 'position': 0, 'description': 'Shortname or ID of customer to subscribe for '}, 'service': {'type': 'str', 'position': 0, 'description': 'Shortname or ID of service to subscribe to '}, 'fieldPolicy': {'type': 'str', 'position': 0, 'description': 'If set, set the field policy to use for this subscription. This will override the field policy set for the service. '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this subscription was created '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this subscription was last updated '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'service': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'fieldPolicy': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'position': 0, 'description': 'The policy name ', 'readOnly': True}}}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Time when this subscription was created (in ISO-8601 time format) '}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Time when this subscription was last updated (in ISO-8601 time format) '}, 'currentUserAccess': {'type': 'dict', 'properties': {'level': {'type': 'str', 'position': 0, 'description': 'The current users access level on this case. ', 'readOnly': True, 'enum': ['read', 'write']}, 'role': {'type': 'str', 'position': 0, 'description': 'The current users access role on this case. ', 'readOnly': True, 'enum': ['user', 'tech', 'admin']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
delete_customer_service_subscription = {'tags': ['cases/v2/servicesubscription'], 'summary': 'Remove service subscription (INTERNAL)', 'description': '', 'operationId': 'deleteCustomerServiceSubscription', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'Subscription ID', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this subscription was created '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this subscription was last updated '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'service': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'fieldPolicy': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'position': 0, 'description': 'The policy name ', 'readOnly': True}}}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Time when this subscription was created (in ISO-8601 time format) '}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Time when this subscription was last updated (in ISO-8601 time format) '}, 'currentUserAccess': {'type': 'dict', 'properties': {'level': {'type': 'str', 'position': 0, 'description': 'The current users access level on this case. ', 'readOnly': True, 'enum': ['read', 'write']}, 'role': {'type': 'str', 'position': 0, 'description': 'The current users access role on this case. ', 'readOnly': True, 'enum': ['user', 'tech', 'admin']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_subscriptions = {'tags': ['cases/v2/servicesubscription'], 'summary': 'List service subscriptions. This endpoint will list all service subscriptions for customers and services the user has read access for. For customers which the user has permission viewAllCustomerServices, all services will be listed, regardless of service read access. (INTERNAL)', 'description': '', 'operationId': 'listSubscriptions', 'produces': ['application/json'], 'parameters': [{'name': 'customerID', 'in': 'query', 'required': False, 'type': 'list', 'items': {'type': 'int'}, 'collectionFormat': 'multi'}, {'name': 'customer', 'in': 'query', 'description': 'Limit result to specified list of customers (by shortname or id)', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'service', 'in': 'query', 'description': 'Limit result to specified list of services (by id or shortname)', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this subscription was created '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this subscription was last updated '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'service': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'fieldPolicy': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'position': 0, 'description': 'The policy name ', 'readOnly': True}}}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Time when this subscription was created (in ISO-8601 time format) '}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Time when this subscription was last updated (in ISO-8601 time format) '}, 'currentUserAccess': {'type': 'dict', 'properties': {'level': {'type': 'str', 'position': 0, 'description': 'The current users access level on this case. ', 'readOnly': True, 'enum': ['read', 'write']}, 'role': {'type': 'str', 'position': 0, 'description': 'The current users access role on this case. ', 'readOnly': True, 'enum': ['user', 'tech', 'admin']}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
update_customer_service_subscription = {'tags': ['cases/v2/servicesubscription'], 'summary': 'Update service subscription (INTERNAL)', 'description': '', 'operationId': 'updateCustomerServiceSubscription', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'Subscription ID', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Subscription update request', 'required': False, 'schema': {'type': 'object', 'properties': {'fieldPolicy': {'type': 'str', 'position': 0, 'description': 'If set, change the field policy to use for this subscription. This will override the field policy set for the service. '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this subscription was created '}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this subscription was last updated '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}, 'userName': {'type': 'string'}, 'name': {'type': 'string'}, 'customerID': {'type': 'int'}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['DELETED']}}, 'service': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'readOnly': True}, 'shortName': {'type': 'str', 'readOnly': True}, 'localizedName': {'type': 'str', 'readOnly': True}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'fieldPolicy': {'type': 'dict', 'properties': {'id': {'type': 'str', 'readOnly': True}, 'name': {'type': 'str', 'position': 0, 'description': 'The policy name ', 'readOnly': True}}}, 'createdTime': {'type': 'str', 'position': 0, 'description': 'Time when this subscription was created (in ISO-8601 time format) '}, 'lastUpdatedTime': {'type': 'str', 'position': 0, 'description': 'Time when this subscription was last updated (in ISO-8601 time format) '}, 'currentUserAccess': {'type': 'dict', 'properties': {'level': {'type': 'str', 'position': 0, 'description': 'The current users access level on this case. ', 'readOnly': True, 'enum': ['read', 'write']}, 'role': {'type': 'str', 'position': 0, 'description': 'The current users access role on this case. ', 'readOnly': True, 'enum': ['user', 'tech', 'admin']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}