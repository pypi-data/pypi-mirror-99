"""Autogenerated API schema"""
from argus_api import session


create_location = {'tags': ['sensors/v1'], 'summary': 'Creates a location (DEV)', 'description': '', 'operationId': 'createLocation', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': "Create request for a sensor's location.", 'required': False, 'schema': {'type': 'object', 'required': ['customerID', 'name', 'shortName', 'timeZoneDescription'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name of some physical location  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Short name of some physical location  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'networkZone': {'type': 'str', 'position': 0, 'description': 'Network zone for some physical location ', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'customerID': {'type': 'int', 'position': 0, 'description': 'CustomerID for some physical location ', 'minimum': 0}, 'timeZoneDescription': {'type': 'str', 'position': 0, 'description': 'TimeZone description for some physical location (default Europe/Oslo)'}}}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'customerInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'timeZone': {'type': 'dict', 'properties': {'description': {'type': 'string'}}}, 'internal': {'type': 'boolean'}, 'external': {'type': 'boolean'}, 'zone': {'type': 'str', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'dmz': {'type': 'boolean'}, 'globalCustomer': {'type': 'boolean'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ZONE_DMZ', 'ZONE_EXTERNAL', 'ZONE_INTERNAL']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
delete_location = {'tags': ['sensors/v1'], 'summary': 'Deletes location (DEV)', 'description': '', 'operationId': 'deleteLocation', 'produces': ['application/json'], 'parameters': [{'name': 'idOrShortName', 'in': 'path', 'description': 'ID or short name of location to delete', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'customerInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'timeZone': {'type': 'dict', 'properties': {'description': {'type': 'string'}}}, 'internal': {'type': 'boolean'}, 'external': {'type': 'boolean'}, 'zone': {'type': 'str', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'dmz': {'type': 'boolean'}, 'globalCustomer': {'type': 'boolean'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ZONE_DMZ', 'ZONE_EXTERNAL', 'ZONE_INTERNAL']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Location not found'}, '412': {'description': 'Validation error'}}}
find_locations = {'tags': ['sensors/v1'], 'summary': 'Search locations (DEV)', 'description': '', 'operationId': 'findLocations', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'required': False, 'schema': {'type': 'object', 'properties': {'searchString': {'type': 'string'}, 'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. By default, no restriction on result set size. '}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object. '}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects. '}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'searchString': {'type': 'string'}, 'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. By default, no restriction on result set size. '}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object. '}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects. '}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR. ', 'uniqueItems': True, 'items': []}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. '}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers. ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Only include objects which have includeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ZONE_DMZ', 'ZONE_EXTERNAL', 'ZONE_INTERNAL']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Exclude objects which have excludeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ZONE_DMZ', 'ZONE_EXTERNAL', 'ZONE_INTERNAL']}}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. '}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}, 'customerID': {'type': 'list', 'position': 0, 'description': 'Restrict search to data belonging to specified customers. ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Only include objects which have includeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ZONE_DMZ', 'ZONE_EXTERNAL', 'ZONE_INTERNAL']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Exclude objects which have excludeFlags set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ZONE_DMZ', 'ZONE_EXTERNAL', 'ZONE_INTERNAL']}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'customerInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'timeZone': {'type': 'dict', 'properties': {'description': {'type': 'string'}}}, 'internal': {'type': 'boolean'}, 'external': {'type': 'boolean'}, 'zone': {'type': 'str', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'dmz': {'type': 'boolean'}, 'globalCustomer': {'type': 'boolean'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ZONE_DMZ', 'ZONE_EXTERNAL', 'ZONE_INTERNAL']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
get_location = {'tags': ['sensors/v1'], 'summary': 'Fetch Location by ID or short name (DEV)', 'description': '', 'operationId': 'getLocation', 'produces': ['application/json'], 'parameters': [{'name': 'idOrShortName', 'in': 'path', 'description': 'ID or short name of location to fetch', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'customerInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'timeZone': {'type': 'dict', 'properties': {'description': {'type': 'string'}}}, 'internal': {'type': 'boolean'}, 'external': {'type': 'boolean'}, 'zone': {'type': 'str', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'dmz': {'type': 'boolean'}, 'globalCustomer': {'type': 'boolean'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ZONE_DMZ', 'ZONE_EXTERNAL', 'ZONE_INTERNAL']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_locations = {'tags': ['sensors/v1'], 'summary': 'List locations (DEV)', 'description': '', 'operationId': 'listLocations', 'produces': ['application/json'], 'parameters': [{'name': 'customerID', 'in': 'query', 'description': 'Limit search to these customer IDs', 'required': False, 'type': 'list', 'items': {'type': 'int'}, 'collectionFormat': 'multi'}, {'name': 'limit', 'in': 'query', 'description': 'Limit results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Offset results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'customerInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'timeZone': {'type': 'dict', 'properties': {'description': {'type': 'string'}}}, 'internal': {'type': 'boolean'}, 'external': {'type': 'boolean'}, 'zone': {'type': 'str', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'dmz': {'type': 'boolean'}, 'globalCustomer': {'type': 'boolean'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ZONE_DMZ', 'ZONE_EXTERNAL', 'ZONE_INTERNAL']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
update_location = {'tags': ['sensors/v1'], 'summary': 'Updates location (DEV)', 'description': '', 'operationId': 'updateLocation', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'idOrShortName', 'in': 'path', 'description': 'ID or short name of location to update', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': "Update request for a sensor's location.", 'required': False, 'schema': {'type': 'object', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name of some physical location  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Short name of some physical location  => Sanitize by regex (?!^\\d+$)^[a-z0-9\\-]+'}, 'networkZone': {'type': 'str', 'position': 0, 'description': 'Network zone for some physical location ', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'timeZoneIdOrName': {'type': 'str', 'position': 0, 'description': 'TimeZone description or ID for some physical location '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'customerInfo': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}, 'timeZone': {'type': 'dict', 'properties': {'description': {'type': 'string'}}}, 'internal': {'type': 'boolean'}, 'external': {'type': 'boolean'}, 'zone': {'type': 'str', 'enum': ['INTERNAL', 'EXTERNAL', 'DMZ', 'UNKNOWN']}, 'dmz': {'type': 'boolean'}, 'globalCustomer': {'type': 'boolean'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ZONE_DMZ', 'ZONE_EXTERNAL', 'ZONE_INTERNAL']}}}}}}}, '220': {'description': 'No update performed'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}