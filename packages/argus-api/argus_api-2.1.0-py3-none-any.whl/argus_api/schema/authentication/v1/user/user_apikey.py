"""Autogenerated API schema"""
from argus_api import session


disable_method_for_user = {'tags': ['authentication/v1'], 'summary': 'Disable an authentication method for a user (PUBLIC)', 'description': '', 'operationId': 'disableMethodForUser', 'produces': ['application/json'], 'parameters': [{'name': 'userID', 'in': 'path', 'description': 'ID of user to modify', 'required': True, 'type': 'int'}, {'name': 'method', 'in': 'path', 'description': 'Authentication method to enable', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'method': {'type': 'str', 'position': 0, 'description': 'Authentication method ', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'RADIUS', 'TOTP', 'OTP', 'APIKEY', 'LDAP', 'IMPERSONATED']}, 'lastLoginTimestamp': {'type': 'int', 'position': 0, 'description': 'Last login time in ms '}, 'lastLoginIP': {'type': 'str', 'position': 0, 'description': 'Last login IP '}, 'initialized': {'type': 'bool', 'position': 0, 'description': 'Whether method has been initialized '}, 'settings': {'type': 'dict', 'position': 0, 'description': 'Authentication method settings ', 'additionalProperties': {'type': 'object'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'User not found'}, '412': {'description': 'Validation failed'}}}
download_public_key = {'tags': ['authentication/v1'], 'summary': 'Download user public key (INTERNAL)', 'description': '', 'operationId': 'downloadPublicKey', 'produces': ['application/octet-stream'], 'parameters': [{'name': 'userID', 'in': 'path', 'description': 'User ID', 'required': True, 'type': 'int'}], 'responses': {'401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
enable_method_for_user = {'tags': ['authentication/v1'], 'summary': 'Enable an authentication method for a user (PUBLIC)', 'description': '', 'operationId': 'enableMethodForUser', 'produces': ['application/json'], 'parameters': [{'name': 'userID', 'in': 'path', 'description': 'ID of user to modify', 'required': True, 'type': 'int'}, {'name': 'method', 'in': 'path', 'description': 'Authentication method to enable', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'method': {'type': 'str', 'position': 0, 'description': 'Authentication method ', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'RADIUS', 'TOTP', 'OTP', 'APIKEY', 'LDAP', 'IMPERSONATED']}, 'lastLoginTimestamp': {'type': 'int', 'position': 0, 'description': 'Last login time in ms '}, 'lastLoginIP': {'type': 'str', 'position': 0, 'description': 'Last login IP '}, 'initialized': {'type': 'bool', 'position': 0, 'description': 'Whether method has been initialized '}, 'settings': {'type': 'dict', 'position': 0, 'description': 'Authentication method settings ', 'additionalProperties': {'type': 'object'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'User not found'}, '412': {'description': 'Validation failed'}}}
evict_signature_session = {'tags': ['authentication/v1'], 'summary': 'Evict user signature session (INTERNAL)', 'description': '', 'operationId': 'evictSignatureSession', 'produces': ['application/json'], 'parameters': [{'name': 'userID', 'in': 'path', 'description': 'User ID', 'required': True, 'type': 'int', 'minimum': 1}, {'name': 'keyID', 'in': 'query', 'description': 'Key to clear session for. If not specified, the session will be cleared for all keys', 'required': False, 'type': 'int'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'evictedKeys': {'type': 'list', 'position': 0, 'description': 'The list of evicted key hashes ', 'uniqueItems': True, 'items': {'type': 'string'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
get_user_methods = {'tags': ['authentication/v1'], 'summary': 'List authentication methods enabled for a specified user (PUBLIC)', 'description': '', 'operationId': 'getUserMethods', 'produces': ['application/json'], 'parameters': [{'name': 'userId', 'in': 'path', 'description': 'User to fetch methods for', 'required': True, 'type': 'int'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'method': {'type': 'str', 'position': 0, 'description': 'Authentication method ', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'RADIUS', 'TOTP', 'OTP', 'APIKEY', 'LDAP', 'IMPERSONATED']}, 'lastLoginTimestamp': {'type': 'int', 'position': 0, 'description': 'Last login time in ms '}, 'lastLoginIP': {'type': 'str', 'position': 0, 'description': 'Last login IP '}, 'initialized': {'type': 'bool', 'position': 0, 'description': 'Whether method has been initialized '}, 'settings': {'type': 'dict', 'position': 0, 'description': 'Authentication method settings ', 'additionalProperties': {'type': 'object'}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'User not found'}}}
initiate = {'tags': ['authentication/v1'], 'summary': 'Initiate a new user APIkey (PUBLIC)', 'description': 'API keys are bound to a limited IP range. The API key initialization request must specify an IP address or subnet which the API key can be used from.Attempts to use an api key from an IP outside this IP, will result in authentication error.\n\nTo allow authentication from different IPs, issue multiple API keys.\n\nThe initiation request returns the API key, in the format it can be used both in the Argus-API-Key header, or when initiating a durable session (/apikey/authenticate).\n\nThe API key cannot be retrieved at a later stage. If the key is lost, it should be deletedand a new key should be issued.', 'operationId': 'initiate', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'userID', 'in': 'path', 'description': 'ID of user', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'API key request', 'required': False, 'schema': {'type': 'object', 'required': ['description'], 'properties': {'description': {'type': 'str', 'description': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'validSources': {'type': 'str', 'description': 'Client IP/CIDR networks which the api key will be valid for.'}, 'disableSourceRestriction': {'type': 'bool', 'position': 0, 'description': 'Request API-key without source restriction. If key without source restriction is not permitted, a 412 error will be returned. (default false)', 'default': False}, 'expirationDays': {'type': 'int', 'position': 0, 'description': 'Requested expiration days, default is 3 months. If the requested expiration exceeds the permitted expiration period, a 412 error will be returned. '}, 'disableExpiration': {'type': 'bool', 'position': 0, 'description': 'Request API-key with unlimited expiration. If unlimited expiration is not permitted, a 412 error will be returned. (default false)', 'default': False}, 'sessionConstraints': {'type': 'dict', 'properties': {'customerID': {'type': 'list', 'position': 0, 'description': 'List of customers to constrain this session to. Default is all available customers. ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'function': {'type': 'list', 'position': 0, 'description': 'List of functions (by name) to constrain this session to. Default is all available functions. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'functionID': {'type': 'list', 'position': 0, 'description': 'List of functions (by ID) to constrain this session to. Default is all available functions. ', 'uniqueItems': True, 'items': {'type': 'int'}}}}}}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'keyDescriptor': {'type': 'dict', 'properties': {'description': {'type': 'str', 'position': 0, 'description': 'Key description '}, 'validSources': {'type': 'list', 'position': 0, 'description': 'Client IP/CIDR networks which the api key will be valid for. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'validUntil': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key expires. If value is 0, key never expires. '}, 'lastUsedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key was last used. '}, 'lastUsedIP': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'constraints': {'type': 'dict', 'properties': {'customers': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}}, 'functions': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name '}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description '}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level ', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}}}}, 'prefix': {'type': 'str', 'position': 0, 'description': 'Key prefix '}}}, 'apiKeyString': {'type': 'string'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
initiate_2 = {'tags': ['authentication/v1'], 'summary': 'Initiate a new TOTP generator for the user (PUBLIC)', 'description': 'TOTP authentication requires a TOTP generator to be set up for the user.\n\nThis operation allows the administrator to set up a TOTP generator for the given user.\nNormally this should be done by the user, using the /totp resource.\nThe TOTP generator code retrieved cannot be retrieved again. It should be added directly to the TOTP generator, and should not be stored elsewhere.', 'operationId': 'initiate_2', 'produces': ['application/json'], 'parameters': [{'name': 'userID', 'in': 'path', 'description': 'User ID', 'required': True, 'type': 'int'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'userName': {'type': 'string'}, 'passCodeLength': {'type': 'int'}, 'keyAlgorithm': {'type': 'string'}, 'seedBase64': {'type': 'string'}, 'seedBase32': {'type': 'string'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
list = {'tags': ['authentication/v1'], 'summary': 'List user API keys (PUBLIC)', 'description': '', 'operationId': 'list', 'produces': ['application/json'], 'parameters': [{'name': 'userID', 'in': 'path', 'description': 'ID of user', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'keys': {'type': 'list', 'items': {'type': 'dict', 'properties': {'description': {'type': 'str', 'position': 0, 'description': 'Key description '}, 'validSources': {'type': 'list', 'position': 0, 'description': 'Client IP/CIDR networks which the api key will be valid for. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'validUntil': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key expires. If value is 0, key never expires. '}, 'lastUsedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key was last used. '}, 'lastUsedIP': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'constraints': {'type': 'dict', 'properties': {'customers': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}}, 'functions': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name '}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description '}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level ', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}}}}, 'prefix': {'type': 'str', 'position': 0, 'description': 'Key prefix '}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
list_public_keys = {'tags': ['authentication/v1'], 'summary': 'List enrolled keys (INTERNAL)', 'description': '', 'operationId': 'listPublicKeys', 'produces': ['application/json'], 'parameters': [{'name': 'userID', 'in': 'path', 'description': 'User ID', 'required': True, 'type': 'int'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of values to return', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip this number of records', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'keys': {'type': 'list', 'position': 0, 'description': 'List of enrolled keys ', 'items': {'type': 'dict', 'properties': {'keyID': {'type': 'int', 'position': 0, 'description': 'The key ID (to use in signature headers) '}, 'type': 'str', 'description': {'type': 'str', 'position': 0, 'description': 'A description or name for this key '}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this key was created '}, 'lastUsedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this key was last used '}, 'lastUsedSourceIP': {'type': 'str', 'position': 0, 'description': 'The source IP this key was last used from '}, 'options': ['argus', 'webauthn', 'android', 'iphone']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
renew = {'tags': ['authentication/v1'], 'summary': 'Renew existing user APIkey', 'description': 'API keys have limited validity. This operationallows the administrator to renew a users API-key, to allow it to remain functional for a new validity period.', 'operationId': 'renew', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'userID', 'in': 'path', 'description': 'ID of user', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'name': 'prefix', 'in': 'path', 'description': 'Key prefix', 'required': True, 'type': 'str', 'pattern': '[a-z0-9]+/[a-z0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Additional request parameters', 'required': False, 'schema': {'type': 'object', 'properties': {'expirationDays': {'type': 'int', 'position': 0, 'description': 'Requested expiration days, 0 means unlimited. Default is 3 months. If user does not have permissions to specify expiration period, an error will be returned. ', 'minimum': 0}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'renewedKey': {'type': 'dict', 'properties': {'description': {'type': 'str', 'position': 0, 'description': 'Key description '}, 'validSources': {'type': 'list', 'position': 0, 'description': 'Client IP/CIDR networks which the api key will be valid for. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'validUntil': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key expires. If value is 0, key never expires. '}, 'lastUsedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key was last used. '}, 'lastUsedIP': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'constraints': {'type': 'dict', 'properties': {'customers': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}}, 'functions': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name '}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description '}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level ', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}}}}, 'prefix': {'type': 'str', 'position': 0, 'description': 'Key prefix '}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
renew_1 = {'tags': ['authentication/v1'], 'summary': 'null (PUBLIC)', 'operationId': 'renew_1', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'userID', 'in': 'path', 'description': 'ID of user', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'name': 'keyID', 'in': 'path', 'description': 'Key ID', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Additional request parameters', 'required': False, 'schema': {'type': 'object', 'properties': {'expirationDays': {'type': 'int', 'position': 0, 'description': 'Requested expiration days, 0 means unlimited. Default is 3 months. If user does not have permissions to specify expiration period, an error will be returned. ', 'minimum': 0}}}}], 'responses': {'default': {'description': 'successful operation'}}, 'deprecated': True}
reset_and_download_private_key = {'tags': ['authentication/v1'], 'summary': 'Reset and download user private key (INTERNAL)', 'description': '', 'operationId': 'resetAndDownloadPrivateKey', 'produces': ['application/octet-stream', 'application/json'], 'parameters': [{'name': 'userID', 'in': 'path', 'description': 'User ID', 'required': True, 'type': 'int'}], 'responses': {'401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
retrieve_s_m_s_token = {'tags': ['authentication/v1'], 'summary': 'Retrieve the SMS code sent to user (PUBLIC)', 'description': 'SMS authentication depends on the verification code sent to the user by SMS reachingthe user. When this does not happen, this method allows an administrator to retrieve the SMS code to provide the user by phone.\n\nTo retrieve the token, the user must provide the administrator with thesession token printed in the browser in the SMS code input screen.', 'operationId': 'retrieveSMSToken', 'produces': ['application/json'], 'parameters': [{'name': 'userID', 'in': 'path', 'description': 'User ID', 'required': True, 'type': 'int'}, {'name': 'tokenSuffix', 'in': 'path', 'description': 'Token suffix', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'userID': {'type': 'int'}, 'sessionCookie': {'type': 'string'}, 'token': {'type': 'string'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
revoke = {'tags': ['authentication/v1'], 'summary': 'Delete existing user APIkey (PUBLIC)', 'description': '', 'operationId': 'revoke', 'produces': ['application/json'], 'parameters': [{'name': 'userID', 'in': 'path', 'description': 'ID of user', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'name': 'keyID', 'in': 'path', 'description': 'Key ID', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'revokedKey': {'type': 'dict', 'properties': {'description': {'type': 'str', 'position': 0, 'description': 'Key description '}, 'validSources': {'type': 'list', 'position': 0, 'description': 'Client IP/CIDR networks which the api key will be valid for. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'validUntil': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key expires. If value is 0, key never expires. '}, 'lastUsedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key was last used. '}, 'lastUsedIP': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'constraints': {'type': 'dict', 'properties': {'customers': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}}, 'functions': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name '}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description '}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level ', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}}}}, 'prefix': {'type': 'str', 'position': 0, 'description': 'Key prefix '}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
revoke_1 = {'tags': ['authentication/v1'], 'summary': 'Delete existing user APIkey', 'description': '', 'operationId': 'revoke_1', 'produces': ['application/json'], 'parameters': [{'name': 'userID', 'in': 'path', 'description': 'ID of user', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'name': 'prefix', 'in': 'path', 'description': 'Key Prefix', 'required': True, 'type': 'str', 'pattern': '[a-z0-9]+/[a-z0-9]+'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'revokedKey': {'type': 'dict', 'properties': {'description': {'type': 'str', 'position': 0, 'description': 'Key description '}, 'validSources': {'type': 'list', 'position': 0, 'description': 'Client IP/CIDR networks which the api key will be valid for. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'validUntil': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key expires. If value is 0, key never expires. '}, 'lastUsedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key was last used. '}, 'lastUsedIP': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'constraints': {'type': 'dict', 'properties': {'customers': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}}, 'functions': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name '}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description '}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level ', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}}}}, 'prefix': {'type': 'str', 'position': 0, 'description': 'Key prefix '}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
revoke_4 = {'tags': ['authentication/v1'], 'summary': 'Revoke the current TOTP generator for the user (PUBLIC)', 'description': 'This operation invalidates the current generator config for the user.\nThe user will need to re-initialize the TOTP generator to be able to log inusing TOTP.', 'operationId': 'revoke_4', 'produces': ['application/json'], 'parameters': [{'name': 'userID', 'in': 'path', 'description': 'User ID', 'required': True, 'type': 'int'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'object'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
setup = {'tags': ['authentication/v1'], 'summary': 'Configure user LDAP settings (INTERNAL)', 'description': '', 'operationId': 'setup', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'userID', 'in': 'path', 'description': 'User ID', 'required': True, 'type': 'int'}, {'in': 'body', 'name': 'body', 'description': 'LDAP settings', 'required': False, 'schema': {'type': 'object', 'properties': {'userName': {'type': 'str', 'position': 0, 'description': 'LDAP username to set for user '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'object'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
setup_1 = {'tags': ['authentication/v1'], 'summary': 'Configure user RADIUS settings (INTERNAL)', 'description': '', 'operationId': 'setup_1', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'userID', 'in': 'path', 'description': 'User ID', 'required': True, 'type': 'int'}, {'in': 'body', 'name': 'body', 'description': 'RADIUS settings', 'required': False, 'schema': {'type': 'object', 'properties': {'userName': {'type': 'str', 'position': 0, 'description': 'RADIUS username to set for user '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'object'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}