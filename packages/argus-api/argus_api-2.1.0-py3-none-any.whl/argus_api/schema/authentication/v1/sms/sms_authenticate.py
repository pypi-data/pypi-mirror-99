"""Autogenerated API schema"""
from argus_api import session


legacy_s_m_s_authentication = {'tags': ['authentication/v1'], 'summary': 'Initiate a new user session using SMS authentication (PUBLIC)', 'description': 'Requires SMS authentication to be enabled on the server, and for the user. \nUse /methods to check which authentication methods are available on the server.\n\nThis is a 2-step authentication method. The first request should have mode PASSWORD, and carry username and static password.\nThe request will return a challenge, carrying a session cookie.When the SMS code is received, submit a new request with mode VERIFICATION, the username, SMS code (in the passcode) and the session cookie returned in the challenge.This endpoint is deprecated, use /sms/authentication instead.', 'operationId': 'legacySMSAuthentication', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'SMS authentication request', 'required': False, 'schema': {'type': 'object', 'required': ['domain', 'mode', 'passcode', 'userName'], 'properties': {'requestedAuthorizations': {'type': 'list', 'position': 0, 'description': 'Allow client to request authorizations as part of the authentication transaction. The client is not guaranteed to get the requested authorizations. The setPassword authorization is only returned if the current user has the FORCE_PW_CHANGE flag set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['enrollPublicKey', 'setPassword']}}, 'userName': {'type': 'str', 'position': 0, 'description': 'Username to authenticate '}, 'domain': {'type': 'str', 'position': 0, 'description': 'User domain '}, 'mode': {'type': 'str', 'position': 0, 'description': 'Use PASSWORD for initial request, and SMS to respond with SMS code ', 'enum': ['PASSWORD', 'VERIFICATION']}, 'passcode': {'type': 'str', 'position': 0, 'description': 'Password or SMS code '}, 'cookie': {'type': 'str', 'position': 0, 'description': 'When responding with SMS code, set the SMS session cookie returned by challenge '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'clientIP': {'type': 'string'}, 'forwardedIP': {'type': 'string'}, 'uri': {'type': 'string'}, 'requestCredentialsType': {'type': 'str', 'enum': ['sessionToken', 'signature', 'apikey']}, 'requestCredentialsData': {'type': 'string'}}}}}}, '221': {'description': 'Session created, password change required', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': {'type': 'string', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'integer', 'format': 'int64'}}}}, 'data': {'type': 'object', 'properties': {'username': {'type': 'string'}, 'cookie': {'type': 'string'}, 'clientIP': {'type': 'string'}, 'forwardedIP': {'type': 'string'}, 'uri': {'type': 'string'}, 'userID': {'type': 'integer', 'format': 'int64'}, 'domainID': {'type': 'integer', 'format': 'int32'}, 'impersonatingUserID': {'type': 'integer', 'format': 'int64'}, 'scope': {'type': 'string', 'enum': ['SESSION', 'REQUEST']}, 'created': {'type': 'integer', 'format': 'int64'}, 'validUntilTimestamp': {'type': 'integer', 'format': 'int64'}, 'securityLevel': {'type': 'string', 'enum': ['ADMINISTRATIVE', 'DEFAULT', 'EXTERNAL']}, 'authenticationMethod': {'type': 'string', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'RADIUS', 'TOTP', 'OTP', 'APIKEY', 'LDAP', 'IMPERSONATED']}, 'constrained': {'type': 'boolean'}, 'customerConstraints': {'type': 'array', 'uniqueItems': True, 'items': {'type': 'integer', 'format': 'int64'}}, 'functionConstraints': {'type': 'array', 'uniqueItems': True, 'items': {'type': 'integer', 'format': 'int64'}}, 'requestCredentialsData': {'type': 'string'}, 'requestCredentialsType': {'type': 'string', 'enum': ['sessionToken', 'signature', 'apikey']}, 'timestamp': {'type': 'integer', 'format': 'int64'}, 'lastRefreshTimestamp': {'type': 'integer', 'format': 'int64'}, 'createdTimestamp': {'type': 'integer', 'format': 'int64'}, 'sessionKey': {'type': 'string', 'readOnly': True}}}}}}, '401': {'description': 'Authentication failed'}, '206': {'description': 'Authentication challenge, verification required', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': {'type': 'string', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'integer', 'format': 'int64'}}}}, 'data': {'type': 'object', 'properties': {'username': {'type': 'string'}, 'failed': {'type': 'boolean'}, 'cookie': {'type': 'string'}, 'authenticationMethod': {'type': 'string', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'RADIUS', 'TOTP', 'OTP', 'APIKEY', 'LDAP', 'IMPERSONATED']}, 'mode': {'type': 'string', 'enum': ['PASSWORD', 'VERIFICATION']}, 'message': {'type': 'string'}, 'suppressed': {'type': 'array', 'items': {'type': 'object', 'properties': {'cause': {'type': 'object', 'properties': {'cause': [], 'stackTrace': {'type': 'array', 'items': {'type': 'object', 'properties': {'methodName': {'type': 'string'}, 'fileName': {'type': 'string'}, 'lineNumber': {'type': 'integer', 'format': 'int32'}, 'className': {'type': 'string'}, 'nativeMethod': {'type': 'boolean'}}}}, 'message': {'type': 'string'}, 'localizedMessage': {'type': 'string'}, 'suppressed': {'type': 'array', 'items': []}}}, 'stackTrace': {'type': 'array', 'items': {'type': 'object', 'properties': {'methodName': {'type': 'string'}, 'fileName': {'type': 'string'}, 'lineNumber': {'type': 'integer', 'format': 'int32'}, 'className': {'type': 'string'}, 'nativeMethod': {'type': 'boolean'}}}}, 'message': {'type': 'string'}, 'localizedMessage': {'type': 'string'}, 'suppressed': {'type': 'array', 'items': {'type': 'object', 'properties': {'cause': [], 'stackTrace': {'type': 'array', 'items': {'type': 'object', 'properties': {'methodName': {'type': 'string'}, 'fileName': {'type': 'string'}, 'lineNumber': {'type': 'integer', 'format': 'int32'}, 'className': {'type': 'string'}, 'nativeMethod': {'type': 'boolean'}}}}, 'message': {'type': 'string'}, 'localizedMessage': {'type': 'string'}, 'suppressed': {'type': 'array', 'items': []}}}}}}}}}}}}, '412': {'description': 'Validation error'}}, 'deprecated': True}
send_s_m_s_validation_code = {'tags': ['authentication/v1'], 'summary': 'Request an SMS validation token to validate user presence. The returned token must be used when requesting authorization token. (DEV)', 'description': 'This endpoint requires that the current user is logged in using SMS  authentication. Even if the user has SMS authentication enabled, it will not work if the current session was creating using a different authentication method.', 'operationId': 'sendSMSValidationCode', 'produces': ['application/json'], 'parameters': [], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'cookie': {'type': 'str', 'position': 0, 'description': 'A state cookie bound to the requested SMS '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
sms_authentication = {'tags': ['authentication/v1'], 'summary': 'Initiate a new user session using SMS authentication (PUBLIC)', 'description': 'Requires SMS authentication to be enabled on the server, and for the user. \nUse /methods to check which authentication methods are available on the server.\n\nThis is a 2-step authentication method. The first request should have mode PASSWORD, and carry username and static password.\nThe request will return a challenge, carrying a session cookie.When the SMS code is received, submit a new request with mode VERIFICATION, the username, SMS code (in the passcode) and the session cookie returned in the challenge.', 'operationId': 'smsAuthentication', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'SMS authentication request', 'required': False, 'schema': {'type': 'object', 'required': ['domain', 'mode', 'passcode', 'userName'], 'properties': {'requestedAuthorizations': {'type': 'list', 'position': 0, 'description': 'Allow client to request authorizations as part of the authentication transaction. The client is not guaranteed to get the requested authorizations. The setPassword authorization is only returned if the current user has the FORCE_PW_CHANGE flag set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['enrollPublicKey', 'setPassword']}}, 'userName': {'type': 'str', 'position': 0, 'description': 'Username to authenticate '}, 'domain': {'type': 'str', 'position': 0, 'description': 'User domain '}, 'mode': {'type': 'str', 'position': 0, 'description': 'Use PASSWORD for initial request, and SMS to respond with SMS code ', 'enum': ['PASSWORD', 'VERIFICATION']}, 'passcode': {'type': 'str', 'position': 0, 'description': 'Password or SMS code '}, 'cookie': {'type': 'str', 'position': 0, 'description': 'When responding with SMS code, set the SMS session cookie returned by challenge '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['credentials', 'sessionKey'], 'properties': {'credentials': {'type': 'dict', 'properties': {'clientIP': {'type': 'string'}, 'forwardedIP': {'type': 'string'}, 'uri': {'type': 'string'}, 'requestCredentialsType': {'type': 'str', 'enum': ['sessionToken', 'signature', 'apikey']}, 'requestCredentialsData': {'type': 'string'}}}, 'sessionKey': {'type': 'str', 'position': 0, 'description': 'The symmetric key created for this session '}, 'authorizations': {'type': 'list', 'position': 0, 'description': 'Any gratuitous authorization tokens generated during authentication, if requested by the client ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'operation': {'type': 'str', 'position': 0, 'description': 'Operation which is authorized by this token '}, 'authorization': {'type': 'str', 'position': 0, 'description': 'Authorization JWS string '}, 'nextURI': {'type': 'str', 'position': 0, 'description': 'The URI to proceed to, appending the authorization JWS as a query parameter '}, 'expires': {'type': 'int', 'position': 0, 'description': 'The timestamp when this authorization expires '}}}}}}}}}, '221': {'description': 'Session created, password change required', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': {'type': 'string', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'integer', 'format': 'int64'}}}}, 'data': {'type': 'object', 'properties': {'username': {'type': 'string'}, 'cookie': {'type': 'string'}, 'clientIP': {'type': 'string'}, 'forwardedIP': {'type': 'string'}, 'uri': {'type': 'string'}, 'userID': {'type': 'integer', 'format': 'int64'}, 'domainID': {'type': 'integer', 'format': 'int32'}, 'impersonatingUserID': {'type': 'integer', 'format': 'int64'}, 'scope': {'type': 'string', 'enum': ['SESSION', 'REQUEST']}, 'created': {'type': 'integer', 'format': 'int64'}, 'validUntilTimestamp': {'type': 'integer', 'format': 'int64'}, 'securityLevel': {'type': 'string', 'enum': ['ADMINISTRATIVE', 'DEFAULT', 'EXTERNAL']}, 'authenticationMethod': {'type': 'string', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'RADIUS', 'TOTP', 'OTP', 'APIKEY', 'LDAP', 'IMPERSONATED']}, 'constrained': {'type': 'boolean'}, 'customerConstraints': {'type': 'array', 'uniqueItems': True, 'items': {'type': 'integer', 'format': 'int64'}}, 'functionConstraints': {'type': 'array', 'uniqueItems': True, 'items': {'type': 'integer', 'format': 'int64'}}, 'requestCredentialsData': {'type': 'string'}, 'requestCredentialsType': {'type': 'string', 'enum': ['sessionToken', 'signature', 'apikey']}, 'timestamp': {'type': 'integer', 'format': 'int64'}, 'lastRefreshTimestamp': {'type': 'integer', 'format': 'int64'}, 'createdTimestamp': {'type': 'integer', 'format': 'int64'}, 'sessionKey': {'type': 'string', 'readOnly': True}}}}}}, '401': {'description': 'Authentication failed'}, '206': {'description': 'Authentication challenge, verification required', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': {'type': 'string', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'integer', 'format': 'int64'}}}}, 'data': {'type': 'object', 'properties': {'username': {'type': 'string'}, 'failed': {'type': 'boolean'}, 'cookie': {'type': 'string'}, 'authenticationMethod': {'type': 'string', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'RADIUS', 'TOTP', 'OTP', 'APIKEY', 'LDAP', 'IMPERSONATED']}, 'mode': {'type': 'string', 'enum': ['PASSWORD', 'VERIFICATION']}, 'message': {'type': 'string'}, 'suppressed': {'type': 'array', 'items': {'type': 'object', 'properties': {'cause': {'type': 'object', 'properties': {'cause': [], 'stackTrace': {'type': 'array', 'items': {'type': 'object', 'properties': {'methodName': {'type': 'string'}, 'fileName': {'type': 'string'}, 'lineNumber': {'type': 'integer', 'format': 'int32'}, 'className': {'type': 'string'}, 'nativeMethod': {'type': 'boolean'}}}}, 'message': {'type': 'string'}, 'localizedMessage': {'type': 'string'}, 'suppressed': {'type': 'array', 'items': []}}}, 'stackTrace': {'type': 'array', 'items': {'type': 'object', 'properties': {'methodName': {'type': 'string'}, 'fileName': {'type': 'string'}, 'lineNumber': {'type': 'integer', 'format': 'int32'}, 'className': {'type': 'string'}, 'nativeMethod': {'type': 'boolean'}}}}, 'message': {'type': 'string'}, 'localizedMessage': {'type': 'string'}, 'suppressed': {'type': 'array', 'items': {'type': 'object', 'properties': {'cause': [], 'stackTrace': {'type': 'array', 'items': {'type': 'object', 'properties': {'methodName': {'type': 'string'}, 'fileName': {'type': 'string'}, 'lineNumber': {'type': 'integer', 'format': 'int32'}, 'className': {'type': 'string'}, 'nativeMethod': {'type': 'boolean'}}}}, 'message': {'type': 'string'}, 'localizedMessage': {'type': 'string'}, 'suppressed': {'type': 'array', 'items': []}}}}}}}}}}}}, '412': {'description': 'Validation error'}}}
sms_user_authorization = {'tags': ['authentication/v1'], 'summary': 'Request an authorization token using an SMS validation code (DEV)', 'description': 'This endpoint requires that the current user is logged in using SMS  authentication. Even if the user has SMS authentication enabled, it will not work if the current session was creating using a different authentication method.', 'operationId': 'smsUserAuthorization', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'SMS authorization request', 'required': False, 'schema': {'type': 'object', 'required': ['cookie', 'nextURI', 'operation', 'token'], 'properties': {'operation': {'type': 'str', 'position': 0, 'description': 'The name of the operation to authorize '}, 'context': {'type': 'dict', 'position': 0, 'description': 'Context variables to scope this authorization. All context variables required by the executing service must be present and equal to those provided here. ', 'additionalProperties': {'type': 'string'}}, 'nextURI': {'type': 'str', 'position': 0, 'description': 'The URI to redirect/route to after successful authorization. The URI will be validated according to policy. The authorization token returned from successful authorization should be appended as a query parameter to this URI. '}, 'token': {'type': 'str', 'position': 0, 'description': 'The token received via SMS '}, 'cookie': {'type': 'str', 'position': 0, 'description': 'The cookie returned from the send-sms request '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'operation': {'type': 'str', 'position': 0, 'description': 'Operation which is authorized by this token '}, 'authorization': {'type': 'str', 'position': 0, 'description': 'Authorization JWS string '}, 'nextURI': {'type': 'str', 'position': 0, 'description': 'The URI to proceed to, appending the authorization JWS as a query parameter '}, 'expires': {'type': 'int', 'position': 0, 'description': 'The timestamp when this authorization expires '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}