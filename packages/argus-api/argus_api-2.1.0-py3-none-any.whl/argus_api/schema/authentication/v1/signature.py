"""Autogenerated API schema"""
from argus_api import session


enroll_public_key = {'tags': ['authentication/v1'], 'summary': 'Enroll new public key (DEV)', 'description': '', 'operationId': 'enrollPublicKey', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'The key enrollment request', 'required': False, 'schema': {'type': 'object', 'required': ['algorithm', 'authorization', 'challengeID', 'name', 'publicKey', 'type'], 'properties': {'challengeID': {'type': 'str', 'position': 0, 'description': 'ID of the challenge this request is bound to '}, 'type': {'type': 'str', 'position': 0, 'description': 'The type of the key ', 'enum': ['iphone', 'android']}, 'algorithm': {'type': 'str', 'position': 0, 'description': 'The key algorithm ', 'enum': ['EC256']}, 'name': {'type': 'str', 'position': 0, 'description': 'A name to associate with the key '}, 'publicKey': {'type': 'str', 'position': 0, 'description': 'The key material ', 'minLength': 1, 'maxLength': 2147483647}, 'attestationObject': {'type': 'str', 'position': 0, 'description': 'The attestation object (expected format depends on type) '}, 'clientData': {'type': 'str', 'position': 0, 'description': 'The clientData which is attested (expected format depends on type) '}, 'authorization': {'type': 'str', 'position': 0, 'description': "The authorization token to permit enrolling this key. Token must be valid for operation 'publickey.enroll' "}}}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['keyID'], 'properties': {'keyID': {'type': 'int', 'position': 0, 'description': 'ID of the stored key '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
enroll_webauthn_key = {'tags': ['authentication/v1'], 'summary': 'Enroll new webauthn key (DEV)', 'description': '', 'operationId': 'enrollWebauthnKey', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'The webauthn enrollment request', 'required': False, 'schema': {'type': 'object', 'required': ['attestationObject', 'authorization', 'challengeID', 'clientData', 'webAuthnKeyID'], 'properties': {'challengeID': {'type': 'str', 'position': 0, 'description': 'ID of the challenge this request is bound to '}, 'webAuthnKeyID': {'type': 'str', 'position': 0, 'description': 'The WebAuthn keyID ', 'minLength': 1, 'maxLength': 2147483647}, 'attestationObject': {'type': 'str', 'position': 0, 'description': 'The WebAuthn attestation object ', 'minLength': 1, 'maxLength': 2147483647}, 'clientData': {'type': 'str', 'position': 0, 'description': 'The WebAuthn clientData which is attested ', 'minLength': 1, 'maxLength': 2147483647}, 'authorization': {'type': 'str', 'position': 0, 'description': "The authorization token to permit enrolling this key. Token must be valid for operation 'publickey.enroll' "}}}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'keyID': {'type': 'int', 'position': 0, 'description': 'ID of the stored key '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
get_public_key_enrollment_options = {'tags': ['authentication/v1'], 'summary': 'Get enrollment options before enrolling new public key (DEV)', 'description': '', 'operationId': 'getPublicKeyEnrollmentOptions', 'produces': ['application/json'], 'parameters': [], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['challenge', 'challengeID'], 'properties': {'challengeID': {'type': 'str', 'position': 0, 'description': 'ID of the challenge returned in this response. This challengeID must be used in the enrollment request to identify the correct challenge to compare. '}, 'challenge': {'type': 'str', 'position': 0, 'description': 'The actual challenge, which will be used in the enrollment clientData. '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
get_webauthn_create_options = {'tags': ['authentication/v1'], 'summary': 'Request parameters for authenticating using webauthn (DEV)', 'description': '', 'operationId': 'getWebauthnCreateOptions', 'produces': ['application/json'], 'parameters': [{'name': 'Origin', 'in': 'header', 'required': False, 'type': 'string'}, {'name': 'userName', 'in': 'query', 'description': 'Username of the user preparing to authenticate', 'required': False, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'User domain', 'required': False, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'challengeID': {'type': 'str', 'position': 0, 'description': 'ID of the challenge returned in this response. This challengeID must be used in the authentication request to identify the correct challenge to compare. '}, 'challenge': {'type': 'str', 'position': 0, 'description': 'The actual challenge, which will be embedded in the WebAuthn clientDataJSON. '}, 'permittedWebAuthnKeyIDs': {'type': 'list', 'position': 0, 'description': 'A list of WebAuthn key IDs which are permitted to use ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'timeout': {'type': 'int', 'position': 0, 'description': 'The timeout to use when waiting for the user. '}}}}}}, '401': {'description': 'Authentication failed'}, '412': {'description': 'Validation error'}, '420': {'description': 'If the current IP has submitted too many challenges within a short time frame. The client should slow down.'}}}
get_webauthn_create_options_1 = {'tags': ['authentication/v1'], 'summary': 'Request parameters for enrolling new webauthn key (DEV)', 'description': '', 'operationId': 'getWebauthnCreateOptions_1', 'produces': ['application/json'], 'parameters': [{'name': 'Origin', 'in': 'header', 'required': False, 'type': 'string'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'challengeID': {'type': 'str', 'position': 0, 'description': 'ID of the challenge returned in this response. This challengeID must be used in the enrollment request to identify the correct challenge to compare. '}, 'challenge': {'type': 'str', 'position': 0, 'description': 'The actual challenge, which will be embedded in the WebAuthn clientDataJSON. '}, 'rp': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID (domainname) of the relying party to bind this key to '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the relying party to bind this key to '}}}, 'user': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'User ID of the user to create a key for '}, 'name': {'type': 'str', 'position': 0, 'description': 'Username of the user to create a key for '}, 'displayName': {'type': 'str', 'position': 0, 'description': 'Display name (full name) of the user to create a key for '}}}, 'pubKeyCredParams': {'type': 'list', 'position': 0, 'description': 'A set of parameters defining which type of public keys are accepted. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'alg': {'type': 'str', 'position': 0, 'description': 'The ID of the algorithm to use ', 'enum': ['ES256', 'ES384', 'ES512', 'RS256', 'RS384', 'RS512', 'PS256', 'PS384', 'PS512', 'undefined']}, 'type': 'str', 'options': ['publicKey']}}}, 'authenticatorSelection': {'type': 'dict', 'properties': {'authenticatorAttachment': {'type': 'str', 'enum': ['platform', 'crossPlatform']}, 'userVerification': {'type': 'str', 'enum': ['required', 'preferred', 'discouraged']}}}, 'timeout': {'type': 'int', 'position': 0, 'description': 'The timeout to use when waiting for the user. '}, 'attestation': {'type': 'str', 'position': 0, 'description': 'Parameters defining required attestation for the generated key. ', 'enum': ['direct', 'indirect']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
list_2 = {'tags': ['authentication/v1'], 'summary': 'List current user enrolled public keys (DEV)', 'description': '', 'operationId': 'list_2', 'produces': ['application/json'], 'parameters': [{'name': 'limit', 'in': 'query', 'description': 'Maximum number of values to return', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip this number of records', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'keys': {'type': 'list', 'position': 0, 'description': 'List of enrolled keys ', 'items': {'type': 'dict', 'properties': {'keyID': {'type': 'int', 'position': 0, 'description': 'The key ID (to use in signature headers) '}, 'type': 'str', 'description': {'type': 'str', 'position': 0, 'description': 'A description or name for this key '}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this key was created '}, 'lastUsedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this key was last used '}, 'lastUsedSourceIP': {'type': 'str', 'position': 0, 'description': 'The source IP this key was last used from '}, 'options': ['argus', 'webauthn', 'android', 'iphone']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
revoke_key = {'tags': ['authentication/v1'], 'summary': 'Revoke public key (DEV)', 'description': '', 'operationId': 'revokeKey', 'produces': ['application/json'], 'parameters': [{'name': 'keyID', 'in': 'path', 'description': 'ID of key to revoke', 'required': True, 'type': 'int', 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'keyID': {'type': 'int', 'position': 0, 'description': 'The ID of the revoked key '}, 'type': 'str', 'description': {'type': 'str', 'position': 0, 'description': 'The description for the revoked key '}, 'options': ['argus', 'webauthn', 'android', 'iphone']}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
webauthn_authentication = {'tags': ['authentication/v1'], 'summary': 'Initiate a new user session using WebAuthn authentication (DEV)', 'description': 'Requires signature authentication to be enabled on the server, and for the user. Use /methods to check which authentication methods are available on the server.', 'operationId': 'webauthnAuthentication', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'WebAuthn authentication request', 'required': False, 'schema': {'type': 'object', 'required': ['authenticatorData', 'challengeID', 'clientData', 'domain', 'signature', 'userName', 'webauthnKeyID'], 'properties': {'requestedAuthorizations': {'type': 'list', 'position': 0, 'description': 'Allow client to request authorizations as part of the authentication transaction. The client is not guaranteed to get the requested authorizations. The setPassword authorization is only returned if the current user has the FORCE_PW_CHANGE flag set. ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['enrollPublicKey', 'setPassword']}}, 'userName': {'type': 'str', 'position': 0, 'description': 'Username to authenticate '}, 'domain': {'type': 'str', 'position': 0, 'description': 'User domain '}, 'webauthnKeyID': {'type': 'str', 'position': 0, 'description': 'The webauthn key ID of the selected webauthn key '}, 'challengeID': {'type': 'str', 'position': 0, 'description': 'The challenge ID returned from the GET /webauthn/authenticate '}, 'authenticatorData': {'type': 'str', 'position': 0, 'description': 'The authenticator data structure from the webauthn invocation '}, 'clientData': {'type': 'str', 'position': 0, 'description': 'The clientDataJSON structure from the webauthn invocation '}, 'signature': {'type': 'str', 'position': 0, 'description': 'The signature structure from the webauthn invocation '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['credentials', 'sessionKey'], 'properties': {'credentials': {'type': 'dict', 'properties': {'clientIP': {'type': 'string'}, 'forwardedIP': {'type': 'string'}, 'uri': {'type': 'string'}, 'requestCredentialsType': {'type': 'str', 'enum': ['sessionToken', 'signature', 'apikey']}, 'requestCredentialsData': {'type': 'string'}}}, 'sessionKey': {'type': 'str', 'position': 0, 'description': 'The symmetric key created for this session '}, 'authorizations': {'type': 'list', 'position': 0, 'description': 'Any gratuitous authorization tokens generated during authentication, if requested by the client ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'operation': {'type': 'str', 'position': 0, 'description': 'Operation which is authorized by this token '}, 'authorization': {'type': 'str', 'position': 0, 'description': 'Authorization JWS string '}, 'nextURI': {'type': 'str', 'position': 0, 'description': 'The URI to proceed to, appending the authorization JWS as a query parameter '}, 'expires': {'type': 'int', 'position': 0, 'description': 'The timestamp when this authorization expires '}}}}}}}}}, '221': {'description': 'Session created, password change required', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': {'type': 'string', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'integer', 'format': 'int64'}}}}, 'data': {'type': 'object', 'properties': {'username': {'type': 'string'}, 'cookie': {'type': 'string'}, 'clientIP': {'type': 'string'}, 'forwardedIP': {'type': 'string'}, 'uri': {'type': 'string'}, 'userID': {'type': 'integer', 'format': 'int64'}, 'domainID': {'type': 'integer', 'format': 'int32'}, 'impersonatingUserID': {'type': 'integer', 'format': 'int64'}, 'scope': {'type': 'string', 'enum': ['SESSION', 'REQUEST']}, 'created': {'type': 'integer', 'format': 'int64'}, 'validUntilTimestamp': {'type': 'integer', 'format': 'int64'}, 'securityLevel': {'type': 'string', 'enum': ['ADMINISTRATIVE', 'DEFAULT', 'EXTERNAL']}, 'authenticationMethod': {'type': 'string', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'RADIUS', 'TOTP', 'OTP', 'APIKEY', 'LDAP', 'IMPERSONATED']}, 'constrained': {'type': 'boolean'}, 'customerConstraints': {'type': 'array', 'uniqueItems': True, 'items': {'type': 'integer', 'format': 'int64'}}, 'functionConstraints': {'type': 'array', 'uniqueItems': True, 'items': {'type': 'integer', 'format': 'int64'}}, 'requestCredentialsData': {'type': 'string'}, 'requestCredentialsType': {'type': 'string', 'enum': ['sessionToken', 'signature', 'apikey']}, 'timestamp': {'type': 'integer', 'format': 'int64'}, 'lastRefreshTimestamp': {'type': 'integer', 'format': 'int64'}, 'createdTimestamp': {'type': 'integer', 'format': 'int64'}, 'sessionKey': {'type': 'string', 'readOnly': True}}}}}}, '401': {'description': 'Authentication failed'}, '412': {'description': 'Validation error'}}}