"""Autogenerated API schema"""
from argus_api import session


add_new_source = {'tags': ['reputation/v1'], 'summary': 'Add reputation source (INTERNAL)', 'description': '', 'operationId': 'addNewSource', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Add request', 'required': False, 'schema': {'type': 'object', 'required': ['activePeriod', 'alias', 'confidence', 'fudgePeriod', 'name'], 'properties': {'private': {'type': 'boolean'}, 'alias': {'type': 'str', 'position': 0, 'description': 'Source alias  => [a-zA-Z0-9_\\-\\.]*'}, 'name': {'type': 'str', 'position': 0, 'description': 'Source name  => [a-zA-Z0-9_\\-\\.]*'}, 'confidence': {'type': 'float', 'position': 0, 'description': 'Source confidence (default 0.0)', 'minimum': 0, 'default': 0.0}, 'activePeriod': {'type': 'int', 'position': 0, 'description': 'Source active period (default 0)', 'minimum': 1, 'default': 0}, 'fudgePeriod': {'type': 'int', 'position': 0, 'description': 'Source fudge period (default 0)', 'minimum': 1, 'default': 0}, 'useForReputationCalc': {'type': 'bool', 'position': 0, 'description': 'If true, enable reputation calculation using this source '}, 'enableSync': {'type': 'bool', 'position': 0, 'description': 'If true, enable remote sync of this source (even if reputation calc is not enabled) '}, 'monitored': {'type': 'bool', 'position': 0, 'description': 'If true, mark this source as monitored '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'string'}, 'name': {'type': 'string'}, 'confidence': {'type': 'float'}, 'activePeriod': {'type': 'int'}, 'fudgePeriod': {'type': 'int'}, 'useForReputationCalc': {'type': 'boolean'}, 'monitored': {'type': 'boolean'}, 'enableSync': {'type': 'boolean'}, 'domainCounters': {'type': 'dict', 'properties': {'active': {'type': 'int', 'readOnly': True}, 'latest': {'type': 'int', 'readOnly': True}, 'old': {'type': 'int', 'readOnly': True}}}, 'addressCounters': {'type': 'dict', 'properties': {'active': {'type': 'int', 'readOnly': True}, 'latest': {'type': 'int', 'readOnly': True}, 'old': {'type': 'int', 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'int', 'readOnly': True}, 'lastTransitionTimestamp': {'type': 'int', 'readOnly': True}, 'deleted': {'type': 'boolean'}, 'private': {'type': 'boolean'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
delete_source = {'tags': ['reputation/v1'], 'summary': 'Delete reputation source (INTERNAL)', 'description': '', 'operationId': 'deleteSource', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of source to delete', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'string'}, 'name': {'type': 'string'}, 'confidence': {'type': 'float'}, 'activePeriod': {'type': 'int'}, 'fudgePeriod': {'type': 'int'}, 'useForReputationCalc': {'type': 'boolean'}, 'monitored': {'type': 'boolean'}, 'enableSync': {'type': 'boolean'}, 'domainCounters': {'type': 'dict', 'properties': {'active': {'type': 'int', 'readOnly': True}, 'latest': {'type': 'int', 'readOnly': True}, 'old': {'type': 'int', 'readOnly': True}}}, 'addressCounters': {'type': 'dict', 'properties': {'active': {'type': 'int', 'readOnly': True}, 'latest': {'type': 'int', 'readOnly': True}, 'old': {'type': 'int', 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'int', 'readOnly': True}, 'lastTransitionTimestamp': {'type': 'int', 'readOnly': True}, 'deleted': {'type': 'boolean'}, 'private': {'type': 'boolean'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
find_sources = {'tags': ['reputation/v1'], 'summary': 'Search reputation sources (INTERNAL)', 'description': '', 'operationId': 'findSources', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Search criteria', 'required': False, 'schema': {'type': 'object', 'properties': {'id': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'searchString': {'type': 'string'}, 'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. By default, no restriction on result set size. '}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object. '}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects. '}, 'includeFlags': {'type': 'int', 'position': 0, 'description': 'Only include objects which have includeFlags set. '}, 'excludeFlags': {'type': 'int', 'position': 0, 'description': 'Exclude objects which have excludeFlags set. '}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR. ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'searchString': {'type': 'string'}, 'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. By default, no restriction on result set size. '}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object. '}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects. '}, 'includeFlags': {'type': 'int', 'position': 0, 'description': 'Only include objects which have includeFlags set. '}, 'excludeFlags': {'type': 'int', 'position': 0, 'description': 'Exclude objects which have excludeFlags set. '}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR. ', 'uniqueItems': True, 'items': []}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. '}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. '}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'string'}, 'name': {'type': 'string'}, 'confidence': {'type': 'float'}, 'activePeriod': {'type': 'int'}, 'fudgePeriod': {'type': 'int'}, 'useForReputationCalc': {'type': 'boolean'}, 'monitored': {'type': 'boolean'}, 'enableSync': {'type': 'boolean'}, 'domainCounters': {'type': 'dict', 'properties': {'active': {'type': 'int', 'readOnly': True}, 'latest': {'type': 'int', 'readOnly': True}, 'old': {'type': 'int', 'readOnly': True}}}, 'addressCounters': {'type': 'dict', 'properties': {'active': {'type': 'int', 'readOnly': True}, 'latest': {'type': 'int', 'readOnly': True}, 'old': {'type': 'int', 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'int', 'readOnly': True}, 'lastTransitionTimestamp': {'type': 'int', 'readOnly': True}, 'deleted': {'type': 'boolean'}, 'private': {'type': 'boolean'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
get_source_by_alias = {'tags': ['reputation/v1'], 'summary': 'Fetch reputation source by alias (INTERNAL)', 'description': '', 'operationId': 'getSourceByAlias', 'produces': ['application/json'], 'parameters': [{'name': 'alias', 'in': 'path', 'description': 'Alias of source to fetch', 'required': True, 'type': 'str', 'pattern': '[0-9]*[^0-9]+[0-9]*'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'string'}, 'name': {'type': 'string'}, 'confidence': {'type': 'float'}, 'activePeriod': {'type': 'int'}, 'fudgePeriod': {'type': 'int'}, 'useForReputationCalc': {'type': 'boolean'}, 'monitored': {'type': 'boolean'}, 'enableSync': {'type': 'boolean'}, 'domainCounters': {'type': 'dict', 'properties': {'active': {'type': 'int', 'readOnly': True}, 'latest': {'type': 'int', 'readOnly': True}, 'old': {'type': 'int', 'readOnly': True}}}, 'addressCounters': {'type': 'dict', 'properties': {'active': {'type': 'int', 'readOnly': True}, 'latest': {'type': 'int', 'readOnly': True}, 'old': {'type': 'int', 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'int', 'readOnly': True}, 'lastTransitionTimestamp': {'type': 'int', 'readOnly': True}, 'deleted': {'type': 'boolean'}, 'private': {'type': 'boolean'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_source_by_id = {'tags': ['reputation/v1'], 'summary': 'Fetch reputation source by ID (INTERNAL)', 'description': '', 'operationId': 'getSourceById', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of source to fetch', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'string'}, 'name': {'type': 'string'}, 'confidence': {'type': 'float'}, 'activePeriod': {'type': 'int'}, 'fudgePeriod': {'type': 'int'}, 'useForReputationCalc': {'type': 'boolean'}, 'monitored': {'type': 'boolean'}, 'enableSync': {'type': 'boolean'}, 'domainCounters': {'type': 'dict', 'properties': {'active': {'type': 'int', 'readOnly': True}, 'latest': {'type': 'int', 'readOnly': True}, 'old': {'type': 'int', 'readOnly': True}}}, 'addressCounters': {'type': 'dict', 'properties': {'active': {'type': 'int', 'readOnly': True}, 'latest': {'type': 'int', 'readOnly': True}, 'old': {'type': 'int', 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'int', 'readOnly': True}, 'lastTransitionTimestamp': {'type': 'int', 'readOnly': True}, 'deleted': {'type': 'boolean'}, 'private': {'type': 'boolean'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_sources = {'tags': ['reputation/v1'], 'summary': 'List reputation sources (INTERNAL)', 'description': '', 'operationId': 'listSources', 'produces': ['application/json'], 'parameters': [{'name': 'search', 'in': 'query', 'description': 'Limit result to sources matching this search string', 'required': False, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Limit result', 'required': False, 'type': 'int', 'default': 25}, {'name': 'offset', 'in': 'query', 'description': 'Offset result', 'required': False, 'type': 'int'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'string'}, 'name': {'type': 'string'}, 'confidence': {'type': 'float'}, 'activePeriod': {'type': 'int'}, 'fudgePeriod': {'type': 'int'}, 'useForReputationCalc': {'type': 'boolean'}, 'monitored': {'type': 'boolean'}, 'enableSync': {'type': 'boolean'}, 'domainCounters': {'type': 'dict', 'properties': {'active': {'type': 'int', 'readOnly': True}, 'latest': {'type': 'int', 'readOnly': True}, 'old': {'type': 'int', 'readOnly': True}}}, 'addressCounters': {'type': 'dict', 'properties': {'active': {'type': 'int', 'readOnly': True}, 'latest': {'type': 'int', 'readOnly': True}, 'old': {'type': 'int', 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'int', 'readOnly': True}, 'lastTransitionTimestamp': {'type': 'int', 'readOnly': True}, 'deleted': {'type': 'boolean'}, 'private': {'type': 'boolean'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
transition_source = {'tags': ['reputation/v1'], 'summary': 'Transition reputation source. This recalculates active and expired records according to the sources configured timing.Source Transition is automatically run after completing an import. (INTERNAL)', 'description': '', 'operationId': 'transitionSource', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'source', 'in': 'path', 'description': 'ID or alias of source to transition', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'disabledAddresses': {'type': 'int'}, 'disabledDomains': {'type': 'int'}, 'activatedAddresses': {'type': 'int'}, 'activatedDomains': {'type': 'int'}, 'currentAddresses': {'type': 'int'}, 'currentDomains': {'type': 'int'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
update_source = {'tags': ['reputation/v1'], 'summary': 'Update reputation source (INTERNAL)', 'description': '', 'operationId': 'updateSource', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of source to update', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Update request', 'required': False, 'schema': {'type': 'object', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'description': '[a-zA-Z0-9_\\-\\.]*'}, 'name': {'type': 'str', 'description': '[a-zA-Z0-9_\\-\\.]*'}, 'confidence': {'type': 'float', 'minimum': 0}, 'activePeriod': {'type': 'int', 'minimum': 1}, 'fudgePeriod': {'type': 'int', 'minimum': 1}, 'private': {'type': 'boolean'}, 'useForReputationCalc': {'type': 'bool', 'position': 0, 'description': 'If set, change the setting for reputation calculation using this source '}, 'enableSync': {'type': 'bool', 'position': 0, 'description': 'If set, change the remote sync setting for this source '}, 'monitored': {'type': 'bool', 'position': 0, 'description': 'If set, change the monitored setting for this source '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'string'}, 'name': {'type': 'string'}, 'confidence': {'type': 'float'}, 'activePeriod': {'type': 'int'}, 'fudgePeriod': {'type': 'int'}, 'useForReputationCalc': {'type': 'boolean'}, 'monitored': {'type': 'boolean'}, 'enableSync': {'type': 'boolean'}, 'domainCounters': {'type': 'dict', 'properties': {'active': {'type': 'int', 'readOnly': True}, 'latest': {'type': 'int', 'readOnly': True}, 'old': {'type': 'int', 'readOnly': True}}}, 'addressCounters': {'type': 'dict', 'properties': {'active': {'type': 'int', 'readOnly': True}, 'latest': {'type': 'int', 'readOnly': True}, 'old': {'type': 'int', 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'int', 'readOnly': True}, 'lastTransitionTimestamp': {'type': 'int', 'readOnly': True}, 'deleted': {'type': 'boolean'}, 'private': {'type': 'boolean'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}