"""Autogenerated API schema"""
from argus_api import session


aggregate_metrics = {'tags': ['metrics/v1'], 'summary': 'Fetch metrics that matches given aggregation criteria (DEV)', 'description': '', 'operationId': 'aggregateMetrics', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'descriptor', 'in': 'path', 'description': 'Shortname or ID of descriptor', 'required': True, 'type': 'str'}, {'name': 'descriptorDomain', 'in': 'query', 'description': "Domain which is used if short name is specified for 'descriptor' parameter. Defaults to current user domain.", 'required': False, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Metric records aggregation search request', 'required': False, 'schema': {'type': 'object', 'required': ['endTimestamp', 'startTimestamp', 'values'], 'properties': {'customer': {'type': 'list', 'position': 0, 'description': 'Restrict result set to records bound to specified customers. The list accepts both ID or shortname for the customers. For global metrics, this field should not be set. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'customerDomain': {'type': 'str', 'position': 0, 'description': 'Restrict result set to records with customers from the specific domain. The field accepts ID or shortname for the domain. '}, 'keys': {'type': 'dict', 'position': 0, 'description': 'Restrict result set to records with these key names and key values. Must match the keys given in the descriptor, but IP type allows using IP ranges, such as 192.168.0.0/16 for IPv4 or 2001:db8::/48 for IPv6. ', 'additionalProperties': {'type': 'string'}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias to be applied as specified in the subcriteria object(s) (AND, AND NOT, OR). (default OR)', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'customer': {'type': 'list', 'position': 0, 'description': 'Restrict result set to records bound to specified customers. The list accepts both ID or shortname for the customers. For global metrics, this field should not be set. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'customerDomain': {'type': 'str', 'position': 0, 'description': 'Restrict result set to records with customers from the specific domain. The field accepts ID or shortname for the domain. '}, 'keys': {'type': 'dict', 'position': 0, 'description': 'Restrict result set to records with these key names and key values. Must match the keys given in the descriptor, but IP type allows using IP ranges, such as 192.168.0.0/16 for IPv4 or 2001:db8::/48 for IPv6. ', 'additionalProperties': {'type': 'string'}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias to be applied as specified in the subcriteria object(s) (AND, AND NOT, OR). (default OR)', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'customer': {'type': 'list', 'position': 0, 'description': 'Restrict result set to records bound to specified customers. The list accepts both ID or shortname for the customers. For global metrics, this field should not be set. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'customerDomain': {'type': 'str', 'position': 0, 'description': 'Restrict result set to records with customers from the specific domain. The field accepts ID or shortname for the domain. '}, 'keys': {'type': 'dict', 'position': 0, 'description': 'Restrict result set to records with these key names and key values. Must match the keys given in the descriptor, but IP type allows using IP ranges, such as 192.168.0.0/16 for IPv4 or 2001:db8::/48 for IPv6. ', 'additionalProperties': {'type': 'string'}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias to be applied as specified in the subcriteria object(s) (AND, AND NOT, OR). (default OR)', 'uniqueItems': True, 'items': []}, 'required': {'type': 'bool', 'position': 0, 'description': 'If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If set to true, objects matching this subcriteria object will be excluded. '}}}}, 'required': {'type': 'bool', 'position': 0, 'description': 'If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If set to true, objects matching this subcriteria object will be excluded. '}}}}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict result set to records submitted after this timestamp. Accepts ISO-8601 timestamp string. ', 'minimum': 0}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict result set to records submitted before this timestamp. Accepts ISO-8601 timestamp string. (default now)', 'minimum': 0}, 'resolution': {'type': 'int', 'position': 0, 'description': "Aggregation resolution period in units specified by 'resolutionUnit' property. If 0 the resolution is the entire time span given by the start and end timestamps. If the expected combination of timestamps, resolution, and resolution unit would result in more buckets than ElasticSearch permits, which is 10000, then the request will be denied. Note that the initial calculation on this is rough, and that ES might still deny the request. In which case lower the resolution. ", 'minimum': 0}, 'resolutionUnit': {'type': 'str', 'position': 0, 'description': 'Units for aggregation resolution. (default millisecond)', 'enum': ['millisecond', 'second', 'minute', 'hour', 'day', 'milliseconds', 'seconds', 'minutes', 'hours', 'days']}, 'groupBy': {'type': 'list', 'position': 0, 'description': "List of descriptor's key names for aggregating the result. The result will be grouped into key buckets up to the limit given.The buckets themselves will be ordered in a descending order based on the values aggregated. ", 'items': {'type': 'dict', 'required': ['key'], 'properties': {'key': {'type': 'str', 'position': 0, 'description': 'Name of the key you want to have the results grouped by, results will return one bucket for each found key value. '}, 'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. Min 1, max 10000 (default 10)', 'minimum': 1, 'maximum': 10000, 'default': 10}}}}, 'groupByCustomer': {'type': 'bool', 'position': 0, 'description': 'States whether Metric records will be aggregated by customers. It defaults to false. (default false)', 'default': False}, 'includeOthers': {'type': 'bool', 'position': 0, 'description': 'States whether the aggregation results will contain buckets for the data not included in the keys given by the groupBy field.Is not used if the groupBy field is empty. It defaults to true. (default true)', 'default': True}, 'calendarInterval': {'type': 'str', 'position': 0, 'description': 'States the calendar interval the aggregation results should be sorted by, such as month or year.It only allows for a resolution of 1, and overrides the resolution unit such that if calendar interval is week, then the result will be in intervals of 1 whole week, expanding backwards in time for start and forwards for end. It is by defaults not used and set to null. (default null)', 'enum': ['second', 'minute', 'hour', 'day', 'week', 'month', 'quarter', 'year']}, 'values': {'type': 'list', 'position': 0, 'description': "Descriptor's values included in aggregation result. ", 'items': {'type': 'dict', 'required': ['name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': "Name of descriptor's value included in aggregation result. "}, 'aggregationFunction': {'type': 'str', 'position': 0, 'description': "Aggregation function used for aggregating the result. Defaults to metric descriptor's 'defaultAggregationFunction'. ", 'enum': ['sum', 'avg', 'max', 'min']}}}, 'maxItems': 2147483647, 'minItems': 1}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'metricDescriptorID': {'type': 'str', 'position': 0, 'description': 'Unique identifier of the metric descriptor. '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}, 'metricTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of metric aggregate. 0 if query is not time-based. '}, 'keys': {'type': 'list', 'position': 0, 'description': 'Keys associated to the metric aggregate. ', 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name of the metric key. '}, 'value': {'type': 'str', 'position': 0, 'description': 'Value of the metric key. '}, 'translation': {'type': 'str', 'position': 0, 'description': 'Translation of the key value to a human readable string. '}}}}, 'values': {'type': 'list', 'position': 0, 'description': 'Measured values for the metric aggregate. ', 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name of the metric value. '}, 'value': {'type': 'int', 'position': 0, 'description': 'Actual value of the metric value. '}}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}, '404': {'description': 'Object not found'}}}
search_metrics = {'tags': ['metrics/v1'], 'summary': 'Search the submitted metrics for a specific descriptor. (DEV)', 'description': '', 'operationId': 'searchMetrics', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'descriptor', 'in': 'path', 'description': 'Shortname or ID of descriptor', 'required': True, 'type': 'str'}, {'name': 'descriptorDomain', 'in': 'query', 'description': "Domain which is used if short name is specified for 'descriptor' parameter. Defaults to current user domain.", 'required': False, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Metric records search request', 'required': False, 'schema': {'type': 'object', 'required': ['endTimestamp', 'startTimestamp'], 'properties': {'customer': {'type': 'list', 'position': 0, 'description': 'Restrict result set to records bound to specified customers. The list accepts both ID or shortname for the customers. For global metrics, this field should not be set. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'customerDomain': {'type': 'str', 'position': 0, 'description': 'Restrict result set to records with customers from the specific domain. The field accepts ID or shortname for the domain. '}, 'keys': {'type': 'dict', 'position': 0, 'description': 'Restrict result set to records with these key names and key values. Must match the keys given in the descriptor, but IP type allows using IP ranges, such as 192.168.0.0/16 for IPv4 or 2001:db8::/48 for IPv6. ', 'additionalProperties': {'type': 'string'}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias to be applied as specified in the subcriteria object(s) (AND, AND NOT, OR). (default OR)', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'customer': {'type': 'list', 'position': 0, 'description': 'Restrict result set to records bound to specified customers. The list accepts both ID or shortname for the customers. For global metrics, this field should not be set. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'customerDomain': {'type': 'str', 'position': 0, 'description': 'Restrict result set to records with customers from the specific domain. The field accepts ID or shortname for the domain. '}, 'keys': {'type': 'dict', 'position': 0, 'description': 'Restrict result set to records with these key names and key values. Must match the keys given in the descriptor, but IP type allows using IP ranges, such as 192.168.0.0/16 for IPv4 or 2001:db8::/48 for IPv6. ', 'additionalProperties': {'type': 'string'}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias to be applied as specified in the subcriteria object(s) (AND, AND NOT, OR). (default OR)', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'customer': {'type': 'list', 'position': 0, 'description': 'Restrict result set to records bound to specified customers. The list accepts both ID or shortname for the customers. For global metrics, this field should not be set. ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'customerDomain': {'type': 'str', 'position': 0, 'description': 'Restrict result set to records with customers from the specific domain. The field accepts ID or shortname for the domain. '}, 'keys': {'type': 'dict', 'position': 0, 'description': 'Restrict result set to records with these key names and key values. Must match the keys given in the descriptor, but IP type allows using IP ranges, such as 192.168.0.0/16 for IPv4 or 2001:db8::/48 for IPv6. ', 'additionalProperties': {'type': 'string'}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias to be applied as specified in the subcriteria object(s) (AND, AND NOT, OR). (default OR)', 'uniqueItems': True, 'items': []}, 'required': {'type': 'bool', 'position': 0, 'description': 'If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If set to true, objects matching this subcriteria object will be excluded. '}}}}, 'required': {'type': 'bool', 'position': 0, 'description': 'If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). '}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'If set to true, objects matching this subcriteria object will be excluded. '}}}}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict result set to records submitted after this timestamp. Accepts ISO-8601 timestamp string. ', 'minimum': 0}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict result set to records submitted before this timestamp. Accepts ISO-8601 timestamp string. (default now)', 'minimum': 0}, 'limit': {'type': 'int', 'position': 0, 'description': 'Set this value to set max number of results. Cannot exceed 10000 which is the Elasticsearch search window. (default 25)', 'maximum': 10000, 'default': 25}, 'offset': {'type': 'int', 'position': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object.Cannot, in combination with the limit, exceed 10000, as this will exceed the Elasticsearch search window. ', 'maximum': 9999}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the metric as required by ES '}, 'descriptor': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Short name of the  metric descriptor. This name is unique per domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}, 'metricTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of the metric record provided by client. '}, 'submissionTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of the metric record submission. '}, 'submittedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'keys': {'type': 'list', 'position': 0, 'description': 'List of key associated to the metric record. ', 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name of the metric key. '}, 'value': {'type': 'str', 'position': 0, 'description': 'Value of the metric key. '}, 'translation': {'type': 'str', 'position': 0, 'description': 'Translation of the key value to a human readable string. '}}}}, 'values': {'type': 'list', 'position': 0, 'description': 'List of measured values for a given metricTimestamp. ', 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'Name of the metric value. '}, 'value': {'type': 'int', 'position': 0, 'description': 'Actual value of the metric value. '}}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
submit_metric = {'tags': ['metrics/v1'], 'summary': 'Submit new metric (DEV)', 'description': '', 'operationId': 'submitMetric', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'descriptor', 'in': 'path', 'description': 'ID or short name of metric descriptor', 'required': True, 'type': 'str'}, {'name': 'descriptorDomain', 'in': 'query', 'description': "Domain which is used if short name is specified for 'descriptor' parameter. Defaults to current user domain.", 'required': False, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Metric submission request', 'required': False, 'schema': {'type': 'object', 'required': ['records'], 'properties': {'records': {'type': 'list', 'position': 0, 'description': 'Metric records for submission. ', 'items': {'type': 'dict', 'required': ['keys', 'values'], 'properties': {'customer': {'type': 'str', 'position': 0, 'description': "ID or shortname of customer owning the metric record. This will default to current user's customer if not set. For global metrics, this field should not be set. (default Current user customer)"}, 'customerDomain': {'type': 'str', 'position': 0, 'description': 'ID or shortname of domain for customer owning the metric record. (default Current user domain)'}, 'timestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp of the metric record. (default now)', 'minimum': 1}, 'keys': {'type': 'dict', 'position': 0, 'description': 'Keys for the metric record. ', 'additionalProperties': {'type': 'string'}}, 'values': {'type': 'dict', 'position': 0, 'description': 'Measured values for the metric record. ', 'additionalProperties': {'type': 'int'}}}}, 'maxItems': 2147483647, 'minItems': 1}, 'ignoreOnFailed': {'type': 'bool', 'position': 0, 'description': 'Set this value for successful response even failures occur while submitting. (default false)', 'default': False}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'success': {'type': 'int', 'position': 0, 'description': 'Number of successfully submitted metric records. '}, 'failed': {'type': 'int', 'position': 0, 'description': 'Number of failed metric records. '}, 'errorInformationList': {'type': 'list', 'position': 0, 'description': 'Information regarding any metrics that failed during submission. ', 'items': {'type': 'dict', 'properties': {'submissionIndex': {'type': 'int', 'position': 0, 'description': 'Index of the submission as it appears in the submission request. '}, 'errorMessages': {'type': 'list', 'position': 0, 'description': 'String message of error cause. ', 'items': {'type': 'string'}}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}