"""Autogenerated API schema"""
from argus_api import session


exists_records_of_tlp_levels = {'tags': ['pdns/v3'], 'summary': 'Search against PassiveDNS and return true if matching records are found (DEV)', 'description': 'Search against PassiveDNS and return true if matching records are found. If user exceeds current resource limits, this operation may return status code 402. If that happens, the metaData key millisUntilResourcesAvailable gives a hint as to how long the client needs to wait before attempting again.', 'operationId': 'existsRecordsOfTlpLevels', 'produces': ['application/json'], 'parameters': [{'name': 'query', 'in': 'path', 'description': 'Search by query, can be IP, not subnet, or domain', 'required': True, 'type': 'str'}, {'name': 'tlp', 'in': 'query', 'description': 'Search by TLP', 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': 'white', 'enum': ['white', 'green', 'amber', 'red']}, 'collectionFormat': 'multi'}, {'name': 'ignoreOwnRecords', 'in': 'query', 'description': "Whether to ignore user's customer's own records, defaults to true", 'required': False, 'type': 'bool', 'default': True}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'exists': {'type': 'bool', 'position': 0, 'description': 'Does records that match the query exist. '}}}}}}, '401': {'description': 'Authentication failed'}, '402': {'description': 'Resource limit exceeded'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}