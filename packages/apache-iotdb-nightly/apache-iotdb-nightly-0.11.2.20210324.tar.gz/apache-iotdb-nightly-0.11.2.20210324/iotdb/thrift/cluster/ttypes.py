#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import iotdb.thrift.rpc.ttypes

from thrift.transport import TTransport
all_structs = []


class HeartBeatRequest(object):
    """
    Attributes:
     - term
     - commitLogIndex
     - commitLogTerm
     - leader
     - requireIdentifier
     - regenerateIdentifier
     - partitionTableBytes
     - header

    """


    def __init__(self, term=None, commitLogIndex=None, commitLogTerm=None, leader=None, requireIdentifier=None, regenerateIdentifier=None, partitionTableBytes=None, header=None,):
        self.term = term
        self.commitLogIndex = commitLogIndex
        self.commitLogTerm = commitLogTerm
        self.leader = leader
        self.requireIdentifier = requireIdentifier
        self.regenerateIdentifier = regenerateIdentifier
        self.partitionTableBytes = partitionTableBytes
        self.header = header

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.term = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.commitLogIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.commitLogTerm = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.leader = Node()
                    self.leader.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.requireIdentifier = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.regenerateIdentifier = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.partitionTableBytes = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.header = Node()
                    self.header.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeartBeatRequest')
        if self.term is not None:
            oprot.writeFieldBegin('term', TType.I64, 1)
            oprot.writeI64(self.term)
            oprot.writeFieldEnd()
        if self.commitLogIndex is not None:
            oprot.writeFieldBegin('commitLogIndex', TType.I64, 2)
            oprot.writeI64(self.commitLogIndex)
            oprot.writeFieldEnd()
        if self.commitLogTerm is not None:
            oprot.writeFieldBegin('commitLogTerm', TType.I64, 3)
            oprot.writeI64(self.commitLogTerm)
            oprot.writeFieldEnd()
        if self.leader is not None:
            oprot.writeFieldBegin('leader', TType.STRUCT, 4)
            self.leader.write(oprot)
            oprot.writeFieldEnd()
        if self.requireIdentifier is not None:
            oprot.writeFieldBegin('requireIdentifier', TType.BOOL, 5)
            oprot.writeBool(self.requireIdentifier)
            oprot.writeFieldEnd()
        if self.regenerateIdentifier is not None:
            oprot.writeFieldBegin('regenerateIdentifier', TType.BOOL, 6)
            oprot.writeBool(self.regenerateIdentifier)
            oprot.writeFieldEnd()
        if self.partitionTableBytes is not None:
            oprot.writeFieldBegin('partitionTableBytes', TType.STRING, 7)
            oprot.writeBinary(self.partitionTableBytes)
            oprot.writeFieldEnd()
        if self.header is not None:
            oprot.writeFieldBegin('header', TType.STRUCT, 8)
            self.header.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.term is None:
            raise TProtocolException(message='Required field term is unset!')
        if self.commitLogIndex is None:
            raise TProtocolException(message='Required field commitLogIndex is unset!')
        if self.commitLogTerm is None:
            raise TProtocolException(message='Required field commitLogTerm is unset!')
        if self.leader is None:
            raise TProtocolException(message='Required field leader is unset!')
        if self.requireIdentifier is None:
            raise TProtocolException(message='Required field requireIdentifier is unset!')
        if self.regenerateIdentifier is None:
            raise TProtocolException(message='Required field regenerateIdentifier is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeartBeatResponse(object):
    """
    Attributes:
     - term
     - lastLogIndex
     - lastLogTerm
     - follower
     - followerIdentifier
     - requirePartitionTable
     - header

    """


    def __init__(self, term=None, lastLogIndex=None, lastLogTerm=None, follower=None, followerIdentifier=None, requirePartitionTable=None, header=None,):
        self.term = term
        self.lastLogIndex = lastLogIndex
        self.lastLogTerm = lastLogTerm
        self.follower = follower
        self.followerIdentifier = followerIdentifier
        self.requirePartitionTable = requirePartitionTable
        self.header = header

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.term = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.lastLogIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.lastLogTerm = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.follower = Node()
                    self.follower.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.followerIdentifier = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.requirePartitionTable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.header = Node()
                    self.header.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeartBeatResponse')
        if self.term is not None:
            oprot.writeFieldBegin('term', TType.I64, 1)
            oprot.writeI64(self.term)
            oprot.writeFieldEnd()
        if self.lastLogIndex is not None:
            oprot.writeFieldBegin('lastLogIndex', TType.I64, 2)
            oprot.writeI64(self.lastLogIndex)
            oprot.writeFieldEnd()
        if self.lastLogTerm is not None:
            oprot.writeFieldBegin('lastLogTerm', TType.I64, 3)
            oprot.writeI64(self.lastLogTerm)
            oprot.writeFieldEnd()
        if self.follower is not None:
            oprot.writeFieldBegin('follower', TType.STRUCT, 4)
            self.follower.write(oprot)
            oprot.writeFieldEnd()
        if self.followerIdentifier is not None:
            oprot.writeFieldBegin('followerIdentifier', TType.I32, 5)
            oprot.writeI32(self.followerIdentifier)
            oprot.writeFieldEnd()
        if self.requirePartitionTable is not None:
            oprot.writeFieldBegin('requirePartitionTable', TType.BOOL, 6)
            oprot.writeBool(self.requirePartitionTable)
            oprot.writeFieldEnd()
        if self.header is not None:
            oprot.writeFieldBegin('header', TType.STRUCT, 7)
            self.header.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.term is None:
            raise TProtocolException(message='Required field term is unset!')
        if self.requirePartitionTable is None:
            raise TProtocolException(message='Required field requirePartitionTable is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ElectionRequest(object):
    """
    Attributes:
     - term
     - lastLogTerm
     - lastLogIndex
     - elector
     - header
     - dataLogLastIndex
     - dataLogLastTerm

    """


    def __init__(self, term=None, lastLogTerm=None, lastLogIndex=None, elector=None, header=None, dataLogLastIndex=None, dataLogLastTerm=None,):
        self.term = term
        self.lastLogTerm = lastLogTerm
        self.lastLogIndex = lastLogIndex
        self.elector = elector
        self.header = header
        self.dataLogLastIndex = dataLogLastIndex
        self.dataLogLastTerm = dataLogLastTerm

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.term = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.lastLogTerm = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.lastLogIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.elector = Node()
                    self.elector.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.header = Node()
                    self.header.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.dataLogLastIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.dataLogLastTerm = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ElectionRequest')
        if self.term is not None:
            oprot.writeFieldBegin('term', TType.I64, 1)
            oprot.writeI64(self.term)
            oprot.writeFieldEnd()
        if self.lastLogTerm is not None:
            oprot.writeFieldBegin('lastLogTerm', TType.I64, 2)
            oprot.writeI64(self.lastLogTerm)
            oprot.writeFieldEnd()
        if self.lastLogIndex is not None:
            oprot.writeFieldBegin('lastLogIndex', TType.I64, 3)
            oprot.writeI64(self.lastLogIndex)
            oprot.writeFieldEnd()
        if self.elector is not None:
            oprot.writeFieldBegin('elector', TType.STRUCT, 4)
            self.elector.write(oprot)
            oprot.writeFieldEnd()
        if self.header is not None:
            oprot.writeFieldBegin('header', TType.STRUCT, 5)
            self.header.write(oprot)
            oprot.writeFieldEnd()
        if self.dataLogLastIndex is not None:
            oprot.writeFieldBegin('dataLogLastIndex', TType.I64, 6)
            oprot.writeI64(self.dataLogLastIndex)
            oprot.writeFieldEnd()
        if self.dataLogLastTerm is not None:
            oprot.writeFieldBegin('dataLogLastTerm', TType.I64, 7)
            oprot.writeI64(self.dataLogLastTerm)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.term is None:
            raise TProtocolException(message='Required field term is unset!')
        if self.lastLogTerm is None:
            raise TProtocolException(message='Required field lastLogTerm is unset!')
        if self.lastLogIndex is None:
            raise TProtocolException(message='Required field lastLogIndex is unset!')
        if self.elector is None:
            raise TProtocolException(message='Required field elector is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AppendEntryRequest(object):
    """
    Attributes:
     - term
     - leader
     - prevLogIndex
     - prevLogTerm
     - leaderCommit
     - entry
     - header

    """


    def __init__(self, term=None, leader=None, prevLogIndex=None, prevLogTerm=None, leaderCommit=None, entry=None, header=None,):
        self.term = term
        self.leader = leader
        self.prevLogIndex = prevLogIndex
        self.prevLogTerm = prevLogTerm
        self.leaderCommit = leaderCommit
        self.entry = entry
        self.header = header

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.term = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.leader = Node()
                    self.leader.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.prevLogIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.prevLogTerm = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.leaderCommit = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.entry = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.header = Node()
                    self.header.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AppendEntryRequest')
        if self.term is not None:
            oprot.writeFieldBegin('term', TType.I64, 1)
            oprot.writeI64(self.term)
            oprot.writeFieldEnd()
        if self.leader is not None:
            oprot.writeFieldBegin('leader', TType.STRUCT, 2)
            self.leader.write(oprot)
            oprot.writeFieldEnd()
        if self.prevLogIndex is not None:
            oprot.writeFieldBegin('prevLogIndex', TType.I64, 3)
            oprot.writeI64(self.prevLogIndex)
            oprot.writeFieldEnd()
        if self.prevLogTerm is not None:
            oprot.writeFieldBegin('prevLogTerm', TType.I64, 4)
            oprot.writeI64(self.prevLogTerm)
            oprot.writeFieldEnd()
        if self.leaderCommit is not None:
            oprot.writeFieldBegin('leaderCommit', TType.I64, 5)
            oprot.writeI64(self.leaderCommit)
            oprot.writeFieldEnd()
        if self.entry is not None:
            oprot.writeFieldBegin('entry', TType.STRING, 6)
            oprot.writeBinary(self.entry)
            oprot.writeFieldEnd()
        if self.header is not None:
            oprot.writeFieldBegin('header', TType.STRUCT, 7)
            self.header.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.term is None:
            raise TProtocolException(message='Required field term is unset!')
        if self.leader is None:
            raise TProtocolException(message='Required field leader is unset!')
        if self.prevLogIndex is None:
            raise TProtocolException(message='Required field prevLogIndex is unset!')
        if self.prevLogTerm is None:
            raise TProtocolException(message='Required field prevLogTerm is unset!')
        if self.leaderCommit is None:
            raise TProtocolException(message='Required field leaderCommit is unset!')
        if self.entry is None:
            raise TProtocolException(message='Required field entry is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AppendEntriesRequest(object):
    """
    Attributes:
     - term
     - leader
     - entries
     - prevLogIndex
     - prevLogTerm
     - leaderCommit
     - header

    """


    def __init__(self, term=None, leader=None, entries=None, prevLogIndex=None, prevLogTerm=None, leaderCommit=None, header=None,):
        self.term = term
        self.leader = leader
        self.entries = entries
        self.prevLogIndex = prevLogIndex
        self.prevLogTerm = prevLogTerm
        self.leaderCommit = leaderCommit
        self.header = header

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.term = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.leader = Node()
                    self.leader.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.entries = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readBinary()
                        self.entries.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.prevLogIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.prevLogTerm = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.leaderCommit = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.header = Node()
                    self.header.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AppendEntriesRequest')
        if self.term is not None:
            oprot.writeFieldBegin('term', TType.I64, 1)
            oprot.writeI64(self.term)
            oprot.writeFieldEnd()
        if self.leader is not None:
            oprot.writeFieldBegin('leader', TType.STRUCT, 2)
            self.leader.write(oprot)
            oprot.writeFieldEnd()
        if self.entries is not None:
            oprot.writeFieldBegin('entries', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.entries))
            for iter6 in self.entries:
                oprot.writeBinary(iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.prevLogIndex is not None:
            oprot.writeFieldBegin('prevLogIndex', TType.I64, 4)
            oprot.writeI64(self.prevLogIndex)
            oprot.writeFieldEnd()
        if self.prevLogTerm is not None:
            oprot.writeFieldBegin('prevLogTerm', TType.I64, 5)
            oprot.writeI64(self.prevLogTerm)
            oprot.writeFieldEnd()
        if self.leaderCommit is not None:
            oprot.writeFieldBegin('leaderCommit', TType.I64, 6)
            oprot.writeI64(self.leaderCommit)
            oprot.writeFieldEnd()
        if self.header is not None:
            oprot.writeFieldBegin('header', TType.STRUCT, 7)
            self.header.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.term is None:
            raise TProtocolException(message='Required field term is unset!')
        if self.leader is None:
            raise TProtocolException(message='Required field leader is unset!')
        if self.entries is None:
            raise TProtocolException(message='Required field entries is unset!')
        if self.prevLogIndex is None:
            raise TProtocolException(message='Required field prevLogIndex is unset!')
        if self.prevLogTerm is None:
            raise TProtocolException(message='Required field prevLogTerm is unset!')
        if self.leaderCommit is None:
            raise TProtocolException(message='Required field leaderCommit is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AddNodeResponse(object):
    """
    Attributes:
     - respNum
     - partitionTableBytes
     - checkStatusResponse

    """


    def __init__(self, respNum=None, partitionTableBytes=None, checkStatusResponse=None,):
        self.respNum = respNum
        self.partitionTableBytes = partitionTableBytes
        self.checkStatusResponse = checkStatusResponse

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.respNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.partitionTableBytes = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.checkStatusResponse = CheckStatusResponse()
                    self.checkStatusResponse.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddNodeResponse')
        if self.respNum is not None:
            oprot.writeFieldBegin('respNum', TType.I32, 1)
            oprot.writeI32(self.respNum)
            oprot.writeFieldEnd()
        if self.partitionTableBytes is not None:
            oprot.writeFieldBegin('partitionTableBytes', TType.STRING, 2)
            oprot.writeBinary(self.partitionTableBytes)
            oprot.writeFieldEnd()
        if self.checkStatusResponse is not None:
            oprot.writeFieldBegin('checkStatusResponse', TType.STRUCT, 3)
            self.checkStatusResponse.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.respNum is None:
            raise TProtocolException(message='Required field respNum is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Node(object):
    """
    Attributes:
     - internalIp
     - metaPort
     - nodeIdentifier
     - dataPort
     - clientPort
     - clientIp

    """


    def __init__(self, internalIp=None, metaPort=None, nodeIdentifier=None, dataPort=None, clientPort=None, clientIp=None,):
        self.internalIp = internalIp
        self.metaPort = metaPort
        self.nodeIdentifier = nodeIdentifier
        self.dataPort = dataPort
        self.clientPort = clientPort
        self.clientIp = clientIp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.internalIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.metaPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.nodeIdentifier = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.dataPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.clientPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.clientIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Node')
        if self.internalIp is not None:
            oprot.writeFieldBegin('internalIp', TType.STRING, 1)
            oprot.writeString(self.internalIp.encode('utf-8') if sys.version_info[0] == 2 else self.internalIp)
            oprot.writeFieldEnd()
        if self.metaPort is not None:
            oprot.writeFieldBegin('metaPort', TType.I32, 2)
            oprot.writeI32(self.metaPort)
            oprot.writeFieldEnd()
        if self.nodeIdentifier is not None:
            oprot.writeFieldBegin('nodeIdentifier', TType.I32, 3)
            oprot.writeI32(self.nodeIdentifier)
            oprot.writeFieldEnd()
        if self.dataPort is not None:
            oprot.writeFieldBegin('dataPort', TType.I32, 4)
            oprot.writeI32(self.dataPort)
            oprot.writeFieldEnd()
        if self.clientPort is not None:
            oprot.writeFieldBegin('clientPort', TType.I32, 5)
            oprot.writeI32(self.clientPort)
            oprot.writeFieldEnd()
        if self.clientIp is not None:
            oprot.writeFieldBegin('clientIp', TType.STRING, 6)
            oprot.writeString(self.clientIp.encode('utf-8') if sys.version_info[0] == 2 else self.clientIp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.internalIp is None:
            raise TProtocolException(message='Required field internalIp is unset!')
        if self.metaPort is None:
            raise TProtocolException(message='Required field metaPort is unset!')
        if self.nodeIdentifier is None:
            raise TProtocolException(message='Required field nodeIdentifier is unset!')
        if self.dataPort is None:
            raise TProtocolException(message='Required field dataPort is unset!')
        if self.clientPort is None:
            raise TProtocolException(message='Required field clientPort is unset!')
        if self.clientIp is None:
            raise TProtocolException(message='Required field clientIp is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StartUpStatus(object):
    """
    Attributes:
     - partitionInterval
     - hashSalt
     - replicationNumber
     - seedNodeList
     - clusterName

    """


    def __init__(self, partitionInterval=None, hashSalt=None, replicationNumber=None, seedNodeList=None, clusterName=None,):
        self.partitionInterval = partitionInterval
        self.hashSalt = hashSalt
        self.replicationNumber = replicationNumber
        self.seedNodeList = seedNodeList
        self.clusterName = clusterName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.partitionInterval = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.hashSalt = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.replicationNumber = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.seedNodeList = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = Node()
                        _elem12.read(iprot)
                        self.seedNodeList.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.clusterName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StartUpStatus')
        if self.partitionInterval is not None:
            oprot.writeFieldBegin('partitionInterval', TType.I64, 1)
            oprot.writeI64(self.partitionInterval)
            oprot.writeFieldEnd()
        if self.hashSalt is not None:
            oprot.writeFieldBegin('hashSalt', TType.I32, 2)
            oprot.writeI32(self.hashSalt)
            oprot.writeFieldEnd()
        if self.replicationNumber is not None:
            oprot.writeFieldBegin('replicationNumber', TType.I32, 3)
            oprot.writeI32(self.replicationNumber)
            oprot.writeFieldEnd()
        if self.seedNodeList is not None:
            oprot.writeFieldBegin('seedNodeList', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.seedNodeList))
            for iter13 in self.seedNodeList:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.clusterName is not None:
            oprot.writeFieldBegin('clusterName', TType.STRING, 5)
            oprot.writeString(self.clusterName.encode('utf-8') if sys.version_info[0] == 2 else self.clusterName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.partitionInterval is None:
            raise TProtocolException(message='Required field partitionInterval is unset!')
        if self.hashSalt is None:
            raise TProtocolException(message='Required field hashSalt is unset!')
        if self.replicationNumber is None:
            raise TProtocolException(message='Required field replicationNumber is unset!')
        if self.seedNodeList is None:
            raise TProtocolException(message='Required field seedNodeList is unset!')
        if self.clusterName is None:
            raise TProtocolException(message='Required field clusterName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CheckStatusResponse(object):
    """
    Attributes:
     - partitionalIntervalEquals
     - hashSaltEquals
     - replicationNumEquals
     - seedNodeEquals
     - clusterNameEquals

    """


    def __init__(self, partitionalIntervalEquals=None, hashSaltEquals=None, replicationNumEquals=None, seedNodeEquals=None, clusterNameEquals=None,):
        self.partitionalIntervalEquals = partitionalIntervalEquals
        self.hashSaltEquals = hashSaltEquals
        self.replicationNumEquals = replicationNumEquals
        self.seedNodeEquals = seedNodeEquals
        self.clusterNameEquals = clusterNameEquals

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.partitionalIntervalEquals = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.hashSaltEquals = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.replicationNumEquals = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.seedNodeEquals = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.clusterNameEquals = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CheckStatusResponse')
        if self.partitionalIntervalEquals is not None:
            oprot.writeFieldBegin('partitionalIntervalEquals', TType.BOOL, 1)
            oprot.writeBool(self.partitionalIntervalEquals)
            oprot.writeFieldEnd()
        if self.hashSaltEquals is not None:
            oprot.writeFieldBegin('hashSaltEquals', TType.BOOL, 2)
            oprot.writeBool(self.hashSaltEquals)
            oprot.writeFieldEnd()
        if self.replicationNumEquals is not None:
            oprot.writeFieldBegin('replicationNumEquals', TType.BOOL, 3)
            oprot.writeBool(self.replicationNumEquals)
            oprot.writeFieldEnd()
        if self.seedNodeEquals is not None:
            oprot.writeFieldBegin('seedNodeEquals', TType.BOOL, 4)
            oprot.writeBool(self.seedNodeEquals)
            oprot.writeFieldEnd()
        if self.clusterNameEquals is not None:
            oprot.writeFieldBegin('clusterNameEquals', TType.BOOL, 5)
            oprot.writeBool(self.clusterNameEquals)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.partitionalIntervalEquals is None:
            raise TProtocolException(message='Required field partitionalIntervalEquals is unset!')
        if self.hashSaltEquals is None:
            raise TProtocolException(message='Required field hashSaltEquals is unset!')
        if self.replicationNumEquals is None:
            raise TProtocolException(message='Required field replicationNumEquals is unset!')
        if self.seedNodeEquals is None:
            raise TProtocolException(message='Required field seedNodeEquals is unset!')
        if self.clusterNameEquals is None:
            raise TProtocolException(message='Required field clusterNameEquals is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SendSnapshotRequest(object):
    """
    Attributes:
     - snapshotBytes
     - header

    """


    def __init__(self, snapshotBytes=None, header=None,):
        self.snapshotBytes = snapshotBytes
        self.header = header

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snapshotBytes = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.header = Node()
                    self.header.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SendSnapshotRequest')
        if self.snapshotBytes is not None:
            oprot.writeFieldBegin('snapshotBytes', TType.STRING, 1)
            oprot.writeBinary(self.snapshotBytes)
            oprot.writeFieldEnd()
        if self.header is not None:
            oprot.writeFieldBegin('header', TType.STRUCT, 2)
            self.header.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.snapshotBytes is None:
            raise TProtocolException(message='Required field snapshotBytes is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PullSnapshotRequest(object):
    """
    Attributes:
     - requiredSlots
     - header
     - requireReadOnly

    """


    def __init__(self, requiredSlots=None, header=None, requireReadOnly=None,):
        self.requiredSlots = requiredSlots
        self.header = header
        self.requireReadOnly = requireReadOnly

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.requiredSlots = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readI32()
                        self.requiredSlots.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.header = Node()
                    self.header.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.requireReadOnly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PullSnapshotRequest')
        if self.requiredSlots is not None:
            oprot.writeFieldBegin('requiredSlots', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.requiredSlots))
            for iter20 in self.requiredSlots:
                oprot.writeI32(iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.header is not None:
            oprot.writeFieldBegin('header', TType.STRUCT, 2)
            self.header.write(oprot)
            oprot.writeFieldEnd()
        if self.requireReadOnly is not None:
            oprot.writeFieldBegin('requireReadOnly', TType.BOOL, 3)
            oprot.writeBool(self.requireReadOnly)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.requiredSlots is None:
            raise TProtocolException(message='Required field requiredSlots is unset!')
        if self.requireReadOnly is None:
            raise TProtocolException(message='Required field requireReadOnly is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PullSnapshotResp(object):
    """
    Attributes:
     - snapshotBytes

    """


    def __init__(self, snapshotBytes=None,):
        self.snapshotBytes = snapshotBytes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.snapshotBytes = {}
                    (_ktype22, _vtype23, _size21) = iprot.readMapBegin()
                    for _i25 in range(_size21):
                        _key26 = iprot.readI32()
                        _val27 = iprot.readBinary()
                        self.snapshotBytes[_key26] = _val27
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PullSnapshotResp')
        if self.snapshotBytes is not None:
            oprot.writeFieldBegin('snapshotBytes', TType.MAP, 1)
            oprot.writeMapBegin(TType.I32, TType.STRING, len(self.snapshotBytes))
            for kiter28, viter29 in self.snapshotBytes.items():
                oprot.writeI32(kiter28)
                oprot.writeBinary(viter29)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExecutNonQueryReq(object):
    """
    Attributes:
     - planBytes
     - header

    """


    def __init__(self, planBytes=None, header=None,):
        self.planBytes = planBytes
        self.header = header

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.planBytes = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.header = Node()
                    self.header.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExecutNonQueryReq')
        if self.planBytes is not None:
            oprot.writeFieldBegin('planBytes', TType.STRING, 1)
            oprot.writeBinary(self.planBytes)
            oprot.writeFieldEnd()
        if self.header is not None:
            oprot.writeFieldBegin('header', TType.STRUCT, 2)
            self.header.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.planBytes is None:
            raise TProtocolException(message='Required field planBytes is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PullSchemaRequest(object):
    """
    Attributes:
     - prefixPaths
     - header

    """


    def __init__(self, prefixPaths=None, header=None,):
        self.prefixPaths = prefixPaths
        self.header = header

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.prefixPaths = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.prefixPaths.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.header = Node()
                    self.header.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PullSchemaRequest')
        if self.prefixPaths is not None:
            oprot.writeFieldBegin('prefixPaths', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.prefixPaths))
            for iter36 in self.prefixPaths:
                oprot.writeString(iter36.encode('utf-8') if sys.version_info[0] == 2 else iter36)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.header is not None:
            oprot.writeFieldBegin('header', TType.STRUCT, 2)
            self.header.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.prefixPaths is None:
            raise TProtocolException(message='Required field prefixPaths is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PullSchemaResp(object):
    """
    Attributes:
     - schemaBytes

    """


    def __init__(self, schemaBytes=None,):
        self.schemaBytes = schemaBytes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.schemaBytes = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PullSchemaResp')
        if self.schemaBytes is not None:
            oprot.writeFieldBegin('schemaBytes', TType.STRING, 1)
            oprot.writeBinary(self.schemaBytes)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.schemaBytes is None:
            raise TProtocolException(message='Required field schemaBytes is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SingleSeriesQueryRequest(object):
    """
    Attributes:
     - path
     - timeFilterBytes
     - valueFilterBytes
     - queryId
     - requester
     - header
     - dataTypeOrdinal
     - deviceMeasurements
     - ascending
     - fetchSize
     - deduplicatedPathNum

    """


    def __init__(self, path=None, timeFilterBytes=None, valueFilterBytes=None, queryId=None, requester=None, header=None, dataTypeOrdinal=None, deviceMeasurements=None, ascending=None, fetchSize=None, deduplicatedPathNum=None,):
        self.path = path
        self.timeFilterBytes = timeFilterBytes
        self.valueFilterBytes = valueFilterBytes
        self.queryId = queryId
        self.requester = requester
        self.header = header
        self.dataTypeOrdinal = dataTypeOrdinal
        self.deviceMeasurements = deviceMeasurements
        self.ascending = ascending
        self.fetchSize = fetchSize
        self.deduplicatedPathNum = deduplicatedPathNum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.timeFilterBytes = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.valueFilterBytes = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.queryId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.requester = Node()
                    self.requester.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.header = Node()
                    self.header.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.dataTypeOrdinal = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.SET:
                    self.deviceMeasurements = set()
                    (_etype40, _size37) = iprot.readSetBegin()
                    for _i41 in range(_size37):
                        _elem42 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.deviceMeasurements.add(_elem42)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.ascending = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.fetchSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.deduplicatedPathNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SingleSeriesQueryRequest')
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 1)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.timeFilterBytes is not None:
            oprot.writeFieldBegin('timeFilterBytes', TType.STRING, 2)
            oprot.writeBinary(self.timeFilterBytes)
            oprot.writeFieldEnd()
        if self.valueFilterBytes is not None:
            oprot.writeFieldBegin('valueFilterBytes', TType.STRING, 3)
            oprot.writeBinary(self.valueFilterBytes)
            oprot.writeFieldEnd()
        if self.queryId is not None:
            oprot.writeFieldBegin('queryId', TType.I64, 4)
            oprot.writeI64(self.queryId)
            oprot.writeFieldEnd()
        if self.requester is not None:
            oprot.writeFieldBegin('requester', TType.STRUCT, 5)
            self.requester.write(oprot)
            oprot.writeFieldEnd()
        if self.header is not None:
            oprot.writeFieldBegin('header', TType.STRUCT, 6)
            self.header.write(oprot)
            oprot.writeFieldEnd()
        if self.dataTypeOrdinal is not None:
            oprot.writeFieldBegin('dataTypeOrdinal', TType.I32, 7)
            oprot.writeI32(self.dataTypeOrdinal)
            oprot.writeFieldEnd()
        if self.deviceMeasurements is not None:
            oprot.writeFieldBegin('deviceMeasurements', TType.SET, 8)
            oprot.writeSetBegin(TType.STRING, len(self.deviceMeasurements))
            for iter43 in self.deviceMeasurements:
                oprot.writeString(iter43.encode('utf-8') if sys.version_info[0] == 2 else iter43)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.ascending is not None:
            oprot.writeFieldBegin('ascending', TType.BOOL, 9)
            oprot.writeBool(self.ascending)
            oprot.writeFieldEnd()
        if self.fetchSize is not None:
            oprot.writeFieldBegin('fetchSize', TType.I32, 10)
            oprot.writeI32(self.fetchSize)
            oprot.writeFieldEnd()
        if self.deduplicatedPathNum is not None:
            oprot.writeFieldBegin('deduplicatedPathNum', TType.I32, 11)
            oprot.writeI32(self.deduplicatedPathNum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.path is None:
            raise TProtocolException(message='Required field path is unset!')
        if self.queryId is None:
            raise TProtocolException(message='Required field queryId is unset!')
        if self.requester is None:
            raise TProtocolException(message='Required field requester is unset!')
        if self.header is None:
            raise TProtocolException(message='Required field header is unset!')
        if self.dataTypeOrdinal is None:
            raise TProtocolException(message='Required field dataTypeOrdinal is unset!')
        if self.deviceMeasurements is None:
            raise TProtocolException(message='Required field deviceMeasurements is unset!')
        if self.ascending is None:
            raise TProtocolException(message='Required field ascending is unset!')
        if self.fetchSize is None:
            raise TProtocolException(message='Required field fetchSize is unset!')
        if self.deduplicatedPathNum is None:
            raise TProtocolException(message='Required field deduplicatedPathNum is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PreviousFillRequest(object):
    """
    Attributes:
     - path
     - queryTime
     - beforeRange
     - queryId
     - requester
     - header
     - dataTypeOrdinal
     - deviceMeasurements

    """


    def __init__(self, path=None, queryTime=None, beforeRange=None, queryId=None, requester=None, header=None, dataTypeOrdinal=None, deviceMeasurements=None,):
        self.path = path
        self.queryTime = queryTime
        self.beforeRange = beforeRange
        self.queryId = queryId
        self.requester = requester
        self.header = header
        self.dataTypeOrdinal = dataTypeOrdinal
        self.deviceMeasurements = deviceMeasurements

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.queryTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.beforeRange = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.queryId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.requester = Node()
                    self.requester.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.header = Node()
                    self.header.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.dataTypeOrdinal = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.SET:
                    self.deviceMeasurements = set()
                    (_etype47, _size44) = iprot.readSetBegin()
                    for _i48 in range(_size44):
                        _elem49 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.deviceMeasurements.add(_elem49)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PreviousFillRequest')
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 1)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.queryTime is not None:
            oprot.writeFieldBegin('queryTime', TType.I64, 2)
            oprot.writeI64(self.queryTime)
            oprot.writeFieldEnd()
        if self.beforeRange is not None:
            oprot.writeFieldBegin('beforeRange', TType.I64, 3)
            oprot.writeI64(self.beforeRange)
            oprot.writeFieldEnd()
        if self.queryId is not None:
            oprot.writeFieldBegin('queryId', TType.I64, 4)
            oprot.writeI64(self.queryId)
            oprot.writeFieldEnd()
        if self.requester is not None:
            oprot.writeFieldBegin('requester', TType.STRUCT, 5)
            self.requester.write(oprot)
            oprot.writeFieldEnd()
        if self.header is not None:
            oprot.writeFieldBegin('header', TType.STRUCT, 6)
            self.header.write(oprot)
            oprot.writeFieldEnd()
        if self.dataTypeOrdinal is not None:
            oprot.writeFieldBegin('dataTypeOrdinal', TType.I32, 7)
            oprot.writeI32(self.dataTypeOrdinal)
            oprot.writeFieldEnd()
        if self.deviceMeasurements is not None:
            oprot.writeFieldBegin('deviceMeasurements', TType.SET, 8)
            oprot.writeSetBegin(TType.STRING, len(self.deviceMeasurements))
            for iter50 in self.deviceMeasurements:
                oprot.writeString(iter50.encode('utf-8') if sys.version_info[0] == 2 else iter50)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.path is None:
            raise TProtocolException(message='Required field path is unset!')
        if self.queryTime is None:
            raise TProtocolException(message='Required field queryTime is unset!')
        if self.beforeRange is None:
            raise TProtocolException(message='Required field beforeRange is unset!')
        if self.queryId is None:
            raise TProtocolException(message='Required field queryId is unset!')
        if self.requester is None:
            raise TProtocolException(message='Required field requester is unset!')
        if self.header is None:
            raise TProtocolException(message='Required field header is unset!')
        if self.dataTypeOrdinal is None:
            raise TProtocolException(message='Required field dataTypeOrdinal is unset!')
        if self.deviceMeasurements is None:
            raise TProtocolException(message='Required field deviceMeasurements is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TNodeStatus(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TNodeStatus')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetAggrResultRequest(object):
    """
    Attributes:
     - path
     - aggregations
     - dataTypeOrdinal
     - timeFilterBytes
     - header
     - queryId
     - requestor
     - deviceMeasurements
     - ascending

    """


    def __init__(self, path=None, aggregations=None, dataTypeOrdinal=None, timeFilterBytes=None, header=None, queryId=None, requestor=None, deviceMeasurements=None, ascending=None,):
        self.path = path
        self.aggregations = aggregations
        self.dataTypeOrdinal = dataTypeOrdinal
        self.timeFilterBytes = timeFilterBytes
        self.header = header
        self.queryId = queryId
        self.requestor = requestor
        self.deviceMeasurements = deviceMeasurements
        self.ascending = ascending

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.aggregations = []
                    (_etype54, _size51) = iprot.readListBegin()
                    for _i55 in range(_size51):
                        _elem56 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.aggregations.append(_elem56)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.dataTypeOrdinal = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.timeFilterBytes = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.header = Node()
                    self.header.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.queryId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.requestor = Node()
                    self.requestor.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.SET:
                    self.deviceMeasurements = set()
                    (_etype60, _size57) = iprot.readSetBegin()
                    for _i61 in range(_size57):
                        _elem62 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.deviceMeasurements.add(_elem62)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.ascending = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetAggrResultRequest')
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 1)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.aggregations is not None:
            oprot.writeFieldBegin('aggregations', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.aggregations))
            for iter63 in self.aggregations:
                oprot.writeString(iter63.encode('utf-8') if sys.version_info[0] == 2 else iter63)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dataTypeOrdinal is not None:
            oprot.writeFieldBegin('dataTypeOrdinal', TType.I32, 3)
            oprot.writeI32(self.dataTypeOrdinal)
            oprot.writeFieldEnd()
        if self.timeFilterBytes is not None:
            oprot.writeFieldBegin('timeFilterBytes', TType.STRING, 4)
            oprot.writeBinary(self.timeFilterBytes)
            oprot.writeFieldEnd()
        if self.header is not None:
            oprot.writeFieldBegin('header', TType.STRUCT, 5)
            self.header.write(oprot)
            oprot.writeFieldEnd()
        if self.queryId is not None:
            oprot.writeFieldBegin('queryId', TType.I64, 6)
            oprot.writeI64(self.queryId)
            oprot.writeFieldEnd()
        if self.requestor is not None:
            oprot.writeFieldBegin('requestor', TType.STRUCT, 7)
            self.requestor.write(oprot)
            oprot.writeFieldEnd()
        if self.deviceMeasurements is not None:
            oprot.writeFieldBegin('deviceMeasurements', TType.SET, 8)
            oprot.writeSetBegin(TType.STRING, len(self.deviceMeasurements))
            for iter64 in self.deviceMeasurements:
                oprot.writeString(iter64.encode('utf-8') if sys.version_info[0] == 2 else iter64)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.ascending is not None:
            oprot.writeFieldBegin('ascending', TType.BOOL, 9)
            oprot.writeBool(self.ascending)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.path is None:
            raise TProtocolException(message='Required field path is unset!')
        if self.aggregations is None:
            raise TProtocolException(message='Required field aggregations is unset!')
        if self.dataTypeOrdinal is None:
            raise TProtocolException(message='Required field dataTypeOrdinal is unset!')
        if self.header is None:
            raise TProtocolException(message='Required field header is unset!')
        if self.queryId is None:
            raise TProtocolException(message='Required field queryId is unset!')
        if self.requestor is None:
            raise TProtocolException(message='Required field requestor is unset!')
        if self.deviceMeasurements is None:
            raise TProtocolException(message='Required field deviceMeasurements is unset!')
        if self.ascending is None:
            raise TProtocolException(message='Required field ascending is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GroupByRequest(object):
    """
    Attributes:
     - path
     - dataTypeOrdinal
     - timeFilterBytes
     - queryId
     - aggregationTypeOrdinals
     - header
     - requestor
     - deviceMeasurements
     - ascending

    """


    def __init__(self, path=None, dataTypeOrdinal=None, timeFilterBytes=None, queryId=None, aggregationTypeOrdinals=None, header=None, requestor=None, deviceMeasurements=None, ascending=None,):
        self.path = path
        self.dataTypeOrdinal = dataTypeOrdinal
        self.timeFilterBytes = timeFilterBytes
        self.queryId = queryId
        self.aggregationTypeOrdinals = aggregationTypeOrdinals
        self.header = header
        self.requestor = requestor
        self.deviceMeasurements = deviceMeasurements
        self.ascending = ascending

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dataTypeOrdinal = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.timeFilterBytes = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.queryId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.aggregationTypeOrdinals = []
                    (_etype68, _size65) = iprot.readListBegin()
                    for _i69 in range(_size65):
                        _elem70 = iprot.readI32()
                        self.aggregationTypeOrdinals.append(_elem70)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.header = Node()
                    self.header.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.requestor = Node()
                    self.requestor.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.SET:
                    self.deviceMeasurements = set()
                    (_etype74, _size71) = iprot.readSetBegin()
                    for _i75 in range(_size71):
                        _elem76 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.deviceMeasurements.add(_elem76)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.ascending = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GroupByRequest')
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 1)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.dataTypeOrdinal is not None:
            oprot.writeFieldBegin('dataTypeOrdinal', TType.I32, 2)
            oprot.writeI32(self.dataTypeOrdinal)
            oprot.writeFieldEnd()
        if self.timeFilterBytes is not None:
            oprot.writeFieldBegin('timeFilterBytes', TType.STRING, 3)
            oprot.writeBinary(self.timeFilterBytes)
            oprot.writeFieldEnd()
        if self.queryId is not None:
            oprot.writeFieldBegin('queryId', TType.I64, 4)
            oprot.writeI64(self.queryId)
            oprot.writeFieldEnd()
        if self.aggregationTypeOrdinals is not None:
            oprot.writeFieldBegin('aggregationTypeOrdinals', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.aggregationTypeOrdinals))
            for iter77 in self.aggregationTypeOrdinals:
                oprot.writeI32(iter77)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.header is not None:
            oprot.writeFieldBegin('header', TType.STRUCT, 6)
            self.header.write(oprot)
            oprot.writeFieldEnd()
        if self.requestor is not None:
            oprot.writeFieldBegin('requestor', TType.STRUCT, 7)
            self.requestor.write(oprot)
            oprot.writeFieldEnd()
        if self.deviceMeasurements is not None:
            oprot.writeFieldBegin('deviceMeasurements', TType.SET, 8)
            oprot.writeSetBegin(TType.STRING, len(self.deviceMeasurements))
            for iter78 in self.deviceMeasurements:
                oprot.writeString(iter78.encode('utf-8') if sys.version_info[0] == 2 else iter78)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.ascending is not None:
            oprot.writeFieldBegin('ascending', TType.BOOL, 9)
            oprot.writeBool(self.ascending)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.path is None:
            raise TProtocolException(message='Required field path is unset!')
        if self.dataTypeOrdinal is None:
            raise TProtocolException(message='Required field dataTypeOrdinal is unset!')
        if self.queryId is None:
            raise TProtocolException(message='Required field queryId is unset!')
        if self.aggregationTypeOrdinals is None:
            raise TProtocolException(message='Required field aggregationTypeOrdinals is unset!')
        if self.header is None:
            raise TProtocolException(message='Required field header is unset!')
        if self.requestor is None:
            raise TProtocolException(message='Required field requestor is unset!')
        if self.deviceMeasurements is None:
            raise TProtocolException(message='Required field deviceMeasurements is unset!')
        if self.ascending is None:
            raise TProtocolException(message='Required field ascending is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LastQueryRequest(object):
    """
    Attributes:
     - paths
     - dataTypeOrdinals
     - queryId
     - deviceMeasurements
     - filterBytes
     - header
     - requestor

    """


    def __init__(self, paths=None, dataTypeOrdinals=None, queryId=None, deviceMeasurements=None, filterBytes=None, header=None, requestor=None,):
        self.paths = paths
        self.dataTypeOrdinals = dataTypeOrdinals
        self.queryId = queryId
        self.deviceMeasurements = deviceMeasurements
        self.filterBytes = filterBytes
        self.header = header
        self.requestor = requestor

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.paths = []
                    (_etype82, _size79) = iprot.readListBegin()
                    for _i83 in range(_size79):
                        _elem84 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.paths.append(_elem84)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.dataTypeOrdinals = []
                    (_etype88, _size85) = iprot.readListBegin()
                    for _i89 in range(_size85):
                        _elem90 = iprot.readI32()
                        self.dataTypeOrdinals.append(_elem90)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.queryId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.deviceMeasurements = {}
                    (_ktype92, _vtype93, _size91) = iprot.readMapBegin()
                    for _i95 in range(_size91):
                        _key96 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val97 = set()
                        (_etype101, _size98) = iprot.readSetBegin()
                        for _i102 in range(_size98):
                            _elem103 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val97.add(_elem103)
                        iprot.readSetEnd()
                        self.deviceMeasurements[_key96] = _val97
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.filterBytes = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.header = Node()
                    self.header.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.requestor = Node()
                    self.requestor.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LastQueryRequest')
        if self.paths is not None:
            oprot.writeFieldBegin('paths', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.paths))
            for iter104 in self.paths:
                oprot.writeString(iter104.encode('utf-8') if sys.version_info[0] == 2 else iter104)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dataTypeOrdinals is not None:
            oprot.writeFieldBegin('dataTypeOrdinals', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.dataTypeOrdinals))
            for iter105 in self.dataTypeOrdinals:
                oprot.writeI32(iter105)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.queryId is not None:
            oprot.writeFieldBegin('queryId', TType.I64, 3)
            oprot.writeI64(self.queryId)
            oprot.writeFieldEnd()
        if self.deviceMeasurements is not None:
            oprot.writeFieldBegin('deviceMeasurements', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.SET, len(self.deviceMeasurements))
            for kiter106, viter107 in self.deviceMeasurements.items():
                oprot.writeString(kiter106.encode('utf-8') if sys.version_info[0] == 2 else kiter106)
                oprot.writeSetBegin(TType.STRING, len(viter107))
                for iter108 in viter107:
                    oprot.writeString(iter108.encode('utf-8') if sys.version_info[0] == 2 else iter108)
                oprot.writeSetEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.filterBytes is not None:
            oprot.writeFieldBegin('filterBytes', TType.STRING, 5)
            oprot.writeBinary(self.filterBytes)
            oprot.writeFieldEnd()
        if self.header is not None:
            oprot.writeFieldBegin('header', TType.STRUCT, 6)
            self.header.write(oprot)
            oprot.writeFieldEnd()
        if self.requestor is not None:
            oprot.writeFieldBegin('requestor', TType.STRUCT, 7)
            self.requestor.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.paths is None:
            raise TProtocolException(message='Required field paths is unset!')
        if self.dataTypeOrdinals is None:
            raise TProtocolException(message='Required field dataTypeOrdinals is unset!')
        if self.queryId is None:
            raise TProtocolException(message='Required field queryId is unset!')
        if self.deviceMeasurements is None:
            raise TProtocolException(message='Required field deviceMeasurements is unset!')
        if self.header is None:
            raise TProtocolException(message='Required field header is unset!')
        if self.requestor is None:
            raise TProtocolException(message='Required field requestor is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetAllPathsResult(object):
    """
    Attributes:
     - paths
     - aliasList

    """


    def __init__(self, paths=None, aliasList=None,):
        self.paths = paths
        self.aliasList = aliasList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.paths = []
                    (_etype112, _size109) = iprot.readListBegin()
                    for _i113 in range(_size109):
                        _elem114 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.paths.append(_elem114)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.aliasList = []
                    (_etype118, _size115) = iprot.readListBegin()
                    for _i119 in range(_size115):
                        _elem120 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.aliasList.append(_elem120)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetAllPathsResult')
        if self.paths is not None:
            oprot.writeFieldBegin('paths', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.paths))
            for iter121 in self.paths:
                oprot.writeString(iter121.encode('utf-8') if sys.version_info[0] == 2 else iter121)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.aliasList is not None:
            oprot.writeFieldBegin('aliasList', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.aliasList))
            for iter122 in self.aliasList:
                oprot.writeString(iter122.encode('utf-8') if sys.version_info[0] == 2 else iter122)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.paths is None:
            raise TProtocolException(message='Required field paths is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(HeartBeatRequest)
HeartBeatRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'term', None, None, ),  # 1
    (2, TType.I64, 'commitLogIndex', None, None, ),  # 2
    (3, TType.I64, 'commitLogTerm', None, None, ),  # 3
    (4, TType.STRUCT, 'leader', [Node, None], None, ),  # 4
    (5, TType.BOOL, 'requireIdentifier', None, None, ),  # 5
    (6, TType.BOOL, 'regenerateIdentifier', None, None, ),  # 6
    (7, TType.STRING, 'partitionTableBytes', 'BINARY', None, ),  # 7
    (8, TType.STRUCT, 'header', [Node, None], None, ),  # 8
)
all_structs.append(HeartBeatResponse)
HeartBeatResponse.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'term', None, None, ),  # 1
    (2, TType.I64, 'lastLogIndex', None, None, ),  # 2
    (3, TType.I64, 'lastLogTerm', None, None, ),  # 3
    (4, TType.STRUCT, 'follower', [Node, None], None, ),  # 4
    (5, TType.I32, 'followerIdentifier', None, None, ),  # 5
    (6, TType.BOOL, 'requirePartitionTable', None, None, ),  # 6
    (7, TType.STRUCT, 'header', [Node, None], None, ),  # 7
)
all_structs.append(ElectionRequest)
ElectionRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'term', None, None, ),  # 1
    (2, TType.I64, 'lastLogTerm', None, None, ),  # 2
    (3, TType.I64, 'lastLogIndex', None, None, ),  # 3
    (4, TType.STRUCT, 'elector', [Node, None], None, ),  # 4
    (5, TType.STRUCT, 'header', [Node, None], None, ),  # 5
    (6, TType.I64, 'dataLogLastIndex', None, None, ),  # 6
    (7, TType.I64, 'dataLogLastTerm', None, None, ),  # 7
)
all_structs.append(AppendEntryRequest)
AppendEntryRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'term', None, None, ),  # 1
    (2, TType.STRUCT, 'leader', [Node, None], None, ),  # 2
    (3, TType.I64, 'prevLogIndex', None, None, ),  # 3
    (4, TType.I64, 'prevLogTerm', None, None, ),  # 4
    (5, TType.I64, 'leaderCommit', None, None, ),  # 5
    (6, TType.STRING, 'entry', 'BINARY', None, ),  # 6
    (7, TType.STRUCT, 'header', [Node, None], None, ),  # 7
)
all_structs.append(AppendEntriesRequest)
AppendEntriesRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'term', None, None, ),  # 1
    (2, TType.STRUCT, 'leader', [Node, None], None, ),  # 2
    (3, TType.LIST, 'entries', (TType.STRING, 'BINARY', False), None, ),  # 3
    (4, TType.I64, 'prevLogIndex', None, None, ),  # 4
    (5, TType.I64, 'prevLogTerm', None, None, ),  # 5
    (6, TType.I64, 'leaderCommit', None, None, ),  # 6
    (7, TType.STRUCT, 'header', [Node, None], None, ),  # 7
)
all_structs.append(AddNodeResponse)
AddNodeResponse.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'respNum', None, None, ),  # 1
    (2, TType.STRING, 'partitionTableBytes', 'BINARY', None, ),  # 2
    (3, TType.STRUCT, 'checkStatusResponse', [CheckStatusResponse, None], None, ),  # 3
)
all_structs.append(Node)
Node.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'internalIp', 'UTF8', None, ),  # 1
    (2, TType.I32, 'metaPort', None, None, ),  # 2
    (3, TType.I32, 'nodeIdentifier', None, None, ),  # 3
    (4, TType.I32, 'dataPort', None, None, ),  # 4
    (5, TType.I32, 'clientPort', None, None, ),  # 5
    (6, TType.STRING, 'clientIp', 'UTF8', None, ),  # 6
)
all_structs.append(StartUpStatus)
StartUpStatus.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'partitionInterval', None, None, ),  # 1
    (2, TType.I32, 'hashSalt', None, None, ),  # 2
    (3, TType.I32, 'replicationNumber', None, None, ),  # 3
    (4, TType.LIST, 'seedNodeList', (TType.STRUCT, [Node, None], False), None, ),  # 4
    (5, TType.STRING, 'clusterName', 'UTF8', None, ),  # 5
)
all_structs.append(CheckStatusResponse)
CheckStatusResponse.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'partitionalIntervalEquals', None, None, ),  # 1
    (2, TType.BOOL, 'hashSaltEquals', None, None, ),  # 2
    (3, TType.BOOL, 'replicationNumEquals', None, None, ),  # 3
    (4, TType.BOOL, 'seedNodeEquals', None, None, ),  # 4
    (5, TType.BOOL, 'clusterNameEquals', None, None, ),  # 5
)
all_structs.append(SendSnapshotRequest)
SendSnapshotRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'snapshotBytes', 'BINARY', None, ),  # 1
    (2, TType.STRUCT, 'header', [Node, None], None, ),  # 2
)
all_structs.append(PullSnapshotRequest)
PullSnapshotRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'requiredSlots', (TType.I32, None, False), None, ),  # 1
    (2, TType.STRUCT, 'header', [Node, None], None, ),  # 2
    (3, TType.BOOL, 'requireReadOnly', None, None, ),  # 3
)
all_structs.append(PullSnapshotResp)
PullSnapshotResp.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'snapshotBytes', (TType.I32, None, TType.STRING, 'BINARY', False), None, ),  # 1
)
all_structs.append(ExecutNonQueryReq)
ExecutNonQueryReq.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'planBytes', 'BINARY', None, ),  # 1
    (2, TType.STRUCT, 'header', [Node, None], None, ),  # 2
)
all_structs.append(PullSchemaRequest)
PullSchemaRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'prefixPaths', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.STRUCT, 'header', [Node, None], None, ),  # 2
)
all_structs.append(PullSchemaResp)
PullSchemaResp.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'schemaBytes', 'BINARY', None, ),  # 1
)
all_structs.append(SingleSeriesQueryRequest)
SingleSeriesQueryRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'path', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'timeFilterBytes', 'BINARY', None, ),  # 2
    (3, TType.STRING, 'valueFilterBytes', 'BINARY', None, ),  # 3
    (4, TType.I64, 'queryId', None, None, ),  # 4
    (5, TType.STRUCT, 'requester', [Node, None], None, ),  # 5
    (6, TType.STRUCT, 'header', [Node, None], None, ),  # 6
    (7, TType.I32, 'dataTypeOrdinal', None, None, ),  # 7
    (8, TType.SET, 'deviceMeasurements', (TType.STRING, 'UTF8', False), None, ),  # 8
    (9, TType.BOOL, 'ascending', None, None, ),  # 9
    (10, TType.I32, 'fetchSize', None, None, ),  # 10
    (11, TType.I32, 'deduplicatedPathNum', None, None, ),  # 11
)
all_structs.append(PreviousFillRequest)
PreviousFillRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'path', 'UTF8', None, ),  # 1
    (2, TType.I64, 'queryTime', None, None, ),  # 2
    (3, TType.I64, 'beforeRange', None, None, ),  # 3
    (4, TType.I64, 'queryId', None, None, ),  # 4
    (5, TType.STRUCT, 'requester', [Node, None], None, ),  # 5
    (6, TType.STRUCT, 'header', [Node, None], None, ),  # 6
    (7, TType.I32, 'dataTypeOrdinal', None, None, ),  # 7
    (8, TType.SET, 'deviceMeasurements', (TType.STRING, 'UTF8', False), None, ),  # 8
)
all_structs.append(TNodeStatus)
TNodeStatus.thrift_spec = (
)
all_structs.append(GetAggrResultRequest)
GetAggrResultRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'path', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'aggregations', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.I32, 'dataTypeOrdinal', None, None, ),  # 3
    (4, TType.STRING, 'timeFilterBytes', 'BINARY', None, ),  # 4
    (5, TType.STRUCT, 'header', [Node, None], None, ),  # 5
    (6, TType.I64, 'queryId', None, None, ),  # 6
    (7, TType.STRUCT, 'requestor', [Node, None], None, ),  # 7
    (8, TType.SET, 'deviceMeasurements', (TType.STRING, 'UTF8', False), None, ),  # 8
    (9, TType.BOOL, 'ascending', None, None, ),  # 9
)
all_structs.append(GroupByRequest)
GroupByRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'path', 'UTF8', None, ),  # 1
    (2, TType.I32, 'dataTypeOrdinal', None, None, ),  # 2
    (3, TType.STRING, 'timeFilterBytes', 'BINARY', None, ),  # 3
    (4, TType.I64, 'queryId', None, None, ),  # 4
    (5, TType.LIST, 'aggregationTypeOrdinals', (TType.I32, None, False), None, ),  # 5
    (6, TType.STRUCT, 'header', [Node, None], None, ),  # 6
    (7, TType.STRUCT, 'requestor', [Node, None], None, ),  # 7
    (8, TType.SET, 'deviceMeasurements', (TType.STRING, 'UTF8', False), None, ),  # 8
    (9, TType.BOOL, 'ascending', None, None, ),  # 9
)
all_structs.append(LastQueryRequest)
LastQueryRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'paths', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.LIST, 'dataTypeOrdinals', (TType.I32, None, False), None, ),  # 2
    (3, TType.I64, 'queryId', None, None, ),  # 3
    (4, TType.MAP, 'deviceMeasurements', (TType.STRING, 'UTF8', TType.SET, (TType.STRING, 'UTF8', False), False), None, ),  # 4
    (5, TType.STRING, 'filterBytes', 'BINARY', None, ),  # 5
    (6, TType.STRUCT, 'header', [Node, None], None, ),  # 6
    (7, TType.STRUCT, 'requestor', [Node, None], None, ),  # 7
)
all_structs.append(GetAllPathsResult)
GetAllPathsResult.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'paths', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.LIST, 'aliasList', (TType.STRING, 'UTF8', False), None, ),  # 2
)
fix_spec(all_structs)
del all_structs
