Metadata-Version: 2.1
Name: tsod
Version: 0.1.0
Summary: Time series anomaly detection.
Home-page: https://github.com/DHI/tsod
Author: Henrik Andersson
Author-email: jan@dhigroup.com
License: MIT
Platform: UNKNOWN
Description-Content-Type: text/markdown
Requires-Dist: pandas (>=1.2.0)
Requires-Dist: numba
Provides-Extra: dev
Requires-Dist: pytest (>=6.2.1) ; extra == 'dev'
Provides-Extra: ml
Requires-Dist: pyod ; extra == 'ml'
Requires-Dist: keras ; extra == 'ml'
Requires-Dist: tensorflow ; extra == 'ml'
Provides-Extra: test
Requires-Dist: pytest (>=6.2.1) ; extra == 'test'

# tsod: Anomaly Detection for time series data.
[![Full test](https://github.com/DHI/tsod/actions/workflows/python-app.yml/badge.svg)](https://github.com/DHI/tsod/actions/workflows/python-app.yml)

![univariate](images/anomaly.png)

Sensors often provide faulty or missing observations. These anomalies must be detected automatically and replaced with more feasible values before feeding the data to numerical simulation engines as boundary conditions or real time decision systems.

This package aims to provide examples and algorithms for detecting anomalies in time series data specifically tailored to DHI users and the water domain. It is simple to install and deploy operationally and is accessible to everyone (open-source).



# Installation
pip install git+https://github.com/DHI/tsod.git

# Definitions
Note that we distinguish between [two types of anomaly detection](https://scikit-learn.org/stable/modules/outlier_detection.html)

- Outlier detection (unsupervised anomaly detection)
The training data may contain outliers, i.e. observations far from most other observations. Outlier detectors try to concentrate on the observations in the training data that similar and close together, and ignores observations further away.

- Novelty detection (semi-supervised anomaly detection)
The training data is considered "normal" and is not polluted by outliers. New test data observations can be categorized as an outlier and is in this context called a novelty.


# Contributing guidelines
- Follow PEP8 code style. This is automatically checked during Pull Requests.

- Raise custom exceptions. This makes it easier to catch and separate built-in errors from our own throws.

- If citing or re-using other code please make sure their license is also consistent with our policy.



