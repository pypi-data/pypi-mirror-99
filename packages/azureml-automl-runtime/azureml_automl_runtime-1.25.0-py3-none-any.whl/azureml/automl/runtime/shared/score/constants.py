# ---------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# ---------------------------------------------------------
"""Metrics constants."""
import sys

import numpy as np

# Task Types

CLASSIFICATION = 'classification'
REGRESSION = 'regression'
FORECASTING = 'forecasting'
IMAGE_CLASSIFICATION = 'image-classification'
IMAGE_MULTI_LABEL_CLASSIFICATION = 'image-multi-labeling'
IMAGE_OBJECT_DETECTION = 'image-object-detection'
IMAGE_INSTANCE_SEGMENTATION = 'image-instance-segmentation'
TEXT_CLASSIFICATION_MULTILABEL = 'text-classification-multilabel'

TASKS = {CLASSIFICATION, REGRESSION, FORECASTING,
         IMAGE_CLASSIFICATION, IMAGE_MULTI_LABEL_CLASSIFICATION, IMAGE_OBJECT_DETECTION,
         IMAGE_INSTANCE_SEGMENTATION, TEXT_CLASSIFICATION_MULTILABEL}

# Classification Metrics

ACCURACY = 'accuracy'
WEIGHTED_ACCURACY = 'weighted_accuracy'
BALANCED_ACCURACY = 'balanced_accuracy'
NORM_MACRO_RECALL = 'norm_macro_recall'
LOG_LOSS = 'log_loss'
AUC_MACRO = 'AUC_macro'
AUC_MICRO = 'AUC_micro'
AUC_WEIGHTED = 'AUC_weighted'
F1_MACRO = 'f1_score_macro'
F1_MICRO = 'f1_score_micro'
F1_WEIGHTED = 'f1_score_weighted'
PRECISION_MACRO = 'precision_score_macro'
PRECISION_MICRO = 'precision_score_micro'
PRECISION_WEIGHTED = 'precision_score_weighted'
RECALL_MACRO = 'recall_score_macro'
RECALL_MICRO = 'recall_score_micro'
RECALL_WEIGHTED = 'recall_score_weighted'
AVERAGE_PRECISION_MACRO = 'average_precision_score_macro'
AVERAGE_PRECISION_MICRO = 'average_precision_score_micro'
AVERAGE_PRECISION_WEIGHTED = 'average_precision_score_weighted'
MATTHEWS_CORRELATION = 'matthews_correlation'
ACCURACY_TABLE = 'accuracy_table'
CONFUSION_MATRIX = 'confusion_matrix'

CLASSIFICATION_SCALAR_SET = {
    ACCURACY, WEIGHTED_ACCURACY, BALANCED_ACCURACY,
    NORM_MACRO_RECALL, LOG_LOSS,
    AUC_MACRO, AUC_MICRO, AUC_WEIGHTED,
    F1_MACRO, F1_MICRO, F1_WEIGHTED,
    PRECISION_MACRO, PRECISION_MICRO, PRECISION_WEIGHTED,
    RECALL_MACRO, RECALL_MICRO, RECALL_WEIGHTED,
    AVERAGE_PRECISION_MACRO, AVERAGE_PRECISION_MICRO, AVERAGE_PRECISION_WEIGHTED,
    MATTHEWS_CORRELATION,
}

CLASSIFICATION_NONSCALAR_SET = {
    ACCURACY_TABLE,
    CONFUSION_MATRIX
}

CLASSIFICATION_SET = CLASSIFICATION_SCALAR_SET | CLASSIFICATION_NONSCALAR_SET

CLASSIFICATION_PRIMARY_SET = {
    ACCURACY, AUC_WEIGHTED, NORM_MACRO_RECALL,
    AVERAGE_PRECISION_WEIGHTED, PRECISION_WEIGHTED
}

CLASSIFICATION_BALANCED_SET = {
    # Metrics for which class_weights are recommended
    BALANCED_ACCURACY, AUC_MACRO, NORM_MACRO_RECALL, AVERAGE_PRECISION_WEIGHTED,
    PRECISION_MACRO, F1_MACRO, RECALL_MACRO
}

# Regression Metrics

EXPLAINED_VARIANCE = 'explained_variance'
R2_SCORE = 'r2_score'
SPEARMAN = 'spearman_correlation'
MAPE = 'mean_absolute_percentage_error'
MEAN_ABS_ERROR = 'mean_absolute_error'
NORM_MEAN_ABS_ERROR = 'normalized_mean_absolute_error'
MEDIAN_ABS_ERROR = 'median_absolute_error'
NORM_MEDIAN_ABS_ERROR = 'normalized_median_absolute_error'
RMSE = 'root_mean_squared_error'
NORM_RMSE = 'normalized_root_mean_squared_error'
RMSLE = 'root_mean_squared_log_error'
NORM_RMSLE = 'normalized_root_mean_squared_log_error'
RESIDUALS = 'residuals'
PREDICTED_TRUE = 'predicted_true'

REGRESSION_SCALAR_SET = {
    EXPLAINED_VARIANCE, R2_SCORE, SPEARMAN, MAPE,
    MEAN_ABS_ERROR, NORM_MEAN_ABS_ERROR,
    MEDIAN_ABS_ERROR, NORM_MEDIAN_ABS_ERROR,
    RMSE, NORM_RMSE,
    RMSLE, NORM_RMSLE
}

REGRESSION_NORMALIZED_SET = {
    NORM_MEAN_ABS_ERROR, NORM_MEDIAN_ABS_ERROR, NORM_RMSE, NORM_RMSLE
}

REGRESSION_NONSCALAR_SET = {
    RESIDUALS,
    PREDICTED_TRUE
}

REGRESSION_SET = REGRESSION_SCALAR_SET | REGRESSION_NONSCALAR_SET

REGRESSION_PRIMARY_SET = {
    R2_SCORE, SPEARMAN, NORM_RMSE, NORM_MEAN_ABS_ERROR
}

# Forecasting Metrics

FORECASTING_MAPE = 'forecast_mean_absolute_percentage_error'
FORECASTING_RESIDUALS = 'forecast_residuals'

FORECASTING_SCALAR_SET = set()

FORECASTING_NONSCALAR_SET = {
    FORECASTING_MAPE,
    FORECASTING_RESIDUALS
}

FORECASTING_SET = FORECASTING_SCALAR_SET | FORECASTING_NONSCALAR_SET

# Image Classification Metrics

IMAGE_CLASSIFICATION_SET = {
    ACCURACY
}

IMAGE_MULTI_LABEL_CLASSIFICATION_SET = {
    ACCURACY
}

# Image Object Detection Metrics
MEAN_AVERAGE_PRECISION = 'mean_average_precision'

IMAGE_OBJECT_DETECTION_SCALAR_SET = {
    MEAN_AVERAGE_PRECISION,
}

IMAGE_OBJECT_DETECTION_SET = {
    MEAN_AVERAGE_PRECISION,
}

# Text Classification Multilabel Metrics

TEXT_CLASSIFICATION_MULTILABEL_SET = {
    ACCURACY,
}

# All Metrics

FULL_SET = CLASSIFICATION_SET | REGRESSION_SET | FORECASTING_SET | IMAGE_OBJECT_DETECTION_SET

FULL_NONSCALAR_SET = (CLASSIFICATION_NONSCALAR_SET |
                      REGRESSION_NONSCALAR_SET |
                      FORECASTING_NONSCALAR_SET)

FULL_SCALAR_SET = CLASSIFICATION_SCALAR_SET | REGRESSION_SCALAR_SET | IMAGE_OBJECT_DETECTION_SCALAR_SET

METRICS_TASK_MAP = {
    CLASSIFICATION: CLASSIFICATION_SET,
    REGRESSION: REGRESSION_SET,
    FORECASTING: FORECASTING_SET,
    IMAGE_CLASSIFICATION: IMAGE_CLASSIFICATION_SET,
    IMAGE_MULTI_LABEL_CLASSIFICATION: IMAGE_MULTI_LABEL_CLASSIFICATION_SET,
    IMAGE_OBJECT_DETECTION: IMAGE_OBJECT_DETECTION_SET,
    IMAGE_INSTANCE_SEGMENTATION: IMAGE_OBJECT_DETECTION_SET,
    TEXT_CLASSIFICATION_MULTILABEL: TEXT_CLASSIFICATION_MULTILABEL_SET,
}

SAMPLE_WEIGHTS_UNSUPPORTED_SET = {
    SPEARMAN, WEIGHTED_ACCURACY, MEDIAN_ABS_ERROR, NORM_MEDIAN_ABS_ERROR
}

# Time Metrics

TRAIN_TIME = 'train time'
FIT_TIME = 'fit_time'
PREDICT_TIME = 'predict_time'

ALL_TIME = {TRAIN_TIME, FIT_TIME, PREDICT_TIME}

FULL_SCALAR_SET_TIME = FULL_SCALAR_SET | ALL_TIME

# Schema Types

# These types will be removed when the artifact-backed
# metrics are defined with protobuf
# Do not use these constants except in artifact-backed metrics
SCHEMA_TYPE_ACCURACY_TABLE = 'accuracy_table'
SCHEMA_TYPE_CONFUSION_MATRIX = 'confusion_matrix'
SCHEMA_TYPE_RESIDUALS = 'residuals'
SCHEMA_TYPE_PREDICTIONS = 'predictions'
SCHEMA_TYPE_MAPE = 'mape_table'

# Ranges

SCORE_UPPER_BOUND = sys.float_info.max

CLASSIFICATION_RANGES = {
    ACCURACY: (0.0, 1.0),
    WEIGHTED_ACCURACY: (0.0, 1.0),
    NORM_MACRO_RECALL: (0.0, 1.0),
    BALANCED_ACCURACY: (0.0, 1.0),
    LOG_LOSS: (0.0, SCORE_UPPER_BOUND),
    AUC_MACRO: (0.0, 1.0),
    AUC_MICRO: (0.0, 1.0),
    AUC_WEIGHTED: (0.0, 1.0),
    F1_MACRO: (0.0, 1.0),
    F1_MICRO: (0.0, 1.0),
    F1_WEIGHTED: (0.0, 1.0),
    PRECISION_MACRO: (0.0, 1.0),
    PRECISION_MICRO: (0.0, 1.0),
    PRECISION_WEIGHTED: (0.0, 1.0),
    RECALL_MACRO: (0.0, 1.0),
    RECALL_MICRO: (0.0, 1.0),
    RECALL_WEIGHTED: (0.0, 1.0),
    AVERAGE_PRECISION_MACRO: (0.0, 1.0),
    AVERAGE_PRECISION_MICRO: (0.0, 1.0),
    AVERAGE_PRECISION_WEIGHTED: (0.0, 1.0),
    ACCURACY_TABLE: (np.nan, np.nan),
    CONFUSION_MATRIX: (np.nan, np.nan),
    MATTHEWS_CORRELATION: (-1.0, 1.0),
}

REGRESSION_RANGES = {
    EXPLAINED_VARIANCE: (-SCORE_UPPER_BOUND, 1.0),
    R2_SCORE: (-1.0, 1.0),  # Clipped at -1 for Miro
    SPEARMAN: (-1.0, 1.0),
    MEAN_ABS_ERROR: (0.0, SCORE_UPPER_BOUND),
    NORM_MEAN_ABS_ERROR: (0.0, 1),  # Intentionally clipped at 1 for Miro
    MEDIAN_ABS_ERROR: (0.0, SCORE_UPPER_BOUND),
    NORM_MEDIAN_ABS_ERROR: (0.0, 1),  # Intentionally clipped at 1 for Miro
    RMSE: (0.0, SCORE_UPPER_BOUND),
    NORM_RMSE: (0.0, 1),  # Intentionally clipped at 1 for Miro
    RMSLE: (0.0, SCORE_UPPER_BOUND),
    NORM_RMSLE: (0.0, 1),  # Intentionally clipped at 1 for Miro
    MAPE: (0.0, SCORE_UPPER_BOUND),
    RESIDUALS: (np.nan, np.nan),
    PREDICTED_TRUE: (np.nan, np.nan),
}

FORECASTING_RANGES = {
    FORECASTING_MAPE: (np.nan, np.nan),
    FORECASTING_RESIDUALS: (np.nan, np.nan),
}

RANGES_TASK_MAP = {
    CLASSIFICATION: CLASSIFICATION_RANGES,
    REGRESSION: REGRESSION_RANGES,
    FORECASTING: FORECASTING_RANGES,
}

# Objectives

MAXIMIZE = "maximize"
MINIMIZE = "minimize"
NA = 'NA'

OBJECTIVES = {MAXIMIZE, MINIMIZE, NA}

CLASSIFICATION_OBJECTIVES = {
    ACCURACY: MAXIMIZE,
    WEIGHTED_ACCURACY: MAXIMIZE,
    NORM_MACRO_RECALL: MAXIMIZE,
    BALANCED_ACCURACY: MAXIMIZE,
    LOG_LOSS: MINIMIZE,
    AUC_MACRO: MAXIMIZE,
    AUC_MICRO: MAXIMIZE,
    AUC_WEIGHTED: MAXIMIZE,
    F1_MACRO: MAXIMIZE,
    F1_MICRO: MAXIMIZE,
    F1_WEIGHTED: MAXIMIZE,
    PRECISION_MACRO: MAXIMIZE,
    PRECISION_MICRO: MAXIMIZE,
    PRECISION_WEIGHTED: MAXIMIZE,
    RECALL_MACRO: MAXIMIZE,
    RECALL_MICRO: MAXIMIZE,
    RECALL_WEIGHTED: MAXIMIZE,
    AVERAGE_PRECISION_MACRO: MAXIMIZE,
    AVERAGE_PRECISION_MICRO: MAXIMIZE,
    AVERAGE_PRECISION_WEIGHTED: MAXIMIZE,
    ACCURACY_TABLE: NA,
    CONFUSION_MATRIX: NA,
    TRAIN_TIME: MINIMIZE,
    MATTHEWS_CORRELATION: MAXIMIZE,
}

REGRESSION_OBJECTIVES = {
    EXPLAINED_VARIANCE: MAXIMIZE,
    R2_SCORE: MAXIMIZE,
    SPEARMAN: MAXIMIZE,
    MEAN_ABS_ERROR: MINIMIZE,
    NORM_MEAN_ABS_ERROR: MINIMIZE,
    MEDIAN_ABS_ERROR: MINIMIZE,
    NORM_MEDIAN_ABS_ERROR: MINIMIZE,
    RMSE: MINIMIZE,
    NORM_RMSE: MINIMIZE,
    RMSLE: MINIMIZE,
    NORM_RMSLE: MINIMIZE,
    MAPE: MINIMIZE,
    RESIDUALS: NA,
    PREDICTED_TRUE: NA,
    TRAIN_TIME: MINIMIZE
}

FORECASTING_OBJECTIVES = {
    FORECASTING_RESIDUALS: NA,
    FORECASTING_MAPE: NA
}

IMAGE_CLASSIFICATION_OBJECTIVES = {
    ACCURACY: MAXIMIZE,
}

IMAGE_MULTI_LABEL_CLASSIFICATION_OBJECTIVES = {
    ACCURACY: MAXIMIZE,
}

IMAGE_OBJECT_DETECTION_OBJECTIVES = {
    MEAN_AVERAGE_PRECISION: MAXIMIZE,
}

TEXT_CLASSIFICATION_MULTILABEL_OBJECTIVES = {
    ACCURACY: MAXIMIZE,
}

FULL_OBJECTIVES = {**CLASSIFICATION_OBJECTIVES,
                   **REGRESSION_OBJECTIVES,
                   **FORECASTING_OBJECTIVES,
                   **IMAGE_CLASSIFICATION_OBJECTIVES,
                   **IMAGE_MULTI_LABEL_CLASSIFICATION_OBJECTIVES,
                   **IMAGE_OBJECT_DETECTION_OBJECTIVES,
                   **TEXT_CLASSIFICATION_MULTILABEL_OBJECTIVES}

OBJECTIVES_TASK_MAP = {
    CLASSIFICATION: CLASSIFICATION_OBJECTIVES,
    REGRESSION: REGRESSION_OBJECTIVES,
    FORECASTING: FORECASTING_OBJECTIVES,
    IMAGE_CLASSIFICATION: IMAGE_CLASSIFICATION_OBJECTIVES,
    IMAGE_MULTI_LABEL_CLASSIFICATION: IMAGE_MULTI_LABEL_CLASSIFICATION_OBJECTIVES,
    IMAGE_OBJECT_DETECTION: IMAGE_OBJECT_DETECTION_OBJECTIVES,
    IMAGE_INSTANCE_SEGMENTATION: IMAGE_OBJECT_DETECTION_OBJECTIVES,
    TEXT_CLASSIFICATION_MULTILABEL: TEXT_CLASSIFICATION_MULTILABEL_OBJECTIVES,
}

# Pipeline constants

DEFAULT_PIPELINE_SCORE = float('NaN')

# Metric restrictions

MINIMUM_METRIC_NAME_LENGTH = 3  # This is an arbitrary limit for validation.
MAXIMUM_METRIC_NAME_LENGTH = 50  # Check Run History restrictions before extending this limit.
