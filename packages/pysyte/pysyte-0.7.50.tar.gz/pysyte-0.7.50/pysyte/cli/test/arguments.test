The arguments module
====================

    >>> from pysyte.cli import arguments
    >>> assert 'arguments from the command line' in arguments.__doc__

Parsing Arguments
-----------------

Get an argument parser
    >>> parser = arguments.parser('desciption', 'usage')

Which looks like the standard argparse parser
    >>> assert callable(parser.parse_args)

But has methods to make adding args easier
    >>> arg = parser.arg('-a', '--add', help="Add stuff")
    >>> opt = parser.true('-o', 'option', help='On True')
    >>> num = parser.int('i', '--integer', help='An Integer')
    >>> names = parser.strings('names', help='Some strings')

    >>> assert arg.dest == 'add'
    >>> assert opt.dest == 'option'
    >>> assert arg.help == 'Add stuff'
    >>> assert arg.default is None and opt.default is False
    >>> assert num.type is int
    >>> assert names.nargs == '*'

Parse actual args
    This call would normally be empty, and args taken from sys.argv
    But a list can be used for testing
    >>> args = parser.parse_string('-i 3 -a 3 one two')
    >>> assert args.add == '3'
    >>> assert args.integer == 3
    >>> assert args.option is False
    >>> assert args.names == ['one', 'two']

Method to get strings from args indirectly
    Useful for methods that are called from scripts
    i.e. are in modules that did not set up the args
    >>> assert args.get_arg('add') == args.add

Similar method, guarantees to return a list of strings
    ignoring other types
    >>> assert args.get_strings('add') == [args.add]
    >>> assert args.get_strings('option') == []
    >>> assert args.get_strings('fred') == []

