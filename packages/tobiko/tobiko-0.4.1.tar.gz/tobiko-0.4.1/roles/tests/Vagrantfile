# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# Customize the count of CPU cores on the VM
CPUS = 4

# Customize the amount of memory on the VM
MEMORY = ENV.fetch("VM_SIZE", "4096").to_i

# Every Vagrant development environment requires a box. You can search for
# boxes at https://vagrantcloud.com/search.
BOX = ENV.fetch("VM_BOX", "generic/centos8")

TEST_DIR = File.dirname(__FILE__)

TOBIKO_SRC_DIR = File.realpath(ENV.fetch(
  'TOBIKO_SRC_DIR', TEST_DIR + '/../..'))

UPPER_CONSTRAINTS_FILE = ENV.fetch(
  "UPPER_CONSTRAINTS_FILE",
  "https://opendev.org/openstack/requirements/raw/branch/master/upper-constraints.txt")

# list of VMs
NODES = {
  'primary' => {'ip' => '172.18.161.6',
                'hostname' => 'primary'},
  'secundary' => {'ip' => '172.18.161.7',
                  'hostname' => 'secundary'},
}

GROUPS = {
  'undercloud' => ['secundary']
}


SSH_KEY_FILE = File.join([TEST_DIR, 'ssh_id'])
RH_USERNAME = ENV.fetch("RH_USERNAME", "")
RH_PASSWORD = ENV.fetch("RH_PASSWORD", "")


# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  config.vm.box = BOX

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: DEVSTACK_HOST_IP

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network", ip: "172.18.161.6"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:

  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = false

    vb.cpus = CPUS
    vb.memory = MEMORY
  end

  config.vm.provider "libvirt" do |libvirt|
    libvirt.cpus = CPUS
    libvirt.memory =  MEMORY
  end

  # Spawn secundary VMs
  config.vm.define 'secundary' do |node|
    node.vm.hostname = NODES['secundary']['hostname']
    node.vm.network "private_network", ip: NODES['secundary']['ip']
  end

  # Spawn primary VM and run test cases on it
  config.vm.define 'primary' do |node|
    node.vm.hostname = NODES['primary']['hostname']
    node.vm.network "private_network", ip: NODES['primary']['ip']

    # Prepare VMs using ansible playbook
    node.vm.provision "ansible" do |ansible|
      ansible.playbook = "provision.yaml"
      ansible.limit = "all"
      ansible.extra_vars = {
        'vagrant_nodes' => NODES,
        'vagrant_groups' => GROUPS,
        'ssh_key_file' => SSH_KEY_FILE,
        'rh_username' => RH_USERNAME,
        'rh_password' => RH_PASSWORD,
        'tobiko_src_dir' => TOBIKO_SRC_DIR,
      }
    end

    # Run all test cases
    for playbook_file in Dir[File.join(TEST_DIR, 'test_*.yaml')] do
      node.vm.provision "ansible" do |ansible|
        ansible.limit = 'all'
        ansible.playbook = playbook_file
        ansible.extra_vars = {
          'upper_constraints_file' => UPPER_CONSTRAINTS_FILE,
        }
      end
    end
  end
end
