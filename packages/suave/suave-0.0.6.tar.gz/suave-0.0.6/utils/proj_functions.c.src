// # -*- mode: c -*-
/* File: proj_functions.c.src */
/*
  This file is an extenstion of the Corrfunc package
  Copyright (C) 2020-- Kate Storey-Fisher (kstoreyfisher@gmail.com)
  License: MIT LICENSE. See LICENSE file under the top-level
  directory at https://github.com/kstoreyf/Corrfunc/
*/

#ifndef DOUBLE_PREC
#define DOUBLE_PREC
#endif
// # -*- mode: c -*-
#pragma once

#include "proj_functions_DOUBLE.h"

#include "defs.h"
#include "utils.h"
#include "function_precision.h"

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <errno.h>

#include <gsl/gsl_matrix_DOUBLE.h>
#include <gsl/gsl_linalg.h>
#include <gsl/gsl_interp.h>
#include <gsl/gsl_integration.h>

#ifndef MAXLEN
#define MAXLEN 1000
#endif

//////////////////////////////////
// Projection functions
//////////////////////////////////

//
void tophat_DOUBLE(const proj_struct_DOUBLE *projdata, DOUBLE *u, DOUBLE s, DOUBLE sqr_s, const pair_struct_DOUBLE *pair){
    (void) s;//to suppress the unused variable warning
    (void) pair;

    // nsbins is number of bins and not edges
    // supp_sqr has length nsbins+1, number of edges
    for(int p=projdata->nsbins-1; p>=0; p--){
        u[p] = ZERO;
    }
    for(int p=projdata->nsbins-1; p>=0; p--){
        
        if (sqr_s >= projdata->supp_sqr[p] && sqr_s < projdata->supp_sqr[p+1]){
            u[p] = 1.0;
            break;
        }
    }
}


void piecewise_DOUBLE(const proj_struct_DOUBLE *projdata, DOUBLE *u, DOUBLE s, DOUBLE sqr_s, const pair_struct_DOUBLE *pair){
    (void) sqr_s;//to suppress the unused variable warning
    (void) pair;

    // Assumes nsbins = ncomponents
    for(int p=0;p<projdata->ncomponents;p++){
        // peaks are bin averages, for now - need to take square roots
        DOUBLE peak = 0.5*(projdata->supp[p] + projdata->supp[p+1]);
        // assumes bins in ascending order
        DOUBLE binwidth = projdata->supp[p+1] - projdata->supp[p];
        DOUBLE val = 1.0 - (1.0/binwidth) * FABS(s - peak);
        if (val < 0) {
            val = 0;
        }
        u[p] = val;
    }
}


void gaussian_kernel_DOUBLE(const proj_struct_DOUBLE *projdata, DOUBLE *u, DOUBLE s, DOUBLE sqr_s, const pair_struct_DOUBLE *pair){
    (void) sqr_s;//to suppress the unused variable warning
    (void) pair;

    DOUBLE sigma = 3.0;
    DOUBLE amp = 1.0/(SQRT(2.0*M_PI)*sigma);
    for(int p=0;p<projdata->ncomponents;p++){
        DOUBLE rp = projdata->supp[p];
        if (FABS(rp-s)<4.0*sigma) {
            DOUBLE gaussian = amp * exp( -0.5*( ((rp-s)/sigma)*((rp-s)/sigma)) );
            u[p] = gaussian;
        }
        else {
            u[p] = 0;
        }
    }
}


void powerlaw_DOUBLE(const proj_struct_DOUBLE *projdata, DOUBLE *u, DOUBLE s, DOUBLE sqr_s, const pair_struct_DOUBLE *pair){
    (void) sqr_s;//to suppress the unused variable warning
    (void) projdata;
    (void) pair;

    double gamma=2.7, s0=15.0;
    double powlaw = POW(s/s0, -gamma);
    u[0] = powlaw;

    double amp=0.004, width=10, mean=107;
    double bump = amp * exp(-(s-mean)*(s-mean)/(2*width*width));
    u[1] = bump;
   
    double dwidth = amp*(s-mean)*(s-mean)/(width*width*width) * exp(-(s-mean)*(s-mean)/(2*width*width)); 
    u[2] = dwidth;
}


void general_r_DOUBLE(const proj_struct_DOUBLE *projdata, DOUBLE *u, DOUBLE s, DOUBLE sqr_s, const pair_struct_DOUBLE *pair){
    (void) sqr_s;//to suppress the unused variable warning
    (void) pair;

    int nbases = projdata->nbases;
    int nres = projdata->nres;
    DOUBLE sval;
    // TODO: somewhere check that r is in ascending order !! IMPORTANT !!

    /* if not in r range, return 0s */
    if (s<projdata->projbases[0] || s>=projdata->projbases[(nres-1)*(nbases+1)]){
      for (int j=0; j<nbases; j++){
        u[j] = 0.0;
      }
      return;
    }

    /* reverse linear search - binary may be faster? */
    int i0 = -1, i1 = -1;
    DOUBLE s0, s1, y0, y1;
    // loop backwards because last bins cover larger volume, should increase speed
    // nres-2 because nres-1 is max value, which would be caught by above case
    for (int i=nres-2; i>=0; i--){
      // get first colum of basis file, radii
      sval = projdata->projbases[i*(nbases+1)];
      // >= because looping backward
      if (s >= sval) {
        i0 = i; //index before insertion location
        i1 = i+1; //index after insertion location
        s0 = sval;
        s1 = projdata->projbases[i1*(nbases+1)];
        break;
      } 
    }

    for (int j=0; j<nbases; j++){
        // +1's because 0th column is sarr 
        y0 = projdata->projbases[i0*(nbases+1)+(j+1)];
        y1 = projdata->projbases[i1*(nbases+1)+(j+1)];
        u[j] = y0 + (s - s0)*(y1 - y0)/(s1 - s0); //linear interp
    }
}

void gradient_DOUBLE(const proj_struct_DOUBLE *projdata, DOUBLE *u, DOUBLE s, 
                     DOUBLE sqr_s, const pair_struct_DOUBLE *pair){

    /* this could be whatever function we want to add a gradient to! */
    // this will fill up the first 1/4 of u
    // but CAREFUL, for functions that depend on ncomponents we will have to reset it, bc actual is 4x more than assumed in other funcs!
    //tophat_DOUBLE(projdata, u, s, sqr_s, pair);
    general_r_DOUBLE(projdata, u, s, sqr_s, pair);

    /* Add gradients */
    /* u is 4x as long as nbases! */
    int nconst = projdata->ncomponents/4;
    DOUBLE xweight, yweight, zweight;
    
    /* Take the pair position to be the mean */
    /* x stored in index 1 of weights, because general weight in 0 (y in 2, z in 3)*/
    /* the .d is because of the union struct that allows for the other vectorization types */
    xweight = 0.5*(pair->weights0[1].d + pair->weights1[1].d);
    yweight = 0.5*(pair->weights0[2].d + pair->weights1[2].d);
    zweight = 0.5*(pair->weights0[3].d + pair->weights1[3].d);

    for (int j=0; j<nconst; j++){
        u[nconst+j] = u[j] * xweight;
        u[2*nconst+j] = u[j] * yweight;
        u[3*nconst+j] = u[j] * zweight;
    }
}

//////////////////////////////////
// Utility functions
//////////////////////////////////

/* Gives a pointer to the projection function for the given projection method
 * and instruction set.
 */
proj_func_t_DOUBLE get_proj_func_by_method_DOUBLE(const proj_method_t method){
    switch(method){
        case TOPHAT:
            return &tophat_DOUBLE;
        case PIECEWISE:
            return &piecewise_DOUBLE;
        case POWERLAW:
            return &powerlaw_DOUBLE;
        case GENR:
            return &general_r_DOUBLE;
        case GAUSSIAN_KERNEL:
            return &gaussian_kernel_DOUBLE;
        case GRADIENT:
            return &gradient_DOUBLE;
        default:
        case NONEPROJ:
            return NULL;
    }
}


int compute_amplitudes_DOUBLE(int ncomponents, int nd1, int nd2, int nr1, int nr2,
            DOUBLE *dd, DOUBLE *dr, DOUBLE *rd, DOUBLE *rr, DOUBLE *trr, DOUBLE *amps){

    /* Compute numerator of estimator */
    DOUBLE numerator[ncomponents];
    DOUBLE trrnorm[ncomponents*ncomponents];
    for (int i=0; i<ncomponents; i++){
        DOUBLE ddnorm = dd[i]/((DOUBLE)nd1*(DOUBLE)nd2);
        DOUBLE drnorm = dr[i]/((DOUBLE)nd1*(DOUBLE)nr2);
        DOUBLE rdnorm = rd[i]/((DOUBLE)nr1*(DOUBLE)nd2);
        DOUBLE rrnorm = rr[i]/((DOUBLE)nr1*(DOUBLE)nr2);
        numerator[i] = ddnorm - drnorm - rdnorm + rrnorm;
        for (int j=0; j<ncomponents; j++){
            trrnorm[i*ncomponents+j] = trr[i*ncomponents+j]/((DOUBLE)nr1*(DOUBLE)nr2);
        }
    }

	int s;

	/* Define all the used matrices */
	gsl_matrix *trr_mat = gsl_matrix_alloc(ncomponents, ncomponents);
	gsl_matrix *trr_mat_inv = gsl_matrix_alloc(ncomponents, ncomponents);
	gsl_permutation *perm = gsl_permutation_alloc(ncomponents);

	/* Fill the matrix m */
	for (int i=0; i<ncomponents; i++){
        for (int j=0; j<ncomponents; j++){
            gsl_matrix_set(trr_mat, i, j, trrnorm[i*ncomponents+j]);
        }
    }
	/* Make LU decomposition of matrix m */
	gsl_linalg_LU_decomp(trr_mat, perm, &s);
	/* Invert the matrix m */
	gsl_linalg_LU_invert(trr_mat, perm, trr_mat_inv);

    /* Take inner product of trrinv * numerator, get amplitude vector */
    for (int i=0; i<ncomponents; i++){
        DOUBLE aval = 0;
        for (int j=0; j<ncomponents; j++){
            aval += gsl_matrix_get(trr_mat_inv, i, j) * numerator[j];
        }
        amps[i] = aval;
    }
	return EXIT_SUCCESS;
}


int evaluate_xi_DOUBLE(int ncomponents, DOUBLE *amps,
                      int nsvals, DOUBLE *svals, DOUBLE *xi, proj_method_t proj_method, int nsbins, DOUBLE *sbins, char *projfn, struct extra_options *extra){
                          
    // If no extra options were passed, create dummy options
    // This allows us to pass arguments like "extra->weights0" below;
    // they'll just be NULLs, which is the correct behavior
    struct extra_options dummy_extra;
    if(extra == NULL){
        weight_method_t dummy_method = NONE;
        dummy_extra = get_extra_options(dummy_method);
        extra = &dummy_extra;
    }

    /* The metadata for a pair is applied to all r values */
    pair_struct_DOUBLE pair = {.num_weights = extra->weights0.num_weights};
    for(int w = 0; w < pair.num_weights; w++){
        //0 because for evaluate_xi we only have weights for a single pair
        pair.weights0[w].d = ((DOUBLE *) extra->weights0.weights[w])[0];
        pair.weights1[w].d = ((DOUBLE *)extra->weights0.weights[w])[0];
    }

    proj_struct_DOUBLE *projdata = malloc(sizeof(proj_struct_DOUBLE));
    if(projdata == NULL){
        free(projdata);
        return EXIT_FAILURE;
    }
    projdata->ncomponents = ncomponents;
	projdata->proj_method = proj_method;
    proj_func_t_DOUBLE proj_func = get_proj_func_by_method_DOUBLE(proj_method);
    /* Read in projection file if necessary */
    if (projfn != NULL) {
        read_projfile_DOUBLE(projfn, projdata);
    }

    /* If sbins is given, add to projdata */
    // When sbins is null, nsbins=1, and this will be a dummy variable
    // (Needed to make compatible with sbins not null)
    DOUBLE supp_sqr[nsbins];
    if (sbins != NULL) {
        projdata->nsbins = nsbins;
        projdata->supp = sbins;
        //plus 1 because one more edge than number of bins
        for (int i=0; i<nsbins+1; i++){
            supp_sqr[i] = sbins[i]*sbins[i];
        }
        projdata->supp_sqr = supp_sqr;
    }

    /* Evaluate xi */
    // nsvals: number of s values at which to evaluate xi
    for (int i=0; i<nsvals; i++){
        //get basis function u for given value of s
        DOUBLE u[ncomponents];
        DOUBLE sqr_s = svals[i]*svals[i];
        proj_func(projdata, u, svals[i], sqr_s, &pair);
		/* Multiply u by the amplitudes to get xi in that s bin (xi is vector of length nsvals) */
        DOUBLE xival = 0;
        for (int j=0; j<ncomponents; j++){
            xival += amps[j]*u[j];
        }
        xi[i] = xival;
    }

    /* Clean up */
    if (projfn!=NULL) {
      free(projdata->projbases);
    }
    free(projdata);
	return EXIT_SUCCESS;
}


int read_projfile_DOUBLE(char *projfn, proj_struct_DOUBLE *projdata){
    FILE *projfile;
    projfile=fopen(projfn,"r");
    if( !projfile ){
        fprintf(stderr, "ERROR opening [%s]\n",projfn);
        return EXIT_FAILURE;
    }
    int nres = 0;
    int nbases = 0;
    char buf[MAXLEN];
    /* Count rows in file */
    while(fgets(buf, MAXLEN, projfile)) {
        if (nres==0) {
            char *val;
            val = strtok(buf, " ");
            while (val != NULL) {
                nbases++;
                val = strtok(NULL, " ");
            }
        }
        nres++;
    }
    nbases -= 1; //to account for r column

    /* Check ncomponents same as number of bases in file nbases for general_r function */
    if (nbases != projdata->ncomponents && projdata->proj_method==GENR) {
        fprintf(stderr, "The value of ncomponents (%d) must be the same as nbases (%d), the number of columns in your basis file. (If off-by-one, did you forget r column in your basis file?)\n", projdata->ncomponents, nbases);
        return EXIT_FAILURE;
    }
    projdata->nres = nres;
    projdata->nbases = nbases;
    projdata->projbases = my_malloc(sizeof(*(projdata->projbases)), nres*(nbases+1)); //+1 to account for r column
    if(projdata->projbases == NULL){
        free(projdata->projbases);
        return EXIT_FAILURE;
    }

    /* Read in file */
    rewind(projfile);
    for(int i = 0; i < nres; i++){
        fgets(buf,MAXLEN,projfile);
        char *val;
        val = strtok(buf, " ");
        for(int j=0; j<nbases+1; j++){
            sscanf(val, "%"REAL_FORMAT, &projdata->projbases[i*(nbases+1)+j]);
            val = strtok(NULL, " ");
        }
    }
    fclose(projfile);
    return EXIT_SUCCESS;
}


DOUBLE linspace_DOUBLE(DOUBLE xmin, DOUBLE xmax, int xnum, DOUBLE* xarr){
    DOUBLE space = (xmax - xmin)/(xnum-1);
    int i;
    for (i=0; i<xnum; i++){
        xarr[i] = xmin + i*space;
    }
    return space;
}


int trr_analytic_DOUBLE(DOUBLE rmin, DOUBLE rmax, int nd, DOUBLE volume, int ncomponents, DOUBLE *rr, DOUBLE *trr, proj_method_t proj_method, int nsbins, DOUBLE *sbins, char *projfn){
    proj_struct_DOUBLE *projdata = malloc(sizeof(proj_struct_DOUBLE));
    if(projdata == NULL){
        free(projdata);
        return EXIT_FAILURE;
    }
    projdata->ncomponents = ncomponents;
	projdata->proj_method = proj_method;

    /* Read in projection file if necessary */
    if (projfn != NULL) {
        read_projfile_DOUBLE(projfn, projdata);
    } 
    integration_params_DOUBLE *int_params = malloc(sizeof(integration_params_DOUBLE));
    if(int_params == NULL){
        free(int_params);
        return EXIT_FAILURE;
    }

    /* If sbins is given, add to projdata */
    // When sbins is null, nsbins=1, and this will be a dummy variable
    // (Needed to make compatible with sbins not null)
    DOUBLE supp_sqr[nsbins];
    if (sbins != NULL) {
        projdata->nsbins = nsbins;
        projdata->supp = sbins;
        //plus 1 because one more edge than number of bins
        for (int i=0; i<nsbins+1; i++){
            supp_sqr[i] = sbins[i]*sbins[i];
        }
        projdata->supp_sqr = supp_sqr;
    }

    /* Perform integration */
    int_params->projdata = projdata;
    int_params->i = 0;
    int_params->j = 0;
    int_params->is_trr = 0;
    DOUBLE prefac = 4*M_PI*nd*(nd-1)/volume;
    for (int i=0; i<ncomponents; i++){
        int_params->i = i;
        int_params->is_trr = 0;
        DOUBLE integral = adaptiveSimpsons_DOUBLE(proj_to_integrate_DOUBLE, int_params, rmin, rmax, 1e-6, 100);
        rr[i] = integral*prefac;
        for (int j=0; j<ncomponents; j++){
            int_params->j = j;
            int_params->is_trr = 1;
            DOUBLE integral = adaptiveSimpsons_DOUBLE(proj_to_integrate_DOUBLE, int_params, rmin, rmax, 1e-6, 100);
           trr[i*ncomponents+j] = integral*prefac;
        }
    }

    /* Clean up */
    if (projfn!=NULL) {
      free(projdata->projbases);
    }
    free(projdata);
    free(int_params);
	return EXIT_SUCCESS;
}


DOUBLE proj_to_integrate_DOUBLE(DOUBLE r, integration_params_DOUBLE *p) {
    integration_params_DOUBLE *params = (integration_params_DOUBLE *)p;
    proj_struct_DOUBLE *pdata = (params->projdata); 
    proj_func_t_DOUBLE proj_func = get_proj_func_by_method_DOUBLE(pdata->proj_method);
    int i = (params->i);
    DOUBLE r_sqr = r*r;
    DOUBLE integrand;
    DOUBLE u[pdata->ncomponents];
    /* TODO: actually deal with pair here */
    pair_struct_DOUBLE pair;
    proj_func(pdata, u, r, r_sqr, &pair);
    if (params->is_trr) { 
        int j = (params->j);
        integrand = r_sqr * u[i] * u[j]; 
    }
    else { 
        integrand = r_sqr * u[i]; 
    }
    return integrand;
}


/** Adaptive Simpson's Rule, Recursive Core */
// adapted from https://en.wikipedia.org/wiki/Adaptive_Simpson%27s_method#C
DOUBLE adaptiveSimpsonsAux_DOUBLE(DOUBLE (*f)(DOUBLE, integration_params_DOUBLE*), integration_params_DOUBLE *p, DOUBLE a, DOUBLE b, DOUBLE eps,
                          DOUBLE whole, DOUBLE fa, DOUBLE fb, DOUBLE fm, int rec) {
    DOUBLE m   = (a + b)/2,  h   = (b - a)/2;
    DOUBLE lm  = (a + m)/2,  rm  = (m + b)/2;
    // serious numerical trouble: it won't converge
    if ((eps/2 == eps) || (a == lm)) { errno = EDOM; return whole; }
    DOUBLE flm = (*f)(lm, p), frm = (*f)(rm, p);
    DOUBLE fl = (DOUBLE) flm;
    DOUBLE left  = (h/6) * (fa + 4*flm + fm);
    DOUBLE right = (h/6) * (fm + 4*frm + fb);
    DOUBLE delta = left + right - whole;

    if (rec <= 0 && errno != EDOM) errno = ERANGE;  // depth limit too shallow
    // Lyness 1969 + Richardson extrapolation; see article
    if (rec <= 0 || fabs(delta) <= 15*eps)
        return left + right + (delta)/15;
    return adaptiveSimpsonsAux_DOUBLE(f, p, a, m, eps/2, left,  fa, fm, flm, rec-1) +
           adaptiveSimpsonsAux_DOUBLE(f, p, m, b, eps/2, right, fm, fb, frm, rec-1);
}

/** Adaptive Simpson's Rule Wrapper
 *  (fills in cached function evaluations) */
DOUBLE adaptiveSimpsons_DOUBLE(DOUBLE (*f)(DOUBLE, integration_params_DOUBLE*),     // function ptr to integrate
                       integration_params_DOUBLE *p,
                       DOUBLE a, DOUBLE b,      // interval [a,b]
                       DOUBLE epsilon,         // error tolerance
                       int maxRecDepth) {     // recursion cap
    errno = 0;
    
    DOUBLE h = b - a;
    if (h == 0) return 0;

    // Dividing into sub-parts and integrating each and adding,
    // because adaptive integration sometimes fails over whole region
    DOUBLE aa, bb;
    DOUBLE total = 0.0;
    DOUBLE hh = 5.0;// starting grid width - may need to make a parameter or adjust based on ncomponents
    aa = a;
    bb = aa+hh;
    while (aa < b){
        DOUBLE fa = (*f)(aa, p), fb = (*f)(bb, p), fm = (*f)((aa + bb)/2, p);
        DOUBLE S = (hh/6)*(fa + 4*fm + fb);
        if (bb > b){
            bb = b;
        }
        total += adaptiveSimpsonsAux_DOUBLE(f, p, aa, bb, epsilon, S, fa, fb, fm, maxRecDepth);
        aa = bb;
        bb += hh;
    }
    return total;
}

