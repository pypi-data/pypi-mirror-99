// # -*- mode: c -*-
/* File: proj_functions.h.src */
/*
  This file is an extenstion of the Corrfunc package
  Copyright (C) 2020-- Kate Storey-Fisher (kstoreyfisher@gmail.com)
  License: MIT LICENSE. See LICENSE file under the top-level
  directory at https://github.com/kstoreyf/Corrfunc/
*/

#ifndef DOUBLE_PREC
#define DOUBLE_PREC
#endif
// # -*- mode: c -*-
#pragma once

#include "defs.h"
#include "utils.h"
#include "weight_functions_DOUBLE.h" // for pair_struct_DOUBLE

#include <stdint.h>
#include <gsl/gsl_interp.h>

// Info about a particle pair that we will pass to the projection function
typedef struct
{
    int64_t ncomponents;
    int64_t nsbins;
    int64_t nres;
    int64_t nbases;
    const DOUBLE *supp;
    const DOUBLE *supp_sqr;
    DOUBLE *projbases;
    proj_method_t proj_method;
} proj_struct_DOUBLE;

typedef struct 
{
    proj_struct_DOUBLE *projdata;
    int i;
    int j;
    int is_trr;
} integration_params_DOUBLE;

typedef void (*proj_func_t_DOUBLE)(const proj_struct_DOUBLE*, DOUBLE*, DOUBLE, DOUBLE, const pair_struct_DOUBLE*);

//////////////////////////////////
// Projection functions
//////////////////////////////////

void tophat_DOUBLE(const proj_struct_DOUBLE *projdata, DOUBLE *u, DOUBLE s, DOUBLE sqr_s, const pair_struct_DOUBLE *pair);

void piecewise_DOUBLE(const proj_struct_DOUBLE *projdata, DOUBLE *u, DOUBLE s, DOUBLE sqr_s, const pair_struct_DOUBLE *pair);

void gaussian_kernel_DOUBLE(const proj_struct_DOUBLE *projdata, DOUBLE *u, DOUBLE s, DOUBLE sqr_s, const pair_struct_DOUBLE *pair);

void powerlaw_DOUBLE(const proj_struct_DOUBLE *projdata, DOUBLE *u, DOUBLE s, DOUBLE sqr_s, const pair_struct_DOUBLE *pair);

void general_r_DOUBLE(const proj_struct_DOUBLE *projdata, DOUBLE *u, DOUBLE s, DOUBLE sqr_s, const pair_struct_DOUBLE *pair);

void gradient_DOUBLE(const proj_struct_DOUBLE *projdata, DOUBLE *u, DOUBLE s, DOUBLE sqr_s, const pair_struct_DOUBLE *pair);

//////////////////////////////////
// Utility functions
//////////////////////////////////

extern proj_func_t_DOUBLE get_proj_func_by_method_DOUBLE(const proj_method_t method);

int compute_amplitudes_DOUBLE(int ncomponents, int nd1, int nd2, int nr1, int nr2,
            DOUBLE *dd, DOUBLE *dr, DOUBLE *rd, DOUBLE *rr, DOUBLE *trr, DOUBLE *amps);

int evaluate_xi_DOUBLE(int ncomponents, DOUBLE *amps, int nsvals, DOUBLE *svals,
            DOUBLE *xi, proj_method_t proj_method, int nsbins, DOUBLE *sbins, char *projfn, struct extra_options *extra);

int read_projfile_DOUBLE(char *projfn, proj_struct_DOUBLE *projdata);

int trr_analytic_DOUBLE(DOUBLE rmin, DOUBLE rmax, int nd, DOUBLE volume, int ncomponents, DOUBLE *rr, DOUBLE *trr, proj_method_t proj_method, int nsbins, DOUBLE *sbins, char *projfn);

DOUBLE linspace_DOUBLE(DOUBLE xmin, DOUBLE xmax, int xnum, DOUBLE* xarr);

DOUBLE proj_to_integrate_DOUBLE(DOUBLE r, integration_params_DOUBLE *p);

DOUBLE adaptiveSimpsonsAux_DOUBLE(DOUBLE (*f)(DOUBLE, integration_params_DOUBLE*), integration_params_DOUBLE *p, DOUBLE a, DOUBLE b, DOUBLE eps, DOUBLE whole, DOUBLE fa, DOUBLE fb, DOUBLE fm, int rec);

DOUBLE adaptiveSimpsons_DOUBLE(DOUBLE (*f)(DOUBLE, integration_params_DOUBLE*), integration_params_DOUBLE *p, DOUBLE a, DOUBLE b, DOUBLE epsilon, int maxRecDepth);
