Metadata-Version: 2.1
Name: mlapp
Version: 0.1.2.7
Summary: IBM Services Framework for ML Applications Python 3 framework for building robust, production-ready machine learning applications. Official ML accelerator within the larger RAD-ML methodology.
Home-page: https://github.com/ibm/mlapp
Author: IBM
Author-email: tomer.galula@ibm.com, tal.waitzenberg@ibm.com, michael.chein@ibm.com, erez.nardia@ibm.com, annaelle.cohen@ibm.com, katzn@us.ibm.com
License: Apache License 2.0
Project-URL: Bug Reports, https://github.com/ibm/mlapp/issues
Project-URL: Wiki Page, https://mlapp-docs.s3-web.us-south.cloud-object-storage.appdomain.cloud
Project-URL: Crash Course, https://mlapp-docs.s3-web.us-south.cloud-object-storage.appdomain.cloud/crash-course/introduction
Project-URL: Source, https://github.com/ibm/mlapp
Keywords: mlapp,ibm,machine-learning,auto-ml
Platform: UNKNOWN
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: License :: OSI Approved :: Apache Software License
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: pandas
Requires-Dist: scipy
Requires-Dist: numpy (>=1.16.5)
Requires-Dist: scikit-learn
Requires-Dist: matplotlib
Requires-Dist: environs
Requires-Dist: click
Requires-Dist: tabulate
Requires-Dist: requests
Requires-Dist: urllib3
Requires-Dist: sqlalchemy
Requires-Dist: jsonschema
Provides-Extra: pymysql
Requires-Dist: PyMySQL ; extra == 'pymysql'
Provides-Extra: aml
Requires-Dist: azureml-sdk ; extra == 'aml'
Provides-Extra: azure-servicebus
Requires-Dist: azure-servicebus ; extra == 'azure-servicebus'
Provides-Extra: azure-storage-blob
Requires-Dist: azure-storage-blob ; extra == 'azure-storage-blob'
Provides-Extra: boto3
Requires-Dist: boto3 ; extra == 'boto3'
Provides-Extra: kafka
Requires-Dist: kafka-python ; extra == 'kafka'
Provides-Extra: livy
Requires-Dist: livy ; extra == 'livy'
Provides-Extra: minio
Requires-Dist: minio ; extra == 'minio'
Provides-Extra: mlcp
Requires-Dist: pika ; extra == 'mlcp'
Requires-Dist: pg8000 (<=1.16.5) ; extra == 'mlcp'
Requires-Dist: minio ; extra == 'mlcp'
Provides-Extra: pika
Requires-Dist: pika ; extra == 'pika'
Provides-Extra: postgres
Requires-Dist: pg8000 (<=1.16.5) ; extra == 'postgres'
Provides-Extra: pyspark
Requires-Dist: pyspark ; extra == 'pyspark'
Provides-Extra: snowflake-sqlalchemy
Requires-Dist: snowflake-sqlalchemy ; extra == 'snowflake-sqlalchemy'



# MLApp &middot; [![pip version](https://img.shields.io/pypi/v/mlapp?color=success)](https://pypi.python.org/pypi/mlapp/) [![Build Status](https://travis-ci.com/IBM/mlapp.svg?branch=master)](https://travis-ci.com/IBM/mlapp) [![License](https://img.shields.io/badge/license-Apache-blue.svg)](https://github.com/IBM/mlapp/blob/master/LICENSE)

MLApp is a Python library for building scalable data science solutions that meet modern software engineering standards.

MLApp was built and hardened in an enterprise context, to solve scalability issues for mid-size to Fortune 50 companies. It is applicable to a variety of data science use cases including machine learning, deep learning, NLP and optimization.

- **Embedded MLOps**: Standardizes the way models and their metadatas are registered, stored and deployed.
- **Project scaffolding**: Generates an opinionated project file structure that enforces modern engineering standards and improves readability and documentation across solutions.
- **Boilerplates**: Includes a library of pre-built model templates that can be easily customized to accelerate development of common use cases.
- **Utilities**: Includes an extendable set of utilities that increase developer productivity - including functions for selecting features and optimizing hyperparameters.
- **Connectors**: Allows developers to easily integrate their projects with common data and analytics services.
- **Deployment integration**: Applications built using MLApp can easily be deployed on common open and proprietary platforms, including Kubernetes and Azure Machine Learning.

## Getting started

Install MLApp via pip:

```
pip install mlapp
```

Navigate to an empty project folder and generate the project scaffold:

```
mlapp init
```

Install a working example using boilerplates:

```
mlapp boilerplates install basic_regression
```

Update the run.py file in your project directory to point to the Basic Regression asset that you just installed:

```
configs = [
    {
        'config_path': "assets/basic_regression/configs/basic_regression_train_config.py",
        'asset_name': "basic_regression",
        'config_name': "basic_regression_config"
    }
]
```

Execute the run.py script:

```
python run.py
```

Congrats! You've trained your first model in MLApp. Take a look at the output directory to see the results.

## Next steps
A great place to start is the [crash course](https://mlapp-docs.s3-web.us-south.cloud-object-storage.appdomain.cloud/crash-course/introduction).

You should also check out the full [project documentation](https://mlapp-docs.s3-web.us-south.cloud-object-storage.appdomain.cloud).

## Contributing
We welcome contributions from the community. Please refer to [CONTRIBUTING](./CONTRIBUTING.md) for more information.

