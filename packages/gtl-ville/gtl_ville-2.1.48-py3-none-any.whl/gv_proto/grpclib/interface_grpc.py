# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: gv_proto/proto/interface.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.protobuf.any_pb2
import google.protobuf.empty_pb2
import gv_proto.proto.archivist_pb2
import gv_proto.proto.broadcaster_pb2
import gv_proto.proto.common_pb2
import gv_proto.proto.geographer_pb2
import gv_proto.proto.interface_pb2


class InterfaceBase(abc.ABC):

    @abc.abstractmethod
    async def publish(self, stream: 'grpclib.server.Stream[gv_proto.proto.broadcaster_pb2.PubRequest, gv_proto.proto.common_pb2.Ack]') -> None:
        pass

    @abc.abstractmethod
    async def subscribe(self, stream: 'grpclib.server.Stream[gv_proto.proto.broadcaster_pb2.SubRequest, google.protobuf.any_pb2.Any]') -> None:
        pass

    @abc.abstractmethod
    async def get_indicators(self, stream: 'grpclib.server.Stream[gv_proto.proto.archivist_pb2.IndicatorsRequest, gv_proto.proto.archivist_pb2.Indicators]') -> None:
        pass

    @abc.abstractmethod
    async def get_data_quality(self, stream: 'grpclib.server.Stream[gv_proto.proto.archivist_pb2.DataQualityRequest, gv_proto.proto.archivist_pb2.DataQuality]') -> None:
        pass

    @abc.abstractmethod
    async def get_location_data(self, stream: 'grpclib.server.Stream[gv_proto.proto.archivist_pb2.LocationDataRequest, gv_proto.proto.archivist_pb2.LocationData]') -> None:
        pass

    @abc.abstractmethod
    async def get_partitions_travel_time(self, stream: 'grpclib.server.Stream[gv_proto.proto.archivist_pb2.PartitionsTravelTimeRequest, gv_proto.proto.archivist_pb2.PartitionsTravelTime]') -> None:
        pass

    @abc.abstractmethod
    async def add_mapping_roads_data_points(self, stream: 'grpclib.server.Stream[gv_proto.proto.geographer_pb2.Mapping, gv_proto.proto.common_pb2.Ack]') -> None:
        pass

    @abc.abstractmethod
    async def add_data_points(self, stream: 'grpclib.server.Stream[gv_proto.proto.geographer_pb2.Locations, gv_proto.proto.common_pb2.Ack]') -> None:
        pass

    @abc.abstractmethod
    async def import_shapefile_to_db(self, stream: 'grpclib.server.Stream[google.protobuf.empty_pb2.Empty, gv_proto.proto.common_pb2.Ack]') -> None:
        pass

    @abc.abstractmethod
    async def get_data_points(self, stream: 'grpclib.server.Stream[gv_proto.proto.geographer_pb2.LocationsRequest, gv_proto.proto.geographer_pb2.Locations]') -> None:
        pass

    @abc.abstractmethod
    async def get_roads(self, stream: 'grpclib.server.Stream[gv_proto.proto.geographer_pb2.LocationsRequest, gv_proto.proto.geographer_pb2.Locations]') -> None:
        pass

    @abc.abstractmethod
    async def get_zones_points(self, stream: 'grpclib.server.Stream[gv_proto.proto.geographer_pb2.LocationsRequest, gv_proto.proto.geographer_pb2.Locations]') -> None:
        pass

    @abc.abstractmethod
    async def get_mapping_roads_data_points(self, stream: 'grpclib.server.Stream[gv_proto.proto.geographer_pb2.MappingRequest, gv_proto.proto.geographer_pb2.Mapping]') -> None:
        pass

    @abc.abstractmethod
    async def update_roads_freeflow_speed(self, stream: 'grpclib.server.Stream[gv_proto.proto.geographer_pb2.FreeflowSpeeds, gv_proto.proto.common_pb2.Ack]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/gv_proto.proto.Interface/publish': grpclib.const.Handler(
                self.publish,
                grpclib.const.Cardinality.UNARY_UNARY,
                gv_proto.proto.broadcaster_pb2.PubRequest,
                gv_proto.proto.common_pb2.Ack,
            ),
            '/gv_proto.proto.Interface/subscribe': grpclib.const.Handler(
                self.subscribe,
                grpclib.const.Cardinality.UNARY_STREAM,
                gv_proto.proto.broadcaster_pb2.SubRequest,
                google.protobuf.any_pb2.Any,
            ),
            '/gv_proto.proto.Interface/get_indicators': grpclib.const.Handler(
                self.get_indicators,
                grpclib.const.Cardinality.UNARY_STREAM,
                gv_proto.proto.archivist_pb2.IndicatorsRequest,
                gv_proto.proto.archivist_pb2.Indicators,
            ),
            '/gv_proto.proto.Interface/get_data_quality': grpclib.const.Handler(
                self.get_data_quality,
                grpclib.const.Cardinality.UNARY_UNARY,
                gv_proto.proto.archivist_pb2.DataQualityRequest,
                gv_proto.proto.archivist_pb2.DataQuality,
            ),
            '/gv_proto.proto.Interface/get_location_data': grpclib.const.Handler(
                self.get_location_data,
                grpclib.const.Cardinality.UNARY_UNARY,
                gv_proto.proto.archivist_pb2.LocationDataRequest,
                gv_proto.proto.archivist_pb2.LocationData,
            ),
            '/gv_proto.proto.Interface/get_partitions_travel_time': grpclib.const.Handler(
                self.get_partitions_travel_time,
                grpclib.const.Cardinality.UNARY_UNARY,
                gv_proto.proto.archivist_pb2.PartitionsTravelTimeRequest,
                gv_proto.proto.archivist_pb2.PartitionsTravelTime,
            ),
            '/gv_proto.proto.Interface/add_mapping_roads_data_points': grpclib.const.Handler(
                self.add_mapping_roads_data_points,
                grpclib.const.Cardinality.UNARY_UNARY,
                gv_proto.proto.geographer_pb2.Mapping,
                gv_proto.proto.common_pb2.Ack,
            ),
            '/gv_proto.proto.Interface/add_data_points': grpclib.const.Handler(
                self.add_data_points,
                grpclib.const.Cardinality.UNARY_UNARY,
                gv_proto.proto.geographer_pb2.Locations,
                gv_proto.proto.common_pb2.Ack,
            ),
            '/gv_proto.proto.Interface/import_shapefile_to_db': grpclib.const.Handler(
                self.import_shapefile_to_db,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.protobuf.empty_pb2.Empty,
                gv_proto.proto.common_pb2.Ack,
            ),
            '/gv_proto.proto.Interface/get_data_points': grpclib.const.Handler(
                self.get_data_points,
                grpclib.const.Cardinality.UNARY_UNARY,
                gv_proto.proto.geographer_pb2.LocationsRequest,
                gv_proto.proto.geographer_pb2.Locations,
            ),
            '/gv_proto.proto.Interface/get_roads': grpclib.const.Handler(
                self.get_roads,
                grpclib.const.Cardinality.UNARY_UNARY,
                gv_proto.proto.geographer_pb2.LocationsRequest,
                gv_proto.proto.geographer_pb2.Locations,
            ),
            '/gv_proto.proto.Interface/get_zones_points': grpclib.const.Handler(
                self.get_zones_points,
                grpclib.const.Cardinality.UNARY_UNARY,
                gv_proto.proto.geographer_pb2.LocationsRequest,
                gv_proto.proto.geographer_pb2.Locations,
            ),
            '/gv_proto.proto.Interface/get_mapping_roads_data_points': grpclib.const.Handler(
                self.get_mapping_roads_data_points,
                grpclib.const.Cardinality.UNARY_UNARY,
                gv_proto.proto.geographer_pb2.MappingRequest,
                gv_proto.proto.geographer_pb2.Mapping,
            ),
            '/gv_proto.proto.Interface/update_roads_freeflow_speed': grpclib.const.Handler(
                self.update_roads_freeflow_speed,
                grpclib.const.Cardinality.UNARY_UNARY,
                gv_proto.proto.geographer_pb2.FreeflowSpeeds,
                gv_proto.proto.common_pb2.Ack,
            ),
        }


class InterfaceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.publish = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gv_proto.proto.Interface/publish',
            gv_proto.proto.broadcaster_pb2.PubRequest,
            gv_proto.proto.common_pb2.Ack,
        )
        self.subscribe = grpclib.client.UnaryStreamMethod(
            channel,
            '/gv_proto.proto.Interface/subscribe',
            gv_proto.proto.broadcaster_pb2.SubRequest,
            google.protobuf.any_pb2.Any,
        )
        self.get_indicators = grpclib.client.UnaryStreamMethod(
            channel,
            '/gv_proto.proto.Interface/get_indicators',
            gv_proto.proto.archivist_pb2.IndicatorsRequest,
            gv_proto.proto.archivist_pb2.Indicators,
        )
        self.get_data_quality = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gv_proto.proto.Interface/get_data_quality',
            gv_proto.proto.archivist_pb2.DataQualityRequest,
            gv_proto.proto.archivist_pb2.DataQuality,
        )
        self.get_location_data = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gv_proto.proto.Interface/get_location_data',
            gv_proto.proto.archivist_pb2.LocationDataRequest,
            gv_proto.proto.archivist_pb2.LocationData,
        )
        self.get_partitions_travel_time = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gv_proto.proto.Interface/get_partitions_travel_time',
            gv_proto.proto.archivist_pb2.PartitionsTravelTimeRequest,
            gv_proto.proto.archivist_pb2.PartitionsTravelTime,
        )
        self.add_mapping_roads_data_points = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gv_proto.proto.Interface/add_mapping_roads_data_points',
            gv_proto.proto.geographer_pb2.Mapping,
            gv_proto.proto.common_pb2.Ack,
        )
        self.add_data_points = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gv_proto.proto.Interface/add_data_points',
            gv_proto.proto.geographer_pb2.Locations,
            gv_proto.proto.common_pb2.Ack,
        )
        self.import_shapefile_to_db = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gv_proto.proto.Interface/import_shapefile_to_db',
            google.protobuf.empty_pb2.Empty,
            gv_proto.proto.common_pb2.Ack,
        )
        self.get_data_points = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gv_proto.proto.Interface/get_data_points',
            gv_proto.proto.geographer_pb2.LocationsRequest,
            gv_proto.proto.geographer_pb2.Locations,
        )
        self.get_roads = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gv_proto.proto.Interface/get_roads',
            gv_proto.proto.geographer_pb2.LocationsRequest,
            gv_proto.proto.geographer_pb2.Locations,
        )
        self.get_zones_points = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gv_proto.proto.Interface/get_zones_points',
            gv_proto.proto.geographer_pb2.LocationsRequest,
            gv_proto.proto.geographer_pb2.Locations,
        )
        self.get_mapping_roads_data_points = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gv_proto.proto.Interface/get_mapping_roads_data_points',
            gv_proto.proto.geographer_pb2.MappingRequest,
            gv_proto.proto.geographer_pb2.Mapping,
        )
        self.update_roads_freeflow_speed = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gv_proto.proto.Interface/update_roads_freeflow_speed',
            gv_proto.proto.geographer_pb2.FreeflowSpeeds,
            gv_proto.proto.common_pb2.Ack,
        )
