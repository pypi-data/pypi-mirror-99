// File automatically generated by Parser/asdl_c.py.

#ifndef Mys_Py_PYTHON_AST_H
#define Mys_Py_PYTHON_AST_H
#ifdef __cplusplus
extern "C" {
#endif

#ifndef Py_LIMITED_API
#include "Mys-asdl.h"

#undef Yield   /* undefine macro conflicting with <winbase.h> */

typedef struct _mod *mod_ty;

typedef struct _stmt *stmt_ty;

typedef struct _expr *expr_ty;

typedef enum _expr_context { Load=1, Store=2, Del=3 } expr_context_ty;

typedef enum _boolop { And=1, Or=2 } boolop_ty;

typedef enum _operator { Add=1, Sub=2, Mult=3, MatMult=4, Div=5, Mod=6, Pow=7,
                         LShift=8, RShift=9, BitOr=10, BitXor=11, BitAnd=12,
                         FloorDiv=13 } operator_ty;

typedef enum _unaryop { Invert=1, Not=2, UAdd=3, USub=4 } unaryop_ty;

typedef enum _cmpop { Eq=1, NotEq=2, Lt=3, LtE=4, Gt=5, GtE=6, Is=7, IsNot=8,
                      In=9, NotIn=10 } cmpop_ty;

typedef struct _comprehension *comprehension_ty;

typedef struct _excepthandler *excepthandler_ty;

typedef struct _arguments *arguments_ty;

typedef struct _arg *arg_ty;

typedef struct _keyword *keyword_ty;

typedef struct _alias *alias_ty;

typedef struct _withitem *withitem_ty;

typedef struct _match_case *match_case_ty;

typedef struct _type_ignore *type_ignore_ty;


typedef struct {
    _ASDL_SEQ_HEAD
    mod_ty typed_elements[1];
} asdl_mod_seq;

asdl_mod_seq *_Mys_Py_asdl_mod_seq_new(Py_ssize_t size, PyArena *arena);

typedef struct {
    _ASDL_SEQ_HEAD
    stmt_ty typed_elements[1];
} asdl_stmt_seq;

asdl_stmt_seq *_Mys_Py_asdl_stmt_seq_new(Py_ssize_t size, PyArena *arena);

typedef struct {
    _ASDL_SEQ_HEAD
    expr_ty typed_elements[1];
} asdl_expr_seq;

asdl_expr_seq *_Mys_Py_asdl_expr_seq_new(Py_ssize_t size, PyArena *arena);

typedef struct {
    _ASDL_SEQ_HEAD
    comprehension_ty typed_elements[1];
} asdl_comprehension_seq;

asdl_comprehension_seq *_Mys_Py_asdl_comprehension_seq_new(Py_ssize_t size, PyArena
                                                       *arena);

typedef struct {
    _ASDL_SEQ_HEAD
    excepthandler_ty typed_elements[1];
} asdl_excepthandler_seq;

asdl_excepthandler_seq *_Mys_Py_asdl_excepthandler_seq_new(Py_ssize_t size, PyArena
                                                       *arena);

typedef struct {
    _ASDL_SEQ_HEAD
    arguments_ty typed_elements[1];
} asdl_arguments_seq;

asdl_arguments_seq *_Mys_Py_asdl_arguments_seq_new(Py_ssize_t size, PyArena *arena);

typedef struct {
    _ASDL_SEQ_HEAD
    arg_ty typed_elements[1];
} asdl_arg_seq;

asdl_arg_seq *_Mys_Py_asdl_arg_seq_new(Py_ssize_t size, PyArena *arena);

typedef struct {
    _ASDL_SEQ_HEAD
    keyword_ty typed_elements[1];
} asdl_keyword_seq;

asdl_keyword_seq *_Mys_Py_asdl_keyword_seq_new(Py_ssize_t size, PyArena *arena);

typedef struct {
    _ASDL_SEQ_HEAD
    alias_ty typed_elements[1];
} asdl_alias_seq;

asdl_alias_seq *_Mys_Py_asdl_alias_seq_new(Py_ssize_t size, PyArena *arena);

typedef struct {
    _ASDL_SEQ_HEAD
    withitem_ty typed_elements[1];
} asdl_withitem_seq;

asdl_withitem_seq *_Mys_Py_asdl_withitem_seq_new(Py_ssize_t size, PyArena *arena);

typedef struct {
    _ASDL_SEQ_HEAD
    match_case_ty typed_elements[1];
} asdl_match_case_seq;

asdl_match_case_seq *_Mys_Py_asdl_match_case_seq_new(Py_ssize_t size, PyArena
                                                 *arena);

typedef struct {
    _ASDL_SEQ_HEAD
    type_ignore_ty typed_elements[1];
} asdl_type_ignore_seq;

asdl_type_ignore_seq *_Mys_Py_asdl_type_ignore_seq_new(Py_ssize_t size, PyArena
                                                   *arena);


enum _mod_kind {Module_kind=1, Interactive_kind=2, Expression_kind=3,
                 FunctionType_kind=4};
struct _mod {
    enum _mod_kind kind;
    union {
        struct {
            asdl_stmt_seq *body;
            asdl_type_ignore_seq *type_ignores;
        } Module;

        struct {
            asdl_stmt_seq *body;
        } Interactive;

        struct {
            expr_ty body;
        } Expression;

        struct {
            asdl_expr_seq *argtypes;
            expr_ty returns;
        } FunctionType;

    } v;
};

enum _stmt_kind {FunctionDef_kind=1, AsyncFunctionDef_kind=2, ClassDef_kind=3,
                  Return_kind=4, Delete_kind=5, Assign_kind=6,
                  AugAssign_kind=7, AnnAssign_kind=8, For_kind=9,
                  AsyncFor_kind=10, While_kind=11, If_kind=12, With_kind=13,
                  AsyncWith_kind=14, Match_kind=15, Raise_kind=16, Try_kind=17,
                  Assert_kind=18, Import_kind=19, ImportFrom_kind=20,
                  Global_kind=21, Nonlocal_kind=22, Expr_kind=23, Pass_kind=24,
                  Break_kind=25, Continue_kind=26};
struct _stmt {
    enum _stmt_kind kind;
    union {
        struct {
            identifier name;
            arguments_ty args;
            asdl_stmt_seq *body;
            asdl_expr_seq *decorator_list;
            expr_ty returns;
            string type_comment;
        } FunctionDef;

        struct {
            identifier name;
            arguments_ty args;
            asdl_stmt_seq *body;
            asdl_expr_seq *decorator_list;
            expr_ty returns;
            string type_comment;
        } AsyncFunctionDef;

        struct {
            identifier name;
            asdl_expr_seq *bases;
            asdl_keyword_seq *keywords;
            asdl_stmt_seq *body;
            asdl_expr_seq *decorator_list;
        } ClassDef;

        struct {
            expr_ty value;
        } Return;

        struct {
            asdl_expr_seq *targets;
        } Delete;

        struct {
            asdl_expr_seq *targets;
            expr_ty value;
            string type_comment;
        } Assign;

        struct {
            expr_ty target;
            operator_ty op;
            expr_ty value;
        } AugAssign;

        struct {
            expr_ty target;
            expr_ty annotation;
            expr_ty value;
            int simple;
        } AnnAssign;

        struct {
            expr_ty target;
            expr_ty iter;
            asdl_stmt_seq *body;
            asdl_stmt_seq *orelse;
            string type_comment;
        } For;

        struct {
            expr_ty target;
            expr_ty iter;
            asdl_stmt_seq *body;
            asdl_stmt_seq *orelse;
            string type_comment;
        } AsyncFor;

        struct {
            expr_ty test;
            asdl_stmt_seq *body;
            asdl_stmt_seq *orelse;
        } While;

        struct {
            expr_ty test;
            asdl_stmt_seq *body;
            asdl_stmt_seq *orelse;
        } If;

        struct {
            asdl_withitem_seq *items;
            asdl_stmt_seq *body;
            string type_comment;
        } With;

        struct {
            asdl_withitem_seq *items;
            asdl_stmt_seq *body;
            string type_comment;
        } AsyncWith;

        struct {
            expr_ty subject;
            asdl_match_case_seq *cases;
        } Match;

        struct {
            expr_ty exc;
            expr_ty cause;
        } Raise;

        struct {
            asdl_stmt_seq *body;
            asdl_excepthandler_seq *handlers;
            asdl_stmt_seq *orelse;
            asdl_stmt_seq *finalbody;
        } Try;

        struct {
            expr_ty test;
            expr_ty msg;
        } Assert;

        struct {
            asdl_alias_seq *names;
        } Import;

        struct {
            identifier module;
            asdl_alias_seq *names;
            int level;
        } ImportFrom;

        struct {
            asdl_identifier_seq *names;
        } Global;

        struct {
            asdl_identifier_seq *names;
        } Nonlocal;

        struct {
            expr_ty value;
        } Expr;

    } v;
    int lineno;
    int col_offset;
    int end_lineno;
    int end_col_offset;
};

enum _expr_kind {BoolOp_kind=1, NamedExpr_kind=2, BinOp_kind=3, UnaryOp_kind=4,
                  Lambda_kind=5, IfExp_kind=6, Dict_kind=7, Set_kind=8,
                  ListComp_kind=9, SetComp_kind=10, DictComp_kind=11,
                  GeneratorExp_kind=12, Await_kind=13, Yield_kind=14,
                  YieldFrom_kind=15, Compare_kind=16, Call_kind=17,
                  FormattedValue_kind=18, JoinedStr_kind=19, Constant_kind=20,
                  Attribute_kind=21, Subscript_kind=22, Starred_kind=23,
                  Name_kind=24, List_kind=25, Tuple_kind=26, Slice_kind=27,
                  MatchAs_kind=28, MatchOr_kind=29};
struct _expr {
    enum _expr_kind kind;
    union {
        struct {
            boolop_ty op;
            asdl_expr_seq *values;
        } BoolOp;

        struct {
            expr_ty target;
            expr_ty value;
        } NamedExpr;

        struct {
            expr_ty left;
            operator_ty op;
            expr_ty right;
        } BinOp;

        struct {
            unaryop_ty op;
            expr_ty operand;
        } UnaryOp;

        struct {
            arguments_ty args;
            expr_ty body;
        } Lambda;

        struct {
            expr_ty test;
            expr_ty body;
            expr_ty orelse;
        } IfExp;

        struct {
            asdl_expr_seq *keys;
            asdl_expr_seq *values;
        } Dict;

        struct {
            asdl_expr_seq *elts;
        } Set;

        struct {
            expr_ty elt;
            asdl_comprehension_seq *generators;
        } ListComp;

        struct {
            expr_ty elt;
            asdl_comprehension_seq *generators;
        } SetComp;

        struct {
            expr_ty key;
            expr_ty value;
            asdl_comprehension_seq *generators;
        } DictComp;

        struct {
            expr_ty elt;
            asdl_comprehension_seq *generators;
        } GeneratorExp;

        struct {
            expr_ty value;
        } Await;

        struct {
            expr_ty value;
        } Yield;

        struct {
            expr_ty value;
        } YieldFrom;

        struct {
            expr_ty left;
            asdl_int_seq *ops;
            asdl_expr_seq *comparators;
        } Compare;

        struct {
            expr_ty func;
            asdl_expr_seq *args;
            asdl_keyword_seq *keywords;
        } Call;

        struct {
            expr_ty value;
            int conversion;
            expr_ty format_spec;
        } FormattedValue;

        struct {
            asdl_expr_seq *values;
        } JoinedStr;

        struct {
            constant value;
            string kind;
        } Constant;

        struct {
            expr_ty value;
            identifier attr;
            expr_context_ty ctx;
        } Attribute;

        struct {
            expr_ty value;
            expr_ty slice;
            expr_context_ty ctx;
        } Subscript;

        struct {
            expr_ty value;
            expr_context_ty ctx;
        } Starred;

        struct {
            identifier id;
            expr_context_ty ctx;
        } Name;

        struct {
            asdl_expr_seq *elts;
            expr_context_ty ctx;
        } List;

        struct {
            asdl_expr_seq *elts;
            expr_context_ty ctx;
        } Tuple;

        struct {
            expr_ty lower;
            expr_ty upper;
            expr_ty step;
        } Slice;

        struct {
            expr_ty pattern;
            identifier name;
        } MatchAs;

        struct {
            asdl_expr_seq *patterns;
        } MatchOr;

    } v;
    int lineno;
    int col_offset;
    int end_lineno;
    int end_col_offset;
};

struct _comprehension {
    expr_ty target;
    expr_ty iter;
    asdl_expr_seq *ifs;
    int is_async;
};

enum _excepthandler_kind {ExceptHandler_kind=1};
struct _excepthandler {
    enum _excepthandler_kind kind;
    union {
        struct {
            expr_ty type;
            identifier name;
            asdl_stmt_seq *body;
        } ExceptHandler;

    } v;
    int lineno;
    int col_offset;
    int end_lineno;
    int end_col_offset;
};

struct _arguments {
    asdl_arg_seq *posonlyargs;
    asdl_arg_seq *args;
    arg_ty vararg;
    asdl_arg_seq *kwonlyargs;
    asdl_expr_seq *kw_defaults;
    arg_ty kwarg;
    asdl_expr_seq *defaults;
};

struct _arg {
    identifier arg;
    expr_ty annotation;
    string type_comment;
    int lineno;
    int col_offset;
    int end_lineno;
    int end_col_offset;
};

struct _keyword {
    identifier arg;
    expr_ty value;
    int lineno;
    int col_offset;
    int end_lineno;
    int end_col_offset;
};

struct _alias {
    identifier name;
    identifier asname;
};

struct _withitem {
    expr_ty context_expr;
    expr_ty optional_vars;
};

struct _match_case {
    expr_ty pattern;
    expr_ty guard;
    asdl_stmt_seq *body;
};

enum _type_ignore_kind {TypeIgnore_kind=1};
struct _type_ignore {
    enum _type_ignore_kind kind;
    union {
        struct {
            int lineno;
            string tag;
        } TypeIgnore;

    } v;
};


// Note: these macros affect function definitions, not only call sites.
#define Mys_Module(a0, a1, a2) _Mys_Py_Module(a0, a1, a2)
mod_ty _Mys_Py_Module(asdl_stmt_seq * body, asdl_type_ignore_seq * type_ignores,
                  PyArena *arena);
#define Mys_Interactive(a0, a1) _Mys_Py_Interactive(a0, a1)
mod_ty _Mys_Py_Interactive(asdl_stmt_seq * body, PyArena *arena);
#define Mys_Expression(a0, a1) _Mys_Py_Expression(a0, a1)
mod_ty _Mys_Py_Expression(expr_ty body, PyArena *arena);
#define Mys_FunctionType(a0, a1, a2) _Mys_Py_FunctionType(a0, a1, a2)
mod_ty _Mys_Py_FunctionType(asdl_expr_seq * argtypes, expr_ty returns, PyArena
                        *arena);
#define Mys_FunctionDef(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) _Mys_Py_FunctionDef(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
stmt_ty _Mys_Py_FunctionDef(identifier name, arguments_ty args, asdl_stmt_seq *
                        body, asdl_expr_seq * decorator_list, expr_ty returns,
                        string type_comment, int lineno, int col_offset, int
                        end_lineno, int end_col_offset, PyArena *arena);
#define Mys_AsyncFunctionDef(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) _Mys_Py_AsyncFunctionDef(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
stmt_ty _Mys_Py_AsyncFunctionDef(identifier name, arguments_ty args, asdl_stmt_seq
                             * body, asdl_expr_seq * decorator_list, expr_ty
                             returns, string type_comment, int lineno, int
                             col_offset, int end_lineno, int end_col_offset,
                             PyArena *arena);
#define Mys_ClassDef(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) _Mys_Py_ClassDef(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
stmt_ty _Mys_Py_ClassDef(identifier name, asdl_expr_seq * bases, asdl_keyword_seq *
                     keywords, asdl_stmt_seq * body, asdl_expr_seq *
                     decorator_list, int lineno, int col_offset, int
                     end_lineno, int end_col_offset, PyArena *arena);
#define Mys_Return(a0, a1, a2, a3, a4, a5) _Mys_Py_Return(a0, a1, a2, a3, a4, a5)
stmt_ty _Mys_Py_Return(expr_ty value, int lineno, int col_offset, int end_lineno,
                   int end_col_offset, PyArena *arena);
#define Mys_Delete(a0, a1, a2, a3, a4, a5) _Mys_Py_Delete(a0, a1, a2, a3, a4, a5)
stmt_ty _Mys_Py_Delete(asdl_expr_seq * targets, int lineno, int col_offset, int
                   end_lineno, int end_col_offset, PyArena *arena);
#define Mys_Assign(a0, a1, a2, a3, a4, a5, a6, a7) _Mys_Py_Assign(a0, a1, a2, a3, a4, a5, a6, a7)
stmt_ty _Mys_Py_Assign(asdl_expr_seq * targets, expr_ty value, string type_comment,
                   int lineno, int col_offset, int end_lineno, int
                   end_col_offset, PyArena *arena);
#define Mys_AugAssign(a0, a1, a2, a3, a4, a5, a6, a7) _Mys_Py_AugAssign(a0, a1, a2, a3, a4, a5, a6, a7)
stmt_ty _Mys_Py_AugAssign(expr_ty target, operator_ty op, expr_ty value, int
                      lineno, int col_offset, int end_lineno, int
                      end_col_offset, PyArena *arena);
#define Mys_AnnAssign(a0, a1, a2, a3, a4, a5, a6, a7, a8) _Mys_Py_AnnAssign(a0, a1, a2, a3, a4, a5, a6, a7, a8)
stmt_ty _Mys_Py_AnnAssign(expr_ty target, expr_ty annotation, expr_ty value, int
                      simple, int lineno, int col_offset, int end_lineno, int
                      end_col_offset, PyArena *arena);
#define Mys_For(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) _Mys_Py_For(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
stmt_ty _Mys_Py_For(expr_ty target, expr_ty iter, asdl_stmt_seq * body,
                asdl_stmt_seq * orelse, string type_comment, int lineno, int
                col_offset, int end_lineno, int end_col_offset, PyArena *arena);
#define Mys_AsyncFor(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) _Mys_Py_AsyncFor(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
stmt_ty _Mys_Py_AsyncFor(expr_ty target, expr_ty iter, asdl_stmt_seq * body,
                     asdl_stmt_seq * orelse, string type_comment, int lineno,
                     int col_offset, int end_lineno, int end_col_offset,
                     PyArena *arena);
#define Mys_While(a0, a1, a2, a3, a4, a5, a6, a7) _Mys_Py_While(a0, a1, a2, a3, a4, a5, a6, a7)
stmt_ty _Mys_Py_While(expr_ty test, asdl_stmt_seq * body, asdl_stmt_seq * orelse,
                  int lineno, int col_offset, int end_lineno, int
                  end_col_offset, PyArena *arena);
#define Mys_If(a0, a1, a2, a3, a4, a5, a6, a7) _Mys_Py_If(a0, a1, a2, a3, a4, a5, a6, a7)
stmt_ty _Mys_Py_If(expr_ty test, asdl_stmt_seq * body, asdl_stmt_seq * orelse, int
               lineno, int col_offset, int end_lineno, int end_col_offset,
               PyArena *arena);
#define Mys_With(a0, a1, a2, a3, a4, a5, a6, a7) _Mys_Py_With(a0, a1, a2, a3, a4, a5, a6, a7)
stmt_ty _Mys_Py_With(asdl_withitem_seq * items, asdl_stmt_seq * body, string
                 type_comment, int lineno, int col_offset, int end_lineno, int
                 end_col_offset, PyArena *arena);
#define Mys_AsyncWith(a0, a1, a2, a3, a4, a5, a6, a7) _Mys_Py_AsyncWith(a0, a1, a2, a3, a4, a5, a6, a7)
stmt_ty _Mys_Py_AsyncWith(asdl_withitem_seq * items, asdl_stmt_seq * body, string
                      type_comment, int lineno, int col_offset, int end_lineno,
                      int end_col_offset, PyArena *arena);
#define Mys_Match(a0, a1, a2, a3, a4, a5, a6) _Mys_Py_Match(a0, a1, a2, a3, a4, a5, a6)
stmt_ty _Mys_Py_Match(expr_ty subject, asdl_match_case_seq * cases, int lineno, int
                  col_offset, int end_lineno, int end_col_offset, PyArena
                  *arena);
#define Mys_Raise(a0, a1, a2, a3, a4, a5, a6) _Mys_Py_Raise(a0, a1, a2, a3, a4, a5, a6)
stmt_ty _Mys_Py_Raise(expr_ty exc, expr_ty cause, int lineno, int col_offset, int
                  end_lineno, int end_col_offset, PyArena *arena);
#define Mys_Try(a0, a1, a2, a3, a4, a5, a6, a7, a8) _Mys_Py_Try(a0, a1, a2, a3, a4, a5, a6, a7, a8)
stmt_ty _Mys_Py_Try(asdl_stmt_seq * body, asdl_excepthandler_seq * handlers,
                asdl_stmt_seq * orelse, asdl_stmt_seq * finalbody, int lineno,
                int col_offset, int end_lineno, int end_col_offset, PyArena
                *arena);
#define Mys_Assert(a0, a1, a2, a3, a4, a5, a6) _Mys_Py_Assert(a0, a1, a2, a3, a4, a5, a6)
stmt_ty _Mys_Py_Assert(expr_ty test, expr_ty msg, int lineno, int col_offset, int
                   end_lineno, int end_col_offset, PyArena *arena);
#define Mys_Import(a0, a1, a2, a3, a4, a5) _Mys_Py_Import(a0, a1, a2, a3, a4, a5)
stmt_ty _Mys_Py_Import(asdl_alias_seq * names, int lineno, int col_offset, int
                   end_lineno, int end_col_offset, PyArena *arena);
#define Mys_ImportFrom(a0, a1, a2, a3, a4, a5, a6, a7) _Mys_Py_ImportFrom(a0, a1, a2, a3, a4, a5, a6, a7)
stmt_ty _Mys_Py_ImportFrom(identifier module, asdl_alias_seq * names, int level,
                       int lineno, int col_offset, int end_lineno, int
                       end_col_offset, PyArena *arena);
#define Mys_Global(a0, a1, a2, a3, a4, a5) _Mys_Py_Global(a0, a1, a2, a3, a4, a5)
stmt_ty _Mys_Py_Global(asdl_identifier_seq * names, int lineno, int col_offset, int
                   end_lineno, int end_col_offset, PyArena *arena);
#define Mys_Nonlocal(a0, a1, a2, a3, a4, a5) _Mys_Py_Nonlocal(a0, a1, a2, a3, a4, a5)
stmt_ty _Mys_Py_Nonlocal(asdl_identifier_seq * names, int lineno, int col_offset,
                     int end_lineno, int end_col_offset, PyArena *arena);
#define Mys_Expr(a0, a1, a2, a3, a4, a5) _Mys_Py_Expr(a0, a1, a2, a3, a4, a5)
stmt_ty _Mys_Py_Expr(expr_ty value, int lineno, int col_offset, int end_lineno, int
                 end_col_offset, PyArena *arena);
#define Mys_Pass(a0, a1, a2, a3, a4) _Mys_Py_Pass(a0, a1, a2, a3, a4)
stmt_ty _Mys_Py_Pass(int lineno, int col_offset, int end_lineno, int
                 end_col_offset, PyArena *arena);
#define Mys_Break(a0, a1, a2, a3, a4) _Mys_Py_Break(a0, a1, a2, a3, a4)
stmt_ty _Mys_Py_Break(int lineno, int col_offset, int end_lineno, int
                  end_col_offset, PyArena *arena);
#define Mys_Continue(a0, a1, a2, a3, a4) _Mys_Py_Continue(a0, a1, a2, a3, a4)
stmt_ty _Mys_Py_Continue(int lineno, int col_offset, int end_lineno, int
                     end_col_offset, PyArena *arena);
#define Mys_BoolOp(a0, a1, a2, a3, a4, a5, a6) _Mys_Py_BoolOp(a0, a1, a2, a3, a4, a5, a6)
expr_ty _Mys_Py_BoolOp(boolop_ty op, asdl_expr_seq * values, int lineno, int
                   col_offset, int end_lineno, int end_col_offset, PyArena
                   *arena);
#define Mys_NamedExpr(a0, a1, a2, a3, a4, a5, a6) _Mys_Py_NamedExpr(a0, a1, a2, a3, a4, a5, a6)
expr_ty _Mys_Py_NamedExpr(expr_ty target, expr_ty value, int lineno, int
                      col_offset, int end_lineno, int end_col_offset, PyArena
                      *arena);
#define Mys_BinOp(a0, a1, a2, a3, a4, a5, a6, a7) _Mys_Py_BinOp(a0, a1, a2, a3, a4, a5, a6, a7)
expr_ty _Mys_Py_BinOp(expr_ty left, operator_ty op, expr_ty right, int lineno, int
                  col_offset, int end_lineno, int end_col_offset, PyArena
                  *arena);
#define Mys_UnaryOp(a0, a1, a2, a3, a4, a5, a6) _Mys_Py_UnaryOp(a0, a1, a2, a3, a4, a5, a6)
expr_ty _Mys_Py_UnaryOp(unaryop_ty op, expr_ty operand, int lineno, int col_offset,
                    int end_lineno, int end_col_offset, PyArena *arena);
#define Mys_Lambda(a0, a1, a2, a3, a4, a5, a6) _Mys_Py_Lambda(a0, a1, a2, a3, a4, a5, a6)
expr_ty _Mys_Py_Lambda(arguments_ty args, expr_ty body, int lineno, int col_offset,
                   int end_lineno, int end_col_offset, PyArena *arena);
#define Mys_IfExp(a0, a1, a2, a3, a4, a5, a6, a7) _Mys_Py_IfExp(a0, a1, a2, a3, a4, a5, a6, a7)
expr_ty _Mys_Py_IfExp(expr_ty test, expr_ty body, expr_ty orelse, int lineno, int
                  col_offset, int end_lineno, int end_col_offset, PyArena
                  *arena);
#define Mys_Dict(a0, a1, a2, a3, a4, a5, a6) _Mys_Py_Dict(a0, a1, a2, a3, a4, a5, a6)
expr_ty _Mys_Py_Dict(asdl_expr_seq * keys, asdl_expr_seq * values, int lineno, int
                 col_offset, int end_lineno, int end_col_offset, PyArena
                 *arena);
#define Mys_Set(a0, a1, a2, a3, a4, a5) _Mys_Py_Set(a0, a1, a2, a3, a4, a5)
expr_ty _Mys_Py_Set(asdl_expr_seq * elts, int lineno, int col_offset, int
                end_lineno, int end_col_offset, PyArena *arena);
#define Mys_ListComp(a0, a1, a2, a3, a4, a5, a6) _Mys_Py_ListComp(a0, a1, a2, a3, a4, a5, a6)
expr_ty _Mys_Py_ListComp(expr_ty elt, asdl_comprehension_seq * generators, int
                     lineno, int col_offset, int end_lineno, int
                     end_col_offset, PyArena *arena);
#define Mys_SetComp(a0, a1, a2, a3, a4, a5, a6) _Mys_Py_SetComp(a0, a1, a2, a3, a4, a5, a6)
expr_ty _Mys_Py_SetComp(expr_ty elt, asdl_comprehension_seq * generators, int
                    lineno, int col_offset, int end_lineno, int end_col_offset,
                    PyArena *arena);
#define Mys_DictComp(a0, a1, a2, a3, a4, a5, a6, a7) _Mys_Py_DictComp(a0, a1, a2, a3, a4, a5, a6, a7)
expr_ty _Mys_Py_DictComp(expr_ty key, expr_ty value, asdl_comprehension_seq *
                     generators, int lineno, int col_offset, int end_lineno,
                     int end_col_offset, PyArena *arena);
#define Mys_GeneratorExp(a0, a1, a2, a3, a4, a5, a6) _Mys_Py_GeneratorExp(a0, a1, a2, a3, a4, a5, a6)
expr_ty _Mys_Py_GeneratorExp(expr_ty elt, asdl_comprehension_seq * generators, int
                         lineno, int col_offset, int end_lineno, int
                         end_col_offset, PyArena *arena);
#define Mys_Await(a0, a1, a2, a3, a4, a5) _Mys_Py_Await(a0, a1, a2, a3, a4, a5)
expr_ty _Mys_Py_Await(expr_ty value, int lineno, int col_offset, int end_lineno,
                  int end_col_offset, PyArena *arena);
#define Mys_Yield(a0, a1, a2, a3, a4, a5) _Mys_Py_Yield(a0, a1, a2, a3, a4, a5)
expr_ty _Mys_Py_Yield(expr_ty value, int lineno, int col_offset, int end_lineno,
                  int end_col_offset, PyArena *arena);
#define Mys_YieldFrom(a0, a1, a2, a3, a4, a5) _Mys_Py_YieldFrom(a0, a1, a2, a3, a4, a5)
expr_ty _Mys_Py_YieldFrom(expr_ty value, int lineno, int col_offset, int
                      end_lineno, int end_col_offset, PyArena *arena);
#define Mys_Compare(a0, a1, a2, a3, a4, a5, a6, a7) _Mys_Py_Compare(a0, a1, a2, a3, a4, a5, a6, a7)
expr_ty _Mys_Py_Compare(expr_ty left, asdl_int_seq * ops, asdl_expr_seq *
                    comparators, int lineno, int col_offset, int end_lineno,
                    int end_col_offset, PyArena *arena);
#define Mys_Call(a0, a1, a2, a3, a4, a5, a6, a7) _Mys_Py_Call(a0, a1, a2, a3, a4, a5, a6, a7)
expr_ty _Mys_Py_Call(expr_ty func, asdl_expr_seq * args, asdl_keyword_seq *
                 keywords, int lineno, int col_offset, int end_lineno, int
                 end_col_offset, PyArena *arena);
#define Mys_FormattedValue(a0, a1, a2, a3, a4, a5, a6, a7) _Mys_Py_FormattedValue(a0, a1, a2, a3, a4, a5, a6, a7)
expr_ty _Mys_Py_FormattedValue(expr_ty value, int conversion, expr_ty format_spec,
                           int lineno, int col_offset, int end_lineno, int
                           end_col_offset, PyArena *arena);
#define Mys_JoinedStr(a0, a1, a2, a3, a4, a5) _Mys_Py_JoinedStr(a0, a1, a2, a3, a4, a5)
expr_ty _Mys_Py_JoinedStr(asdl_expr_seq * values, int lineno, int col_offset, int
                      end_lineno, int end_col_offset, PyArena *arena);
#define Mys_Constant(a0, a1, a2, a3, a4, a5, a6) _Mys_Py_Constant(a0, a1, a2, a3, a4, a5, a6)
expr_ty _Mys_Py_Constant(constant value, string kind, int lineno, int col_offset,
                     int end_lineno, int end_col_offset, PyArena *arena);
#define Mys_Attribute(a0, a1, a2, a3, a4, a5, a6, a7) _Mys_Py_Attribute(a0, a1, a2, a3, a4, a5, a6, a7)
expr_ty _Mys_Py_Attribute(expr_ty value, identifier attr, expr_context_ty ctx, int
                      lineno, int col_offset, int end_lineno, int
                      end_col_offset, PyArena *arena);
#define Mys_Subscript(a0, a1, a2, a3, a4, a5, a6, a7) _Mys_Py_Subscript(a0, a1, a2, a3, a4, a5, a6, a7)
expr_ty _Mys_Py_Subscript(expr_ty value, expr_ty slice, expr_context_ty ctx, int
                      lineno, int col_offset, int end_lineno, int
                      end_col_offset, PyArena *arena);
#define Mys_Starred(a0, a1, a2, a3, a4, a5, a6) _Mys_Py_Starred(a0, a1, a2, a3, a4, a5, a6)
expr_ty _Mys_Py_Starred(expr_ty value, expr_context_ty ctx, int lineno, int
                    col_offset, int end_lineno, int end_col_offset, PyArena
                    *arena);
#define Mys_Name(a0, a1, a2, a3, a4, a5, a6) _Mys_Py_Name(a0, a1, a2, a3, a4, a5, a6)
expr_ty _Mys_Py_Name(identifier id, expr_context_ty ctx, int lineno, int
                 col_offset, int end_lineno, int end_col_offset, PyArena
                 *arena);
#define Mys_List(a0, a1, a2, a3, a4, a5, a6) _Mys_Py_List(a0, a1, a2, a3, a4, a5, a6)
expr_ty _Mys_Py_List(asdl_expr_seq * elts, expr_context_ty ctx, int lineno, int
                 col_offset, int end_lineno, int end_col_offset, PyArena
                 *arena);
#define Mys_Tuple(a0, a1, a2, a3, a4, a5, a6) _Mys_Py_Tuple(a0, a1, a2, a3, a4, a5, a6)
expr_ty _Mys_Py_Tuple(asdl_expr_seq * elts, expr_context_ty ctx, int lineno, int
                  col_offset, int end_lineno, int end_col_offset, PyArena
                  *arena);
#define Mys_Slice(a0, a1, a2, a3, a4, a5, a6, a7) _Mys_Py_Slice(a0, a1, a2, a3, a4, a5, a6, a7)
expr_ty _Mys_Py_Slice(expr_ty lower, expr_ty upper, expr_ty step, int lineno, int
                  col_offset, int end_lineno, int end_col_offset, PyArena
                  *arena);
#define Mys_MatchAs(a0, a1, a2, a3, a4, a5, a6) _Mys_Py_MatchAs(a0, a1, a2, a3, a4, a5, a6)
expr_ty _Mys_Py_MatchAs(expr_ty pattern, identifier name, int lineno, int
                    col_offset, int end_lineno, int end_col_offset, PyArena
                    *arena);
#define Mys_MatchOr(a0, a1, a2, a3, a4, a5) _Mys_Py_MatchOr(a0, a1, a2, a3, a4, a5)
expr_ty _Mys_Py_MatchOr(asdl_expr_seq * patterns, int lineno, int col_offset, int
                    end_lineno, int end_col_offset, PyArena *arena);
#define Mys_comprehension(a0, a1, a2, a3, a4) _Mys_Py_comprehension(a0, a1, a2, a3, a4)
comprehension_ty _Mys_Py_comprehension(expr_ty target, expr_ty iter, asdl_expr_seq
                                   * ifs, int is_async, PyArena *arena);
#define Mys_ExceptHandler(a0, a1, a2, a3, a4, a5, a6, a7) _Mys_Py_ExceptHandler(a0, a1, a2, a3, a4, a5, a6, a7)
excepthandler_ty _Mys_Py_ExceptHandler(expr_ty type, identifier name, asdl_stmt_seq
                                   * body, int lineno, int col_offset, int
                                   end_lineno, int end_col_offset, PyArena
                                   *arena);
#define Mys_arguments(a0, a1, a2, a3, a4, a5, a6, a7) _Mys_Py_arguments(a0, a1, a2, a3, a4, a5, a6, a7)
arguments_ty _Mys_Py_arguments(asdl_arg_seq * posonlyargs, asdl_arg_seq * args,
                           arg_ty vararg, asdl_arg_seq * kwonlyargs,
                           asdl_expr_seq * kw_defaults, arg_ty kwarg,
                           asdl_expr_seq * defaults, PyArena *arena);
#define Mys_arg(a0, a1, a2, a3, a4, a5, a6, a7) _Mys_Py_arg(a0, a1, a2, a3, a4, a5, a6, a7)
arg_ty _Mys_Py_arg(identifier arg, expr_ty annotation, string type_comment, int
               lineno, int col_offset, int end_lineno, int end_col_offset,
               PyArena *arena);
#define Mys_keyword(a0, a1, a2, a3, a4, a5, a6) _Mys_Py_keyword(a0, a1, a2, a3, a4, a5, a6)
keyword_ty _Mys_Py_keyword(identifier arg, expr_ty value, int lineno, int
                       col_offset, int end_lineno, int end_col_offset, PyArena
                       *arena);
#define Mys_alias(a0, a1, a2) _Mys_Py_alias(a0, a1, a2)
alias_ty _Mys_Py_alias(identifier name, identifier asname, PyArena *arena);
#define Mys_withitem(a0, a1, a2) _Mys_Py_withitem(a0, a1, a2)
withitem_ty _Mys_Py_withitem(expr_ty context_expr, expr_ty optional_vars, PyArena
                         *arena);
#define Mys_match_case(a0, a1, a2, a3) _Mys_Py_match_case(a0, a1, a2, a3)
match_case_ty _Mys_Py_match_case(expr_ty pattern, expr_ty guard, asdl_stmt_seq *
                             body, PyArena *arena);
#define Mys_TypeIgnore(a0, a1, a2) _Mys_Py_TypeIgnore(a0, a1, a2)
type_ignore_ty _Mys_Py_TypeIgnore(int lineno, string tag, PyArena *arena);

PyObject* Mys_PyAST_mod2obj(mod_ty t);
mod_ty Mys_PyAST_obj2mod(PyObject* ast, PyArena* arena, int mode);
int Mys_PyAST_Check(PyObject* obj);
#endif /* !Py_LIMITED_API */

#ifdef __cplusplus
}
#endif
#endif /* !Py_PYTHON_AST_H */
