import flatbuffers

# automatically generated by the FlatBuffers compiler, do not modify

# namespace: jax

from flatbuffers.compat import import_numpy
np = import_numpy()

class PocketFftDescriptor(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPocketFftDescriptor(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PocketFftDescriptor()
        x.Init(buf, n + offset)
        return x

    # PocketFftDescriptor
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PocketFftDescriptor
    def Dtype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # PocketFftDescriptor
    def FftType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # PocketFftDescriptor
    def Shape(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # PocketFftDescriptor
    def ShapeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # PocketFftDescriptor
    def ShapeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PocketFftDescriptor
    def ShapeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # PocketFftDescriptor
    def StridesIn(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # PocketFftDescriptor
    def StridesInAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # PocketFftDescriptor
    def StridesInLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PocketFftDescriptor
    def StridesInIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # PocketFftDescriptor
    def StridesOut(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # PocketFftDescriptor
    def StridesOutAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # PocketFftDescriptor
    def StridesOutLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PocketFftDescriptor
    def StridesOutIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # PocketFftDescriptor
    def Axes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PocketFftDescriptor
    def AxesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # PocketFftDescriptor
    def AxesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PocketFftDescriptor
    def AxesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # PocketFftDescriptor
    def Forward(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # PocketFftDescriptor
    def Scale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def PocketFftDescriptorStart(builder): builder.StartObject(8)
def PocketFftDescriptorAddDtype(builder, dtype): builder.PrependInt8Slot(0, dtype, 0)
def PocketFftDescriptorAddFftType(builder, fftType): builder.PrependInt8Slot(1, fftType, 0)
def PocketFftDescriptorAddShape(builder, shape): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(shape), 0)
def PocketFftDescriptorStartShapeVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def PocketFftDescriptorAddStridesIn(builder, stridesIn): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(stridesIn), 0)
def PocketFftDescriptorStartStridesInVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def PocketFftDescriptorAddStridesOut(builder, stridesOut): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(stridesOut), 0)
def PocketFftDescriptorStartStridesOutVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def PocketFftDescriptorAddAxes(builder, axes): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(axes), 0)
def PocketFftDescriptorStartAxesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PocketFftDescriptorAddForward(builder, forward): builder.PrependBoolSlot(6, forward, 0)
def PocketFftDescriptorAddScale(builder, scale): builder.PrependFloat64Slot(7, scale, 0.0)
def PocketFftDescriptorEnd(builder): return builder.EndObject()

try:
    from typing import List
except:
    pass

class PocketFftDescriptorT(object):

    # PocketFftDescriptorT
    def __init__(self):
        self.dtype = 0  # type: int
        self.fftType = 0  # type: int
        self.shape = None  # type: List[int]
        self.stridesIn = None  # type: List[int]
        self.stridesOut = None  # type: List[int]
        self.axes = None  # type: List[int]
        self.forward = False  # type: bool
        self.scale = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        pocketFftDescriptor = PocketFftDescriptor()
        pocketFftDescriptor.Init(buf, pos)
        return cls.InitFromObj(pocketFftDescriptor)

    @classmethod
    def InitFromObj(cls, pocketFftDescriptor):
        x = PocketFftDescriptorT()
        x._UnPack(pocketFftDescriptor)
        return x

    # PocketFftDescriptorT
    def _UnPack(self, pocketFftDescriptor):
        if pocketFftDescriptor is None:
            return
        self.dtype = pocketFftDescriptor.Dtype()
        self.fftType = pocketFftDescriptor.FftType()
        if not pocketFftDescriptor.ShapeIsNone():
            if np is None:
                self.shape = []
                for i in range(pocketFftDescriptor.ShapeLength()):
                    self.shape.append(pocketFftDescriptor.Shape(i))
            else:
                self.shape = pocketFftDescriptor.ShapeAsNumpy()
        if not pocketFftDescriptor.StridesInIsNone():
            if np is None:
                self.stridesIn = []
                for i in range(pocketFftDescriptor.StridesInLength()):
                    self.stridesIn.append(pocketFftDescriptor.StridesIn(i))
            else:
                self.stridesIn = pocketFftDescriptor.StridesInAsNumpy()
        if not pocketFftDescriptor.StridesOutIsNone():
            if np is None:
                self.stridesOut = []
                for i in range(pocketFftDescriptor.StridesOutLength()):
                    self.stridesOut.append(pocketFftDescriptor.StridesOut(i))
            else:
                self.stridesOut = pocketFftDescriptor.StridesOutAsNumpy()
        if not pocketFftDescriptor.AxesIsNone():
            if np is None:
                self.axes = []
                for i in range(pocketFftDescriptor.AxesLength()):
                    self.axes.append(pocketFftDescriptor.Axes(i))
            else:
                self.axes = pocketFftDescriptor.AxesAsNumpy()
        self.forward = pocketFftDescriptor.Forward()
        self.scale = pocketFftDescriptor.Scale()

    # PocketFftDescriptorT
    def Pack(self, builder):
        if self.shape is not None:
            if np is not None and type(self.shape) is np.ndarray:
                shape = builder.CreateNumpyVector(self.shape)
            else:
                PocketFftDescriptorStartShapeVector(builder, len(self.shape))
                for i in reversed(range(len(self.shape))):
                    builder.PrependUint64(self.shape[i])
                shape = builder.EndVector(len(self.shape))
        if self.stridesIn is not None:
            if np is not None and type(self.stridesIn) is np.ndarray:
                stridesIn = builder.CreateNumpyVector(self.stridesIn)
            else:
                PocketFftDescriptorStartStridesInVector(builder, len(self.stridesIn))
                for i in reversed(range(len(self.stridesIn))):
                    builder.PrependUint64(self.stridesIn[i])
                stridesIn = builder.EndVector(len(self.stridesIn))
        if self.stridesOut is not None:
            if np is not None and type(self.stridesOut) is np.ndarray:
                stridesOut = builder.CreateNumpyVector(self.stridesOut)
            else:
                PocketFftDescriptorStartStridesOutVector(builder, len(self.stridesOut))
                for i in reversed(range(len(self.stridesOut))):
                    builder.PrependUint64(self.stridesOut[i])
                stridesOut = builder.EndVector(len(self.stridesOut))
        if self.axes is not None:
            if np is not None and type(self.axes) is np.ndarray:
                axes = builder.CreateNumpyVector(self.axes)
            else:
                PocketFftDescriptorStartAxesVector(builder, len(self.axes))
                for i in reversed(range(len(self.axes))):
                    builder.PrependUint32(self.axes[i])
                axes = builder.EndVector(len(self.axes))
        PocketFftDescriptorStart(builder)
        PocketFftDescriptorAddDtype(builder, self.dtype)
        PocketFftDescriptorAddFftType(builder, self.fftType)
        if self.shape is not None:
            PocketFftDescriptorAddShape(builder, shape)
        if self.stridesIn is not None:
            PocketFftDescriptorAddStridesIn(builder, stridesIn)
        if self.stridesOut is not None:
            PocketFftDescriptorAddStridesOut(builder, stridesOut)
        if self.axes is not None:
            PocketFftDescriptorAddAxes(builder, axes)
        PocketFftDescriptorAddForward(builder, self.forward)
        PocketFftDescriptorAddScale(builder, self.scale)
        pocketFftDescriptor = PocketFftDescriptorEnd(builder)
        return pocketFftDescriptor
# automatically generated by the FlatBuffers compiler, do not modify

# namespace: jax

class PocketFftDtype(object):
    COMPLEX64 = 0
    COMPLEX128 = 1

# automatically generated by the FlatBuffers compiler, do not modify

# namespace: jax

class PocketFftType(object):
    C2C = 0
    C2R = 1
    R2C = 2

