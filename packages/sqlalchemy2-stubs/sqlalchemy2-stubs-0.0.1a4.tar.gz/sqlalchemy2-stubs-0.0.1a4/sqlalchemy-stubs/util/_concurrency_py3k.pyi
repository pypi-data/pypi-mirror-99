from typing import Any
from typing import Callable
from typing import Coroutine

import greenlet

from .. import exc as exc

class _AsyncIoGreenlet(greenlet.greenlet):
    driver: Any = ...
    gr_context: Any = ...
    def __init__(self, fn: Any, driver: Any) -> None: ...

def await_only(awaitable: Coroutine) -> Any: ...
def await_fallback(awaitable: Coroutine) -> Any: ...
async def greenlet_spawn(
    fn: Callable, *args: Any, _require_await: Any = ..., **kwargs: Any
) -> Any: ...

class AsyncAdaptedLock:
    mutex: Any = ...
    def __init__(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *arg: Any, **kw: Any) -> None: ...
