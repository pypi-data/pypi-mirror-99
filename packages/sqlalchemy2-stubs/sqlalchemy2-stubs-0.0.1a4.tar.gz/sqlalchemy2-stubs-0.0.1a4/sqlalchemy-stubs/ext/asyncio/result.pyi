from typing import Any
from typing import Int
from typing import Iterator
from typing import List
from typing import Mapping
from typing import Optional

from ... import util as util
from ...engine.result import FilterResult as FilterResult
from ...engine.result import FrozenResult as FrozenResult
from ...engine.result import MergedResult as MergedResult
from ...engine.result import Row as Row
from ...util.concurrency import greenlet_spawn as greenlet_spawn

class AsyncCommon(FilterResult):
    async def close(self) -> None: ...

class AsyncResult(AsyncCommon):
    def __init__(self, real_result: Any) -> None: ...
    def keys(self): ...
    def unique(self, strategy: Optional[Any] = ...): ...
    def columns(self, *col_expressions: object) -> AsyncResult: ...
    async def partitions(
        self, size: Optional[Int] = ...
    ) -> Iterator[List[Any]]: ...
    async def fetchone(self) -> Row: ...
    async def fetchmany(self, size: Optional[Int] = ...) -> List[Row]: ...
    async def all(self) -> List[Row]: ...
    def __aiter__(self): ...
    async def __anext__(self): ...
    async def first(self) -> Row: ...
    async def one_or_none(self) -> Optional[Row]: ...
    async def scalar_one(self) -> Any: ...
    async def scalar_one_or_none(self) -> Optional[Any]: ...
    async def one(self) -> Row: ...
    async def scalar(self) -> Optional[Any]: ...
    async def freeze(self): ...
    def merge(self, *others: Any): ...
    def scalars(self, index: Int = ...) -> AsyncScalarResult: ...
    def mappings(self): ...

class AsyncScalarResult(AsyncCommon):
    def __init__(self, real_result: Any, index: Any) -> None: ...
    def unique(self, strategy: Optional[Any] = ...): ...
    async def partitions(
        self, size: Optional[Int] = ...
    ) -> Iterator[List[Any]]: ...
    async def fetchall(self) -> List[Any]: ...
    async def fetchmany(self, size: Optional[Int] = ...) -> List[Any]: ...
    async def all(self) -> List[Any]: ...
    def __aiter__(self): ...
    async def __anext__(self): ...
    async def first(self) -> Optional[Any]: ...
    async def one_or_none(self) -> Optional[Any]: ...
    async def one(self) -> Any: ...

class AsyncMappingResult(AsyncCommon):
    def __init__(self, result: Any) -> None: ...
    def keys(self): ...
    def unique(self, strategy: Optional[Any] = ...): ...
    def columns(self, *col_expressions: object) -> AsyncMappingResult: ...
    async def partitions(
        self, size: Optional[Int] = ...
    ) -> Iterator[List[Mapping]]: ...
    async def fetchall(self) -> List[Mapping]: ...
    async def fetchone(self) -> Mapping: ...
    async def fetchmany(self, size: Optional[Int] = ...) -> List[Mapping]: ...
    async def all(self) -> List[Mapping]: ...
    def __aiter__(self): ...
    async def __anext__(self): ...
    async def first(self) -> Optional[Mapping]: ...
    async def one_or_none(self) -> Optional[Mapping]: ...
    async def one(self) -> Mapping: ...
