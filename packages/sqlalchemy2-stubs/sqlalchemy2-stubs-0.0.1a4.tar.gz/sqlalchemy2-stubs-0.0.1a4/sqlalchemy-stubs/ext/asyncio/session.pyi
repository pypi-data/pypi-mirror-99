from typing import Any
from typing import Callable
from typing import Mapping
from typing import Optional
from typing import TypeVar

from . import engine as engine
from .base import StartableContext as StartableContext
from .engine import AsyncEngine as AsyncEngine
from ... import util as util
from ...engine import Result as Result
from ...orm import Session as Session
from ...sql import Executable as Executable
from ...util.concurrency import greenlet_spawn as greenlet_spawn

T = TypeVar("T")

class AsyncSession:
    dispatch: Any = ...
    bind: Any = ...
    binds: Any = ...
    sync_session: Any = ...
    def __init__(
        self,
        bind: AsyncEngine = ...,
        binds: Mapping[object, AsyncEngine] = ...,
        **kw: Any,
    ) -> None: ...
    async def refresh(
        self,
        instance: Any,
        attribute_names: Optional[Any] = ...,
        with_for_update: Optional[Any] = ...,
    ): ...
    async def run_sync(
        self, fn: Callable[..., T], *arg: Any, **kw: Any
    ) -> T: ...
    async def execute(
        self,
        statement: Executable,
        params: Optional[Mapping] = ...,
        execution_options: Mapping = ...,
        bind_arguments: Optional[Mapping] = ...,
        **kw: Any,
    ) -> Result: ...
    async def scalar(
        self,
        statement: Executable,
        params: Optional[Mapping] = ...,
        execution_options: Mapping = ...,
        bind_arguments: Optional[Mapping] = ...,
        **kw: Any,
    ) -> Any: ...
    async def get(
        self,
        entity: Any,
        ident: Any,
        options: Optional[Any] = ...,
        populate_existing: bool = ...,
        with_for_update: Optional[Any] = ...,
        identity_token: Optional[Any] = ...,
    ): ...
    async def stream(
        self,
        statement: Any,
        params: Optional[Any] = ...,
        execution_options: Any = ...,
        bind_arguments: Optional[Any] = ...,
        **kw: Any,
    ): ...
    async def merge(self, instance: Any, load: bool = ...): ...
    async def flush(self, objects: Optional[Any] = ...) -> None: ...
    async def connection(self): ...
    def begin(self, **kw: Any): ...
    def begin_nested(self, **kw: Any): ...
    async def rollback(self): ...
    async def commit(self): ...
    async def close(self): ...
    @classmethod
    async def close_all(self): ...
    async def __aenter__(self): ...
    async def __aexit__(
        self, type_: Any, value: Any, traceback: Any
    ) -> None: ...

class _AsyncSessionContextManager:
    async_session: Any = ...
    def __init__(self, async_session: Any) -> None: ...
    trans: Any = ...
    async def __aenter__(self): ...
    async def __aexit__(
        self, type_: Any, value: Any, traceback: Any
    ) -> None: ...

class AsyncSessionTransaction(StartableContext):
    session: Any = ...
    nested: Any = ...
    sync_transaction: Any = ...
    def __init__(self, session: Any, nested: bool = ...) -> None: ...
    @property
    def is_active(self): ...
    async def rollback(self) -> None: ...
    async def commit(self) -> None: ...
    async def start(self): ...
    async def __aexit__(self, type_: Any, value: Any, traceback: Any): ...
