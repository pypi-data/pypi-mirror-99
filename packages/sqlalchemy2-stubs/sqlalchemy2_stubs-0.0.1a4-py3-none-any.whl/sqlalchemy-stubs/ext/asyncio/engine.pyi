from typing import Any
from typing import Callable
from typing import Mapping
from typing import Optional

from .base import ProxyComparable as ProxyComparable
from .base import StartableContext as StartableContext
from .result import AsyncResult as AsyncResult
from ... import exc as exc
from ... import util as util
from ...engine import Result as Result
from ...engine import Transaction as Transaction
from ...future import Connection as Connection
from ...future import Engine as Engine
from ...sql import Executable as Executable
from ...util.concurrency import greenlet_spawn as greenlet_spawn

def create_async_engine(*arg: Any, **kw: Any): ...

class AsyncConnectable: ...

class AsyncConnection(ProxyComparable, StartableContext, AsyncConnectable):
    engine: Any = ...
    sync_engine: Any = ...
    sync_connection: Any = ...
    def __init__(
        self,
        async_engine: AsyncEngine,
        sync_connection: Optional[Connection] = ...,
    ) -> None: ...
    async def start(self): ...
    @property
    def connection(self) -> None: ...
    async def get_raw_connection(self): ...
    @property
    def info(self): ...
    def begin(self) -> AsyncTransaction: ...
    def begin_nested(self) -> AsyncTransaction: ...
    async def invalidate(self, exception: Optional[Any] = ...): ...
    async def get_isolation_level(self): ...
    async def set_isolation_level(self): ...
    def in_transaction(self): ...
    def in_nested_transaction(self): ...
    def get_transaction(self): ...
    def get_nested_transaction(self): ...
    async def execution_options(self, **opt: Any): ...
    async def commit(self) -> None: ...
    async def rollback(self) -> None: ...
    async def close(self) -> None: ...
    async def exec_driver_sql(
        self,
        statement: Executable,
        parameters: Optional[Mapping] = ...,
        execution_options: Mapping = ...,
    ) -> Result: ...
    async def stream(
        self,
        statement: Executable,
        parameters: Optional[Mapping] = ...,
        execution_options: Mapping = ...,
    ) -> AsyncResult: ...
    async def execute(
        self,
        statement: Executable,
        parameters: Optional[Mapping] = ...,
        execution_options: Mapping = ...,
    ) -> Result: ...
    async def scalar(
        self,
        statement: Executable,
        parameters: Optional[Mapping] = ...,
        execution_options: Mapping = ...,
    ) -> Any: ...
    async def run_sync(self, fn: Callable, *arg: Any, **kw: Any) -> Any: ...
    def __await__(self): ...
    async def __aexit__(
        self, type_: Any, value: Any, traceback: Any
    ) -> None: ...

class AsyncEngine(ProxyComparable, AsyncConnectable):
    class _trans_ctx(StartableContext):
        conn: Any = ...
        def __init__(self, conn: Any) -> None: ...
        transaction: Any = ...
        async def start(self): ...
        async def __aexit__(
            self, type_: Any, value: Any, traceback: Any
        ) -> None: ...
    sync_engine: Any = ...
    def __init__(self, sync_engine: Engine) -> None: ...
    def begin(self): ...
    def connect(self) -> AsyncConnection: ...
    async def raw_connection(self) -> Any: ...
    def execution_options(self, **opt: Any): ...
    async def dispose(self): ...

class AsyncTransaction(ProxyComparable, StartableContext):
    connection: Any = ...
    sync_transaction: Any = ...
    nested: Any = ...
    def __init__(
        self, connection: AsyncConnection, nested: bool = ...
    ) -> None: ...
    @property
    def is_valid(self) -> bool: ...
    @property
    def is_active(self) -> bool: ...
    async def close(self) -> None: ...
    async def rollback(self) -> None: ...
    async def commit(self) -> None: ...
    async def start(self): ...
    async def __aexit__(
        self, type_: Any, value: Any, traceback: Any
    ) -> None: ...
