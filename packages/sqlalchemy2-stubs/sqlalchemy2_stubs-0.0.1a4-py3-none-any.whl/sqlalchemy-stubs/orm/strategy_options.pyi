from typing import Any
from typing import Optional

from .attributes import QueryableAttribute as QueryableAttribute
from .base import InspectionAttr as InspectionAttr
from .interfaces import LoaderOption as LoaderOption
from .interfaces import MapperProperty as MapperProperty
from .interfaces import PropComparator as PropComparator
from .path_registry import PathRegistry as PathRegistry
from .path_registry import TokenRegistry as TokenRegistry
from .. import inspect as inspect
from .. import util as util
from ..sql import coercions as coercions
from ..sql import roles as roles
from ..sql import visitors as visitors
from ..sql.base import Generative as Generative

class Load(Generative, LoaderOption):
    path: Any = ...
    context: Any = ...
    local_opts: Any = ...
    is_class_strategy: bool = ...
    def __init__(self, entity: Any) -> None: ...
    @classmethod
    def for_existing_path(cls, path: Any): ...
    is_opts_only: bool = ...
    strategy: Any = ...
    propagate_to_loaders: bool = ...
    def process_compile_state(self, compile_state: Any) -> None: ...
    def options(self, *opts: Any) -> None: ...
    def set_relationship_strategy(
        self, attr: Any, strategy: Any, propagate_to_loaders: bool = ...
    ) -> None: ...
    def set_column_strategy(
        self,
        attrs: Any,
        strategy: Any,
        opts: Optional[Any] = ...,
        opts_only: bool = ...,
    ) -> None: ...
    def set_generic_strategy(self, attrs: Any, strategy: Any) -> None: ...
    def set_class_strategy(self, strategy: Any, opts: Any) -> None: ...

class _UnboundLoad(Load):
    path: Any = ...
    local_opts: Any = ...
    def __init__(self) -> None: ...

class loader_option:
    def __init__(self) -> None: ...
    name: Any = ...
    fn: Any = ...
    def __call__(self, fn: Any): ...
