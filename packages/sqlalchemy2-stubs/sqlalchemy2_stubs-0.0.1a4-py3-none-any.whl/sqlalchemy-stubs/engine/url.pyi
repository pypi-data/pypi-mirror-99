from typing import Any
from typing import Mapping
from typing import Optional
from typing import Sequence
from typing import Tuple
from typing import Union

from .interfaces import Dialect as Dialect
from .. import exc as exc
from .. import util as util
from ..dialects import plugins as plugins
from ..dialects import registry as registry
from ..util import collections_abc as collections_abc
from ..util import compat as compat

class URL:
    def __new__(self, *arg: Any, **kw: Any): ...
    @classmethod
    def create(
        cls,
        drivername: str,
        username: Optional[str] = ...,
        password: Optional[Union[str, object]] = ...,
        host: Optional[str] = ...,
        port: Optional[int] = ...,
        database: Optional[str] = ...,
        query: Mapping[str, Union[str, Sequence[str]]] = ...,
    ) -> URL: ...
    def set(
        self,
        drivername: Optional[str] = ...,
        username: Optional[str] = ...,
        password: Optional[Union[str, object]] = ...,
        host: Optional[str] = ...,
        port: Optional[int] = ...,
        database: Optional[str] = ...,
        query: Optional[Mapping[str, Union[str, Sequence[str]]]] = ...,
    ) -> URL: ...
    def update_query_string(
        self, query_string: str, append: bool = ...
    ) -> URL: ...
    def update_query_pairs(
        self, key_value_pairs: Sequence[Tuple[str, str]], append: bool = ...
    ) -> URL: ...
    def update_query_dict(
        self,
        query_parameters: Mapping[str, Union[str, Sequence[str]]],
        append: bool = ...,
    ) -> URL: ...
    def difference_update_query(self, names: Sequence[str]) -> URL: ...
    def normalized_query(self): ...
    def __to_string__(self, hide_password: bool = ...) -> str: ...
    def render_as_string(self, hide_password: bool = ...) -> str: ...
    def __hash__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def get_backend_name(self): ...
    def get_driver_name(self): ...
    def get_dialect(self): ...
    def translate_connect_args(self, names: Any = ..., **kw: Any): ...

def make_url(name_or_url: Union[str, URL]) -> URL: ...
