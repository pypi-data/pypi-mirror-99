from typing import Any
from typing import Optional

from . import annotation as annotation
from . import coercions as coercions
from . import operators as operators
from . import roles as roles
from . import schema as schema
from . import sqltypes as sqltypes
from .base import ColumnCollection as ColumnCollection
from .base import Executable as Executable
from .base import Generative as Generative
from .base import HasMemoized as HasMemoized
from .elements import BinaryExpression as BinaryExpression
from .elements import BindParameter as BindParameter
from .elements import Cast as Cast
from .elements import ClauseList as ClauseList
from .elements import ColumnElement as ColumnElement
from .elements import Extract as Extract
from .elements import FunctionFilter as FunctionFilter
from .elements import Grouping as Grouping
from .elements import literal_column as literal_column
from .elements import NamedColumn as NamedColumn
from .elements import Over as Over
from .elements import WithinGroup as WithinGroup
from .selectable import FromClause as FromClause
from .selectable import Select as Select
from .selectable import TableValuedAlias as TableValuedAlias
from .visitors import InternalTraversal as InternalTraversal
from .visitors import TraversibleType as TraversibleType
from .. import util as util

def register_function(
    identifier: Any, fn: Any, package: str = ...
) -> None: ...

class FunctionElement(Executable, ColumnElement, FromClause, Generative):
    packagenames: Any = ...
    clause_expr: Any = ...
    def __init__(self, *clauses: Any, **kwargs: Any) -> None: ...
    def scalar_table_valued(self, name: Any, type_: Optional[Any] = ...): ...
    def table_valued(self, *expr: Any, **kw: Any): ...
    def column_valued(self, name: Optional[Any] = ...): ...
    @property
    def columns(self): ...
    def clauses(self): ...
    def over(
        self,
        partition_by: Optional[Any] = ...,
        order_by: Optional[Any] = ...,
        rows: Optional[Any] = ...,
        range_: Optional[Any] = ...,
    ): ...
    def within_group(self, *order_by: Any): ...
    def filter(self, *criterion: Any): ...
    def as_comparison(self, left_index: Any, right_index: Any): ...
    def within_group_type(self, within_group: Any) -> None: ...
    def alias(self, name: Optional[Any] = ...): ...
    def select(self): ...
    def scalar(self): ...
    def execute(self): ...
    def self_group(self, against: Optional[Any] = ...): ...

class FunctionAsBinary(BinaryExpression):
    sql_function: Any = ...
    left_index: Any = ...
    right_index: Any = ...
    operator: Any = ...
    type: Any = ...
    negate: Any = ...
    modifiers: Any = ...
    def __init__(self, fn: Any, left_index: Any, right_index: Any) -> None: ...
    @property
    def left(self): ...
    @left.setter
    def left(self, value: Any) -> None: ...
    @property
    def right(self): ...
    @right.setter
    def right(self, value: Any) -> None: ...

class ScalarFunctionColumn(NamedColumn):
    __visit_name__: str = ...
    is_literal: bool = ...
    table: Any = ...
    fn: Any = ...
    name: Any = ...
    type: Any = ...
    def __init__(
        self, fn: Any, name: Any, type_: Optional[Any] = ...
    ) -> None: ...

class _FunctionGenerator:
    opts: Any = ...
    def __init__(self, **opts: Any) -> None: ...
    def __getattr__(self, name: Any): ...
    def __call__(self, *c: Any, **kwargs: Any): ...

func: _FunctionGenerator = ...
modifier: _FunctionGenerator = ...

class Function(FunctionElement):
    __visit_name__: str = ...
    type: Any = ...
    packagenames: Any = ...
    name: Any = ...
    def __init__(self, name: Any, *clauses: Any, **kw: Any) -> None: ...

class _GenericMeta(TraversibleType):
    def __init__(cls, clsname: Any, bases: Any, clsdict: Any) -> None: ...

class GenericFunction:
    coerce_arguments: bool = ...
    inherit_cache: bool = ...
    packagenames: Any = ...
    clause_expr: Any = ...
    type: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class next_value(GenericFunction):
    type: Any = ...
    name: str = ...
    sequence: Any = ...
    def __init__(self, seq: Any, **kw: Any) -> None: ...
    def compare(self, other: Any, **kw: Any): ...

class AnsiFunction(GenericFunction):
    inherit_cache: bool = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class ReturnTypeFromArgs(GenericFunction):
    inherit_cache: bool = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class coalesce(ReturnTypeFromArgs):
    inherit_cache: bool = ...

class max(ReturnTypeFromArgs):
    inherit_cache: bool = ...

class min(ReturnTypeFromArgs):
    inherit_cache: bool = ...

class sum(ReturnTypeFromArgs):
    inherit_cache: bool = ...

class now(GenericFunction):
    type: Any = ...
    inherit_cache: bool = ...

class concat(GenericFunction):
    type: Any = ...
    inherit_cache: bool = ...

class char_length(GenericFunction):
    type: Any = ...
    inherit_cache: bool = ...
    def __init__(self, arg: Any, **kwargs: Any) -> None: ...

class random(GenericFunction):
    inherit_cache: bool = ...

class count(GenericFunction):
    type: Any = ...
    inherit_cache: bool = ...
    def __init__(
        self, expression: Optional[Any] = ..., **kwargs: Any
    ) -> None: ...

class current_date(AnsiFunction):
    type: Any = ...
    inherit_cache: bool = ...

class current_time(AnsiFunction):
    type: Any = ...
    inherit_cache: bool = ...

class current_timestamp(AnsiFunction):
    type: Any = ...
    inherit_cache: bool = ...

class current_user(AnsiFunction):
    type: Any = ...
    inherit_cache: bool = ...

class localtime(AnsiFunction):
    type: Any = ...
    inherit_cache: bool = ...

class localtimestamp(AnsiFunction):
    type: Any = ...
    inherit_cache: bool = ...

class session_user(AnsiFunction):
    type: Any = ...
    inherit_cache: bool = ...

class sysdate(AnsiFunction):
    type: Any = ...
    inherit_cache: bool = ...

class user(AnsiFunction):
    type: Any = ...
    inherit_cache: bool = ...

class array_agg(GenericFunction):
    type: Any = ...
    inherit_cache: bool = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class OrderedSetAgg(GenericFunction):
    array_for_multi_clause: bool = ...
    inherit_cache: bool = ...
    def within_group_type(self, within_group: Any): ...

class mode(OrderedSetAgg):
    inherit_cache: bool = ...

class percentile_cont(OrderedSetAgg):
    array_for_multi_clause: bool = ...
    inherit_cache: bool = ...

class percentile_disc(OrderedSetAgg):
    array_for_multi_clause: bool = ...
    inherit_cache: bool = ...

class rank(GenericFunction):
    type: Any = ...
    inherit_cache: bool = ...

class dense_rank(GenericFunction):
    type: Any = ...
    inherit_cache: bool = ...

class percent_rank(GenericFunction):
    type: Any = ...
    inherit_cache: bool = ...

class cume_dist(GenericFunction):
    type: Any = ...
    inherit_cache: bool = ...

class cube(GenericFunction):
    inherit_cache: bool = ...

class rollup(GenericFunction):
    inherit_cache: bool = ...

class grouping_sets(GenericFunction):
    inherit_cache: bool = ...
