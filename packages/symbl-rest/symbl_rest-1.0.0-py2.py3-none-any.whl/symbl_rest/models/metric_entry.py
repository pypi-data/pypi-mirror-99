# coding: utf-8

"""
    symbl.ai APIs

    <h1>Symbl's APIs for external consumers.</h1> <h2>Language Insights API</h2> Symbl's Language Insights API provides an interface for applications to perform the analysis on the raw text and get insights from it. The API automatically detects sentence boundaries and punctuates the sentences, and also returns the updated messages in the response. Conversations are the most unstructured piece of information that we represent information in, and which most of the leads to lot of loss of information by not being able to capture them correctly.<br/> Language Insights API focuses on understanding such texts and generate the useful and important information from them. <br/> Currently the API supports detection of the Action Items in any type of unstructured text. In future the same API will also have support to detect \"Information\" and \"Event\", where Information is any informational piece and Event is a reference to something that has happened in the past.<br/> <h2>Telephony Integration</h2> Symbl can currently integrate with two types of telephony endpoints: 1. SIP trunks<br/> 2. PSTN endpoints<br/> Results are sent via HTTP WebHooks as and when they are available.<br/> <h2>Flow</h2> 1. External Application invokes REST API to join a meeting/session, with the mode (SIP/PSTN) and joining details<br/> 2. Symbl joins the meeting via SIP or PSTN integration<br/> 3. Symbl continuously processes the audio stream received<br/> 4. Symbl calls WebHook whenever transcription results are available<br/>  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: info@symbl.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetricEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'metric_id': 'str',
        'value': 'float',
        'value_string': 'str',
        'labels': 'list[MetricLabel]',
        'identity_id': 'str',
        'timestamp': 'date'
    }

    attribute_map = {
        'id': 'id',
        'metric_id': 'metricId',
        'value': 'value',
        'value_string': 'valueString',
        'labels': 'labels',
        'identity_id': 'identityId',
        'timestamp': 'timestamp'
    }

    def __init__(self, id=None, metric_id=None, value=None, value_string=None, labels=None, identity_id=None, timestamp=None):  # noqa: E501
        """MetricEntry - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._metric_id = None
        self._value = None
        self._value_string = None
        self._labels = None
        self._identity_id = None
        self._timestamp = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if metric_id is not None:
            self.metric_id = metric_id
        if value is not None:
            self.value = value
        if value_string is not None:
            self.value_string = value_string
        if labels is not None:
            self.labels = labels
        if identity_id is not None:
            self.identity_id = identity_id
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def id(self):
        """Gets the id of this MetricEntry.  # noqa: E501


        :return: The id of this MetricEntry.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetricEntry.


        :param id: The id of this MetricEntry.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def metric_id(self):
        """Gets the metric_id of this MetricEntry.  # noqa: E501


        :return: The metric_id of this MetricEntry.  # noqa: E501
        :rtype: str
        """
        return self._metric_id

    @metric_id.setter
    def metric_id(self, metric_id):
        """Sets the metric_id of this MetricEntry.


        :param metric_id: The metric_id of this MetricEntry.  # noqa: E501
        :type: str
        """

        self._metric_id = metric_id

    @property
    def value(self):
        """Gets the value of this MetricEntry.  # noqa: E501


        :return: The value of this MetricEntry.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MetricEntry.


        :param value: The value of this MetricEntry.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def value_string(self):
        """Gets the value_string of this MetricEntry.  # noqa: E501


        :return: The value_string of this MetricEntry.  # noqa: E501
        :rtype: str
        """
        return self._value_string

    @value_string.setter
    def value_string(self, value_string):
        """Sets the value_string of this MetricEntry.


        :param value_string: The value_string of this MetricEntry.  # noqa: E501
        :type: str
        """

        self._value_string = value_string

    @property
    def labels(self):
        """Gets the labels of this MetricEntry.  # noqa: E501


        :return: The labels of this MetricEntry.  # noqa: E501
        :rtype: list[MetricLabel]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this MetricEntry.


        :param labels: The labels of this MetricEntry.  # noqa: E501
        :type: list[MetricLabel]
        """

        self._labels = labels

    @property
    def identity_id(self):
        """Gets the identity_id of this MetricEntry.  # noqa: E501


        :return: The identity_id of this MetricEntry.  # noqa: E501
        :rtype: str
        """
        return self._identity_id

    @identity_id.setter
    def identity_id(self, identity_id):
        """Sets the identity_id of this MetricEntry.


        :param identity_id: The identity_id of this MetricEntry.  # noqa: E501
        :type: str
        """

        self._identity_id = identity_id

    @property
    def timestamp(self):
        """Gets the timestamp of this MetricEntry.  # noqa: E501


        :return: The timestamp of this MetricEntry.  # noqa: E501
        :rtype: date
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MetricEntry.


        :param timestamp: The timestamp of this MetricEntry.  # noqa: E501
        :type: date
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
