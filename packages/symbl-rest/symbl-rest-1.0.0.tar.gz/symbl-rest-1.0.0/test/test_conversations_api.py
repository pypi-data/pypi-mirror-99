# coding: utf-8

"""
    symbl.ai APIs

    <h1>Symbl's APIs for external consumers.</h1> <h2>Language Insights API</h2> Symbl's Language Insights API provides an interface for applications to perform the analysis on the raw text and get insights from it. The API automatically detects sentence boundaries and punctuates the sentences, and also returns the updated messages in the response. Conversations are the most unstructured piece of information that we represent information in, and which most of the leads to lot of loss of information by not being able to capture them correctly.<br/> Language Insights API focuses on understanding such texts and generate the useful and important information from them. <br/> Currently the API supports detection of the Action Items in any type of unstructured text. In future the same API will also have support to detect \"Information\" and \"Event\", where Information is any informational piece and Event is a reference to something that has happened in the past.<br/> <h2>Telephony Integration</h2> Symbl can currently integrate with two types of telephony endpoints: 1. SIP trunks<br/> 2. PSTN endpoints<br/> Results are sent via HTTP WebHooks as and when they are available.<br/> <h2>Flow</h2> 1. External Application invokes REST API to join a meeting/session, with the mode (SIP/PSTN) and joining details<br/> 2. Symbl joins the meeting via SIP or PSTN integration<br/> 3. Symbl continuously processes the audio stream received<br/> 4. Symbl calls WebHook whenever transcription results are available<br/>  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: info@symbl.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

import symbl_rest
from symbl_rest.api.conversations_api import ConversationsApi  # noqa: E501
from symbl_rest.rest import ApiException


class TestConversationsApi(unittest.TestCase):
    """ConversationsApi unit test stubs"""

    def setUp(self):
        self.api = ConversationsApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_get_action_items_by_conversation_id(self):
        """Test case for get_action_items_by_conversation_id

        Retrieve action items from conversations  # noqa: E501
        """
        pass

    def test_get_conversation_by_id(self):
        """Test case for get_conversation_by_id

        Retrieve Conversations  # noqa: E501
        """
        pass

    def test_get_follow_ups_by_conversation_id(self):
        """Test case for get_follow_ups_by_conversation_id

        Retrieve follow ups from conversations  # noqa: E501
        """
        pass

    def test_get_insights_by_conversation_id(self):
        """Test case for get_insights_by_conversation_id

        Retrieve insights from Conversations  # noqa: E501
        """
        pass

    def test_get_intents_by_conversation_id(self):
        """Test case for get_intents_by_conversation_id

        Retrieve intents from conversation  # noqa: E501
        """
        pass

    def test_get_members_by_conversation_id(self):
        """Test case for get_members_by_conversation_id

        Retrieve members from Conversations  # noqa: E501
        """
        pass

    def test_get_messages_by_conversation_id(self):
        """Test case for get_messages_by_conversation_id

        Retrieve messages from Conversations  # noqa: E501
        """
        pass

    def test_get_questions_by_conversation_id(self):
        """Test case for get_questions_by_conversation_id

        Retrieve questions from conversation  # noqa: E501
        """
        pass

    def test_get_topics_by_conversation_id(self):
        """Test case for get_topics_by_conversation_id

        Retrieve topics from conversation  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
