# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class UserCreateRequest(Model):
    """UserCreateRequest.

    :param user_code:  <span class='property-internal'>Required</span> <span
     class='property-internal'>Must be between 0 and 32 characters</span>
    :type user_code: str
    :param full_name:  <span class='property-internal'>Required</span> <span
     class='property-internal'>Must be between 0 and 32 characters</span>
    :type full_name: str
    :param password:  <span class='property-internal'>Required</span> <span
     class='property-internal'>Must be between 0 and 128 characters</span>
    :type password: str
    :param email:  <span class='property-internal'>Required</span> <span
     class='property-internal'>Must be between 0 and 128 characters</span>
    :type email: str
    :param cost_center_id: NOTE: This property will be deprecated
     Use TopmostCostCenterIds with a single valued list to create a user with a
     single topmost cost center
     Create User with a single topmost cost center id
     The CostCenterId must be in the creating user's topmost
     If this value is not null then TopmostCostCenterIds must be null <span
     class='property-internal'>Topmost (CostCenter)</span>
    :type cost_center_id: int
    :param topmost_cost_center_ids: Create User with one or multiple topmost
     cost center ids
     The CostCenterIds must be in the creating user's topmost
     If this is not null then CostCenterId must be null <span
     class='property-internal'>Cannot be Empty</span> <span
     class='property-internal'>NULL Valid</span>
    :type topmost_cost_center_ids: list[int]
    :param place_id: NOTE: This property will be deprecated
     Use TopmostPlaceIds with a single valued list to create a user with a
     single topmost place
     Create User with a single topmost place id
     The PlaceId must be in the creating user's topmost
     If this value is not null then TopmostPlaceIds must be null <span
     class='property-internal'>Topmost (Place)</span>
    :type place_id: int
    :param topmost_place_ids: Create User with one or multiple topmost place
     ids
     The PlaceIds must be in the creating user's topmost
     If this is not null then PlaceId must be null <span
     class='property-internal'>Cannot be Empty</span> <span
     class='property-internal'>NULL Valid</span>
    :type topmost_place_ids: list[int]
    :param active_directory:
    :type active_directory: bool
    :param active:
    :type active: bool
    :param password_expiration_interval:  <span
     class='property-internal'>Required</span>
    :type password_expiration_interval: int
    :param strong_password:  <span class='property-internal'>Required</span>
    :type strong_password: bool
    :param force_password_change:  <span
     class='property-internal'>Required</span>
    :type force_password_change: bool
    :param user_role_id:  <span class='property-internal'>Required</span>
    :type user_role_id: int
    :param max_approval_amount:
    :type max_approval_amount: int
    :param report_group_id:
    :type report_group_id: int
    :param user_groups: List of user group ids
     If null, empty, or not passed the user will not be assigned to any groups
    :type user_groups: list[int]
    """

    _validation = {
        'user_code': {'required': True, 'max_length': 32, 'min_length': 0},
        'full_name': {'required': True, 'max_length': 32, 'min_length': 0},
        'password': {'required': True, 'max_length': 128, 'min_length': 0},
        'email': {'required': True, 'max_length': 128, 'min_length': 0},
        'password_expiration_interval': {'required': True},
        'strong_password': {'required': True},
        'force_password_change': {'required': True},
        'user_role_id': {'required': True},
    }

    _attribute_map = {
        'user_code': {'key': 'userCode', 'type': 'str'},
        'full_name': {'key': 'fullName', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
        'cost_center_id': {'key': 'costCenterId', 'type': 'int'},
        'topmost_cost_center_ids': {'key': 'topmostCostCenterIds', 'type': '[int]'},
        'place_id': {'key': 'placeId', 'type': 'int'},
        'topmost_place_ids': {'key': 'topmostPlaceIds', 'type': '[int]'},
        'active_directory': {'key': 'activeDirectory', 'type': 'bool'},
        'active': {'key': 'active', 'type': 'bool'},
        'password_expiration_interval': {'key': 'passwordExpirationInterval', 'type': 'int'},
        'strong_password': {'key': 'strongPassword', 'type': 'bool'},
        'force_password_change': {'key': 'forcePasswordChange', 'type': 'bool'},
        'user_role_id': {'key': 'userRoleId', 'type': 'int'},
        'max_approval_amount': {'key': 'maxApprovalAmount', 'type': 'int'},
        'report_group_id': {'key': 'reportGroupId', 'type': 'int'},
        'user_groups': {'key': 'userGroups', 'type': '[int]'},
    }

    def __init__(self, user_code, full_name, password, email, password_expiration_interval, strong_password, force_password_change, user_role_id, cost_center_id=None, topmost_cost_center_ids=None, place_id=None, topmost_place_ids=None, active_directory=None, active=None, max_approval_amount=None, report_group_id=None, user_groups=None):
        super(UserCreateRequest, self).__init__()
        self.user_code = user_code
        self.full_name = full_name
        self.password = password
        self.email = email
        self.cost_center_id = cost_center_id
        self.topmost_cost_center_ids = topmost_cost_center_ids
        self.place_id = place_id
        self.topmost_place_ids = topmost_place_ids
        self.active_directory = active_directory
        self.active = active
        self.password_expiration_interval = password_expiration_interval
        self.strong_password = strong_password
        self.force_password_change = force_password_change
        self.user_role_id = user_role_id
        self.max_approval_amount = max_approval_amount
        self.report_group_id = report_group_id
        self.user_groups = user_groups
