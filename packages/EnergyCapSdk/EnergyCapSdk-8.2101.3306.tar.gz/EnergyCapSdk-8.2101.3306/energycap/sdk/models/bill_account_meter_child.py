# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class BillAccountMeterChild(Model):
    """BillAccountMeterChild.

    :param account_id: The bill-account-meter's account id
    :type account_id: int
    :param meter_id: The bill-account-meter's meter id
    :type meter_id: int
    :param native_use: The bill-account-meter's native use
    :type native_use: float
    :param native_use_unit:
    :type native_use_unit: ~energycap.sdk.models.UnitChild
    :param direct_cost: The bill-account-meter's direct cost
    :type direct_cost: float
    :param direct_cost_unit:
    :type direct_cost_unit: ~energycap.sdk.models.UnitChild
    :param native_use_unit_cost: The bill-account-meter's native use unit cost
    :type native_use_unit_cost: float
    :param native_use_per_day: The bill-account-meter's native use per day
    :type native_use_per_day: float
    :param direct_cost_per_day: The bill-account-meter's direct cost per day
    :type direct_cost_per_day: float
    :param native_billed_demand: The bill-account-meter's native billed demand
    :type native_billed_demand: float
    :param native_billed_demand_unit:
    :type native_billed_demand_unit: ~energycap.sdk.models.UnitChild
    :param native_actual_demand: The bill-account-meter's native actual demand
    :type native_actual_demand: float
    :param native_actual_demand_unit:
    :type native_actual_demand_unit: ~energycap.sdk.models.UnitChild
    """

    _attribute_map = {
        'account_id': {'key': 'accountId', 'type': 'int'},
        'meter_id': {'key': 'meterId', 'type': 'int'},
        'native_use': {'key': 'nativeUse', 'type': 'float'},
        'native_use_unit': {'key': 'nativeUseUnit', 'type': 'UnitChild'},
        'direct_cost': {'key': 'directCost', 'type': 'float'},
        'direct_cost_unit': {'key': 'directCostUnit', 'type': 'UnitChild'},
        'native_use_unit_cost': {'key': 'nativeUseUnitCost', 'type': 'float'},
        'native_use_per_day': {'key': 'nativeUsePerDay', 'type': 'float'},
        'direct_cost_per_day': {'key': 'directCostPerDay', 'type': 'float'},
        'native_billed_demand': {'key': 'nativeBilledDemand', 'type': 'float'},
        'native_billed_demand_unit': {'key': 'nativeBilledDemandUnit', 'type': 'UnitChild'},
        'native_actual_demand': {'key': 'nativeActualDemand', 'type': 'float'},
        'native_actual_demand_unit': {'key': 'nativeActualDemandUnit', 'type': 'UnitChild'},
    }

    def __init__(self, account_id=None, meter_id=None, native_use=None, native_use_unit=None, direct_cost=None, direct_cost_unit=None, native_use_unit_cost=None, native_use_per_day=None, direct_cost_per_day=None, native_billed_demand=None, native_billed_demand_unit=None, native_actual_demand=None, native_actual_demand_unit=None):
        super(BillAccountMeterChild, self).__init__()
        self.account_id = account_id
        self.meter_id = meter_id
        self.native_use = native_use
        self.native_use_unit = native_use_unit
        self.direct_cost = direct_cost
        self.direct_cost_unit = direct_cost_unit
        self.native_use_unit_cost = native_use_unit_cost
        self.native_use_per_day = native_use_per_day
        self.direct_cost_per_day = direct_cost_per_day
        self.native_billed_demand = native_billed_demand
        self.native_billed_demand_unit = native_billed_demand_unit
        self.native_actual_demand = native_actual_demand
        self.native_actual_demand_unit = native_actual_demand_unit
