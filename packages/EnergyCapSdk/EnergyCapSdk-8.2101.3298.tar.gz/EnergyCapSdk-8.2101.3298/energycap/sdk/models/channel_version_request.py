# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class ChannelVersionRequest(Model):
    """ChannelVersionRequest.

    :param multiplier: The channel multiplier <span
     class='property-internal'>Required</span> <span
     class='property-internal'>Must be between 0 and 999999999999999</span>
    :type multiplier: float
    :param unit_code: The channel's unit of measure <span
     class='property-internal'>Required</span>
    :type unit_code: str
    :param observation_rule: The channel's observation rule.  Possible values
     include "Odometer" and "Trip" <span
     class='property-internal'>Required</span> <span
     class='property-internal'>One of Odometer, Trip </span>
    :type observation_rule: str
    :param maximum_reading: The channel's max reading <span
     class='property-internal'>Required</span> <span
     class='property-internal'>Must be between 0 and 999999999999999</span>
    :type maximum_reading: float
    :param udfs: List of user defined/custom fields and values for this
     version
     If the Udfs list is null or empty no values are assigned
     If a udf is omitted no value is assigned to that udf
     To remove a value from an existing Udf, pass in the UdfId and set the
     Value to null
    :type udfs: list[~energycap.sdk.models.UDFValue]
    """

    _validation = {
        'multiplier': {'required': True, 'maximum': 999999999999999, 'minimum': 0},
        'unit_code': {'required': True},
        'observation_rule': {'required': True},
        'maximum_reading': {'required': True, 'maximum': 999999999999999, 'minimum': 0},
    }

    _attribute_map = {
        'multiplier': {'key': 'multiplier', 'type': 'float'},
        'unit_code': {'key': 'unitCode', 'type': 'str'},
        'observation_rule': {'key': 'observationRule', 'type': 'str'},
        'maximum_reading': {'key': 'maximumReading', 'type': 'float'},
        'udfs': {'key': 'udfs', 'type': '[UDFValue]'},
    }

    def __init__(self, multiplier, unit_code, observation_rule, maximum_reading, udfs=None):
        super(ChannelVersionRequest, self).__init__()
        self.multiplier = multiplier
        self.unit_code = unit_code
        self.observation_rule = observation_rule
        self.maximum_reading = maximum_reading
        self.udfs = udfs
