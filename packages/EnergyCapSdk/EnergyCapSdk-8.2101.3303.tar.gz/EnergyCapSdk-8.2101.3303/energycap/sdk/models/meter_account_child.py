# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class MeterAccountChild(Model):
    """MeterAccountChild.

    :param account_meter_id: The MeterAccount meter identifier
    :type account_meter_id: int
    :param account_id: The MeterAccount identifier for this MeterAccount meter
    :type account_id: int
    :param account_code: The code of the MeterAccount for this MeterAccount
     meter
    :type account_code: str
    :param account_info: The info of the MeterAccount for this MeterAccount
     meter
    :type account_info: str
    :param active: Indicates whether the Account is active or inactive
    :type active: bool
    :param has_calculated_meter: Indicates whether the Account has a child
     calculated meter
    :type has_calculated_meter: bool
    :param has_split_parent_meter: Indicates whether the Account is a
     recipient of a split
    :type has_split_parent_meter: bool
    :param has_split_child_meter: Indicates whether the Account has a child
     split meter
    :type has_split_child_meter: bool
    :param vendor:
    :type vendor: ~energycap.sdk.models.VendorChild
    :param meter_general_ledger:
    :type meter_general_ledger: ~energycap.sdk.models.GeneralLedgerChild
    :param account_general_ledger:
    :type account_general_ledger: ~energycap.sdk.models.GeneralLedgerChild
    :param vendor_type:
    :type vendor_type: ~energycap.sdk.models.VendorTypeChild
    :param start_date: The beginning date and time for this MeterAccount meter
     relationship
    :type start_date: datetime
    :param end_date: The ending date and time for this MeterAccount meter
     relationship
    :type end_date: datetime
    """

    _attribute_map = {
        'account_meter_id': {'key': 'accountMeterId', 'type': 'int'},
        'account_id': {'key': 'accountId', 'type': 'int'},
        'account_code': {'key': 'accountCode', 'type': 'str'},
        'account_info': {'key': 'accountInfo', 'type': 'str'},
        'active': {'key': 'active', 'type': 'bool'},
        'has_calculated_meter': {'key': 'hasCalculatedMeter', 'type': 'bool'},
        'has_split_parent_meter': {'key': 'hasSplitParentMeter', 'type': 'bool'},
        'has_split_child_meter': {'key': 'hasSplitChildMeter', 'type': 'bool'},
        'vendor': {'key': 'vendor', 'type': 'VendorChild'},
        'meter_general_ledger': {'key': 'meterGeneralLedger', 'type': 'GeneralLedgerChild'},
        'account_general_ledger': {'key': 'accountGeneralLedger', 'type': 'GeneralLedgerChild'},
        'vendor_type': {'key': 'vendorType', 'type': 'VendorTypeChild'},
        'start_date': {'key': 'startDate', 'type': 'iso-8601'},
        'end_date': {'key': 'endDate', 'type': 'iso-8601'},
    }

    def __init__(self, account_meter_id=None, account_id=None, account_code=None, account_info=None, active=None, has_calculated_meter=None, has_split_parent_meter=None, has_split_child_meter=None, vendor=None, meter_general_ledger=None, account_general_ledger=None, vendor_type=None, start_date=None, end_date=None):
        super(MeterAccountChild, self).__init__()
        self.account_meter_id = account_meter_id
        self.account_id = account_id
        self.account_code = account_code
        self.account_info = account_info
        self.active = active
        self.has_calculated_meter = has_calculated_meter
        self.has_split_parent_meter = has_split_parent_meter
        self.has_split_child_meter = has_split_child_meter
        self.vendor = vendor
        self.meter_general_ledger = meter_general_ledger
        self.account_general_ledger = account_general_ledger
        self.vendor_type = vendor_type
        self.start_date = start_date
        self.end_date = end_date
