# coding: utf-8

"""
    Katib

    Swagger description for Katib  # noqa: E501

    OpenAPI spec version: v1beta1-0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1beta1FilterSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metrics_format': 'list[str]'
    }

    attribute_map = {
        'metrics_format': 'metricsFormat'
    }

    def __init__(self, metrics_format=None):  # noqa: E501
        """V1beta1FilterSpec - a model defined in Swagger"""  # noqa: E501

        self._metrics_format = None
        self.discriminator = None

        if metrics_format is not None:
            self.metrics_format = metrics_format

    @property
    def metrics_format(self):
        """Gets the metrics_format of this V1beta1FilterSpec.  # noqa: E501

        When the metrics output follows format as this field specified, metricsCollector collects it and reports to metrics server, it can be \"<metric_name>: <float>\" or else  # noqa: E501

        :return: The metrics_format of this V1beta1FilterSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._metrics_format

    @metrics_format.setter
    def metrics_format(self, metrics_format):
        """Sets the metrics_format of this V1beta1FilterSpec.

        When the metrics output follows format as this field specified, metricsCollector collects it and reports to metrics server, it can be \"<metric_name>: <float>\" or else  # noqa: E501

        :param metrics_format: The metrics_format of this V1beta1FilterSpec.  # noqa: E501
        :type: list[str]
        """

        self._metrics_format = metrics_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1beta1FilterSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1FilterSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
