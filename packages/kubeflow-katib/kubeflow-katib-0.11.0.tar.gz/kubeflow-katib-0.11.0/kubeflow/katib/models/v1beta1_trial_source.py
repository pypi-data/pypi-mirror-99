# coding: utf-8

"""
    Katib

    Swagger description for Katib  # noqa: E501

    OpenAPI spec version: v1beta1-0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from kubeflow.katib.models.v1beta1_config_map_source import V1beta1ConfigMapSource  # noqa: F401,E501


class V1beta1TrialSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config_map': 'V1beta1ConfigMapSource',
        'trial_spec': 'object'
    }

    attribute_map = {
        'config_map': 'configMap',
        'trial_spec': 'trialSpec'
    }

    def __init__(self, config_map=None, trial_spec=None):  # noqa: E501
        """V1beta1TrialSource - a model defined in Swagger"""  # noqa: E501

        self._config_map = None
        self._trial_spec = None
        self.discriminator = None

        if config_map is not None:
            self.config_map = config_map
        if trial_spec is not None:
            self.trial_spec = trial_spec

    @property
    def config_map(self):
        """Gets the config_map of this V1beta1TrialSource.  # noqa: E501

        ConfigMap spec represents a reference to ConfigMap  # noqa: E501

        :return: The config_map of this V1beta1TrialSource.  # noqa: E501
        :rtype: V1beta1ConfigMapSource
        """
        return self._config_map

    @config_map.setter
    def config_map(self, config_map):
        """Sets the config_map of this V1beta1TrialSource.

        ConfigMap spec represents a reference to ConfigMap  # noqa: E501

        :param config_map: The config_map of this V1beta1TrialSource.  # noqa: E501
        :type: V1beta1ConfigMapSource
        """

        self._config_map = config_map

    @property
    def trial_spec(self):
        """Gets the trial_spec of this V1beta1TrialSource.  # noqa: E501

        TrialSpec represents trial template in unstructured format  # noqa: E501

        :return: The trial_spec of this V1beta1TrialSource.  # noqa: E501
        :rtype: object
        """
        return self._trial_spec

    @trial_spec.setter
    def trial_spec(self, trial_spec):
        """Sets the trial_spec of this V1beta1TrialSource.

        TrialSpec represents trial template in unstructured format  # noqa: E501

        :param trial_spec: The trial_spec of this V1beta1TrialSource.  # noqa: E501
        :type: object
        """

        self._trial_spec = trial_spec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1beta1TrialSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1TrialSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
