# coding: utf-8

"""
    Katib

    Swagger description for Katib  # noqa: E501

    OpenAPI spec version: v1beta1-0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from kubeflow.katib.models.v1beta1_early_stopping_rule import V1beta1EarlyStoppingRule  # noqa: F401,E501
from kubeflow.katib.models.v1beta1_parameter_assignment import V1beta1ParameterAssignment  # noqa: F401,E501


class V1beta1TrialAssignment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'early_stopping_rules': 'list[V1beta1EarlyStoppingRule]',
        'name': 'str',
        'parameter_assignments': 'list[V1beta1ParameterAssignment]'
    }

    attribute_map = {
        'early_stopping_rules': 'earlyStoppingRules',
        'name': 'name',
        'parameter_assignments': 'parameterAssignments'
    }

    def __init__(self, early_stopping_rules=None, name=None, parameter_assignments=None):  # noqa: E501
        """V1beta1TrialAssignment - a model defined in Swagger"""  # noqa: E501

        self._early_stopping_rules = None
        self._name = None
        self._parameter_assignments = None
        self.discriminator = None

        if early_stopping_rules is not None:
            self.early_stopping_rules = early_stopping_rules
        if name is not None:
            self.name = name
        if parameter_assignments is not None:
            self.parameter_assignments = parameter_assignments

    @property
    def early_stopping_rules(self):
        """Gets the early_stopping_rules of this V1beta1TrialAssignment.  # noqa: E501

        Rules for early stopping techniques Contains rule name, value and comparison type  # noqa: E501

        :return: The early_stopping_rules of this V1beta1TrialAssignment.  # noqa: E501
        :rtype: list[V1beta1EarlyStoppingRule]
        """
        return self._early_stopping_rules

    @early_stopping_rules.setter
    def early_stopping_rules(self, early_stopping_rules):
        """Sets the early_stopping_rules of this V1beta1TrialAssignment.

        Rules for early stopping techniques Contains rule name, value and comparison type  # noqa: E501

        :param early_stopping_rules: The early_stopping_rules of this V1beta1TrialAssignment.  # noqa: E501
        :type: list[V1beta1EarlyStoppingRule]
        """

        self._early_stopping_rules = early_stopping_rules

    @property
    def name(self):
        """Gets the name of this V1beta1TrialAssignment.  # noqa: E501

        Name of the suggestion  # noqa: E501

        :return: The name of this V1beta1TrialAssignment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1beta1TrialAssignment.

        Name of the suggestion  # noqa: E501

        :param name: The name of this V1beta1TrialAssignment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parameter_assignments(self):
        """Gets the parameter_assignments of this V1beta1TrialAssignment.  # noqa: E501

        Suggestion results with Trial parameters  # noqa: E501

        :return: The parameter_assignments of this V1beta1TrialAssignment.  # noqa: E501
        :rtype: list[V1beta1ParameterAssignment]
        """
        return self._parameter_assignments

    @parameter_assignments.setter
    def parameter_assignments(self, parameter_assignments):
        """Sets the parameter_assignments of this V1beta1TrialAssignment.

        Suggestion results with Trial parameters  # noqa: E501

        :param parameter_assignments: The parameter_assignments of this V1beta1TrialAssignment.  # noqa: E501
        :type: list[V1beta1ParameterAssignment]
        """

        self._parameter_assignments = parameter_assignments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1beta1TrialAssignment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1TrialAssignment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
