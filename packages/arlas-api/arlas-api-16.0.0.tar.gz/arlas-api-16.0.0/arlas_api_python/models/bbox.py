# coding: utf-8

"""
    ARLAS Exploration API

    Explore the content of ARLAS collections

    OpenAPI spec version: 16.0.0
    Contact: contact@gisaia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Bbox(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'north': 'float',
        'south': 'float',
        'east': 'float',
        'west': 'float'
    }

    attribute_map = {
        'north': 'north',
        'south': 'south',
        'east': 'east',
        'west': 'west'
    }

    def __init__(self, north=None, south=None, east=None, west=None):
        """
        Bbox - a model defined in Swagger
        """

        self._north = None
        self._south = None
        self._east = None
        self._west = None

        self.north = north
        self.south = south
        self.east = east
        self.west = west

    @property
    def north(self):
        """
        Gets the north of this Bbox.

        :return: The north of this Bbox.
        :rtype: float
        """
        return self._north

    @north.setter
    def north(self, north):
        """
        Sets the north of this Bbox.

        :param north: The north of this Bbox.
        :type: float
        """
        if north is None:
            raise ValueError("Invalid value for `north`, must not be `None`")

        self._north = north

    @property
    def south(self):
        """
        Gets the south of this Bbox.

        :return: The south of this Bbox.
        :rtype: float
        """
        return self._south

    @south.setter
    def south(self, south):
        """
        Sets the south of this Bbox.

        :param south: The south of this Bbox.
        :type: float
        """
        if south is None:
            raise ValueError("Invalid value for `south`, must not be `None`")

        self._south = south

    @property
    def east(self):
        """
        Gets the east of this Bbox.

        :return: The east of this Bbox.
        :rtype: float
        """
        return self._east

    @east.setter
    def east(self, east):
        """
        Sets the east of this Bbox.

        :param east: The east of this Bbox.
        :type: float
        """
        if east is None:
            raise ValueError("Invalid value for `east`, must not be `None`")

        self._east = east

    @property
    def west(self):
        """
        Gets the west of this Bbox.

        :return: The west of this Bbox.
        :rtype: float
        """
        return self._west

    @west.setter
    def west(self, west):
        """
        Sets the west of this Bbox.

        :param west: The west of this Bbox.
        :type: float
        """
        if west is None:
            raise ValueError("Invalid value for `west`, must not be `None`")

        self._west = west

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Bbox):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
