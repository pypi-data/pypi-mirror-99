# coding: utf-8

"""
    ARLAS Exploration API

    Explore the content of ARLAS collections

    OpenAPI spec version: 16.0.0
    Contact: contact@gisaia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MD(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'timestamp': 'int',
        'geometry': 'object',
        'centroid': 'object',
        'returned_geometries': 'list[Geo]'
    }

    attribute_map = {
        'id': 'id',
        'timestamp': 'timestamp',
        'geometry': 'geometry',
        'centroid': 'centroid',
        'returned_geometries': 'returned_geometries'
    }

    def __init__(self, id=None, timestamp=None, geometry=None, centroid=None, returned_geometries=None):
        """
        MD - a model defined in Swagger
        """

        self._id = None
        self._timestamp = None
        self._geometry = None
        self._centroid = None
        self._returned_geometries = None

        if id is not None:
          self.id = id
        if timestamp is not None:
          self.timestamp = timestamp
        if geometry is not None:
          self.geometry = geometry
        if centroid is not None:
          self.centroid = centroid
        if returned_geometries is not None:
          self.returned_geometries = returned_geometries

    @property
    def id(self):
        """
        Gets the id of this MD.

        :return: The id of this MD.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this MD.

        :param id: The id of this MD.
        :type: str
        """

        self._id = id

    @property
    def timestamp(self):
        """
        Gets the timestamp of this MD.

        :return: The timestamp of this MD.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this MD.

        :param timestamp: The timestamp of this MD.
        :type: int
        """

        self._timestamp = timestamp

    @property
    def geometry(self):
        """
        Gets the geometry of this MD.

        :return: The geometry of this MD.
        :rtype: object
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """
        Sets the geometry of this MD.

        :param geometry: The geometry of this MD.
        :type: object
        """

        self._geometry = geometry

    @property
    def centroid(self):
        """
        Gets the centroid of this MD.

        :return: The centroid of this MD.
        :rtype: object
        """
        return self._centroid

    @centroid.setter
    def centroid(self, centroid):
        """
        Sets the centroid of this MD.

        :param centroid: The centroid of this MD.
        :type: object
        """

        self._centroid = centroid

    @property
    def returned_geometries(self):
        """
        Gets the returned_geometries of this MD.

        :return: The returned_geometries of this MD.
        :rtype: list[Geo]
        """
        return self._returned_geometries

    @returned_geometries.setter
    def returned_geometries(self, returned_geometries):
        """
        Sets the returned_geometries of this MD.

        :param returned_geometries: The returned_geometries of this MD.
        :type: list[Geo]
        """

        self._returned_geometries = returned_geometries

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MD):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
