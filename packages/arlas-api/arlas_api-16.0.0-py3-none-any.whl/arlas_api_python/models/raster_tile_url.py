# coding: utf-8

"""
    ARLAS Exploration API

    Explore the content of ARLAS collections

    OpenAPI spec version: 16.0.0
    Contact: contact@gisaia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RasterTileURL(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'id_path': 'str',
        'min_z': 'int',
        'max_z': 'int',
        'check_geometry': 'bool'
    }

    attribute_map = {
        'url': 'url',
        'id_path': 'id_path',
        'min_z': 'min_z',
        'max_z': 'max_z',
        'check_geometry': 'check_geometry'
    }

    def __init__(self, url=None, id_path=None, min_z=None, max_z=None, check_geometry=None):
        """
        RasterTileURL - a model defined in Swagger
        """

        self._url = None
        self._id_path = None
        self._min_z = None
        self._max_z = None
        self._check_geometry = None

        self.url = url
        self.id_path = id_path
        if min_z is not None:
          self.min_z = min_z
        if max_z is not None:
          self.max_z = max_z
        if check_geometry is not None:
          self.check_geometry = check_geometry

    @property
    def url(self):
        """
        Gets the url of this RasterTileURL.

        :return: The url of this RasterTileURL.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this RasterTileURL.

        :param url: The url of this RasterTileURL.
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def id_path(self):
        """
        Gets the id_path of this RasterTileURL.

        :return: The id_path of this RasterTileURL.
        :rtype: str
        """
        return self._id_path

    @id_path.setter
    def id_path(self, id_path):
        """
        Sets the id_path of this RasterTileURL.

        :param id_path: The id_path of this RasterTileURL.
        :type: str
        """
        if id_path is None:
            raise ValueError("Invalid value for `id_path`, must not be `None`")

        self._id_path = id_path

    @property
    def min_z(self):
        """
        Gets the min_z of this RasterTileURL.

        :return: The min_z of this RasterTileURL.
        :rtype: int
        """
        return self._min_z

    @min_z.setter
    def min_z(self, min_z):
        """
        Sets the min_z of this RasterTileURL.

        :param min_z: The min_z of this RasterTileURL.
        :type: int
        """

        self._min_z = min_z

    @property
    def max_z(self):
        """
        Gets the max_z of this RasterTileURL.

        :return: The max_z of this RasterTileURL.
        :rtype: int
        """
        return self._max_z

    @max_z.setter
    def max_z(self, max_z):
        """
        Sets the max_z of this RasterTileURL.

        :param max_z: The max_z of this RasterTileURL.
        :type: int
        """

        self._max_z = max_z

    @property
    def check_geometry(self):
        """
        Gets the check_geometry of this RasterTileURL.

        :return: The check_geometry of this RasterTileURL.
        :rtype: bool
        """
        return self._check_geometry

    @check_geometry.setter
    def check_geometry(self, check_geometry):
        """
        Sets the check_geometry of this RasterTileURL.

        :param check_geometry: The check_geometry of this RasterTileURL.
        :type: bool
        """

        self._check_geometry = check_geometry

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RasterTileURL):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
