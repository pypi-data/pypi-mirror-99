# coding: utf-8

"""
    ARLAS Exploration API

    Explore the content of ARLAS collections

    OpenAPI spec version: 16.0.0
    Contact: contact@gisaia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReturnedGeometry(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reference': 'str',
        'geometry': 'object',
        'sort': 'str',
        'is_raw': 'bool'
    }

    attribute_map = {
        'reference': 'reference',
        'geometry': 'geometry',
        'sort': 'sort',
        'is_raw': 'is_raw'
    }

    def __init__(self, reference=None, geometry=None, sort=None, is_raw=None):
        """
        ReturnedGeometry - a model defined in Swagger
        """

        self._reference = None
        self._geometry = None
        self._sort = None
        self._is_raw = None

        if reference is not None:
          self.reference = reference
        if geometry is not None:
          self.geometry = geometry
        if sort is not None:
          self.sort = sort
        if is_raw is not None:
          self.is_raw = is_raw

    @property
    def reference(self):
        """
        Gets the reference of this ReturnedGeometry.

        :return: The reference of this ReturnedGeometry.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """
        Sets the reference of this ReturnedGeometry.

        :param reference: The reference of this ReturnedGeometry.
        :type: str
        """

        self._reference = reference

    @property
    def geometry(self):
        """
        Gets the geometry of this ReturnedGeometry.

        :return: The geometry of this ReturnedGeometry.
        :rtype: object
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """
        Sets the geometry of this ReturnedGeometry.

        :param geometry: The geometry of this ReturnedGeometry.
        :type: object
        """

        self._geometry = geometry

    @property
    def sort(self):
        """
        Gets the sort of this ReturnedGeometry.

        :return: The sort of this ReturnedGeometry.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """
        Sets the sort of this ReturnedGeometry.

        :param sort: The sort of this ReturnedGeometry.
        :type: str
        """

        self._sort = sort

    @property
    def is_raw(self):
        """
        Gets the is_raw of this ReturnedGeometry.

        :return: The is_raw of this ReturnedGeometry.
        :rtype: bool
        """
        return self._is_raw

    @is_raw.setter
    def is_raw(self, is_raw):
        """
        Sets the is_raw of this ReturnedGeometry.

        :param is_raw: The is_raw of this ReturnedGeometry.
        :type: bool
        """

        self._is_raw = is_raw

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReturnedGeometry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
