# coding: utf-8

"""
    ARLAS Exploration API

    Explore the content of ARLAS collections

    OpenAPI spec version: 16.0.0
    Contact: contact@gisaia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Feed(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'author': 'Person',
        'contributor': 'Person',
        'icon': 'str',
        'logo': 'str',
        'rights': 'str',
        'subtitle': 'str',
        'generator': 'Generator'
    }

    attribute_map = {
        'author': 'author',
        'contributor': 'contributor',
        'icon': 'icon',
        'logo': 'logo',
        'rights': 'rights',
        'subtitle': 'subtitle',
        'generator': 'generator'
    }

    def __init__(self, author=None, contributor=None, icon=None, logo=None, rights=None, subtitle=None, generator=None):
        """
        Feed - a model defined in Swagger
        """

        self._author = None
        self._contributor = None
        self._icon = None
        self._logo = None
        self._rights = None
        self._subtitle = None
        self._generator = None

        if author is not None:
          self.author = author
        if contributor is not None:
          self.contributor = contributor
        if icon is not None:
          self.icon = icon
        if logo is not None:
          self.logo = logo
        if rights is not None:
          self.rights = rights
        if subtitle is not None:
          self.subtitle = subtitle
        if generator is not None:
          self.generator = generator

    @property
    def author(self):
        """
        Gets the author of this Feed.

        :return: The author of this Feed.
        :rtype: Person
        """
        return self._author

    @author.setter
    def author(self, author):
        """
        Sets the author of this Feed.

        :param author: The author of this Feed.
        :type: Person
        """

        self._author = author

    @property
    def contributor(self):
        """
        Gets the contributor of this Feed.

        :return: The contributor of this Feed.
        :rtype: Person
        """
        return self._contributor

    @contributor.setter
    def contributor(self, contributor):
        """
        Sets the contributor of this Feed.

        :param contributor: The contributor of this Feed.
        :type: Person
        """

        self._contributor = contributor

    @property
    def icon(self):
        """
        Gets the icon of this Feed.

        :return: The icon of this Feed.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """
        Sets the icon of this Feed.

        :param icon: The icon of this Feed.
        :type: str
        """

        self._icon = icon

    @property
    def logo(self):
        """
        Gets the logo of this Feed.

        :return: The logo of this Feed.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """
        Sets the logo of this Feed.

        :param logo: The logo of this Feed.
        :type: str
        """

        self._logo = logo

    @property
    def rights(self):
        """
        Gets the rights of this Feed.

        :return: The rights of this Feed.
        :rtype: str
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """
        Sets the rights of this Feed.

        :param rights: The rights of this Feed.
        :type: str
        """

        self._rights = rights

    @property
    def subtitle(self):
        """
        Gets the subtitle of this Feed.

        :return: The subtitle of this Feed.
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle):
        """
        Sets the subtitle of this Feed.

        :param subtitle: The subtitle of this Feed.
        :type: str
        """

        self._subtitle = subtitle

    @property
    def generator(self):
        """
        Gets the generator of this Feed.

        :return: The generator of this Feed.
        :rtype: Generator
        """
        return self._generator

    @generator.setter
    def generator(self, generator):
        """
        Sets the generator of this Feed.

        :param generator: The generator of this Feed.
        :type: Generator
        """

        self._generator = generator

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Feed):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
