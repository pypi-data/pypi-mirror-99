{"version":3,"sources":["webpack:///./src/plugins/tasks/Card.tsx","webpack:///./node_modules/@material-ui/core/esm/CardContent/CardContent.js"],"names":["Card","useGetTaskStatuses","sortBy","SortByStatus","LastExecutionTime","perPage","statusLoading","loading","taskStatuses","tasks","useGetTaskQueue","queueLoading","taskQueue","length","name","Date","lastExecutionTime","toLocaleString","CardContent","forwardRef","props","ref","classes","className","_props$component","component","Component","other","createElement","root","padding","paddingBottom"],"mappings":"wFAAA,oEAyBeA,UApBF,WAAM,MACyCC,YAAmB,CACvEC,OAAQC,IAAaC,kBACrBC,QAAS,IAFIC,EADF,EACPC,QAA+BC,EADxB,EACiBC,MADjB,EAKqCC,cAAnCC,EALF,EAKPJ,QAA8BK,EALvB,EAKgBH,MACzBF,EAAUD,GAAiBK,EACjC,OAAQ,YAAC,IAAD,KACN,YAAC,IAAD,CAAgBJ,QAASA,GACvB,YAAC,IAAD,KAAaK,EAAUC,OAAvB,eACGD,EAAUC,QAAW,YAAC,IAAD,KACpB,4CADoB,KACSD,EAAU,GAAGE,QAE3CN,EAAaK,QAAW,YAAC,IAAD,KACvB,4CADuB,KACML,EAAa,GAAGM,KADtB,KAEtB,IAAIC,KAAKP,EAAa,GAAGQ,mBAAmBC,iBAFtB,S,iCClBnC,2DAeIC,EAAc,IAAMC,YAAW,SAAqBC,EAAOC,GAC7D,IAAIC,EAAUF,EAAME,QAChBC,EAAYH,EAAMG,UAClBC,EAAmBJ,EAAMK,UACzBC,OAAiC,IAArBF,EAA8B,MAAQA,EAClDG,EAAQ,YAAyBP,EAAO,CAAC,UAAW,YAAa,cAErE,OAAO,IAAMQ,cAAcF,EAAW,YAAS,CAC7CH,UAAW,YAAKD,EAAQO,KAAMN,GAC9BF,IAAKA,GACJM,OAyBU,gBA5CK,CAElBE,KAAM,CACJC,QAAS,GACT,eAAgB,CACdC,cAAe,MAuCa,CAChCjB,KAAM,kBADO,CAEZI","file":"TasksHomeCard.0f1a9b4992c80e636a4f.js","sourcesContent":["import React from 'react';\nimport { CardContent, Typography } from '@material-ui/core';\nimport LoadingSpinner from 'common/LoadingSpinner';\nimport { SortByStatus } from './types';\nimport { useGetTaskStatuses, useGetTaskQueue } from './hooks';\nconst Card = () => {\n    const { loading: statusLoading, tasks: taskStatuses } = useGetTaskStatuses({\n        sortBy: SortByStatus.LastExecutionTime,\n        perPage: 1,\n    });\n    const { loading: queueLoading, tasks: taskQueue } = useGetTaskQueue();\n    const loading = statusLoading || queueLoading;\n    return (<CardContent>\n      <LoadingSpinner loading={loading}>\n        <Typography>{taskQueue.length} in Queue</Typography>\n        {!!taskQueue.length && (<Typography>\n            <b>Currently Executing</b>: {taskQueue[0].name}\n          </Typography>)}\n        {!!taskStatuses.length && (<Typography>\n            <b>Last Task Execution</b>: {taskStatuses[0].name} (\n            {new Date(taskStatuses[0].lastExecutionTime).toLocaleString()})\n          </Typography>)}\n      </LoadingSpinner>\n    </CardContent>);\n};\nexport default Card;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);"],"sourceRoot":""}