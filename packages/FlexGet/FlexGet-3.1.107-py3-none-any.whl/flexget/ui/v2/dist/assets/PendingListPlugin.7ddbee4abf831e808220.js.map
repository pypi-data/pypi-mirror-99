{"version":3,"sources":["webpack:///./node_modules/@material-ui/icons/esm/ClearAll.js","webpack:///./src/plugins/lists/pending/types.ts","webpack:///./node_modules/@material-ui/icons/esm/DoneAll.js","webpack:///./node_modules/@material-ui/icons/esm/Check.js","webpack:///./src/plugins/lists/pending/Card.tsx","webpack:///./src/plugins/lists/pending/hooks.tsx","webpack:///./src/plugins/lists/pending/PendingList.tsx"],"names":["createElement","d","SortBy","Operation","createSvgIcon","ActionsLeft","entry","approved","Typography","variant","color","Actions","useEntryOperation","id","loading","doOperation","title","label","Icon","Clear","onClick","Reject","Check","Approve","Tooltip","placement","IconButton","aria-label","disabled","entryId","listId","useContainer","ListContainer","dispatch","EntryContainer","useFlexgetAPI","Method","Put","state","request","useCallback","operation","resp","ok","actions","updateEntry","data","PendingListContainer","createPluginContainer","sortByOptions","useMemo","value","Added","Title","URL","Approved","card","useMenuProps","selectedIds","ids","updateEntries","doBulkOperation","name","DoneAll","ClearAll","addEntryProps","api","list","useGet","useAdd","Post","useRemove","Delete","query","pendingId","useRemoveBulk","PendingList","Provider"],"mappings":"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","file":"PendingListPlugin.7ddbee4abf831e808220.js","sourcesContent":["import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M5 13h14v-2H5v2zm-2 4h14v-2H3v2zM7 7v2h14V7H7z\"\n}), 'ClearAll');","export var SortBy;\n(function (SortBy) {\n    SortBy[\"Added\"] = \"added\";\n    SortBy[\"Title\"] = \"title\";\n    SortBy[\"URL\"] = \"original_url\";\n    SortBy[\"Approved\"] = \"approved\";\n})(SortBy || (SortBy = {}));\nexport var Operation;\n(function (Operation) {\n    Operation[\"Approve\"] = \"approve\";\n    Operation[\"Reject\"] = \"reject\";\n})(Operation || (Operation = {}));\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M18 7l-1.41-1.41-6.34 6.34 1.41 1.41L18 7zm4.24-1.41L11.66 16.17 7.48 12l-1.41 1.41L11.66 19l12-12-1.42-1.41zM.41 13.41L6 19l1.41-1.41L1.83 12 .41 13.41z\"\n}), 'DoneAll');","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"\n}), 'Check');","import React from 'react';\nimport { Typography, Tooltip, IconButton } from '@material-ui/core';\nimport { Check, Clear } from '@material-ui/icons';\nimport { Operation } from './types';\nimport { useEntryOperation } from './hooks';\nexport const ActionsLeft = ({ entry }) => entry.approved ? (<Typography variant=\"overline\" color=\"primary\">\n      Approved\n    </Typography>) : null;\nexport const Actions = ({ entry }) => {\n    const [{ loading }, doOperation] = useEntryOperation(entry.id);\n    const { title, label, Icon, onClick } = entry.approved\n        ? {\n            title: 'Reject',\n            label: 'reject',\n            Icon: Clear,\n            onClick: () => doOperation(Operation.Reject),\n        }\n        : {\n            title: 'Approve',\n            label: 'approve',\n            Icon: Check,\n            onClick: () => doOperation(Operation.Approve),\n        };\n    return (<Tooltip title={title} placement=\"top\">\n      <IconButton aria-label={label} disabled={loading} onClick={onClick}>\n        <Icon />\n      </IconButton>\n    </Tooltip>);\n};\n","import { useCallback, useMemo } from 'react';\nimport { useFlexgetAPI } from 'core/api';\nimport { Method } from 'utils/fetch';\nimport { useContainer } from 'unstated-next';\nimport { DoneAll, ClearAll } from '@material-ui/icons';\nimport { Operation, SortBy } from './types';\nimport { ActionsLeft, Actions } from './Card';\nimport { createPluginContainer } from '../base/hooks/api';\nimport { EntryContainer, actions } from '../base/hooks/entry';\nimport { ListContainer } from '../base/hooks/list';\nexport const useEntryOperation = (entryId) => {\n    const [{ listId }] = useContainer(ListContainer);\n    const [, dispatch] = useContainer(EntryContainer);\n    const [state, request] = useFlexgetAPI(`/pending_list/${listId}/entries/${entryId}`, Method.Put);\n    const doOperation = useCallback(async (operation) => {\n        const resp = await request({ operation });\n        if (resp.ok) {\n            dispatch(actions.updateEntry(resp.data));\n        }\n        return resp;\n    }, [dispatch, request]);\n    return [state, doOperation];\n};\nexport const useEntryBulkOperation = () => {\n    const [{ listId }] = useContainer(ListContainer);\n    const [{ selectedIds }, dispatch] = useContainer(EntryContainer);\n    const [state, request] = useFlexgetAPI(`/pending_list/${listId}/entries/batch`, Method.Put);\n    const doOperation = useCallback(async (operation) => {\n        const ids = [...selectedIds];\n        const resp = await request({\n            operation,\n            ids,\n        });\n        if (resp.ok) {\n            dispatch(actions.updateEntries(resp.data));\n        }\n        return resp;\n    }, [dispatch, request, selectedIds]);\n    return [state, doOperation];\n};\nexport const PendingListContainer = createPluginContainer(() => {\n    return {\n        sortByOptions: useMemo(() => [\n            {\n                value: SortBy.Added,\n                label: 'Date Added',\n            },\n            {\n                value: SortBy.Title,\n                label: 'Title',\n            },\n            {\n                value: SortBy.URL,\n                label: 'URL',\n            },\n            {\n                value: SortBy.Approved,\n                label: 'Approved',\n            },\n        ], []),\n        card: {\n            ActionsLeft,\n            Actions,\n        },\n        useMenuProps: () => {\n            const [{ loading }, doBulkOperation] = useEntryBulkOperation();\n            return useMemo(() => [\n                {\n                    name: 'Approve All',\n                    onClick: () => doBulkOperation(Operation.Approve),\n                    Icon: DoneAll,\n                    disabled: loading,\n                },\n                {\n                    name: 'Reject All',\n                    onClick: () => doBulkOperation(Operation.Reject),\n                    Icon: ClearAll,\n                    disabled: loading,\n                },\n            ], [doBulkOperation, loading]);\n        },\n        addEntryProps: useMemo(() => [\n            {\n                label: 'Entry Title',\n                name: 'title',\n            },\n            {\n                label: 'Entry URL',\n                name: 'originalUrl',\n            },\n        ], []),\n        api: {\n            list: {\n                useGet: () => useFlexgetAPI('/pending_list'),\n                useAdd: () => useFlexgetAPI('/pending_list', Method.Post),\n                useRemove: (listId) => useFlexgetAPI(`/pending_list/${listId}`, Method.Delete),\n            },\n            entry: {\n                useGet: (listId, query) => useFlexgetAPI(`/pending_list/${listId}/entries?${query}`),\n                useAdd: (listId) => useFlexgetAPI(`/pending_list/${listId}/entries`, Method.Post),\n                useRemove: (listId, pendingId) => useFlexgetAPI(`/pending_list/${listId}/entries/${pendingId}`, Method.Delete),\n                useRemoveBulk: (listId) => useFlexgetAPI(`/pending_list/${listId}/entries/batch`, Method.Delete),\n            },\n        },\n    };\n});\n","import React from 'react';\nimport { hot } from 'react-hot-loader/root';\nimport ManagedList from '../base';\nimport { PendingListContainer } from './hooks';\nconst PendingList = () => {\n    return (<PendingListContainer.Provider>\n      <ManagedList title=\"Pending List\"/>\n    </PendingListContainer.Provider>);\n};\nexport default hot(PendingList);\n"],"sourceRoot":""}