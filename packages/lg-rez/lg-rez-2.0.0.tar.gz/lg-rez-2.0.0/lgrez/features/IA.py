"""lg-rez / features / IA des r√©ponses

Tout ce qui concerne la mani√®re dont le bot r√©agit aux messages :
d√©termination de la meilleure r√©action, gestion des r√©actions,
activation/d√©sactivation des modes de chat

"""

import re
import random
import requests

from discord.ext import commands

from lgrez import config
from lgrez.blocs import tools
from lgrez.bdd import Trigger, Reaction, Role


# Marqueurs de s√©paration du mini-langage des s√©quences-r√©actions
MARK_OR = ' <||> '
MARK_THEN = ' <&&> '
MARK_REACT = '<::>'
MARK_CMD = '<!!>'
MARKS = [MARK_OR, MARK_THEN, MARK_REACT, MARK_CMD]


async def _build_sequence(ctx):
    """Construction d'une s√©quence-r√©action par l'utilisateur"""
    reponse = ""
    fini = False
    while not fini:
        message = await ctx.send(
            "R√©action du bot : prochain message/commande/m√©dia, "
            "ou r√©action √† ce message"
        )
        ret = await tools.wait_for_react_clic(
            message, process_text=True, trigger_all_reacts=True,
            trigger_on_commands=True
        )
        if isinstance(ret, str):
            if ret.startswith(config.bot.command_prefix):   # Commande
                reponse += MARK_CMD + ret.lstrip(config.bot.command_prefix)
            else:                                           # Texte / m√©dia
                reponse += ret
        else:                                               # React
            reponse += MARK_REACT + ret.name

        message = await ctx.send("‚ñ∂ Puis / üîÄ Ou / ‚èπ Fin ?")
        ret = await tools.wait_for_react_clic(
            message, emojis={"‚ñ∂": MARK_THEN, "üîÄ": MARK_OR, "‚èπ": False}
        )
        if ret:
            # On ajoute la marque OR ou THEN √† la s√©quence
            reponse += ret
        else:
            fini = True

    return reponse


def fetch_tenor(trigger):
    """Renvoie le GIF Tenor le plus "pertinent" pour un texte donn√©.

    Args:
        trigger (str): texte auquel r√©agir.

    Returns:
        :class:`str` (URL du GIF) ou ``None``
    """
    # API key module ternorpy (parce que la flemme de cr√©er un compte Tenor)
    apikey = "J5UVWPVIM4A5"

    rep = requests.get(
        url="https://api.tenor.com/v1/search",
        params={
            "q": trigger, "key": apikey, "limit": 1,
            "locale": "fr_FR", "contentfilter": "off",
            "media_filter": "minimal", "ar_range": "all"
        }
    )

    if rep:
        gifs = rep.json()["results"]
        # Payload Tenor : {..., "results":[ ... ]}
        # (https://tenor.com/gifapi/documentation#responseobjects-gif)
        if gifs:
            return gifs[0]["itemurl"]

    return None     # Pas de GIF trouv√©


class GestionIA(commands.Cog):
    """Commandes relatives √† l'IA (r√©ponses automatiques du bot)"""

    @commands.command()
    @tools.private
    async def stfu(self, ctx, force=None):
        """Active/d√©sactive la r√©ponse automatique du bot sur ton channel priv√©

        Args:
            force: ``"start"``/``"on"`` / ``"stop"``/``"off"`` permet de
                forcer l'activation / la d√©sactivation.

        Sans argument, la commande active les r√©actions si d√©sactiv√©es
        et vice-versa ; avec un autre argument, elle le fait silencieusment.

        N'agit que sur les messages classiques envoy√©s dans le channel :
        les commandes restent reconnues.

        Si vous ne comprenez pas le nom de la commande, demandez √† Google.
        """
        id = ctx.channel.id

        if force in [None, "start", "on"] and id not in config.bot.in_stfu:
            config.bot.in_stfu.append(id)
            await ctx.send(
                "Okay, je me tais ! Tape !stfu quand tu voudras de "
                "nouveau de moi :cry:"
            )

        elif force in [None, "stop", "off"] and id in config.bot.in_stfu:
            config.bot.in_stfu.remove(id)
            await ctx.send("Ahhh, √ßa fait plaisir de pouvoir reparler !")

        elif force not in ["start", "on", "stop", "off"]:
            # Quelque chose d'autre que start/stop pr√©cis√© apr√®s !stfu :
            # bot discret
            if id in config.bot.in_stfu:
                config.bot.in_stfu.remove(id)
            else:
                config.bot.in_stfu.append(id)


    @commands.command(aliases=["cancer", "214"])
    async def fals(self, ctx, force=None):
        """Active/d√©sactive le mode ¬´ foire √† la saucisse ¬ª

        Args:
            force: ``"start"``/``"on"`` / ``"stop"``/``"off"`` permet de
                forcer l'activation / la d√©sactivation.

        Sans argument, la commande active le mode si d√©sactiv√©
        et vice-versa.

        En mode ¬´ foire √† la saucisse ¬ª, le bot r√©agira √† (presque) tous
        les messages, pas seulement sur les motifs qu'on lui a appris.

        √Ä utiliser √† vos risques et p√©rils !
        """
        id = ctx.channel.id

        if force in [None, "start", "on"] and id not in config.bot.in_fals:
            config.bot.in_fals.append(id)
            await ctx.send(
                "https://tenor.com/view/saucisse-sausage-gif-5426973"
            )

        elif force in [None, "stop", "off"] and id in config.bot.in_fals:
            config.bot.in_fals.remove(id)
            await ctx.send("T'as raison, faut pas abuser des bonnes choses")

        elif force not in ["start", "on", "stop", "off"]:
            # Quelque chose d'autre que start/stop pr√©cis√© apr√®s !fals :
            # bot discret
            if id in config.bot.in_fals:
                config.bot.in_fals.remove(id)
            else:
                config.bot.in_fals.append(id)


    @commands.command(aliases=["r"])
    async def react(self, ctx, *, trigger):
        """Force le bot √† r√©agir √† un message

        Args:
            trigger: texte auquel le bot doit r√©agir

        Permet de faire appel √† l'IA du bot m√™me sur les chans publics,
        ou en mode STFU, etc.

        Si utilis√©e par un MJ, active aussi le mode d√©bug des
        √©valuations Python (messages d'erreur).
        """
        oc = ctx.message.content
        ctx.message.content = trigger
        debug = (ctx.message.webhook_id
                 or ctx.author.top_role == config.Role.mj)
        await process_IA(ctx.message, debug=debug)
        ctx.message.content = oc
        # On r√©tablit le message original pour ne pas qu'il trigger
        # l'IA 2 fois, le cas √©ch√©ant


    @commands.command(aliases=["rf"])
    async def reactfals(self, ctx, *, trigger):
        """Force le bot √† r√©agir √† un message comme en mode Foire √† la saucisse

        Args:
            trigger: texte auquel le bot doit r√©agir

        Permet de faire appel directement au mode Foire √† la saucisse,
        m√™me si il n'est pas activ√© / sur un chan public.
        """
        async with ctx.typing():
            gif = fetch_tenor(trigger)

        if gif:
            await ctx.send(gif)
        else:
            await ctx.send("Palaref")


    @commands.command()
    @tools.mjs_et_redacteurs
    async def addIA(self, ctx, *, triggers=None):
        """Ajoute une r√®gle d'IA (COMMANDE MJ/R√âDACTEURS)

        Args:
            triggers: mot(s), phrase(s), ou expression(s) s√©par√©es par
                des points-virgules ou sauts de lignes

        Dans le cas o√π plusieurs expressions sont sp√©cifi√©es, toutes
        d√©clencheront l'action demand√©e.
        """
        if not triggers:
            await ctx.send(
                "Mots/expressions d√©clencheurs (non sensibles √† la "
                "casse / accents), s√©par√©s par des points-virgules "
                "ou des sauts de ligne :"
            )
            mess = await tools.wait_for_message_here(ctx)
            triggers = mess.content

        triggers = triggers.replace('\n', ';').split(';')
        triggers = [tools.remove_accents(s).lower().strip() for s in triggers]
        triggers = list({trig for trig in triggers if trig})
        # filtre doublons (accents et non accents...) et triggers vides
        await ctx.send(f"Triggers : `{'` ‚Äì `'.join(triggers)}`")

        reponse = await _build_sequence(ctx)

        await ctx.send(f"R√©sum√© de la s√©quence : {tools.code(reponse)}")
        async with ctx.typing():
            reac = Reaction(reponse=reponse)
            config.session.add(reac)

            trigs = [Trigger(trigger=trigger, reaction=reac)
                     for trigger in triggers]
            config.session.add_all(trigs)

            config.session.commit()

        await ctx.send("R√®gle ajout√©e en base.")


    @commands.command()
    @tools.mjs_et_redacteurs
    async def listIA(self, ctx, trigger=None, sensi=0.5):
        """Liste les r√®gles d'IA reconnues par le bot (COMMANDE MJ/R√âDACTEURS)

        Args
            trigger (optionnel): mot/expression permettant de filter et
                trier les r√©sultats. SI ``trigger`` FAIT PLUS D'UN MOT,
                IL DOIT √äTRE ENTOUR√â PAR DES GUILLEMETS !
            sensi: sensibilit√© de d√©tection (ratio des caract√®res
                correspondants, entre 0 et 1) si trigger est pr√©cis√©.
        """
        async with ctx.typing():
            if trigger:
                trigs = Trigger.find_nearest(
                    trigger, col=Trigger.trigger,
                    sensi=sensi, solo_si_parfait=False
                )
                if not trigs:
                    await ctx.send(
                        f"Rien trouv√©, pas de chance (sensi = {sensi})"
                    )
                    return
            else:
                raw_trigs = Trigger.query.order_by(Trigger.id).all()
                # Tri√© par date de cr√©ation
                trigs = list(zip(raw_trigs, [None] * len(raw_trigs)))
                # Mise au format (trig, score)

            reacts = []     # R√©actions associ√©es √† notre liste de triggers
            for trig in trigs:
                if (reac := trig[0].reaction) not in reacts:
                    # Pas de doublons, et reste ordonn√©
                    reacts.append(reac)

            def nettoy(s):
                # Abr√®ge la r√©ponse si trop longue et neutralise les
                # sauts de ligne / rupture code_bloc, pour affichage
                s = s.replace('\r\n', '\\n').replace('\n', '\\n')
                s = s.replace('\r', '\\r').replace("```", "'''")
                if len(s) < 75:
                    return s
                else:
                    return s[:50] + " [...] " + s[-15:]

            rep = ""
            for reac in reacts:                 # pour chaque r√©ponse
                r = ""
                for (trig, score) in trigs:         # pour chaque trigger
                    if trig.reaction == reac:
                        sc = f"({float(score):.2}) " if score else ""
                        r += f" - {sc}{trig.trigger}"
                        # (score) trigger - (score) trigger ...

                rep += r.ljust(50) + f" ‚áí {nettoy(reac.reponse)}\n"
                # ‚áí r√©ponse

            rep += "\nPour modifier une r√©action, utiliser !modifIA <trigger>."

        await tools.send_code_blocs(ctx, rep)
        # On envoie, en s√©parant en blocs de 2000 caract√®res max


    @commands.command()
    @tools.mjs_et_redacteurs
    async def modifIA(self, ctx, *, trigger=None):
        """Modifie/supprime une r√®gle d'IA (COMMANDE MJ/R√âDACTEURS)

        Args:
            trigger: mot/expression d√©clenchant la r√©action √†
                modifier/supprimer

        Permet d'ajouter et supprimer des triggers, de modifier la
        r√©action du bot (construction d'une s√©quence de r√©ponses
        successives ou al√©atoires) ou de supprimer la r√©action.
        """
        if not trigger:
            await ctx.send(
                "Mot/expression d√©clencheur de la r√©action √† modifier :"
            )
            mess = await tools.wait_for_message_here(ctx)
            trigger = mess.content

        trigs = Trigger.find_nearest(trigger, col=Trigger.trigger)
        if not trigs:
            await ctx.send("Rien trouv√©.")
            return

        trig = trigs[0][0]
        reac = trig.reaction

        displ_seq = (reac.reponse if reac.reponse.startswith('`')
                     else tools.code(reac.reponse))     # Pour affichage
        trigs = list(reac.triggers)

        await ctx.send(
            f"Triggers : `{'` ‚Äì `'.join([trig.trigger for trig in trigs])}`\n"
            f"S√©quence r√©ponse : {displ_seq}"
        )

        message = await ctx.send(
            "Modifier : ‚è© triggers / ‚è∫ R√©ponse / üöÆ Supprimer ?"
        )
        choix = await tools.wait_for_react_clic(
            message, emojis={"‚è©": 1, "‚è∫": 2, "üöÆ": 0})

        if choix == 1:              # Modification des triggers
            fini = False
            while not fini:
                s = "Supprimer un trigger : \n"
                for i, t in enumerate(trigs[:10]):
                    s += f"{tools.emoji_chiffre(i+1)}. {t.trigger} \n"

                mess = await ctx.send(
                    s + "Ou entrer un mot / une expression pour l'ajouter "
                    "en trigger.\n‚èπ pour finir"
                )
                r = await tools.wait_for_react_clic(
                    mess,
                    emojis={(tools.emoji_chiffre(i) if i else "‚èπ"): str(i)
                            for i in range(len(trigs) + 1)},
                    process_text=True
                )

                if r == "0":
                    fini = True
                elif r.isdigit() and (n := int(r)) <= len(trigs):
                    config.session.delete(trigs[n - 1])
                    config.session.commit()
                    del trigs[n - 1]
                else:
                    new_trig = Trigger(trigger=r, reaction=reac)
                    trigs.append(new_trig)
                    config.session.add(trig)
                    config.session.commit()

            if not trigs:        # on a tout supprim√© !
                await ctx.send(
                    "Tous les triggers supprim√©s, suppression de la r√©action"
                )
                config.session.delete(reac)
                config.session.commit()
                return

        elif choix == 2:            # Modification de la r√©ponse
            if any([mark in reac.reponse for mark in MARKS]):
                # S√©quence compliqu√©e
                await ctx.send(
                    "\nLa s√©quence-r√©ponse peut √™tre refaite manuellement "
                    "ou modifi√©e rapidement en envoyant directment la "
                    "s√©quence ci-dessus modifi√©e (avec les marqueurs : "
                    f"OU = {tools.code(MARK_OR)}, "
                    f"ET = {tools.code(MARK_THEN)}, "
                    f"REACT = {tools.code(MARK_REACT)}, "
                    f"CMD = {tools.code(MARK_CMD)})"
                )

            reponse = await _build_sequence(ctx)
            reac.reponse = reponse

        else:                       # Suppression
            config.session.delete(reac)
            for trig in trigs:
                config.session.delete(trig)

        config.session.commit()

        await ctx.send("Fini.")


async def trigger_at_mj(message):
    """R√®gle d'IA : r√©action si le message mentionne les MJs.

    Args:
        message (~discord.Message): message auquel r√©agir.

    Returns:
        - ``True`` -- si le message mentionne les MJ et qu'une r√©ponse
          a √©t√© envoy√©e
        - ``False`` -- sinon
    """
    if config.Role.mj in message.role_mentions:
        await message.channel.send(
            "Les MJs ont entenu ton appel, ils sont en route ! :superhero:"
        )
        return True

    return False


async def trigger_roles(message, sensi=0.8):
    """R√®gle d'IA : r√©action si un nom de r√¥le est donn√©.

    Args:
        message (~discord.Message): message auquel r√©agir.
        sensi (float): sensibilit√© de la recherche
            (voir :func:`.bdd.TableMeta.find_nearest`).

    Trouve l'entr√©e la plus proche de ``message.content`` dans la table
    :class:`.bdd.Role`.

    Returns:
        - ``True`` -- si un r√¥le a √©t√© trouv√© (sensibilit√© ``> sensi``)
          et qu'une r√©ponse a √©t√© envoy√©e
        - ``False`` -- sinon
    """
    roles = Role.find_nearest(message.content, col=Role.nom, sensi=sensi)

    if roles:       # Au moins un trigger trouv√© √† cette sensi
        role = roles[0][0]          # Meilleur trigger (score max)
        await message.channel.send(tools.code_bloc(
            f"{role.prefixe}{role.nom} ‚Äì {role.description_courte} "
            f"(camp : {role.camp.nom})\n\n{role.description_longue}"
        ))      # On envoie
        return True

    return False


async def trigger_reactions(message, chain=None, sensi=0.7, debug=False):
    """R√®gle d'IA : r√©action √† partir de la table :class:`.bdd.Reaction`.

    Args:
        message (~discord.Message`): message auquel r√©agir.
        chain (str): contenu auquel r√©agir (d√©faut : contenu de
            ``message``).
        sensi (float): sensibilit√© de la recherche (cf
            :func:`.bdd.TableMeta.find_nearest`).
        debug (bool): si ``True``, affiche les erreurs lors de
            l'√©valuation des messages (voir :func:`.tools.eval_accols`).

    Trouve l'entr√©e la plus proche de ``chain`` dans la table
    :class:`.bdd.Reaction` ; si il contient des accolades, √©value le
    message selon le contexte de ``message``.

    Returns:
        - ``True`` -- si une r√©action a √©t√© trouv√© (sensibilit√©
          ``> sensi``) et qu'une r√©ponse a √©t√© envoy√©e
        - ``False`` -- sinon
    """
    if not chain:                   # Si pas pr√©cis√©,
        chain = message.content         # contenu de message
    trigs = Trigger.find_nearest(chain, col=Trigger.trigger, sensi=sensi)

    if trigs:       # Au moins un trigger trouv√© √† cette sensi
        trig = trigs[0][0]                  # Meilleur trigger (score max)
        seq = trig.reaction.reponse         # S√©quence-r√©ponse associ√©e

        for rep in seq.split(MARK_THEN):        # Pour chaque √©tape :
            if MARK_OR in rep:
                # Si plusieurs possiblit√©s, on en choisit une random
                rep = random.choice(rep.split(MARK_OR))

            if rep.startswith(MARK_REACT):          # R√©action
                react = rep.lstrip(MARK_REACT)
                emoji = tools.emoji(react, must_be_found=False) or react
                await message.add_reaction(emoji)

            elif rep.startswith(MARK_CMD):          # Commande
                message.content = rep.replace(MARK_CMD,
                                              config.bot.command_prefix)
                # Ex√©cution de la commande
                await config.bot.process_commands(message)

            else:                                   # Sinon, texte / m√©dia
                # On remplace tous les "{expr}" par leur √©valuation
                rep = tools.eval_accols(rep, locals_=locals(), debug=debug)
                await message.channel.send(rep)

        return True

    return False


async def trigger_sub_reactions(message, sensi=0.9, debug=False):
    """R√®gle d'IA : r√©action √† partir de la table, mais sur les mots

    Appelle :func:`trigger_reactions(bot, message, mot, sensi, debug)
    <.trigger_reactions>` pour tous les mots ``mot`` composant
    ``message.content`` (mots de plus de 4 lettres, test√©s des plus
    longs aux plus courts).

    Args:
        message (~discord.Message`): message auquel r√©agir.
        sensi (float): sensibilit√© de la recherche (cf
            :func:`.bdd.TableMeta.find_nearest`).
        debug (bool): si ``True``, affiche les erreurs lors de
            l'√©valuation des messages (voir :func:`.tools.eval_accols`).

    Returns:
        - ``True`` -- si une r√©action a √©t√© trouv√© (sensibilit√©
          ``> sensi``) et qu'une r√©ponse a √©t√© envoy√©e
        - ``False`` -- sinon
    """
    mots = message.content.split(" ")
    if len(mots) > 1:       # Si le message fait plus d'un mot
        for mot in sorted(mots, key=lambda m: -len(m)):
            # On parcourt les mots du plus long au plus court
            if len(mot) > 4:        # on √©limine les mots de liaison
                if await trigger_reactions(message, chain=mot,
                                           sensi=sensi, debug=debug):
                    # Si on trouve une sous-rect (√† 0.9)
                    return True

    return False


async def trigger_di(message):
    """R√®gle d'IA : r√©action aux messages en di... / cri...

    Args:
        message (~discord.Message): message auquel r√©agir.

    Returns:
        - ``True`` -- si le message correspond et qu'une r√©ponse a √©t√©
          envoy√©e
        - ``False`` -- sinon
    """
    c = message.content
    diprefs = ["di", "dy", "dis ", "dit ", "dis-", "dit-"]
    criprefs = ["cri", "cry", "kri", "kry"]
    pos_prefs = {c.lower().find(pref): pref for pref in diprefs + criprefs
                 if pref in c[:-1].lower()}
    # On extrait les cas o√π le pr√©fixe est √† la fin du message

    if pos_prefs:           # Si on a trouv√© au moins un pr√©fixe
        i = min(pos_prefs)
        pref = pos_prefs[i]
        if pref in criprefs:
            mess = tools.bold(c[i + len(pref):].upper())
        else:
            mess = c[i + len(pref):]
        await message.channel.send(mess, tts=True)
        # On envoie le di.../cri... en mode TTS (oh si, c'est rigolo)
        return True

    return False


async def trigger_gif(message):
    """R√®gle d'IA : r√©action par GIF en mode Foire √† la saucisse.

    Args:
        message (~discord.Message): message auquel r√©agir

    Returns:
        - ``True`` -- si le message correspond et qu'une r√©ponse a √©t√©
          envoy√©e
        - ``False`` -- sinon
    """
    if message.channel.id in config.bot.in_fals:
        # Chan en mode Foire √† la saucisse
        async with message.channel.typing():
            gif = fetch_tenor(message.content)
            if gif:
                await message.channel.send(gif)
                return True

    return False


async def trigger_mot_unique(message):
    """R√®gle d'IA : r√©action √† un mot unique (le r√©p√®te).

    Args:
        message (~discord.Message): message auquel r√©agir.

    Returns:
        - ``True`` -- si le message correspond et qu'une r√©ponse a √©t√©
          envoy√©e
        - ``False`` -- sinon
    """
    if len(message.content.split()) == 1 and ":" not in message.content:
        # : pour ne pas trigger aux liens
        rep = f"{message.content.capitalize()} ?"
        await message.channel.send(rep)
        return True

    return False


async def trigger_a_ou_b(message):
    """R√®gle d'IA : r√©action √† un motif type ¬´ a ou b ¬ª (r√©pond ¬´ b ¬ª).

    Args:
        message (~discord.Message): message auquel r√©agir.

    Returns:
        - ``True`` -- si le message correspond et qu'une r√©ponse a √©t√©
          envoy√©e
        - ``False`` -- sinon
    """
    if (motif := re.fullmatch(r"(.+)\s+ou\s+(.+?)", message.content)):
        rep = f"{motif.group(2).rstrip(' !?.,;')}.".capitalize()
        await message.channel.send(rep)
        return True

    return False


async def default(message):
    """R√®gle d'IA : r√©ponse par d√©faut

    Args:
        message (~discord.Message): message auquel r√©agir.

    Returns:
        - ``True`` -- si le message correspond et qu'une r√©ponse a √©t√©
          envoy√©e
        - ``False`` -- sinon
    """
    mess = "D√©sol√©, je n'ai pas compris :person_shrugging:"
    if random.random() < 0.05:
        mess += "\n(et toi, tu as perdu)"
    await message.channel.send(mess)
    return True


async def process_IA(message, debug=False):
    """Ex√©cute les r√®gles d'IA.

    Args:
        message (~discord.Message): message auquel r√©agir.
        debug (bool): si ``True``, affiche les erreurs lors de
            l'√©valuation des messages (voir :func:`.tools.eval_accols`).
    """
    (
        await trigger_at_mj(message)            # @MJ (aled)
        or await trigger_gif(message)           # Un petit GIF ? (si FALS)
        or await trigger_roles(message)         # R√¥les
        or await trigger_reactions(             # Table Reaction ("IA")
            message, debug=debug)
        or await trigger_sub_reactions(         # IA sur les mots
            message, debug=debug)
        or await trigger_a_ou_b(message)        # "a ou b" ==> "b"
        or await trigger_di(message)            # di... / cri...
        or await trigger_mot_unique(message)    # Un seul mot ==> on r√©p√®te
        or await default(message)               # R√©ponse par d√©faut
    )
