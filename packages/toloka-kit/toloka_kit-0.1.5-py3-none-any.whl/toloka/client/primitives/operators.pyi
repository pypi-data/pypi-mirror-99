from enum import Enum


class CompareOperator(Enum):
    ...

class InclusionOperator(Enum):
    ...

class IdentityOperator(Enum):
    ...

class InclusionConditionMixin(object):

    def __repr__(self): ...

    def __str__(self): ...

    def __eq__(self, other): ...

    def __ne__(self, other): ...

    def __lt__(self, other): ...

    def __le__(self, other): ...

    def __gt__(self, other): ...

    def __ge__(self, other): ...

    def __init__(self, operator: InclusionOperator) -> None: ...

    operator: InclusionOperator

class IdentityConditionMixin(object):

    def __repr__(self): ...

    def __str__(self): ...

    def __eq__(self, other): ...

    def __ne__(self, other): ...

    def __lt__(self, other): ...

    def __le__(self, other): ...

    def __gt__(self, other): ...

    def __ge__(self, other): ...

    def __init__(self, operator: IdentityOperator) -> None: ...

    operator: IdentityOperator

class ComparableConditionMixin(object):

    def __repr__(self): ...

    def __str__(self): ...

    def __eq__(self, other): ...

    def __ne__(self, other): ...

    def __lt__(self, other): ...

    def __le__(self, other): ...

    def __gt__(self, other): ...

    def __ge__(self, other): ...

    def __init__(self, operator: CompareOperator) -> None: ...

    operator: CompareOperator

class StatefulComparableConditionMixin(object):

    def lt(self, value): ...

    def lte(self, value): ...

    def gt(self, value): ...

    def gte(self, value): ...

    def eq(self, value): ...

    def ne(self, value): ...

    def __hash__(self): ...

    def __eq__(self, value): ...

    def __ne__(self, value): ...

    def __lt__(self, value): ...

    def __le__(self, value): ...

    def __gt__(self, value): ...

    def __ge__(self, value): ...
