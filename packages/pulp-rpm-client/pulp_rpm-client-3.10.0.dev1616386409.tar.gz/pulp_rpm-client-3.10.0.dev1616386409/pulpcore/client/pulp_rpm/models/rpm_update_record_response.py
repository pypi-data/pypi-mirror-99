# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pulpcore.client.pulp_rpm.configuration import Configuration


class RpmUpdateRecordResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pulp_href': 'str',
        'pulp_created': 'datetime',
        'id': 'str',
        'updated_date': 'str',
        'description': 'str',
        'issued_date': 'str',
        'fromstr': 'str',
        'status': 'str',
        'title': 'str',
        'summary': 'str',
        'version': 'str',
        'type': 'str',
        'severity': 'str',
        'solution': 'str',
        'release': 'str',
        'rights': 'str',
        'pushcount': 'str',
        'pkglist': 'list[RpmUpdateCollectionResponse]',
        'references': 'list[object]',
        'reboot_suggested': 'bool'
    }

    attribute_map = {
        'pulp_href': 'pulp_href',
        'pulp_created': 'pulp_created',
        'id': 'id',
        'updated_date': 'updated_date',
        'description': 'description',
        'issued_date': 'issued_date',
        'fromstr': 'fromstr',
        'status': 'status',
        'title': 'title',
        'summary': 'summary',
        'version': 'version',
        'type': 'type',
        'severity': 'severity',
        'solution': 'solution',
        'release': 'release',
        'rights': 'rights',
        'pushcount': 'pushcount',
        'pkglist': 'pkglist',
        'references': 'references',
        'reboot_suggested': 'reboot_suggested'
    }

    def __init__(self, pulp_href=None, pulp_created=None, id=None, updated_date=None, description=None, issued_date=None, fromstr=None, status=None, title=None, summary=None, version=None, type=None, severity=None, solution=None, release=None, rights=None, pushcount=None, pkglist=None, references=None, reboot_suggested=None, local_vars_configuration=None):  # noqa: E501
        """RpmUpdateRecordResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pulp_href = None
        self._pulp_created = None
        self._id = None
        self._updated_date = None
        self._description = None
        self._issued_date = None
        self._fromstr = None
        self._status = None
        self._title = None
        self._summary = None
        self._version = None
        self._type = None
        self._severity = None
        self._solution = None
        self._release = None
        self._rights = None
        self._pushcount = None
        self._pkglist = None
        self._references = None
        self._reboot_suggested = None
        self.discriminator = None

        if pulp_href is not None:
            self.pulp_href = pulp_href
        if pulp_created is not None:
            self.pulp_created = pulp_created
        if id is not None:
            self.id = id
        if updated_date is not None:
            self.updated_date = updated_date
        if description is not None:
            self.description = description
        if issued_date is not None:
            self.issued_date = issued_date
        if fromstr is not None:
            self.fromstr = fromstr
        if status is not None:
            self.status = status
        if title is not None:
            self.title = title
        if summary is not None:
            self.summary = summary
        if version is not None:
            self.version = version
        if type is not None:
            self.type = type
        if severity is not None:
            self.severity = severity
        if solution is not None:
            self.solution = solution
        if release is not None:
            self.release = release
        if rights is not None:
            self.rights = rights
        if pushcount is not None:
            self.pushcount = pushcount
        if pkglist is not None:
            self.pkglist = pkglist
        if references is not None:
            self.references = references
        if reboot_suggested is not None:
            self.reboot_suggested = reboot_suggested

    @property
    def pulp_href(self):
        """Gets the pulp_href of this RpmUpdateRecordResponse.  # noqa: E501


        :return: The pulp_href of this RpmUpdateRecordResponse.  # noqa: E501
        :rtype: str
        """
        return self._pulp_href

    @pulp_href.setter
    def pulp_href(self, pulp_href):
        """Sets the pulp_href of this RpmUpdateRecordResponse.


        :param pulp_href: The pulp_href of this RpmUpdateRecordResponse.  # noqa: E501
        :type: str
        """

        self._pulp_href = pulp_href

    @property
    def pulp_created(self):
        """Gets the pulp_created of this RpmUpdateRecordResponse.  # noqa: E501

        Timestamp of creation.  # noqa: E501

        :return: The pulp_created of this RpmUpdateRecordResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._pulp_created

    @pulp_created.setter
    def pulp_created(self, pulp_created):
        """Sets the pulp_created of this RpmUpdateRecordResponse.

        Timestamp of creation.  # noqa: E501

        :param pulp_created: The pulp_created of this RpmUpdateRecordResponse.  # noqa: E501
        :type: datetime
        """

        self._pulp_created = pulp_created

    @property
    def id(self):
        """Gets the id of this RpmUpdateRecordResponse.  # noqa: E501

        Update id (short update name, e.g. RHEA-2013:1777)  # noqa: E501

        :return: The id of this RpmUpdateRecordResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RpmUpdateRecordResponse.

        Update id (short update name, e.g. RHEA-2013:1777)  # noqa: E501

        :param id: The id of this RpmUpdateRecordResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def updated_date(self):
        """Gets the updated_date of this RpmUpdateRecordResponse.  # noqa: E501

        Date when the update was updated (e.g. '2013-12-02 00:00:00')  # noqa: E501

        :return: The updated_date of this RpmUpdateRecordResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this RpmUpdateRecordResponse.

        Date when the update was updated (e.g. '2013-12-02 00:00:00')  # noqa: E501

        :param updated_date: The updated_date of this RpmUpdateRecordResponse.  # noqa: E501
        :type: str
        """

        self._updated_date = updated_date

    @property
    def description(self):
        """Gets the description of this RpmUpdateRecordResponse.  # noqa: E501

        Update description  # noqa: E501

        :return: The description of this RpmUpdateRecordResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RpmUpdateRecordResponse.

        Update description  # noqa: E501

        :param description: The description of this RpmUpdateRecordResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def issued_date(self):
        """Gets the issued_date of this RpmUpdateRecordResponse.  # noqa: E501

        Date when the update was issued (e.g. '2013-12-02 00:00:00')  # noqa: E501

        :return: The issued_date of this RpmUpdateRecordResponse.  # noqa: E501
        :rtype: str
        """
        return self._issued_date

    @issued_date.setter
    def issued_date(self, issued_date):
        """Sets the issued_date of this RpmUpdateRecordResponse.

        Date when the update was issued (e.g. '2013-12-02 00:00:00')  # noqa: E501

        :param issued_date: The issued_date of this RpmUpdateRecordResponse.  # noqa: E501
        :type: str
        """

        self._issued_date = issued_date

    @property
    def fromstr(self):
        """Gets the fromstr of this RpmUpdateRecordResponse.  # noqa: E501

        Source of the update (e.g. security@redhat.com)  # noqa: E501

        :return: The fromstr of this RpmUpdateRecordResponse.  # noqa: E501
        :rtype: str
        """
        return self._fromstr

    @fromstr.setter
    def fromstr(self, fromstr):
        """Sets the fromstr of this RpmUpdateRecordResponse.

        Source of the update (e.g. security@redhat.com)  # noqa: E501

        :param fromstr: The fromstr of this RpmUpdateRecordResponse.  # noqa: E501
        :type: str
        """

        self._fromstr = fromstr

    @property
    def status(self):
        """Gets the status of this RpmUpdateRecordResponse.  # noqa: E501

        Update status ('final', ...)  # noqa: E501

        :return: The status of this RpmUpdateRecordResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RpmUpdateRecordResponse.

        Update status ('final', ...)  # noqa: E501

        :param status: The status of this RpmUpdateRecordResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this RpmUpdateRecordResponse.  # noqa: E501

        Update name  # noqa: E501

        :return: The title of this RpmUpdateRecordResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this RpmUpdateRecordResponse.

        Update name  # noqa: E501

        :param title: The title of this RpmUpdateRecordResponse.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def summary(self):
        """Gets the summary of this RpmUpdateRecordResponse.  # noqa: E501

        Short summary  # noqa: E501

        :return: The summary of this RpmUpdateRecordResponse.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this RpmUpdateRecordResponse.

        Short summary  # noqa: E501

        :param summary: The summary of this RpmUpdateRecordResponse.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def version(self):
        """Gets the version of this RpmUpdateRecordResponse.  # noqa: E501

        Update version (probably always an integer number)  # noqa: E501

        :return: The version of this RpmUpdateRecordResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RpmUpdateRecordResponse.

        Update version (probably always an integer number)  # noqa: E501

        :param version: The version of this RpmUpdateRecordResponse.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def type(self):
        """Gets the type of this RpmUpdateRecordResponse.  # noqa: E501

        Update type ('enhancement', 'bugfix', ...)  # noqa: E501

        :return: The type of this RpmUpdateRecordResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RpmUpdateRecordResponse.

        Update type ('enhancement', 'bugfix', ...)  # noqa: E501

        :param type: The type of this RpmUpdateRecordResponse.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def severity(self):
        """Gets the severity of this RpmUpdateRecordResponse.  # noqa: E501

        Severity  # noqa: E501

        :return: The severity of this RpmUpdateRecordResponse.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this RpmUpdateRecordResponse.

        Severity  # noqa: E501

        :param severity: The severity of this RpmUpdateRecordResponse.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def solution(self):
        """Gets the solution of this RpmUpdateRecordResponse.  # noqa: E501

        Solution  # noqa: E501

        :return: The solution of this RpmUpdateRecordResponse.  # noqa: E501
        :rtype: str
        """
        return self._solution

    @solution.setter
    def solution(self, solution):
        """Sets the solution of this RpmUpdateRecordResponse.

        Solution  # noqa: E501

        :param solution: The solution of this RpmUpdateRecordResponse.  # noqa: E501
        :type: str
        """

        self._solution = solution

    @property
    def release(self):
        """Gets the release of this RpmUpdateRecordResponse.  # noqa: E501

        Update release  # noqa: E501

        :return: The release of this RpmUpdateRecordResponse.  # noqa: E501
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this RpmUpdateRecordResponse.

        Update release  # noqa: E501

        :param release: The release of this RpmUpdateRecordResponse.  # noqa: E501
        :type: str
        """

        self._release = release

    @property
    def rights(self):
        """Gets the rights of this RpmUpdateRecordResponse.  # noqa: E501

        Copyrights  # noqa: E501

        :return: The rights of this RpmUpdateRecordResponse.  # noqa: E501
        :rtype: str
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """Sets the rights of this RpmUpdateRecordResponse.

        Copyrights  # noqa: E501

        :param rights: The rights of this RpmUpdateRecordResponse.  # noqa: E501
        :type: str
        """

        self._rights = rights

    @property
    def pushcount(self):
        """Gets the pushcount of this RpmUpdateRecordResponse.  # noqa: E501

        Push count  # noqa: E501

        :return: The pushcount of this RpmUpdateRecordResponse.  # noqa: E501
        :rtype: str
        """
        return self._pushcount

    @pushcount.setter
    def pushcount(self, pushcount):
        """Sets the pushcount of this RpmUpdateRecordResponse.

        Push count  # noqa: E501

        :param pushcount: The pushcount of this RpmUpdateRecordResponse.  # noqa: E501
        :type: str
        """

        self._pushcount = pushcount

    @property
    def pkglist(self):
        """Gets the pkglist of this RpmUpdateRecordResponse.  # noqa: E501

        List of packages  # noqa: E501

        :return: The pkglist of this RpmUpdateRecordResponse.  # noqa: E501
        :rtype: list[RpmUpdateCollectionResponse]
        """
        return self._pkglist

    @pkglist.setter
    def pkglist(self, pkglist):
        """Sets the pkglist of this RpmUpdateRecordResponse.

        List of packages  # noqa: E501

        :param pkglist: The pkglist of this RpmUpdateRecordResponse.  # noqa: E501
        :type: list[RpmUpdateCollectionResponse]
        """

        self._pkglist = pkglist

    @property
    def references(self):
        """Gets the references of this RpmUpdateRecordResponse.  # noqa: E501

        List of references  # noqa: E501

        :return: The references of this RpmUpdateRecordResponse.  # noqa: E501
        :rtype: list[object]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this RpmUpdateRecordResponse.

        List of references  # noqa: E501

        :param references: The references of this RpmUpdateRecordResponse.  # noqa: E501
        :type: list[object]
        """

        self._references = references

    @property
    def reboot_suggested(self):
        """Gets the reboot_suggested of this RpmUpdateRecordResponse.  # noqa: E501

        Reboot suggested  # noqa: E501

        :return: The reboot_suggested of this RpmUpdateRecordResponse.  # noqa: E501
        :rtype: bool
        """
        return self._reboot_suggested

    @reboot_suggested.setter
    def reboot_suggested(self, reboot_suggested):
        """Sets the reboot_suggested of this RpmUpdateRecordResponse.

        Reboot suggested  # noqa: E501

        :param reboot_suggested: The reboot_suggested of this RpmUpdateRecordResponse.  # noqa: E501
        :type: bool
        """

        self._reboot_suggested = reboot_suggested

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RpmUpdateRecordResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RpmUpdateRecordResponse):
            return True

        return self.to_dict() != other.to_dict()
