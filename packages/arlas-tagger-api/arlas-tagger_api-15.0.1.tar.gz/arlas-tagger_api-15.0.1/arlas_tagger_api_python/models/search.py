# coding: utf-8

"""
    ARLAS Tagger API

    (Un)Tag fields of ARLAS collections

    OpenAPI spec version: 15.0.1
    Contact: contact@gisaia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Search(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filter': 'Filter',
        'form': 'Form',
        'page': 'Page',
        'projection': 'Projection',
        'returned_geometries': 'str'
    }

    attribute_map = {
        'filter': 'filter',
        'form': 'form',
        'page': 'page',
        'projection': 'projection',
        'returned_geometries': 'returned_geometries'
    }

    def __init__(self, filter=None, form=None, page=None, projection=None, returned_geometries=None):
        """
        Search - a model defined in Swagger
        """

        self._filter = None
        self._form = None
        self._page = None
        self._projection = None
        self._returned_geometries = None

        if filter is not None:
          self.filter = filter
        if form is not None:
          self.form = form
        if page is not None:
          self.page = page
        if projection is not None:
          self.projection = projection
        if returned_geometries is not None:
          self.returned_geometries = returned_geometries

    @property
    def filter(self):
        """
        Gets the filter of this Search.

        :return: The filter of this Search.
        :rtype: Filter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """
        Sets the filter of this Search.

        :param filter: The filter of this Search.
        :type: Filter
        """

        self._filter = filter

    @property
    def form(self):
        """
        Gets the form of this Search.

        :return: The form of this Search.
        :rtype: Form
        """
        return self._form

    @form.setter
    def form(self, form):
        """
        Sets the form of this Search.

        :param form: The form of this Search.
        :type: Form
        """

        self._form = form

    @property
    def page(self):
        """
        Gets the page of this Search.

        :return: The page of this Search.
        :rtype: Page
        """
        return self._page

    @page.setter
    def page(self, page):
        """
        Sets the page of this Search.

        :param page: The page of this Search.
        :type: Page
        """

        self._page = page

    @property
    def projection(self):
        """
        Gets the projection of this Search.

        :return: The projection of this Search.
        :rtype: Projection
        """
        return self._projection

    @projection.setter
    def projection(self, projection):
        """
        Sets the projection of this Search.

        :param projection: The projection of this Search.
        :type: Projection
        """

        self._projection = projection

    @property
    def returned_geometries(self):
        """
        Gets the returned_geometries of this Search.

        :return: The returned_geometries of this Search.
        :rtype: str
        """
        return self._returned_geometries

    @returned_geometries.setter
    def returned_geometries(self, returned_geometries):
        """
        Sets the returned_geometries of this Search.

        :param returned_geometries: The returned_geometries of this Search.
        :type: str
        """

        self._returned_geometries = returned_geometries

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Search):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
