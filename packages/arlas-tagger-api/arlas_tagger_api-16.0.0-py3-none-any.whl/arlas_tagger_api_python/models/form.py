# coding: utf-8

"""
    ARLAS Tagger API

    (Un)Tag fields of ARLAS collections

    OpenAPI spec version: 16.0.0
    Contact: contact@gisaia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Form(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pretty': 'bool',
        'flat': 'bool'
    }

    attribute_map = {
        'pretty': 'pretty',
        'flat': 'flat'
    }

    def __init__(self, pretty=None, flat=None):
        """
        Form - a model defined in Swagger
        """

        self._pretty = None
        self._flat = None

        if pretty is not None:
          self.pretty = pretty
        if flat is not None:
          self.flat = flat

    @property
    def pretty(self):
        """
        Gets the pretty of this Form.

        :return: The pretty of this Form.
        :rtype: bool
        """
        return self._pretty

    @pretty.setter
    def pretty(self, pretty):
        """
        Sets the pretty of this Form.

        :param pretty: The pretty of this Form.
        :type: bool
        """

        self._pretty = pretty

    @property
    def flat(self):
        """
        Gets the flat of this Form.

        :return: The flat of this Form.
        :rtype: bool
        """
        return self._flat

    @flat.setter
    def flat(self, flat):
        """
        Sets the flat of this Form.

        :param flat: The flat of this Form.
        :type: bool
        """

        self._flat = flat

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Form):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
