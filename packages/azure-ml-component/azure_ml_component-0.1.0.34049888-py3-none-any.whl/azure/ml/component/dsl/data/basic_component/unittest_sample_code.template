import sys
import unittest
from pathlib import Path

from azureml.core import Workspace
from azure.ml.component import Component

# The following line adds source directory to path.
sys.path.insert(0, str(Path(__file__).parent.parent))
from COMPONENT_ENTRY import FUNCTION_NAME


class TestCOMPONENT_CLASS_NAME(unittest.TestCase):

    @classmethod
    def setUpClass(cls) -> None:
        cls.workspace = Workspace.from_config(str(Path(__file__).parent.parent / 'config.json'))
        cls.base_path = Path(__file__).parent.parent / 'data'

    def prepare_inputs(self) -> dict:
        # Change to your own inputs
        return INPUTS_TEMPLATE

    def prepare_outputs(self) -> dict:
        # Change to your own outputs
        return OUTPUTS_TEMPLATE

    def prepare_parameters(self) -> dict:
        # Change to your own parameters
        return PARAMETERS_TEMPLATE

    def prepare_arguments(self) -> dict:
        # If your input's type is not Path, change this function to your own type.
        result = {}
        result.update(self.prepare_inputs())
        result.update(self.prepare_outputs())
        result.update(self.prepare_parameters())
        return result

    def test_component_from_func(self):
        # This test calls FUNCTION_NAME from cmd line arguments.
        local_component = Component._from_func(self.workspace, FUNCTION_NAME)
        component = local_component()
        component.set_inputs(**self.prepare_inputs(), **self.prepare_parameters())
        status = component.run(mode='docker')
        self.assertEqual(status, 'Completed', 'Component run failed.')

    def test_component_func(self):
        # This test calls FUNCTION_NAME from parameters directly.
        FUNCTION_NAME(**self.prepare_arguments())
