# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class HttpResponseMessage(Model):
    """HttpResponseMessage.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param content:
    :type content: ~designer.models.HttpContent
    :param status_code: Possible values include: 'Continue',
     'SwitchingProtocols', 'Processing', 'EarlyHints', 'OK', 'Created',
     'Accepted', 'NonAuthoritativeInformation', 'NoContent', 'ResetContent',
     'PartialContent', 'MultiStatus', 'AlreadyReported', 'IMUsed',
     'MultipleChoices', 'Ambiguous', 'MovedPermanently', 'Moved', 'Found',
     'Redirect', 'SeeOther', 'RedirectMethod', 'NotModified', 'UseProxy',
     'Unused', 'TemporaryRedirect', 'RedirectKeepVerb', 'PermanentRedirect',
     'BadRequest', 'Unauthorized', 'PaymentRequired', 'Forbidden', 'NotFound',
     'MethodNotAllowed', 'NotAcceptable', 'ProxyAuthenticationRequired',
     'RequestTimeout', 'Conflict', 'Gone', 'LengthRequired',
     'PreconditionFailed', 'RequestEntityTooLarge', 'RequestUriTooLong',
     'UnsupportedMediaType', 'RequestedRangeNotSatisfiable',
     'ExpectationFailed', 'MisdirectedRequest', 'UnprocessableEntity',
     'Locked', 'FailedDependency', 'UpgradeRequired', 'PreconditionRequired',
     'TooManyRequests', 'RequestHeaderFieldsTooLarge',
     'UnavailableForLegalReasons', 'InternalServerError', 'NotImplemented',
     'BadGateway', 'ServiceUnavailable', 'GatewayTimeout',
     'HttpVersionNotSupported', 'VariantAlsoNegotiates', 'InsufficientStorage',
     'LoopDetected', 'NotExtended', 'NetworkAuthenticationRequired'
    :type status_code: str or ~designer.models.HttpStatusCode
    :ivar headers:
    :vartype headers: list[~designer.models.KeyValuePairStringIEnumerable1]
    :param version:
    :type version: str
    :param reason_phrase:
    :type reason_phrase: str
    :ivar trailing_headers:
    :vartype trailing_headers:
     list[~designer.models.KeyValuePairStringIEnumerable1]
    :param request_message:
    :type request_message: ~designer.models.HttpRequestMessage
    :ivar is_success_status_code:
    :vartype is_success_status_code: bool
    """

    _validation = {
        'headers': {'readonly': True},
        'trailing_headers': {'readonly': True},
        'is_success_status_code': {'readonly': True},
    }

    _attribute_map = {
        'content': {'key': 'content', 'type': 'HttpContent'},
        'status_code': {'key': 'statusCode', 'type': 'str'},
        'headers': {'key': 'headers', 'type': '[KeyValuePairStringIEnumerable1]'},
        'version': {'key': 'version', 'type': 'str'},
        'reason_phrase': {'key': 'reasonPhrase', 'type': 'str'},
        'trailing_headers': {'key': 'trailingHeaders', 'type': '[KeyValuePairStringIEnumerable1]'},
        'request_message': {'key': 'requestMessage', 'type': 'HttpRequestMessage'},
        'is_success_status_code': {'key': 'isSuccessStatusCode', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(HttpResponseMessage, self).__init__(**kwargs)
        self.content = kwargs.get('content', None)
        self.status_code = kwargs.get('status_code', None)
        self.headers = None
        self.version = kwargs.get('version', None)
        self.reason_phrase = kwargs.get('reason_phrase', None)
        self.trailing_headers = None
        self.request_message = kwargs.get('request_message', None)
        self.is_success_status_code = None
