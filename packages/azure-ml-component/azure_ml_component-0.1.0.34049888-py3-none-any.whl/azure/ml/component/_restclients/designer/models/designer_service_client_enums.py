# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from enum import Enum


class DataStoreMode(str, Enum):

    none = "None"
    mount = "Mount"
    download = "Download"
    upload = "Upload"
    direct = "Direct"
    hdfs = "Hdfs"


class DatasetType(str, Enum):

    file = "File"
    tabular = "Tabular"


class TrainingOutputType(str, Enum):

    metrics = "Metrics"
    model = "Model"


class UIWidgetTypeEnum(str, Enum):

    default = "Default"
    mode = "Mode"
    column_picker = "ColumnPicker"
    credential = "Credential"
    script = "Script"


class UIScriptLanguageEnum(str, Enum):

    none = "None"
    python = "Python"
    r = "R"
    json = "Json"
    sql = "Sql"


class ParameterType(str, Enum):

    int_enum = "Int"
    double = "Double"
    bool_enum = "Bool"
    string = "String"
    undefined = "Undefined"


class ArgumentValueType(str, Enum):

    literal = "Literal"
    parameter = "Parameter"
    input = "Input"
    output = "Output"
    nested_list = "NestedList"
    string_interpolation_list = "StringInterpolationList"


class StoredProcedureParameterType(str, Enum):

    string = "String"
    int_enum = "Int"
    decimal_enum = "Decimal"
    guid = "Guid"
    boolean = "Boolean"
    date_enum = "Date"


class DataReferenceType(str, Enum):

    none = "None"
    azure_blob = "AzureBlob"
    azure_data_lake = "AzureDataLake"
    azure_files = "AzureFiles"
    azure_sql_database = "AzureSqlDatabase"
    azure_postgres_database = "AzurePostgresDatabase"
    azure_data_lake_gen2 = "AzureDataLakeGen2"
    dbfs = "DBFS"
    azure_my_sql_database = "AzureMySqlDatabase"


class DataLocationStorageType(str, Enum):

    none = "None"
    azure_blob = "AzureBlob"
    artifact = "Artifact"
    snapshot = "Snapshot"


class ModuleType(str, Enum):

    none = "None"
    batch_inferencing = "BatchInferencing"


class UploadState(str, Enum):

    uploading = "Uploading"
    completed = "Completed"
    canceled = "Canceled"
    failed = "Failed"


class EntityStatus(str, Enum):

    active = "Active"
    deprecated = "Deprecated"
    disabled = "Disabled"


class RunSettingParameterType(str, Enum):

    undefined = "Undefined"
    int_enum = "Int"
    double = "Double"
    bool_enum = "Bool"
    string = "String"
    json_string = "JsonString"


class RunSettingUIWidgetTypeEnum(str, Enum):

    default = "Default"
    compute_selection = "ComputeSelection"
    json_editor = "JsonEditor"
    mode = "Mode"
    search_space_parameter = "SearchSpaceParameter"
    section_toggle = "SectionToggle"


class ModuleScope(str, Enum):

    all = "All"
    global_enum = "Global"
    workspace = "Workspace"
    anonymous = "Anonymous"
    step = "Step"


class ModuleSourceType(str, Enum):

    unknown = "Unknown"
    local = "Local"
    github_file = "GithubFile"
    github_folder = "GithubFolder"
    devops_artifacts_zip = "DevopsArtifactsZip"


class ModuleUpdateOperationType(str, Enum):

    set_default_version = "SetDefaultVersion"
    enable_module = "EnableModule"
    disable_module = "DisableModule"
    update_display_name = "UpdateDisplayName"


class ModuleInfoFromYamlStatusEnum(str, Enum):

    new_module = "NewModule"
    new_version = "NewVersion"
    conflict = "Conflict"
    parse_error = "ParseError"
    process_request_error = "ProcessRequestError"


class DataSourceType(str, Enum):

    none = "None"
    pipeline_data_source = "PipelineDataSource"
    aml_dataset = "AmlDataset"
    global_dataset = "GlobalDataset"


class ModuleRegistrationStatusEnum(str, Enum):

    succeeded = "Succeeded"
    failed = "Failed"


class PipelineType(str, Enum):

    training_pipeline = "TrainingPipeline"
    real_time_inference_pipeline = "RealTimeInferencePipeline"
    batch_inference_pipeline = "BatchInferencePipeline"
    unknown = "Unknown"


class PipelineDraftMode(str, Enum):

    none = "None"
    normal = "Normal"
    custom = "Custom"


class ParameterValueType(str, Enum):

    literal = "Literal"
    graph_parameter_name = "GraphParameterName"
    concatenate = "Concatenate"
    input = "Input"
    data_path = "DataPath"
    data_set_definition = "DataSetDefinition"


class ControlInputValue(str, Enum):

    false = "False"
    true = "True"


class ComputeType(str, Enum):

    batch_ai = "BatchAi"
    mlc = "MLC"
    hdi_cluster = "HdiCluster"
    remote_docker = "RemoteDocker"
    databricks = "Databricks"


class PipelineStatusCode(str, Enum):

    not_started = "NotStarted"
    in_draft = "InDraft"
    preparing = "Preparing"
    running = "Running"
    failed = "Failed"
    finished = "Finished"
    canceled = "Canceled"
    throttled = "Throttled"
    unknown = "Unknown"


class RunStatus(str, Enum):

    not_started = "NotStarted"
    starting = "Starting"
    provisioning = "Provisioning"
    preparing = "Preparing"
    queued = "Queued"
    running = "Running"
    finalizing = "Finalizing"
    cancel_requested = "CancelRequested"
    completed = "Completed"
    failed = "Failed"
    canceled = "Canceled"
    not_responding = "NotResponding"
    unapproved = "Unapproved"
    pausing = "Pausing"
    paused = "Paused"


class TaskStatusCode(str, Enum):

    not_started = "NotStarted"
    queued = "Queued"
    running = "Running"
    failed = "Failed"
    finished = "Finished"
    canceled = "Canceled"
    partially_executed = "PartiallyExecuted"
    bypassed = "Bypassed"


class PortAction(str, Enum):

    promote = "Promote"
    view_in_data_store = "ViewInDataStore"
    visualize = "Visualize"
    get_schema = "GetSchema"
    create_inference_graph = "CreateInferenceGraph"
    register_model = "RegisterModel"
    promote_as_tabular = "PromoteAsTabular"


class HttpStatusCode(str, Enum):

    continue_enum = "Continue"
    switching_protocols = "SwitchingProtocols"
    processing = "Processing"
    early_hints = "EarlyHints"
    ok = "OK"
    created = "Created"
    accepted = "Accepted"
    non_authoritative_information = "NonAuthoritativeInformation"
    no_content = "NoContent"
    reset_content = "ResetContent"
    partial_content = "PartialContent"
    multi_status = "MultiStatus"
    already_reported = "AlreadyReported"
    im_used = "IMUsed"
    multiple_choices = "MultipleChoices"
    ambiguous = "Ambiguous"
    moved_permanently = "MovedPermanently"
    moved = "Moved"
    found = "Found"
    redirect = "Redirect"
    see_other = "SeeOther"
    redirect_method = "RedirectMethod"
    not_modified = "NotModified"
    use_proxy = "UseProxy"
    unused = "Unused"
    temporary_redirect = "TemporaryRedirect"
    redirect_keep_verb = "RedirectKeepVerb"
    permanent_redirect = "PermanentRedirect"
    bad_request = "BadRequest"
    unauthorized = "Unauthorized"
    payment_required = "PaymentRequired"
    forbidden = "Forbidden"
    not_found = "NotFound"
    method_not_allowed = "MethodNotAllowed"
    not_acceptable = "NotAcceptable"
    proxy_authentication_required = "ProxyAuthenticationRequired"
    request_timeout = "RequestTimeout"
    conflict = "Conflict"
    gone = "Gone"
    length_required = "LengthRequired"
    precondition_failed = "PreconditionFailed"
    request_entity_too_large = "RequestEntityTooLarge"
    request_uri_too_long = "RequestUriTooLong"
    unsupported_media_type = "UnsupportedMediaType"
    requested_range_not_satisfiable = "RequestedRangeNotSatisfiable"
    expectation_failed = "ExpectationFailed"
    misdirected_request = "MisdirectedRequest"
    unprocessable_entity = "UnprocessableEntity"
    locked = "Locked"
    failed_dependency = "FailedDependency"
    upgrade_required = "UpgradeRequired"
    precondition_required = "PreconditionRequired"
    too_many_requests = "TooManyRequests"
    request_header_fields_too_large = "RequestHeaderFieldsTooLarge"
    unavailable_for_legal_reasons = "UnavailableForLegalReasons"
    internal_server_error = "InternalServerError"
    not_implemented = "NotImplemented"
    bad_gateway = "BadGateway"
    service_unavailable = "ServiceUnavailable"
    gateway_timeout = "GatewayTimeout"
    http_version_not_supported = "HttpVersionNotSupported"
    variant_also_negotiates = "VariantAlsoNegotiates"
    insufficient_storage = "InsufficientStorage"
    loop_detected = "LoopDetected"
    not_extended = "NotExtended"
    network_authentication_required = "NetworkAuthenticationRequired"


class PipelineRunStatusCode(str, Enum):

    not_started = "NotStarted"
    running = "Running"
    failed = "Failed"
    finished = "Finished"
    canceled = "Canceled"


class RunType(str, Enum):

    http = "HTTP"
    sdk = "SDK"
    schedule = "Schedule"
    portal = "Portal"


class DatasetDeliveryMechanism(str, Enum):

    direct = "Direct"
    mount = "Mount"
    download = "Download"
    hdfs = "Hdfs"


class DatasetConsumptionType(str, Enum):

    run_input = "RunInput"
    reference = "Reference"


class DatasetOutputType(str, Enum):

    run_output = "RunOutput"
    reference = "Reference"


class MetricValueType(str, Enum):

    int_enum = "Int"
    double = "Double"
    string = "String"
    bool_enum = "Bool"
    artifact = "Artifact"
    malformed = "Malformed"


class ComputeEnvironmentType(str, Enum):

    aci = "ACI"
    aks = "AKS"
    amlcompute = "AMLCOMPUTE"
    iot = "IOT"
    aksendpoint = "AKSENDPOINT"
    mirsinglemodel = "MIRSINGLEMODEL"
    miramlcompute = "MIRAMLCOMPUTE"
    unknown = "UNKNOWN"


class WebServiceState(str, Enum):

    transitioning = "Transitioning"
    healthy = "Healthy"
    unhealthy = "Unhealthy"
    failed = "Failed"
    unschedulable = "Unschedulable"


class RealTimeEndpointOpCode(str, Enum):

    create = "Create"
    update = "Update"
    delete = "Delete"


class RealTimeEndpointOpStatusCode(str, Enum):

    ongoing = "Ongoing"
    succeeded = "Succeeded"
    failed = "Failed"
    succeeded_with_warning = "SucceededWithWarning"


class RealTimeEndpointInternalStepCode(str, Enum):

    about_to_deploy = "AboutToDeploy"
    wait_aks_compute_ready = "WaitAksComputeReady"
    register_models = "RegisterModels"
    create_service_from_models = "CreateServiceFromModels"
    update_service_from_models = "UpdateServiceFromModels"
    wait_service_creating = "WaitServiceCreating"
    fetch_service_related_info = "FetchServiceRelatedInfo"
    test_with_sample_data = "TestWithSampleData"
    about_to_delete = "AboutToDelete"
    delete_deployment = "DeleteDeployment"
    delete_asset = "DeleteAsset"
    delete_image = "DeleteImage"
    delete_model = "DeleteModel"
    delete_service_record = "DeleteServiceRecord"


class KeyType(str, Enum):

    primary = "Primary"
    secondary = "Secondary"


class ExecutionDataStoreMode(str, Enum):

    mount = "Mount"
    download = "Download"
    upload = "Upload"


class DeliveryMechanism(str, Enum):

    direct = "Direct"
    mount = "Mount"
    download = "Download"
    hdfs = "Hdfs"


class OutputMechanism(str, Enum):

    upload = "Upload"
    mount = "Mount"
    hdfs = "Hdfs"


class IdentityType(str, Enum):

    managed = "Managed"
    service_principal = "ServicePrincipal"
    aml_token = "AMLToken"


class VmPriority(str, Enum):

    dedicated = "Dedicated"
    lowpriority = "Lowpriority"


class YarnDeployMode(str, Enum):

    none = "None"
    client = "Client"
    cluster = "Cluster"


class GlobalJobDispatcherSupportedComputeType(str, Enum):

    aml_compute = "AmlCompute"
    aml_k8s = "AmlK8s"


class SuccessfulCommandReturnCode(str, Enum):

    zero = "Zero"
    zero_or_greater = "ZeroOrGreater"


class Framework(str, Enum):

    python = "Python"
    py_spark = "PySpark"
    cntk = "Cntk"
    tensor_flow = "TensorFlow"
    py_torch = "PyTorch"
    py_spark_interactive = "PySparkInteractive"
    r = "R"


class Communicator(str, Enum):

    none = "None"
    parameter_server = "ParameterServer"
    gloo = "Gloo"
    mpi = "Mpi"
    nccl = "Nccl"
    parallel_task = "ParallelTask"


class ModuleRunSettingTypes(str, Enum):

    default = "Default"
    released = "Released"
    testing = "Testing"
    all = "All"


class DataCategory(str, Enum):

    all = "All"
    dataset = "Dataset"
    model = "Model"


class NodeCompositionMode(str, Enum):

    none = "None"
    only_sequential = "OnlySequential"
    full = "Full"


class GraphSdkCodeType(str, Enum):

    python = "Python"
    jupyter_notebook = "JupyterNotebook"
    unknown = "Unknown"
