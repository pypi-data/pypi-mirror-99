# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class StepRunProfile(Model):
    """StepRunProfile.

    :param step_run_id:
    :type step_run_id: str
    :param step_run_number:
    :type step_run_number: int
    :param run_url:
    :type run_url: str
    :param compute_target:
    :type compute_target: str
    :param compute_target_url:
    :type compute_target_url: str
    :param node_id:
    :type node_id: str
    :param node_name:
    :type node_name: str
    :param step_name:
    :type step_name: str
    :param create_time:
    :type create_time: long
    :param start_time:
    :type start_time: long
    :param end_time:
    :type end_time: long
    :param status: Possible values include: 'NotStarted', 'Starting',
     'Provisioning', 'Preparing', 'Queued', 'Running', 'Finalizing',
     'CancelRequested', 'Completed', 'Failed', 'Canceled', 'NotResponding',
     'Unapproved', 'Pausing', 'Paused'
    :type status: str or ~designer.models.RunStatus
    :param status_detail:
    :type status_detail: str
    :param is_reused:
    :type is_reused: bool
    :param reused_pipeline_run_id:
    :type reused_pipeline_run_id: str
    :param reused_step_run_id:
    :type reused_step_run_id: str
    :param tags:
    :type tags: dict[str, str]
    :param status_timeline:
    :type status_timeline: list[~designer.models.RunStatusPeriod]
    """

    _attribute_map = {
        'step_run_id': {'key': 'stepRunId', 'type': 'str'},
        'step_run_number': {'key': 'stepRunNumber', 'type': 'int'},
        'run_url': {'key': 'runUrl', 'type': 'str'},
        'compute_target': {'key': 'computeTarget', 'type': 'str'},
        'compute_target_url': {'key': 'computeTargetUrl', 'type': 'str'},
        'node_id': {'key': 'nodeId', 'type': 'str'},
        'node_name': {'key': 'nodeName', 'type': 'str'},
        'step_name': {'key': 'stepName', 'type': 'str'},
        'create_time': {'key': 'createTime', 'type': 'long'},
        'start_time': {'key': 'startTime', 'type': 'long'},
        'end_time': {'key': 'endTime', 'type': 'long'},
        'status': {'key': 'status', 'type': 'str'},
        'status_detail': {'key': 'statusDetail', 'type': 'str'},
        'is_reused': {'key': 'isReused', 'type': 'bool'},
        'reused_pipeline_run_id': {'key': 'reusedPipelineRunId', 'type': 'str'},
        'reused_step_run_id': {'key': 'reusedStepRunId', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'status_timeline': {'key': 'statusTimeline', 'type': '[RunStatusPeriod]'},
    }

    def __init__(self, *, step_run_id: str=None, step_run_number: int=None, run_url: str=None, compute_target: str=None, compute_target_url: str=None, node_id: str=None, node_name: str=None, step_name: str=None, create_time: int=None, start_time: int=None, end_time: int=None, status=None, status_detail: str=None, is_reused: bool=None, reused_pipeline_run_id: str=None, reused_step_run_id: str=None, tags=None, status_timeline=None, **kwargs) -> None:
        super(StepRunProfile, self).__init__(**kwargs)
        self.step_run_id = step_run_id
        self.step_run_number = step_run_number
        self.run_url = run_url
        self.compute_target = compute_target
        self.compute_target_url = compute_target_url
        self.node_id = node_id
        self.node_name = node_name
        self.step_name = step_name
        self.create_time = create_time
        self.start_time = start_time
        self.end_time = end_time
        self.status = status
        self.status_detail = status_detail
        self.is_reused = is_reused
        self.reused_pipeline_run_id = reused_pipeline_run_id
        self.reused_step_run_id = reused_step_run_id
        self.tags = tags
        self.status_timeline = status_timeline
