# coding: utf-8

"""
    Bedrock

    API documentation for Bedrock platform  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ServerResourcesSchema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict):       The key is attribute name
                                  and the value is attribute type.
      attribute_map (dict):       The key is attribute name
                                  and the value is json key in definition.
      readonly_attributes (dict): Set of readonly attributes (will not be
                                  serialised in request body).
    """
    openapi_types = {
        'cpu': 'str',
        'gpu': 'str',
        'max_replicas': 'int',
        'memory': 'str',
        'min_replicas': 'int',
        'object': 'str'
    }

    attribute_map = {
        'cpu': 'cpu',
        'gpu': 'gpu',
        'max_replicas': 'max_replicas',
        'memory': 'memory',
        'min_replicas': 'min_replicas',
        'object': 'object'
    }

    readonly_attributes = {
        'object'
    }

    def __init__(self, cpu='500m', gpu='0', max_replicas=3, memory='0.5Gi', min_replicas=2, object='resources', **kwargs):  # noqa: E501
        """ServerResourcesSchema - a model defined in OpenAPI"""  # noqa: E501

        self._cpu = None
        self._gpu = None
        self._max_replicas = None
        self._memory = None
        self._min_replicas = None
        self._object = None
        self.discriminator = None

        if cpu is not None:
            self.cpu = cpu
        if gpu is not None:
            self.gpu = gpu
        if max_replicas is not None:
            self.max_replicas = max_replicas
        if memory is not None:
            self.memory = memory
        if min_replicas is not None:
            self.min_replicas = min_replicas

    @classmethod
    def from_response(cls, cpu='500m', gpu='0', max_replicas=3, memory='0.5Gi', min_replicas=2, object='resources', **kwargs):  # noqa: E501
        """Instantiate ServerResourcesSchema from response"""  # noqa: E501
        self = cls.__new__(cls)

        self._cpu = None
        self._gpu = None
        self._max_replicas = None
        self._memory = None
        self._min_replicas = None
        self._object = None
        self.discriminator = None

        if cpu is not None:
            self.cpu = cpu
        if gpu is not None:
            self.gpu = gpu
        if max_replicas is not None:
            self.max_replicas = max_replicas
        if memory is not None:
            self.memory = memory
        if min_replicas is not None:
            self.min_replicas = min_replicas
        if object is not None:
            self.object = object
        return self

    @property
    def cpu(self):
        """Gets the cpu of this ServerResourcesSchema.  # noqa: E501


        :return: The cpu of this ServerResourcesSchema.  # noqa: E501
        :rtype: str
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this ServerResourcesSchema.


        :param cpu: The cpu of this ServerResourcesSchema.  # noqa: E501
        :type: str
        """
        if cpu is not None and not re.search(r'^\d+(?:m|(?:\.\d{0,3}))?$', cpu):  # noqa: E501
            raise ValueError(r"Invalid value for `cpu`, must be a follow pattern or equal to `/^\d+(?:m|(?:\.\d{0,3}))?$/`")  # noqa: E501

        self._cpu = cpu

    @property
    def gpu(self):
        """Gets the gpu of this ServerResourcesSchema.  # noqa: E501


        :return: The gpu of this ServerResourcesSchema.  # noqa: E501
        :rtype: str
        """
        return self._gpu

    @gpu.setter
    def gpu(self, gpu):
        """Sets the gpu of this ServerResourcesSchema.


        :param gpu: The gpu of this ServerResourcesSchema.  # noqa: E501
        :type: str
        """
        if gpu is not None and not re.search(r'^\d+$', gpu):  # noqa: E501
            raise ValueError(r"Invalid value for `gpu`, must be a follow pattern or equal to `/^\d+$/`")  # noqa: E501

        self._gpu = gpu

    @property
    def max_replicas(self):
        """Gets the max_replicas of this ServerResourcesSchema.  # noqa: E501


        :return: The max_replicas of this ServerResourcesSchema.  # noqa: E501
        :rtype: int
        """
        return self._max_replicas

    @max_replicas.setter
    def max_replicas(self, max_replicas):
        """Sets the max_replicas of this ServerResourcesSchema.


        :param max_replicas: The max_replicas of this ServerResourcesSchema.  # noqa: E501
        :type: int
        """
        if max_replicas is not None and max_replicas > 1000:  # noqa: E501
            raise ValueError("Invalid value for `max_replicas`, must be a value less than or equal to `1000`")  # noqa: E501
        if max_replicas is not None and max_replicas < 1:  # noqa: E501
            raise ValueError("Invalid value for `max_replicas`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_replicas = max_replicas

    @property
    def memory(self):
        """Gets the memory of this ServerResourcesSchema.  # noqa: E501


        :return: The memory of this ServerResourcesSchema.  # noqa: E501
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this ServerResourcesSchema.


        :param memory: The memory of this ServerResourcesSchema.  # noqa: E501
        :type: str
        """
        if memory is not None and not re.search(r'^\d+(?:\.\d+)?(?:(?:[eE]\d+)|(?:[KMGTPE]i?))?$', memory):  # noqa: E501
            raise ValueError(r"Invalid value for `memory`, must be a follow pattern or equal to `/^\d+(?:\.\d+)?(?:(?:[eE]\d+)|(?:[KMGTPE]i?))?$/`")  # noqa: E501

        self._memory = memory

    @property
    def min_replicas(self):
        """Gets the min_replicas of this ServerResourcesSchema.  # noqa: E501


        :return: The min_replicas of this ServerResourcesSchema.  # noqa: E501
        :rtype: int
        """
        return self._min_replicas

    @min_replicas.setter
    def min_replicas(self, min_replicas):
        """Sets the min_replicas of this ServerResourcesSchema.


        :param min_replicas: The min_replicas of this ServerResourcesSchema.  # noqa: E501
        :type: int
        """
        if min_replicas is not None and min_replicas < 1:  # noqa: E501
            raise ValueError("Invalid value for `min_replicas`, must be a value greater than or equal to `1`")  # noqa: E501

        self._min_replicas = min_replicas

    @property
    def object(self):
        """Gets the object of this ServerResourcesSchema.  # noqa: E501


        :return: The object of this ServerResourcesSchema.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this ServerResourcesSchema.


        :param object: The object of this ServerResourcesSchema.  # noqa: E501
        :type: str
        """

        self._object = object

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerResourcesSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
