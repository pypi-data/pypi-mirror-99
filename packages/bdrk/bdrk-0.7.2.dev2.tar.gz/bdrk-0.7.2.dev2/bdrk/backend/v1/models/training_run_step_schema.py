# coding: utf-8

"""
    Bedrock

    API documentation for Bedrock platform  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TrainingRunStepSchema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict):       The key is attribute name
                                  and the value is attribute type.
      attribute_map (dict):       The key is attribute name
                                  and the value is json key in definition.
      readonly_attributes (dict): Set of readonly attributes (will not be
                                  serialised in request body).
    """
    openapi_types = {
        'artefact_uploaded': 'bool',
        'attempts': 'int',
        'depends_on': 'list[str]',
        'end_time': 'datetime',
        'entity_id': 'str',
        'id': 'str',
        'metrics': 'object',
        'name': 'str',
        'pipeline_run_id': 'str',
        'resources': 'PipelineResourcesSchema',
        'start_time': 'datetime',
        'status': 'str'
    }

    attribute_map = {
        'artefact_uploaded': 'artefact_uploaded',
        'attempts': 'attempts',
        'depends_on': 'depends_on',
        'end_time': 'end_time',
        'entity_id': 'entity_id',
        'id': 'id',
        'metrics': 'metrics',
        'name': 'name',
        'pipeline_run_id': 'pipeline_run_id',
        'resources': 'resources',
        'start_time': 'start_time',
        'status': 'status'
    }

    readonly_attributes = {
        'artefact_uploaded',
        'attempts',
        'depends_on',
        'end_time',
        'entity_id',
        'metrics',
        'name',
        'pipeline_run_id',
        'resources',
        'start_time',
    }

    def __init__(self, artefact_uploaded=None, attempts=None, depends_on=None, end_time=None, entity_id=None, id=None, metrics=None, name=None, pipeline_run_id=None, resources=None, start_time=None, status=None, **kwargs):  # noqa: E501
        """TrainingRunStepSchema - a model defined in OpenAPI"""  # noqa: E501

        self._artefact_uploaded = None
        self._attempts = None
        self._depends_on = None
        self._end_time = None
        self._entity_id = None
        self._id = None
        self._metrics = None
        self._name = None
        self._pipeline_run_id = None
        self._resources = None
        self._start_time = None
        self._status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if status is not None:
            self.status = status

    @classmethod
    def from_response(cls, artefact_uploaded=None, attempts=None, depends_on=None, end_time=None, entity_id=None, id=None, metrics=None, name=None, pipeline_run_id=None, resources=None, start_time=None, status=None, **kwargs):  # noqa: E501
        """Instantiate TrainingRunStepSchema from response"""  # noqa: E501
        self = cls.__new__(cls)

        self._artefact_uploaded = None
        self._attempts = None
        self._depends_on = None
        self._end_time = None
        self._entity_id = None
        self._id = None
        self._metrics = None
        self._name = None
        self._pipeline_run_id = None
        self._resources = None
        self._start_time = None
        self._status = None
        self.discriminator = None

        if artefact_uploaded is not None:
            self.artefact_uploaded = artefact_uploaded
        if attempts is not None:
            self.attempts = attempts
        if depends_on is not None:
            self.depends_on = depends_on
        if end_time is not None:
            self.end_time = end_time
        if entity_id is not None:
            self.entity_id = entity_id
        if id is not None:
            self.id = id
        if metrics is not None:
            self.metrics = metrics
        if name is not None:
            self.name = name
        if pipeline_run_id is not None:
            self.pipeline_run_id = pipeline_run_id
        if resources is not None:
            self.resources = resources
        if start_time is not None:
            self.start_time = start_time
        if status is not None:
            self.status = status
        return self

    @property
    def artefact_uploaded(self):
        """Gets the artefact_uploaded of this TrainingRunStepSchema.  # noqa: E501


        :return: The artefact_uploaded of this TrainingRunStepSchema.  # noqa: E501
        :rtype: bool
        """
        return self._artefact_uploaded

    @artefact_uploaded.setter
    def artefact_uploaded(self, artefact_uploaded):
        """Sets the artefact_uploaded of this TrainingRunStepSchema.


        :param artefact_uploaded: The artefact_uploaded of this TrainingRunStepSchema.  # noqa: E501
        :type: bool
        """

        self._artefact_uploaded = artefact_uploaded

    @property
    def attempts(self):
        """Gets the attempts of this TrainingRunStepSchema.  # noqa: E501


        :return: The attempts of this TrainingRunStepSchema.  # noqa: E501
        :rtype: int
        """
        return self._attempts

    @attempts.setter
    def attempts(self, attempts):
        """Sets the attempts of this TrainingRunStepSchema.


        :param attempts: The attempts of this TrainingRunStepSchema.  # noqa: E501
        :type: int
        """

        self._attempts = attempts

    @property
    def depends_on(self):
        """Gets the depends_on of this TrainingRunStepSchema.  # noqa: E501


        :return: The depends_on of this TrainingRunStepSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._depends_on

    @depends_on.setter
    def depends_on(self, depends_on):
        """Sets the depends_on of this TrainingRunStepSchema.


        :param depends_on: The depends_on of this TrainingRunStepSchema.  # noqa: E501
        :type: list[str]
        """

        self._depends_on = depends_on

    @property
    def end_time(self):
        """Gets the end_time of this TrainingRunStepSchema.  # noqa: E501


        :return: The end_time of this TrainingRunStepSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TrainingRunStepSchema.


        :param end_time: The end_time of this TrainingRunStepSchema.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def entity_id(self):
        """Gets the entity_id of this TrainingRunStepSchema.  # noqa: E501


        :return: The entity_id of this TrainingRunStepSchema.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this TrainingRunStepSchema.


        :param entity_id: The entity_id of this TrainingRunStepSchema.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def id(self):
        """Gets the id of this TrainingRunStepSchema.  # noqa: E501


        :return: The id of this TrainingRunStepSchema.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TrainingRunStepSchema.


        :param id: The id of this TrainingRunStepSchema.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def metrics(self):
        """Gets the metrics of this TrainingRunStepSchema.  # noqa: E501


        :return: The metrics of this TrainingRunStepSchema.  # noqa: E501
        :rtype: object
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this TrainingRunStepSchema.


        :param metrics: The metrics of this TrainingRunStepSchema.  # noqa: E501
        :type: object
        """

        self._metrics = metrics

    @property
    def name(self):
        """Gets the name of this TrainingRunStepSchema.  # noqa: E501


        :return: The name of this TrainingRunStepSchema.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrainingRunStepSchema.


        :param name: The name of this TrainingRunStepSchema.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 1000:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `1000`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def pipeline_run_id(self):
        """Gets the pipeline_run_id of this TrainingRunStepSchema.  # noqa: E501


        :return: The pipeline_run_id of this TrainingRunStepSchema.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_run_id

    @pipeline_run_id.setter
    def pipeline_run_id(self, pipeline_run_id):
        """Sets the pipeline_run_id of this TrainingRunStepSchema.


        :param pipeline_run_id: The pipeline_run_id of this TrainingRunStepSchema.  # noqa: E501
        :type: str
        """

        self._pipeline_run_id = pipeline_run_id

    @property
    def resources(self):
        """Gets the resources of this TrainingRunStepSchema.  # noqa: E501

        Resources required for running pipeline  # noqa: E501

        :return: The resources of this TrainingRunStepSchema.  # noqa: E501
        :rtype: PipelineResourcesSchema
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this TrainingRunStepSchema.

        Resources required for running pipeline  # noqa: E501

        :param resources: The resources of this TrainingRunStepSchema.  # noqa: E501
        :type: PipelineResourcesSchema
        """

        self._resources = resources

    @property
    def start_time(self):
        """Gets the start_time of this TrainingRunStepSchema.  # noqa: E501


        :return: The start_time of this TrainingRunStepSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TrainingRunStepSchema.


        :param start_time: The start_time of this TrainingRunStepSchema.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this TrainingRunStepSchema.  # noqa: E501


        :return: The status of this TrainingRunStepSchema.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TrainingRunStepSchema.


        :param status: The status of this TrainingRunStepSchema.  # noqa: E501
        :type: str
        """
        allowed_values = ["Accepted", "Rejected", "Queued", "Running", "Failed", "Succeeded", "Unknown", "Stopping", "Stopped"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrainingRunStepSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
