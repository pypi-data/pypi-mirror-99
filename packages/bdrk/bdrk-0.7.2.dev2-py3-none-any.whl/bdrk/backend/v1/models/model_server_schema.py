# coding: utf-8

"""
    Bedrock

    API documentation for Bedrock platform  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ModelServerSchema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict):       The key is attribute name
                                  and the value is attribute type.
      attribute_map (dict):       The key is attribute name
                                  and the value is json key in definition.
      readonly_attributes (dict): Set of readonly attributes (will not be
                                  serialised in request body).
    """
    openapi_types = {
        'created_at': 'datetime',
        'deploy_mode': 'str',
        'deploy_type': 'str',
        'deployed_by': 'UserSchema',
        'endpoint_id': 'str',
        'id': 'str',
        'image_path': 'str',
        'model_version_id': 'str',
        'object': 'str',
        'parameters': 'object',
        'resources': 'ServerResourcesSchema',
        'secrets': 'object',
        'source': 'GitSourceSchema',
        'status': 'str',
        'undeployed_at': 'datetime',
        'undeployed_by': 'UserSchema',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'created_at': 'created_at',
        'deploy_mode': 'deploy_mode',
        'deploy_type': 'deploy_type',
        'deployed_by': 'deployed_by',
        'endpoint_id': 'endpoint_id',
        'id': 'id',
        'image_path': 'image_path',
        'model_version_id': 'model_version_id',
        'object': 'object',
        'parameters': 'parameters',
        'resources': 'resources',
        'secrets': 'secrets',
        'source': 'source',
        'status': 'status',
        'undeployed_at': 'undeployed_at',
        'undeployed_by': 'undeployed_by',
        'updated_at': 'updated_at'
    }

    readonly_attributes = {
        'created_at',
        'deploy_mode',
        'deploy_type',
        'deployed_by',
        'endpoint_id',
        'id',
        'object',
        'status',
        'undeployed_at',
        'undeployed_by',
        'updated_at'
    }

    def __init__(self, created_at=None, deploy_mode=None, deploy_type=None, deployed_by=None, endpoint_id=None, id=None, image_path=None, model_version_id=None, object='server', parameters=None, resources=None, secrets=None, source=None, status=None, undeployed_at=None, undeployed_by=None, updated_at=None, **kwargs):  # noqa: E501
        """ModelServerSchema - a model defined in OpenAPI"""  # noqa: E501

        self._created_at = None
        self._deploy_mode = None
        self._deploy_type = None
        self._deployed_by = None
        self._endpoint_id = None
        self._id = None
        self._image_path = None
        self._model_version_id = None
        self._object = None
        self._parameters = None
        self._resources = None
        self._secrets = None
        self._source = None
        self._status = None
        self._undeployed_at = None
        self._undeployed_by = None
        self._updated_at = None
        self.discriminator = None

        if image_path is not None:
            self.image_path = image_path
        self.model_version_id = model_version_id
        if parameters is not None:
            self.parameters = parameters
        if resources is not None:
            self.resources = resources
        if secrets is not None:
            self.secrets = secrets
        if source is not None:
            self.source = source

    @classmethod
    def from_response(cls, created_at=None, deploy_mode=None, deploy_type=None, deployed_by=None, endpoint_id=None, id=None, image_path=None, model_version_id=None, object='server', parameters=None, resources=None, secrets=None, source=None, status=None, undeployed_at=None, undeployed_by=None, updated_at=None, **kwargs):  # noqa: E501
        """Instantiate ModelServerSchema from response"""  # noqa: E501
        self = cls.__new__(cls)

        self._created_at = None
        self._deploy_mode = None
        self._deploy_type = None
        self._deployed_by = None
        self._endpoint_id = None
        self._id = None
        self._image_path = None
        self._model_version_id = None
        self._object = None
        self._parameters = None
        self._resources = None
        self._secrets = None
        self._source = None
        self._status = None
        self._undeployed_at = None
        self._undeployed_by = None
        self._updated_at = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if deploy_mode is not None:
            self.deploy_mode = deploy_mode
        self.deploy_type = deploy_type
        if deployed_by is not None:
            self.deployed_by = deployed_by
        self.endpoint_id = endpoint_id
        if id is not None:
            self.id = id
        if image_path is not None:
            self.image_path = image_path
        self.model_version_id = model_version_id
        if object is not None:
            self.object = object
        if parameters is not None:
            self.parameters = parameters
        if resources is not None:
            self.resources = resources
        if source is not None:
            self.source = source
        if status is not None:
            self.status = status
        if undeployed_at is not None:
            self.undeployed_at = undeployed_at
        if undeployed_by is not None:
            self.undeployed_by = undeployed_by
        if updated_at is not None:
            self.updated_at = updated_at
        return self

    @property
    def created_at(self):
        """Gets the created_at of this ModelServerSchema.  # noqa: E501


        :return: The created_at of this ModelServerSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ModelServerSchema.


        :param created_at: The created_at of this ModelServerSchema.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def deploy_mode(self):
        """Gets the deploy_mode of this ModelServerSchema.  # noqa: E501


        :return: The deploy_mode of this ModelServerSchema.  # noqa: E501
        :rtype: str
        """
        return self._deploy_mode

    @deploy_mode.setter
    def deploy_mode(self, deploy_mode):
        """Sets the deploy_mode of this ModelServerSchema.


        :param deploy_mode: The deploy_mode of this ModelServerSchema.  # noqa: E501
        :type: str
        """
        allowed_values = ["EXPRESS", "MANUAL"]  # noqa: E501
        if deploy_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `deploy_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(deploy_mode, allowed_values)
            )

        self._deploy_mode = deploy_mode

    @property
    def deploy_type(self):
        """Gets the deploy_type of this ModelServerSchema.  # noqa: E501


        :return: The deploy_type of this ModelServerSchema.  # noqa: E501
        :rtype: str
        """
        return self._deploy_type

    @deploy_type.setter
    def deploy_type(self, deploy_type):
        """Sets the deploy_type of this ModelServerSchema.


        :param deploy_type: The deploy_type of this ModelServerSchema.  # noqa: E501
        :type: str
        """
        if deploy_type is None:
            raise ValueError("Invalid value for `deploy_type`, must not be `None`")  # noqa: E501

        self._deploy_type = deploy_type

    @property
    def deployed_by(self):
        """Gets the deployed_by of this ModelServerSchema.  # noqa: E501


        :return: The deployed_by of this ModelServerSchema.  # noqa: E501
        :rtype: UserSchema
        """
        return self._deployed_by

    @deployed_by.setter
    def deployed_by(self, deployed_by):
        """Sets the deployed_by of this ModelServerSchema.


        :param deployed_by: The deployed_by of this ModelServerSchema.  # noqa: E501
        :type: UserSchema
        """

        self._deployed_by = deployed_by

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this ModelServerSchema.  # noqa: E501


        :return: The endpoint_id of this ModelServerSchema.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this ModelServerSchema.


        :param endpoint_id: The endpoint_id of this ModelServerSchema.  # noqa: E501
        :type: str
        """
        if endpoint_id is None:
            raise ValueError("Invalid value for `endpoint_id`, must not be `None`")  # noqa: E501

        self._endpoint_id = endpoint_id

    @property
    def id(self):
        """Gets the id of this ModelServerSchema.  # noqa: E501


        :return: The id of this ModelServerSchema.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelServerSchema.


        :param id: The id of this ModelServerSchema.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def image_path(self):
        """Gets the image_path of this ModelServerSchema.  # noqa: E501


        :return: The image_path of this ModelServerSchema.  # noqa: E501
        :rtype: str
        """
        return self._image_path

    @image_path.setter
    def image_path(self, image_path):
        """Sets the image_path of this ModelServerSchema.


        :param image_path: The image_path of this ModelServerSchema.  # noqa: E501
        :type: str
        """
        if image_path is not None and len(image_path) > 1000:
            raise ValueError("Invalid value for `image_path`, length must be less than or equal to `1000`")  # noqa: E501
        if image_path is not None and len(image_path) < 1:
            raise ValueError("Invalid value for `image_path`, length must be greater than or equal to `1`")  # noqa: E501

        self._image_path = image_path

    @property
    def model_version_id(self):
        """Gets the model_version_id of this ModelServerSchema.  # noqa: E501


        :return: The model_version_id of this ModelServerSchema.  # noqa: E501
        :rtype: str
        """
        return self._model_version_id

    @model_version_id.setter
    def model_version_id(self, model_version_id):
        """Sets the model_version_id of this ModelServerSchema.


        :param model_version_id: The model_version_id of this ModelServerSchema.  # noqa: E501
        :type: str
        """
        if model_version_id is None:
            raise ValueError("Invalid value for `model_version_id`, must not be `None`")  # noqa: E501

        self._model_version_id = model_version_id

    @property
    def object(self):
        """Gets the object of this ModelServerSchema.  # noqa: E501


        :return: The object of this ModelServerSchema.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this ModelServerSchema.


        :param object: The object of this ModelServerSchema.  # noqa: E501
        :type: str
        """

        self._object = object

    @property
    def parameters(self):
        """Gets the parameters of this ModelServerSchema.  # noqa: E501


        :return: The parameters of this ModelServerSchema.  # noqa: E501
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ModelServerSchema.


        :param parameters: The parameters of this ModelServerSchema.  # noqa: E501
        :type: object
        """

        self._parameters = parameters

    @property
    def resources(self):
        """Gets the resources of this ModelServerSchema.  # noqa: E501


        :return: The resources of this ModelServerSchema.  # noqa: E501
        :rtype: ServerResourcesSchema
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ModelServerSchema.


        :param resources: The resources of this ModelServerSchema.  # noqa: E501
        :type: ServerResourcesSchema
        """

        self._resources = resources

    @property
    def secrets(self):
        """Gets the secrets of this ModelServerSchema.  # noqa: E501


        :return: The secrets of this ModelServerSchema.  # noqa: E501
        :rtype: object
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this ModelServerSchema.


        :param secrets: The secrets of this ModelServerSchema.  # noqa: E501
        :type: object
        """

        self._secrets = secrets

    @property
    def source(self):
        """Gets the source of this ModelServerSchema.  # noqa: E501


        :return: The source of this ModelServerSchema.  # noqa: E501
        :rtype: GitSourceSchema
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ModelServerSchema.


        :param source: The source of this ModelServerSchema.  # noqa: E501
        :type: GitSourceSchema
        """

        self._source = source

    @property
    def status(self):
        """Gets the status of this ModelServerSchema.  # noqa: E501


        :return: The status of this ModelServerSchema.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ModelServerSchema.


        :param status: The status of this ModelServerSchema.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEPLOYING", "DEPLOYED", "STOPPING", "STOPPED", "FAILED", "ERROR", "NEW"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def undeployed_at(self):
        """Gets the undeployed_at of this ModelServerSchema.  # noqa: E501


        :return: The undeployed_at of this ModelServerSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._undeployed_at

    @undeployed_at.setter
    def undeployed_at(self, undeployed_at):
        """Sets the undeployed_at of this ModelServerSchema.


        :param undeployed_at: The undeployed_at of this ModelServerSchema.  # noqa: E501
        :type: datetime
        """

        self._undeployed_at = undeployed_at

    @property
    def undeployed_by(self):
        """Gets the undeployed_by of this ModelServerSchema.  # noqa: E501


        :return: The undeployed_by of this ModelServerSchema.  # noqa: E501
        :rtype: UserSchema
        """
        return self._undeployed_by

    @undeployed_by.setter
    def undeployed_by(self, undeployed_by):
        """Sets the undeployed_by of this ModelServerSchema.


        :param undeployed_by: The undeployed_by of this ModelServerSchema.  # noqa: E501
        :type: UserSchema
        """

        self._undeployed_by = undeployed_by

    @property
    def updated_at(self):
        """Gets the updated_at of this ModelServerSchema.  # noqa: E501


        :return: The updated_at of this ModelServerSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ModelServerSchema.


        :param updated_at: The updated_at of this ModelServerSchema.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelServerSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
