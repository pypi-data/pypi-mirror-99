# coding: utf-8

"""
    Bedrock

    API documentation for Bedrock platform  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ModelArtefactCollectionSchema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict):       The key is attribute name
                                  and the value is attribute type.
      attribute_map (dict):       The key is attribute name
                                  and the value is json key in definition.
      readonly_attributes (dict): Set of readonly attributes (will not be
                                  serialised in request body).
    """
    openapi_types = {
        'created_at': 'datetime',
        'created_by': 'str',
        'entity_id': 'str',
        'id': 'str',
        'last_version_created_at': 'datetime',
        'last_version_id': 'str',
        'model_id': 'str',
        'object': 'str',
        'pipeline_id': 'str',
        'project_id': 'str',
        'public_id': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'created_at': 'created_at',
        'created_by': 'created_by',
        'entity_id': 'entity_id',
        'id': 'id',
        'last_version_created_at': 'last_version_created_at',
        'last_version_id': 'last_version_id',
        'model_id': 'model_id',
        'object': 'object',
        'pipeline_id': 'pipeline_id',
        'project_id': 'project_id',
        'public_id': 'public_id',
        'updated_at': 'updated_at'
    }

    readonly_attributes = {
        'created_at',
        'created_by',
        'entity_id',
        'id',
        'last_version_created_at',
        'last_version_id',
        'object',
        'pipeline_id',
        'project_id',
        'public_id',
        'updated_at'
    }

    def __init__(self, created_at=None, created_by=None, entity_id=None, id=None, last_version_created_at=None, last_version_id=None, model_id=None, object='modelRepository', pipeline_id=None, project_id=None, public_id=None, updated_at=None, **kwargs):  # noqa: E501
        """ModelArtefactCollectionSchema - a model defined in OpenAPI"""  # noqa: E501

        self._created_at = None
        self._created_by = None
        self._entity_id = None
        self._id = None
        self._last_version_created_at = None
        self._last_version_id = None
        self._model_id = None
        self._object = None
        self._pipeline_id = None
        self._project_id = None
        self._public_id = None
        self._updated_at = None
        self.discriminator = None

        self.model_id = model_id

    @classmethod
    def from_response(cls, created_at=None, created_by=None, entity_id=None, id=None, last_version_created_at=None, last_version_id=None, model_id=None, object='modelRepository', pipeline_id=None, project_id=None, public_id=None, updated_at=None, **kwargs):  # noqa: E501
        """Instantiate ModelArtefactCollectionSchema from response"""  # noqa: E501
        self = cls.__new__(cls)

        self._created_at = None
        self._created_by = None
        self._entity_id = None
        self._id = None
        self._last_version_created_at = None
        self._last_version_id = None
        self._model_id = None
        self._object = None
        self._pipeline_id = None
        self._project_id = None
        self._public_id = None
        self._updated_at = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if entity_id is not None:
            self.entity_id = entity_id
        if id is not None:
            self.id = id
        if last_version_created_at is not None:
            self.last_version_created_at = last_version_created_at
        if last_version_id is not None:
            self.last_version_id = last_version_id
        if object is not None:
            self.object = object
        self.pipeline_id = pipeline_id
        if project_id is not None:
            self.project_id = project_id
        if public_id is not None:
            self.public_id = public_id
        if updated_at is not None:
            self.updated_at = updated_at
        return self

    @property
    def created_at(self):
        """Gets the created_at of this ModelArtefactCollectionSchema.  # noqa: E501


        :return: The created_at of this ModelArtefactCollectionSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ModelArtefactCollectionSchema.


        :param created_at: The created_at of this ModelArtefactCollectionSchema.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this ModelArtefactCollectionSchema.  # noqa: E501


        :return: The created_by of this ModelArtefactCollectionSchema.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ModelArtefactCollectionSchema.


        :param created_by: The created_by of this ModelArtefactCollectionSchema.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def entity_id(self):
        """Gets the entity_id of this ModelArtefactCollectionSchema.  # noqa: E501


        :return: The entity_id of this ModelArtefactCollectionSchema.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this ModelArtefactCollectionSchema.


        :param entity_id: The entity_id of this ModelArtefactCollectionSchema.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def id(self):
        """Gets the id of this ModelArtefactCollectionSchema.  # noqa: E501


        :return: The id of this ModelArtefactCollectionSchema.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelArtefactCollectionSchema.


        :param id: The id of this ModelArtefactCollectionSchema.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_version_created_at(self):
        """Gets the last_version_created_at of this ModelArtefactCollectionSchema.  # noqa: E501


        :return: The last_version_created_at of this ModelArtefactCollectionSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._last_version_created_at

    @last_version_created_at.setter
    def last_version_created_at(self, last_version_created_at):
        """Sets the last_version_created_at of this ModelArtefactCollectionSchema.


        :param last_version_created_at: The last_version_created_at of this ModelArtefactCollectionSchema.  # noqa: E501
        :type: datetime
        """

        self._last_version_created_at = last_version_created_at

    @property
    def last_version_id(self):
        """Gets the last_version_id of this ModelArtefactCollectionSchema.  # noqa: E501


        :return: The last_version_id of this ModelArtefactCollectionSchema.  # noqa: E501
        :rtype: str
        """
        return self._last_version_id

    @last_version_id.setter
    def last_version_id(self, last_version_id):
        """Sets the last_version_id of this ModelArtefactCollectionSchema.


        :param last_version_id: The last_version_id of this ModelArtefactCollectionSchema.  # noqa: E501
        :type: str
        """

        self._last_version_id = last_version_id

    @property
    def model_id(self):
        """Gets the model_id of this ModelArtefactCollectionSchema.  # noqa: E501


        :return: The model_id of this ModelArtefactCollectionSchema.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this ModelArtefactCollectionSchema.


        :param model_id: The model_id of this ModelArtefactCollectionSchema.  # noqa: E501
        :type: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")  # noqa: E501

        self._model_id = model_id

    @property
    def object(self):
        """Gets the object of this ModelArtefactCollectionSchema.  # noqa: E501


        :return: The object of this ModelArtefactCollectionSchema.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this ModelArtefactCollectionSchema.


        :param object: The object of this ModelArtefactCollectionSchema.  # noqa: E501
        :type: str
        """

        self._object = object

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this ModelArtefactCollectionSchema.  # noqa: E501


        :return: The pipeline_id of this ModelArtefactCollectionSchema.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this ModelArtefactCollectionSchema.


        :param pipeline_id: The pipeline_id of this ModelArtefactCollectionSchema.  # noqa: E501
        :type: str
        """

        self._pipeline_id = pipeline_id

    @property
    def project_id(self):
        """Gets the project_id of this ModelArtefactCollectionSchema.  # noqa: E501


        :return: The project_id of this ModelArtefactCollectionSchema.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ModelArtefactCollectionSchema.


        :param project_id: The project_id of this ModelArtefactCollectionSchema.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def public_id(self):
        """Gets the public_id of this ModelArtefactCollectionSchema.  # noqa: E501


        :return: The public_id of this ModelArtefactCollectionSchema.  # noqa: E501
        :rtype: str
        """
        return self._public_id

    @public_id.setter
    def public_id(self, public_id):
        """Sets the public_id of this ModelArtefactCollectionSchema.


        :param public_id: The public_id of this ModelArtefactCollectionSchema.  # noqa: E501
        :type: str
        """

        self._public_id = public_id

    @property
    def updated_at(self):
        """Gets the updated_at of this ModelArtefactCollectionSchema.  # noqa: E501


        :return: The updated_at of this ModelArtefactCollectionSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ModelArtefactCollectionSchema.


        :param updated_at: The updated_at of this ModelArtefactCollectionSchema.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelArtefactCollectionSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
