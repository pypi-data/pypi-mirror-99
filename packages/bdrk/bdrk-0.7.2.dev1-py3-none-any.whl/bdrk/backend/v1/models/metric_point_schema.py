# coding: utf-8

"""
    Bedrock

    API documentation for Bedrock platform  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class MetricPointSchema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict):       The key is attribute name
                                  and the value is attribute type.
      attribute_map (dict):       The key is attribute name
                                  and the value is json key in definition.
      readonly_attributes (dict): Set of readonly attributes (will not be
                                  serialised in request body).
    """
    openapi_types = {
        'timestamp': 'datetime',
        'value': 'float',
        'x': 'float'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'value': 'value',
        'x': 'x'
    }

    readonly_attributes = {
    }

    def __init__(self, timestamp=None, value=None, x=None, **kwargs):  # noqa: E501
        """MetricPointSchema - a model defined in OpenAPI"""  # noqa: E501

        self._timestamp = None
        self._value = None
        self._x = None
        self.discriminator = None

        if timestamp is not None:
            self.timestamp = timestamp
        if value is not None:
            self.value = value
        if x is not None:
            self.x = x

    @classmethod
    def from_response(cls, timestamp=None, value=None, x=None, **kwargs):  # noqa: E501
        """Instantiate MetricPointSchema from response"""  # noqa: E501
        self = cls.__new__(cls)

        self._timestamp = None
        self._value = None
        self._x = None
        self.discriminator = None

        return self

    @property
    def timestamp(self):
        """Gets the timestamp of this MetricPointSchema.  # noqa: E501


        :return: The timestamp of this MetricPointSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MetricPointSchema.


        :param timestamp: The timestamp of this MetricPointSchema.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def value(self):
        """Gets the value of this MetricPointSchema.  # noqa: E501


        :return: The value of this MetricPointSchema.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MetricPointSchema.


        :param value: The value of this MetricPointSchema.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def x(self):
        """Gets the x of this MetricPointSchema.  # noqa: E501


        :return: The x of this MetricPointSchema.  # noqa: E501
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this MetricPointSchema.


        :param x: The x of this MetricPointSchema.  # noqa: E501
        :type: float
        """

        self._x = x

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricPointSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
