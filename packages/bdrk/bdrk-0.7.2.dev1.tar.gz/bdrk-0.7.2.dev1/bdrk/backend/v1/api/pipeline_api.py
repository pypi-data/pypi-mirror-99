# coding: utf-8

"""
    Bedrock

    API documentation for Bedrock platform  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bdrk.backend.v1.api_client import ApiClient
from bdrk.backend.v1.exceptions import (
    ApiTypeError,
    ApiValueError
)


class PipelineApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_upstream_model(self, project_id, pipeline_id, run_id, step_name, **kwargs):  # noqa: E501
        """add_upstream_model  # noqa: E501

        Add a list of artefacts to the training run's upstream model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_upstream_model(project_id, pipeline_id, run_id, step_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_id: Project ID of the pipeline. (required)
        :param str pipeline_id: Pipeline ID. (required)
        :param int run_id: Run ID. (required)
        :param str step_name: Step name. (required)
        :param list[AddUpstreamModelRequestSchema] add_upstream_model_request_schema:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrainingRunStepSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.add_upstream_model_with_http_info(project_id, pipeline_id, run_id, step_name, **kwargs)  # noqa: E501

    def add_upstream_model_with_http_info(self, project_id, pipeline_id, run_id, step_name, **kwargs):  # noqa: E501
        """add_upstream_model  # noqa: E501

        Add a list of artefacts to the training run's upstream model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_upstream_model_with_http_info(project_id, pipeline_id, run_id, step_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_id: Project ID of the pipeline. (required)
        :param str pipeline_id: Pipeline ID. (required)
        :param int run_id: Run ID. (required)
        :param str step_name: Step name. (required)
        :param list[AddUpstreamModelRequestSchema] add_upstream_model_request_schema:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrainingRunStepSchema, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id', 'pipeline_id', 'run_id', 'step_name', 'add_upstream_model_request_schema']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_upstream_model" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in local_var_params or
                local_var_params['project_id'] is None):
            raise ApiValueError("Missing the required parameter `project_id` when calling `add_upstream_model`")  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in local_var_params or
                local_var_params['pipeline_id'] is None):
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `add_upstream_model`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in local_var_params or
                local_var_params['run_id'] is None):
            raise ApiValueError("Missing the required parameter `run_id` when calling `add_upstream_model`")  # noqa: E501
        # verify the required parameter 'step_name' is set
        if ('step_name' not in local_var_params or
                local_var_params['step_name'] is None):
            raise ApiValueError("Missing the required parameter `step_name` when calling `add_upstream_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in local_var_params:
            path_params['pipeline_id'] = local_var_params['pipeline_id']  # noqa: E501
        if 'run_id' in local_var_params:
            path_params['run_id'] = local_var_params['run_id']  # noqa: E501
        if 'step_name' in local_var_params:
            path_params['step_name'] = local_var_params['step_name']  # noqa: E501

        query_params = []
        if 'project_id' in local_var_params:
            query_params.append(('project_id', local_var_params['project_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_upstream_model_request_schema' in local_var_params:
            body_params = local_var_params['add_upstream_model_request_schema']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessTokenAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bdrk/training_pipeline/{pipeline_id}/run/{run_id}/step/{step_name}/upstream_model', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrainingRunStepSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_training_pipeline(self, project_id, **kwargs):  # noqa: E501
        """create_training_pipeline  # noqa: E501

        Create a new training pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_training_pipeline(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_id: Project ID of the pipeline. (required)
        :param TrainingPipelineSchema training_pipeline_schema:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrainingPipelineSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_training_pipeline_with_http_info(project_id, **kwargs)  # noqa: E501

    def create_training_pipeline_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """create_training_pipeline  # noqa: E501

        Create a new training pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_training_pipeline_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_id: Project ID of the pipeline. (required)
        :param TrainingPipelineSchema training_pipeline_schema:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrainingPipelineSchema, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id', 'training_pipeline_schema']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_training_pipeline" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in local_var_params or
                local_var_params['project_id'] is None):
            raise ApiValueError("Missing the required parameter `project_id` when calling `create_training_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in local_var_params:
            query_params.append(('project_id', local_var_params['project_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'training_pipeline_schema' in local_var_params:
            body_params = local_var_params['training_pipeline_schema']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessTokenAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/training_pipeline', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrainingPipelineSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_step_artefact_upload_url(self, pipeline_id, run_id, step_name, project_id, **kwargs):  # noqa: E501
        """get_step_artefact_upload_url  # noqa: E501

        Gets signed URL for artefact of a pipeline run step.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_step_artefact_upload_url(pipeline_id, run_id, step_name, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str pipeline_id: Pipeline ID (required)
        :param int run_id: ID of pipeline run to upload artefact to (required)
        :param str step_name: Pipeline run step name (required)
        :param str project_id: Project ID of pipeline. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ArtefactUploadUrlSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_step_artefact_upload_url_with_http_info(pipeline_id, run_id, step_name, project_id, **kwargs)  # noqa: E501

    def get_step_artefact_upload_url_with_http_info(self, pipeline_id, run_id, step_name, project_id, **kwargs):  # noqa: E501
        """get_step_artefact_upload_url  # noqa: E501

        Gets signed URL for artefact of a pipeline run step.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_step_artefact_upload_url_with_http_info(pipeline_id, run_id, step_name, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str pipeline_id: Pipeline ID (required)
        :param int run_id: ID of pipeline run to upload artefact to (required)
        :param str step_name: Pipeline run step name (required)
        :param str project_id: Project ID of pipeline. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ArtefactUploadUrlSchema, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pipeline_id', 'run_id', 'step_name', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_step_artefact_upload_url" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in local_var_params or
                local_var_params['pipeline_id'] is None):
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `get_step_artefact_upload_url`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in local_var_params or
                local_var_params['run_id'] is None):
            raise ApiValueError("Missing the required parameter `run_id` when calling `get_step_artefact_upload_url`")  # noqa: E501
        # verify the required parameter 'step_name' is set
        if ('step_name' not in local_var_params or
                local_var_params['step_name'] is None):
            raise ApiValueError("Missing the required parameter `step_name` when calling `get_step_artefact_upload_url`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in local_var_params or
                local_var_params['project_id'] is None):
            raise ApiValueError("Missing the required parameter `project_id` when calling `get_step_artefact_upload_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in local_var_params:
            path_params['pipeline_id'] = local_var_params['pipeline_id']  # noqa: E501
        if 'run_id' in local_var_params:
            path_params['run_id'] = local_var_params['run_id']  # noqa: E501
        if 'step_name' in local_var_params:
            path_params['step_name'] = local_var_params['step_name']  # noqa: E501

        query_params = []
        if 'project_id' in local_var_params:
            query_params.append(('project_id', local_var_params['project_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessTokenAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/training_pipeline/{pipeline_id}/run/{run_id}/step/{step_name}/model/upload_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArtefactUploadUrlSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_training_pipeline_by_id(self, pipeline_id, project_id, **kwargs):  # noqa: E501
        """get_training_pipeline_by_id  # noqa: E501

        Get a specific training pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_training_pipeline_by_id(pipeline_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str pipeline_id: The training pipeline's ID. (required)
        :param str project_id: Project ID of pipeline. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrainingPipelineSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_training_pipeline_by_id_with_http_info(pipeline_id, project_id, **kwargs)  # noqa: E501

    def get_training_pipeline_by_id_with_http_info(self, pipeline_id, project_id, **kwargs):  # noqa: E501
        """get_training_pipeline_by_id  # noqa: E501

        Get a specific training pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_training_pipeline_by_id_with_http_info(pipeline_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str pipeline_id: The training pipeline's ID. (required)
        :param str project_id: Project ID of pipeline. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrainingPipelineSchema, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pipeline_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_training_pipeline_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in local_var_params or
                local_var_params['pipeline_id'] is None):
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `get_training_pipeline_by_id`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in local_var_params or
                local_var_params['project_id'] is None):
            raise ApiValueError("Missing the required parameter `project_id` when calling `get_training_pipeline_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in local_var_params:
            path_params['pipeline_id'] = local_var_params['pipeline_id']  # noqa: E501

        query_params = []
        if 'project_id' in local_var_params:
            query_params.append(('project_id', local_var_params['project_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessTokenAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/training_pipeline/{pipeline_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrainingPipelineSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_training_pipeline_run(self, pipeline_id, run_id, project_id, **kwargs):  # noqa: E501
        """get_training_pipeline_run  # noqa: E501

        Gets training pipeline run information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_training_pipeline_run(pipeline_id, run_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str pipeline_id: The training pipeline's ID. (required)
        :param int run_id: The training pipeline run's run number. (required)
        :param str project_id: Project ID of pipeline. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrainingPipelineRunSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_training_pipeline_run_with_http_info(pipeline_id, run_id, project_id, **kwargs)  # noqa: E501

    def get_training_pipeline_run_with_http_info(self, pipeline_id, run_id, project_id, **kwargs):  # noqa: E501
        """get_training_pipeline_run  # noqa: E501

        Gets training pipeline run information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_training_pipeline_run_with_http_info(pipeline_id, run_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str pipeline_id: The training pipeline's ID. (required)
        :param int run_id: The training pipeline run's run number. (required)
        :param str project_id: Project ID of pipeline. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrainingPipelineRunSchema, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pipeline_id', 'run_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_training_pipeline_run" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in local_var_params or
                local_var_params['pipeline_id'] is None):
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `get_training_pipeline_run`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in local_var_params or
                local_var_params['run_id'] is None):
            raise ApiValueError("Missing the required parameter `run_id` when calling `get_training_pipeline_run`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in local_var_params or
                local_var_params['project_id'] is None):
            raise ApiValueError("Missing the required parameter `project_id` when calling `get_training_pipeline_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in local_var_params:
            path_params['pipeline_id'] = local_var_params['pipeline_id']  # noqa: E501
        if 'run_id' in local_var_params:
            path_params['run_id'] = local_var_params['run_id']  # noqa: E501

        query_params = []
        if 'project_id' in local_var_params:
            query_params.append(('project_id', local_var_params['project_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessTokenAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/training_pipeline/{pipeline_id}/run/{run_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrainingPipelineRunSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_training_pipeline_runs(self, pipeline_id, project_id, **kwargs):  # noqa: E501
        """get_training_pipeline_runs  # noqa: E501

        Get all runs of a specific training pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_training_pipeline_runs(pipeline_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str pipeline_id: The training pipeline's ID. (required)
        :param str project_id: Project ID of pipeline. (required)
        :param list[PipelineRunStatus] status: Allowed statuses of pipeline runs
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[TrainingPipelineRunSchema]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_training_pipeline_runs_with_http_info(pipeline_id, project_id, **kwargs)  # noqa: E501

    def get_training_pipeline_runs_with_http_info(self, pipeline_id, project_id, **kwargs):  # noqa: E501
        """get_training_pipeline_runs  # noqa: E501

        Get all runs of a specific training pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_training_pipeline_runs_with_http_info(pipeline_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str pipeline_id: The training pipeline's ID. (required)
        :param str project_id: Project ID of pipeline. (required)
        :param list[PipelineRunStatus] status: Allowed statuses of pipeline runs
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[TrainingPipelineRunSchema], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pipeline_id', 'project_id', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_training_pipeline_runs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in local_var_params or
                local_var_params['pipeline_id'] is None):
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `get_training_pipeline_runs`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in local_var_params or
                local_var_params['project_id'] is None):
            raise ApiValueError("Missing the required parameter `project_id` when calling `get_training_pipeline_runs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in local_var_params:
            path_params['pipeline_id'] = local_var_params['pipeline_id']  # noqa: E501

        query_params = []
        if 'project_id' in local_var_params:
            query_params.append(('project_id', local_var_params['project_id']))  # noqa: E501
        if 'status' in local_var_params:
            query_params.append(('status', local_var_params['status']))  # noqa: E501
            collection_formats['status'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessTokenAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/training_pipeline/{pipeline_id}/run', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TrainingPipelineRunSchema]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def log_step_metrics(self, project_id, pipeline_id, run_id, step_name, **kwargs):  # noqa: E501
        """log_step_metrics  # noqa: E501

        Update training pipeline run metrics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_step_metrics(project_id, pipeline_id, run_id, step_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_id: Project ID of the pipeline. (required)
        :param str pipeline_id: Pipeline ID. (required)
        :param int run_id: Run ID. (required)
        :param str step_name: Step name. (required)
        :param UpdatePipelineRunMetricSchema update_pipeline_run_metric_schema:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrainingRunStepSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.log_step_metrics_with_http_info(project_id, pipeline_id, run_id, step_name, **kwargs)  # noqa: E501

    def log_step_metrics_with_http_info(self, project_id, pipeline_id, run_id, step_name, **kwargs):  # noqa: E501
        """log_step_metrics  # noqa: E501

        Update training pipeline run metrics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_step_metrics_with_http_info(project_id, pipeline_id, run_id, step_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_id: Project ID of the pipeline. (required)
        :param str pipeline_id: Pipeline ID. (required)
        :param int run_id: Run ID. (required)
        :param str step_name: Step name. (required)
        :param UpdatePipelineRunMetricSchema update_pipeline_run_metric_schema:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrainingRunStepSchema, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id', 'pipeline_id', 'run_id', 'step_name', 'update_pipeline_run_metric_schema']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method log_step_metrics" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in local_var_params or
                local_var_params['project_id'] is None):
            raise ApiValueError("Missing the required parameter `project_id` when calling `log_step_metrics`")  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in local_var_params or
                local_var_params['pipeline_id'] is None):
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `log_step_metrics`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in local_var_params or
                local_var_params['run_id'] is None):
            raise ApiValueError("Missing the required parameter `run_id` when calling `log_step_metrics`")  # noqa: E501
        # verify the required parameter 'step_name' is set
        if ('step_name' not in local_var_params or
                local_var_params['step_name'] is None):
            raise ApiValueError("Missing the required parameter `step_name` when calling `log_step_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in local_var_params:
            path_params['pipeline_id'] = local_var_params['pipeline_id']  # noqa: E501
        if 'run_id' in local_var_params:
            path_params['run_id'] = local_var_params['run_id']  # noqa: E501
        if 'step_name' in local_var_params:
            path_params['step_name'] = local_var_params['step_name']  # noqa: E501

        query_params = []
        if 'project_id' in local_var_params:
            query_params.append(('project_id', local_var_params['project_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_pipeline_run_metric_schema' in local_var_params:
            body_params = local_var_params['update_pipeline_run_metric_schema']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessTokenAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bdrk/training_pipeline/{pipeline_id}/run/{run_id}/step/{step_name}/metric', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrainingRunStepSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def run_training_pipeline(self, pipeline_id, project_id, **kwargs):  # noqa: E501
        """run_training_pipeline  # noqa: E501

        Create a new training pipeline run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_training_pipeline(pipeline_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str pipeline_id: The raining pipeline's ID. (required)
        :param str project_id: Project ID of the pipeline. (required)
        :param TrainingPipelineRunSchema training_pipeline_run_schema:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrainingPipelineRunSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.run_training_pipeline_with_http_info(pipeline_id, project_id, **kwargs)  # noqa: E501

    def run_training_pipeline_with_http_info(self, pipeline_id, project_id, **kwargs):  # noqa: E501
        """run_training_pipeline  # noqa: E501

        Create a new training pipeline run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_training_pipeline_with_http_info(pipeline_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str pipeline_id: The raining pipeline's ID. (required)
        :param str project_id: Project ID of the pipeline. (required)
        :param TrainingPipelineRunSchema training_pipeline_run_schema:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrainingPipelineRunSchema, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pipeline_id', 'project_id', 'training_pipeline_run_schema']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_training_pipeline" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in local_var_params or
                local_var_params['pipeline_id'] is None):
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `run_training_pipeline`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in local_var_params or
                local_var_params['project_id'] is None):
            raise ApiValueError("Missing the required parameter `project_id` when calling `run_training_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in local_var_params:
            path_params['pipeline_id'] = local_var_params['pipeline_id']  # noqa: E501

        query_params = []
        if 'project_id' in local_var_params:
            query_params.append(('project_id', local_var_params['project_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'training_pipeline_run_schema' in local_var_params:
            body_params = local_var_params['training_pipeline_run_schema']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessTokenAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/training_pipeline/{pipeline_id}/run', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrainingPipelineRunSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def schedule_batch_scoring_pipeline_run(self, pipeline_id, project_id, **kwargs):  # noqa: E501
        """schedule_batch_scoring_pipeline_run  # noqa: E501

        Create new batch scoring pipeline run schedule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_batch_scoring_pipeline_run(pipeline_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str pipeline_id: Public id of batch scoring pipeline to schedule (required)
        :param str project_id: Project ID of pipeline. (required)
        :param BatchScoringPipelineRunScheduleSchema batch_scoring_pipeline_run_schedule_schema:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: BatchScoringPipelineRunScheduleSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.schedule_batch_scoring_pipeline_run_with_http_info(pipeline_id, project_id, **kwargs)  # noqa: E501

    def schedule_batch_scoring_pipeline_run_with_http_info(self, pipeline_id, project_id, **kwargs):  # noqa: E501
        """schedule_batch_scoring_pipeline_run  # noqa: E501

        Create new batch scoring pipeline run schedule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_batch_scoring_pipeline_run_with_http_info(pipeline_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str pipeline_id: Public id of batch scoring pipeline to schedule (required)
        :param str project_id: Project ID of pipeline. (required)
        :param BatchScoringPipelineRunScheduleSchema batch_scoring_pipeline_run_schedule_schema:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(BatchScoringPipelineRunScheduleSchema, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pipeline_id', 'project_id', 'batch_scoring_pipeline_run_schedule_schema']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schedule_batch_scoring_pipeline_run" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in local_var_params or
                local_var_params['pipeline_id'] is None):
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `schedule_batch_scoring_pipeline_run`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in local_var_params or
                local_var_params['project_id'] is None):
            raise ApiValueError("Missing the required parameter `project_id` when calling `schedule_batch_scoring_pipeline_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in local_var_params:
            path_params['pipeline_id'] = local_var_params['pipeline_id']  # noqa: E501

        query_params = []
        if 'project_id' in local_var_params:
            query_params.append(('project_id', local_var_params['project_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_scoring_pipeline_run_schedule_schema' in local_var_params:
            body_params = local_var_params['batch_scoring_pipeline_run_schedule_schema']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessTokenAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/batch_scoring_pipeline/{pipeline_id}/schedule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchScoringPipelineRunScheduleSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def schedule_training_pipeline_run(self, pipeline_id, project_id, **kwargs):  # noqa: E501
        """schedule_training_pipeline_run  # noqa: E501

        Create a new run schedule for a training pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_training_pipeline_run(pipeline_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str pipeline_id: The training pipeline's ID. (required)
        :param str project_id: Project ID of the pipeline. (required)
        :param TrainingPipelineRunScheduleSchema training_pipeline_run_schedule_schema:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrainingPipelineRunScheduleSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.schedule_training_pipeline_run_with_http_info(pipeline_id, project_id, **kwargs)  # noqa: E501

    def schedule_training_pipeline_run_with_http_info(self, pipeline_id, project_id, **kwargs):  # noqa: E501
        """schedule_training_pipeline_run  # noqa: E501

        Create a new run schedule for a training pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_training_pipeline_run_with_http_info(pipeline_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str pipeline_id: The training pipeline's ID. (required)
        :param str project_id: Project ID of the pipeline. (required)
        :param TrainingPipelineRunScheduleSchema training_pipeline_run_schedule_schema:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrainingPipelineRunScheduleSchema, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pipeline_id', 'project_id', 'training_pipeline_run_schedule_schema']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schedule_training_pipeline_run" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in local_var_params or
                local_var_params['pipeline_id'] is None):
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `schedule_training_pipeline_run`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in local_var_params or
                local_var_params['project_id'] is None):
            raise ApiValueError("Missing the required parameter `project_id` when calling `schedule_training_pipeline_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in local_var_params:
            path_params['pipeline_id'] = local_var_params['pipeline_id']  # noqa: E501

        query_params = []
        if 'project_id' in local_var_params:
            query_params.append(('project_id', local_var_params['project_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'training_pipeline_run_schedule_schema' in local_var_params:
            body_params = local_var_params['training_pipeline_run_schedule_schema']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessTokenAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/training_pipeline/{pipeline_id}/schedule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrainingPipelineRunScheduleSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_run(self, project_id, **kwargs):  # noqa: E501
        """start_run  # noqa: E501

        Start a new run by client library.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_run(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_id: Project ID of the pipeline. (required)
        :param StartTrainingRunSchema start_training_run_schema:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrainingRunAndStepsSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.start_run_with_http_info(project_id, **kwargs)  # noqa: E501

    def start_run_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """start_run  # noqa: E501

        Start a new run by client library.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_run_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_id: Project ID of the pipeline. (required)
        :param StartTrainingRunSchema start_training_run_schema:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrainingRunAndStepsSchema, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id', 'start_training_run_schema']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_run" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in local_var_params or
                local_var_params['project_id'] is None):
            raise ApiValueError("Missing the required parameter `project_id` when calling `start_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in local_var_params:
            query_params.append(('project_id', local_var_params['project_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'start_training_run_schema' in local_var_params:
            body_params = local_var_params['start_training_run_schema']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessTokenAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bdrk/start_run', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrainingRunAndStepsSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_run_params(self, project_id, pipeline_id, run_id, **kwargs):  # noqa: E501
        """update_run_params  # noqa: E501

        Update run's parameters manually by client library.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_run_params(project_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_id: Project ID of the pipeline. (required)
        :param str pipeline_id: Pipeline ID. (required)
        :param int run_id: Run ID. (required)
        :param PipelineRunParametersSchema pipeline_run_parameters_schema:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrainingPipelineRunSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_run_params_with_http_info(project_id, pipeline_id, run_id, **kwargs)  # noqa: E501

    def update_run_params_with_http_info(self, project_id, pipeline_id, run_id, **kwargs):  # noqa: E501
        """update_run_params  # noqa: E501

        Update run's parameters manually by client library.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_run_params_with_http_info(project_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_id: Project ID of the pipeline. (required)
        :param str pipeline_id: Pipeline ID. (required)
        :param int run_id: Run ID. (required)
        :param PipelineRunParametersSchema pipeline_run_parameters_schema:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrainingPipelineRunSchema, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id', 'pipeline_id', 'run_id', 'pipeline_run_parameters_schema']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_run_params" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in local_var_params or
                local_var_params['project_id'] is None):
            raise ApiValueError("Missing the required parameter `project_id` when calling `update_run_params`")  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in local_var_params or
                local_var_params['pipeline_id'] is None):
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `update_run_params`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in local_var_params or
                local_var_params['run_id'] is None):
            raise ApiValueError("Missing the required parameter `run_id` when calling `update_run_params`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in local_var_params:
            path_params['pipeline_id'] = local_var_params['pipeline_id']  # noqa: E501
        if 'run_id' in local_var_params:
            path_params['run_id'] = local_var_params['run_id']  # noqa: E501

        query_params = []
        if 'project_id' in local_var_params:
            query_params.append(('project_id', local_var_params['project_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pipeline_run_parameters_schema' in local_var_params:
            body_params = local_var_params['pipeline_run_parameters_schema']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessTokenAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bdrk/training_pipeline/{pipeline_id}/run/{run_id}/param', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrainingPipelineRunSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_run_steps_status(self, project_id, pipeline_id, run_id, **kwargs):  # noqa: E501
        """update_run_steps_status  # noqa: E501

        Update a run status manually by client library.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_run_steps_status(project_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_id: Project ID of the pipeline. (required)
        :param str pipeline_id: Pipeline ID. (required)
        :param int run_id: Run ID. (required)
        :param UpdatePipelineRunStatusSchema update_pipeline_run_status_schema:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrainingRunAndStepsSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_run_steps_status_with_http_info(project_id, pipeline_id, run_id, **kwargs)  # noqa: E501

    def update_run_steps_status_with_http_info(self, project_id, pipeline_id, run_id, **kwargs):  # noqa: E501
        """update_run_steps_status  # noqa: E501

        Update a run status manually by client library.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_run_steps_status_with_http_info(project_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_id: Project ID of the pipeline. (required)
        :param str pipeline_id: Pipeline ID. (required)
        :param int run_id: Run ID. (required)
        :param UpdatePipelineRunStatusSchema update_pipeline_run_status_schema:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrainingRunAndStepsSchema, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id', 'pipeline_id', 'run_id', 'update_pipeline_run_status_schema']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_run_steps_status" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in local_var_params or
                local_var_params['project_id'] is None):
            raise ApiValueError("Missing the required parameter `project_id` when calling `update_run_steps_status`")  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in local_var_params or
                local_var_params['pipeline_id'] is None):
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `update_run_steps_status`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in local_var_params or
                local_var_params['run_id'] is None):
            raise ApiValueError("Missing the required parameter `run_id` when calling `update_run_steps_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in local_var_params:
            path_params['pipeline_id'] = local_var_params['pipeline_id']  # noqa: E501
        if 'run_id' in local_var_params:
            path_params['run_id'] = local_var_params['run_id']  # noqa: E501

        query_params = []
        if 'project_id' in local_var_params:
            query_params.append(('project_id', local_var_params['project_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_pipeline_run_status_schema' in local_var_params:
            body_params = local_var_params['update_pipeline_run_status_schema']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessTokenAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bdrk/training_pipeline/{pipeline_id}/run/{run_id}/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrainingRunAndStepsSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_step_artefact_uploaded(self, pipeline_id, run_id, step_name, project_id, **kwargs):  # noqa: E501
        """update_step_artefact_uploaded  # noqa: E501

        Mark training run step's artefact_uploaded as true  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_step_artefact_uploaded(pipeline_id, run_id, step_name, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str pipeline_id: Pipeline ID (required)
        :param int run_id: ID of pipeline run to update artefact status (required)
        :param str step_name: Pipeline run step name (required)
        :param str project_id: Project ID of pipeline. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrainingRunStepSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_step_artefact_uploaded_with_http_info(pipeline_id, run_id, step_name, project_id, **kwargs)  # noqa: E501

    def update_step_artefact_uploaded_with_http_info(self, pipeline_id, run_id, step_name, project_id, **kwargs):  # noqa: E501
        """update_step_artefact_uploaded  # noqa: E501

        Mark training run step's artefact_uploaded as true  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_step_artefact_uploaded_with_http_info(pipeline_id, run_id, step_name, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str pipeline_id: Pipeline ID (required)
        :param int run_id: ID of pipeline run to update artefact status (required)
        :param str step_name: Pipeline run step name (required)
        :param str project_id: Project ID of pipeline. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrainingRunStepSchema, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pipeline_id', 'run_id', 'step_name', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_step_artefact_uploaded" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in local_var_params or
                local_var_params['pipeline_id'] is None):
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `update_step_artefact_uploaded`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in local_var_params or
                local_var_params['run_id'] is None):
            raise ApiValueError("Missing the required parameter `run_id` when calling `update_step_artefact_uploaded`")  # noqa: E501
        # verify the required parameter 'step_name' is set
        if ('step_name' not in local_var_params or
                local_var_params['step_name'] is None):
            raise ApiValueError("Missing the required parameter `step_name` when calling `update_step_artefact_uploaded`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in local_var_params or
                local_var_params['project_id'] is None):
            raise ApiValueError("Missing the required parameter `project_id` when calling `update_step_artefact_uploaded`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in local_var_params:
            path_params['pipeline_id'] = local_var_params['pipeline_id']  # noqa: E501
        if 'run_id' in local_var_params:
            path_params['run_id'] = local_var_params['run_id']  # noqa: E501
        if 'step_name' in local_var_params:
            path_params['step_name'] = local_var_params['step_name']  # noqa: E501

        query_params = []
        if 'project_id' in local_var_params:
            query_params.append(('project_id', local_var_params['project_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessTokenAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/training_pipeline/{pipeline_id}/run/{run_id}/step/{step_name}/model', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrainingRunStepSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
