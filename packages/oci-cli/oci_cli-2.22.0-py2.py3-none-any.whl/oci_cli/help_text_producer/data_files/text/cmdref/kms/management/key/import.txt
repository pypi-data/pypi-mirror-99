"import"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters


Description
===========

Imports AES key material to create a new key with. The key material
must be base64-encoded and wrapped by the vault's public RSA wrapping
key before you can import it. Key Management supports AES symmetric
keys that are exactly 16, 24, or 32 bytes. Furthermore, the key length
must match what you specify at the time of import.

The top level --endpoint parameter must be supplied for this
operation.


Usage
=====

   oci kms management key import [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

The OCID of the compartment that contains this key.

--display-name [text]

A user-friendly name for the key. It does not have to be unique, and
it is changeable. Avoid entering confidential information.

--key-shape [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--wrapped-import-key [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Optional Parameters
===================

--defined-tags [complex type]

Usage of predefined tag keys. These predefined keys are scoped to
namespaces. Example: *{"foo-namespace": {"bar-key": "foo-value"}}*
This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--freeform-tags [complex type]

Simple key-value pair that is applied without any predefined name,
type, or scope. Exists for cross-compatibility only. Example: *{"bar-
key": "value"}* This is a complex type whose value must be valid JSON.
The value can be provided as a string on the command line or passed in
as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id -->
compartmentId), while the values of the keys need to be populated by
the user before using the sample file as an input to this command. For
any command option that accepts multiple values, the value of the key
can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--protection-mode [text]

The key's protection mode indicates how the key persists and where
cryptographic operations that use the key are performed. A protection
mode of *HSM* means that the key persists on a hardware security
module (HSM) and all cryptographic operations are performed inside the
HSM. A protection mode of *SOFTWARE* means that the key persists on
the server, protected by the vault's RSA wrapping key which persists
on the HSM. All cryptographic operations that use a key with a
protection mode of *SOFTWARE* are performed on the server. By default,
a key's protection mode is set to *HSM*. You can't change a key's
protection mode after the key is created or imported.

Accepted values are:

   HSM, SOFTWARE


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-rc-file", "--
config-file", "--debug", "--defaults-file", "--endpoint", "--generate-
full-command-json-input", "--generate-param-json-input", "--help", "--
latest-version", "--no-retry", "--opc-client-request-id", "--opc-
request-id", "--output", "--profile", "--query", "--raw-output", "--
region", "--release-info", "--request-id", "--version", "-?", "-d",
"-h", "-v"
