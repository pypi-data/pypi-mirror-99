"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters


Description
===========

Creates a new network source in your tenancy.

You must specify your tenancy's OCID as the compartment ID in the
request object (remember that the tenancy is simply the root
compartment). Notice that IAM resources (users, groups, compartments,
and some policies) reside within the tenancy itself, unlike cloud
resources such as compute instances, which typically reside within
compartments inside the tenancy. For information about OCIDs, see
Resource Identifiers.

You must also specify a *name* for the network source, which must be
unique across all network sources in your tenancy, and cannot be
changed. You can use this name or the OCID when writing policies that
apply to the network source. For more information about policies, see
How Policies Work.

You must also specify a *description* for the network source (although
it can be an empty string). It does not have to be unique, and you can
change it anytime with UpdateNetworkSource.

After you send your request, the new object's *lifecycleState* will
temporarily be CREATING. Before using the object, first make sure its
*lifecycleState* has changed to ACTIVE.

After your network resource is created, you can use it in policy to
restrict access to only requests made from an allowed IP address
specified in your network source. For more information, see Managing
Network Sources.


Usage
=====

   oci iam network-sources create [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

The OCID of the tenancy (root compartment) containing the network
source object.

--description [text]

The description you assign to the network source during creation. Does
not have to be unique, and it's changeable.

--name [text]

The name you assign to the network source during creation. The name
must be unique across all groups in the tenancy and cannot be changed.


Optional Parameters
===================

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags. Example:
*{"Operations": {"CostCenter": "42"}}* This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--freeform-tags [complex type]

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. For more information, see
Resource Tags. Example: *{"Department": "Finance"}* This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id -->
compartmentId), while the values of the keys need to be populated by
the user before using the sample file as an input to this command. For
any command option that accepts multiple values, the value of the key
can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--public-source-list [complex type]

A list of allowed public IP addresses and CIDR ranges. This is a
complex type whose value must be valid JSON. The value can be provided
as a string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--services [complex type]

A list of services allowed to make on-behalf-of requests. These
requests can have different source IP addresses than those listed in
the network source. Currently, only *all* and *none* are supported.
The default is *all*. This is a complex type whose value must be valid
JSON. The value can be provided as a string on the command line or
passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--virtual-source-list [complex type]

A list of allowed VCN OCID and IP range pairs. Example:*"vcnId":
"ocid1.vcn.oc1.iad.aaaaaaaaexampleuniqueID", "ipRanges": [
"129.213.39.0/24" ]*

This option is a JSON list with items of type
NetworkSourcesVirtualSourceList.  For documentation on
NetworkSources_virtualSourceList please see our API reference: https:
//docs.cloud.oracle.com/api/#/en/identity/20160918/datatypes/NetworkS
ourcesVirtualSourceList. This is a complex type whose value must be
valid JSON. The value can be provided as a string on the command line
or passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-rc-file", "--
config-file", "--debug", "--defaults-file", "--endpoint", "--generate-
full-command-json-input", "--generate-param-json-input", "--help", "--
latest-version", "--no-retry", "--opc-client-request-id", "--opc-
request-id", "--output", "--profile", "--query", "--raw-output", "--
region", "--release-info", "--request-id", "--version", "-?", "-d",
"-h", "-v"
