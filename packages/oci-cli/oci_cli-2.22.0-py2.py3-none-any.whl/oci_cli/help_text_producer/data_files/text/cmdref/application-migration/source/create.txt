"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters


Description
===========

Creates a source in the specified compartment. In Application
Migration, a source refers to the environment from which the
application is being migrated. For more information, see Manage
Sources.

All Oracle Cloud Infrastructure resources, including sources, get an
Oracle-assigned, unique ID called an Oracle Cloud Identifier (OCID).
When you create a resource, you can find its OCID in the response. You
can also retrieve a resource's OCID by using a List API operation on
that resource type, or by viewing the resource in the Console.

After you send your request, a source is created in the specified
compartment. The new source's lifecycle state will temporarily be
<code>CREATING</code>. Application Migration connects to the source
environment with the authentication credentials that you have
provided. If the connection is established, the status of the source
changes to <code>ACTIVE</code> and Application Migration fetches the
list of applications that are available for migration in the source
environment.

To track the progress of the operation, you can monitor the status of
the Create Source work request by using the <code>`GetWorkRequest
<https://docs.cloud.oracle.com/en-us/iaas/tools/oci-
cli/latest/oci_cli_docs/cmdref/application-migration/work-
request/get.html>`__</code> REST API operation on the work request or
by viewing the status of the work request in the console.

Ensure that the state of the source has changed to
<code>ACTIVE</code>, before you retrieve the list of applications from
the source environment using the <code>`ListSourceApplications
<https://docs.cloud.oracle.com/en-us/iaas/tools/oci-
cli/latest/oci_cli_docs/cmdref/application-migration/source-
application/list.html>`__</code> REST API call.


Usage
=====

   oci application-migration source create [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

The OCID of the compartment that contains the source.

--source-details [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Optional Parameters
===================

--authorization-details [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags. Example:
*{"Operations": {"CostCenter": "42"}}* This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--description [text]

Description of the source. This helps you to identify the appropriate
source environment when you have multiple sources defined.

--display-name [text]

Name of the source. This helps you to identify the appropriate source
environment when you have multiple sources defined.

--freeform-tags [complex type]

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. For more information, see
Resource Tags. Example: *{"Department": "Finance"}* This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id -->
compartmentId), while the values of the keys need to be populated by
the user before using the sample file as an input to this command. For
any command option that accepts multiple values, the value of the key
can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, SUCCEEDED

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
to see if it has reached the state defined by "--wait-for-state".
Defaults to 30 seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-rc-file", "--
config-file", "--debug", "--defaults-file", "--endpoint", "--generate-
full-command-json-input", "--generate-param-json-input", "--help", "--
latest-version", "--no-retry", "--opc-client-request-id", "--opc-
request-id", "--output", "--profile", "--query", "--raw-output", "--
region", "--release-info", "--request-id", "--version", "-?", "-d",
"-h", "-v"
