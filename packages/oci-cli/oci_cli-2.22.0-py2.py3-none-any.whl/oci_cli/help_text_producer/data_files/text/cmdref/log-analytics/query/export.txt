"export"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters


Description
===========

Export data based on query. Endpoint returns a stream of data.
Endpoint is synchronous. Queries must deliver first result within 60
seconds or calls are subject to timeout.


Usage
=====

   oci log-analytics query export [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

Compartment Identifier OCID .

--file [filename]

The name of the file that will receive the response data, or '-' to
write to STDOUT.

--namespace-name, --namespace, -ns [text]

The Logging Analytics namespace used for the request.

--query-string [text]

Query to perform.

--sub-system [text]

Default subsystem to qualify fields with in the queryString if not
specified.

Accepted values are:

   LOG


Optional Parameters
===================

--compartment-id-in-subtree [boolean]

Flag to search all child compartments of the compartment Id specified
in the compartmentId query parameter.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id -->
compartmentId), while the values of the keys need to be populated by
the user before using the sample file as an input to this command. For
any command option that accepts multiple values, the value of the key
can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--max-total-count [integer]

Maximum number of results retrieved from data source.  Note a maximum
value will be enforced; if the export results can be streamed, the
maximum will be 50000000, otherwise 10000; that is, if not streamed,
actualMaxTotalCountUsed = Math.min(maxTotalCount, 10000).

   Export will incrementally stream results depending on the
   queryString.

Some commands including head/tail are not compatible with streaming
result delivery and therefore enforce a reduced limit on overall
maxtotalcount.  no sort command or sort by id, e.g. ' | sort id ' - is
streaming compatible  sort by time and id, e.g. ' | sort -time, id ' -
is streaming compatible all other cases, e.g. ' | sort -time, id,
mtgtguid ' - is not streaming compatible due to the additional sort
field

--output-format [text]

Specifies the format for the returned results.

Accepted values are:

   CSV, JSON

--query-timeout-in-seconds [integer]

Amount of time, in seconds, allowed for a query to execute. If this
time expires before the query is complete, any partial results will be
returned.

--scope-filters [complex type]

List of filters to be applied when the query executes. More than one
filter per field is not permitted.

This option is a JSON list with items of type ScopeFilter.  For
documentation on ScopeFilter please see our API reference: https://do
cs.cloud.oracle.com/api/#/en/loganalytics/20200601/datatypes/ScopeFil
ter. This is a complex type whose value must be valid JSON. The value
can be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--should-include-columns [boolean]

Include columns in response

--should-localize [boolean]

Localize results, including header columns, List-Of-Values and
timestamp values.

--should-use-acceleration [boolean]

Controls if query should ignore pre-calculated results if available
and only use raw data.

--time-end [datetime]

Date-time for query to stop matching results to. End Time must be
greater than or equal to start time otherwise it will result in error.

   The following datetime formats are supported:

      Format: YYYY-MM-DDTHH:mm:ss.sssTZD
      Example: 2017-09-15T20:30:00.123Z

      Format: YYYY-MM-DDTHH:mm:ssTZD
      Example: 2017-09-15T20:30:00Z

      Format: YYYY-MM-DDTHH:mmTZD
      Example: 2017-09-15T20:30Z

      Format: YYYY-MM-DDTHH:mm:ssTZD
      Example: 2017-09-15T12:30:00.456-08:00, 2017-09-15T12:30:00.456-0800

      Format: YYYY-MM-DDTHH:mm:ssTZD
      Example: 2017-09-15T12:30:00-08:00, 2017-09-15T12:30:00-0800

      Format: YYYY-MM-DDTHH:mmTZD
      Example: 2017-09-15T12:30-08:00, 2017-09-15T12:30-0800

   The timezone for this date and time will be taken as UTC (Needs to
   be surrounded by single or double quotes)

      Format: 'YYYY-MM-DD HH:mm' or "YYYY-MM-DD HH:mm"
      Example: '2017-09-15 17:25'

   This date will be taken as midnight UTC of that day

      Format: YYYY-MM-DD
      Example: 2017-09-15

      Example: 1412195400

--time-start [datetime]

Date-time for query to start matching results from. Start time must be
less than end time otherwise it will result in error.

   The following datetime formats are supported:

      Format: YYYY-MM-DDTHH:mm:ss.sssTZD
      Example: 2017-09-15T20:30:00.123Z

      Format: YYYY-MM-DDTHH:mm:ssTZD
      Example: 2017-09-15T20:30:00Z

      Format: YYYY-MM-DDTHH:mmTZD
      Example: 2017-09-15T20:30Z

      Format: YYYY-MM-DDTHH:mm:ssTZD
      Example: 2017-09-15T12:30:00.456-08:00, 2017-09-15T12:30:00.456-0800

      Format: YYYY-MM-DDTHH:mm:ssTZD
      Example: 2017-09-15T12:30:00-08:00, 2017-09-15T12:30:00-0800

      Format: YYYY-MM-DDTHH:mmTZD
      Example: 2017-09-15T12:30-08:00, 2017-09-15T12:30-0800

   The timezone for this date and time will be taken as UTC (Needs to
   be surrounded by single or double quotes)

      Format: 'YYYY-MM-DD HH:mm' or "YYYY-MM-DD HH:mm"
      Example: '2017-09-15 17:25'

   This date will be taken as midnight UTC of that day

      Format: YYYY-MM-DD
      Example: 2017-09-15

      Example: 1412195400

--timezone [text]

Time zone for query. Should use long time zone name e.g
America/New_York to handle daylight savings properly.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-rc-file", "--
config-file", "--debug", "--defaults-file", "--endpoint", "--generate-
full-command-json-input", "--generate-param-json-input", "--help", "--
latest-version", "--no-retry", "--opc-client-request-id", "--opc-
request-id", "--output", "--profile", "--query", "--raw-output", "--
region", "--release-info", "--request-id", "--version", "-?", "-d",
"-h", "-v"
