"create-base64"
***************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters


Description
===========

Creates a new secret according to the details of the request.

This operation is not supported by the Oracle Cloud Infrastructure
Terraform Provider.


Usage
=====

   oci vault secret create-base64 [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

The OCID of the compartment where you want to create the secret.

--secret-name [text]

A user-friendly name for the secret. Secret names should be unique
within a vault. Avoid entering confidential information. Valid
characters are uppercase or lowercase letters, numbers, hyphens,
underscores, and periods.

--vault-id [text]

The OCID of the vault where you want to create the secret.


Optional Parameters
===================

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags. Example:
*{"Operations": {"CostCenter": "42"}}* This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--description [text]

A brief description of the secret. Avoid entering confidential
information.

--freeform-tags [complex type]

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. For more information, see
Resource Tags. Example: *{"Department": "Finance"}* This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id -->
compartmentId), while the values of the keys need to be populated by
the user before using the sample file as an input to this command. For
any command option that accepts multiple values, the value of the key
can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--key-id [text]

The OCID of the master encryption key that is used to encrypt the
secret.

--max-wait-seconds [integer]

The maximum time to wait for the resource to reach the lifecycle state
defined by "--wait-for-state". Defaults to 1200 seconds.

--metadata [complex type]

Additional metadata that you can use to provide context about how to
use the secret during rotation or other administrative tasks. For
example, for a secret that you use to connect to a database, the
additional metadata might specify the connection endpoint and the
connection string. Provide additional metadata as key-value pairs.
This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--secret-content-content [text]

The base64-encoded content of the secret.

--secret-content-name [text]

Names should be unique within a secret. Valid characters are uppercase
or lowercase letters, numbers, hyphens, underscores, and periods.

--secret-content-stage [text]

The rotation state of the secret content. The default is *CURRENT*,
meaning that the secret is currently in use. A secret version that you
mark as *PENDING* is staged and available for use, but you don't yet
want to rotate it into current, active use. For example, you might
create or update a secret and mark its rotation state as *PENDING* if
you haven't yet updated the secret on the target system. When creating
a secret, only the value *CURRENT* is applicable, although the value
*LATEST* is also automatically applied. When updating a secret, you
can specify a version's rotation state as either *CURRENT* or
*PENDING*.

Accepted values are:

   CURRENT, PENDING

--secret-rules [complex type]

A list of rules to control how the secret is used and managed.

This option is a JSON list with items of type SecretRule.  For
documentation on SecretRule please see our API reference: https://doc
s.cloud.oracle.com/api/#/en/vaults/20180608/datatypes/SecretRule. This
is a complex type whose value must be valid JSON. The value can be
provided as a string on the command line or passed in as a file using
the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--wait-for-state [text]

This operation creates, modifies or deletes a resource that has a
defined lifecycle state. Specify this option to perform the action and
then wait until the resource reaches a given lifecycle state. Multiple
states can be specified, returning on the first state. For example, "
--wait-for-state" SUCCEEDED "--wait-for-state" FAILED would return on
whichever lifecycle state is reached first. If timeout is reached, a
return code of 2 is returned. For any other error, a return code of 1
is returned.

Accepted values are:

   ACTIVE, CANCELLING_DELETION, CREATING, DELETED, DELETING, FAILED, PENDING_DELETION, SCHEDULING_DELETION, UPDATING

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the resource to
see if it has reached the lifecycle state defined by "--wait-for-
state". Defaults to 30 seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-rc-file", "--
config-file", "--debug", "--defaults-file", "--endpoint", "--generate-
full-command-json-input", "--generate-param-json-input", "--help", "--
latest-version", "--no-retry", "--opc-client-request-id", "--opc-
request-id", "--output", "--profile", "--query", "--raw-output", "--
region", "--release-info", "--request-id", "--version", "-?", "-d",
"-h", "-v"
