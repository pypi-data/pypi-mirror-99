"export"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters


Description
===========

Exports a specific version of a master encryption key according to the
details of the request. For their protection, keys that you create and
store on a hardware security module (HSM) can never leave the HSM. You
can only export keys stored on the server. For export, the key version
is encrypted by an RSA public key that you provide.

The top level --endpoint parameter must be supplied for this
operation.


Usage
=====

   oci kms crypto key export [OPTIONS]


Required Parameters
===================

--algorithm [text]

The encryption algorithm to use to encrypt exportable key material
from a software-backed key. Specifying *RSA_OAEP_AES_SHA256* invokes
the RSA AES key wrap mechanism, which generates a temporary AES key.
The temporary AES key is wrapped by the RSA public wrapping key
provided along with the request, creating a wrapped temporary AES key.
The temporary AES key is also used to wrap the exportable key
material. The wrapped temporary AES key and the wrapped exportable key
material are concatenated, producing concatenated blob output that
jointly represents them. Specifying *RSA_OAEP_SHA256* means that the
software key is wrapped by the RSA public wrapping key provided along
with the request.

Accepted values are:

   RSA_OAEP_AES_SHA256, RSA_OAEP_SHA256

--key-id [text]

The OCID of the master encryption key associated with the key version
you want to export.

--public-key [text]

The PEM format of the 2048-bit, 3072-bit, or 4096-bit RSA wrapping key
in your possession that you want to use to encrypt the key.


Optional Parameters
===================

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id -->
compartmentId), while the values of the keys need to be populated by
the user before using the sample file as an input to this command. For
any command option that accepts multiple values, the value of the key
can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--key-version-id [text]

The OCID of the specific key version to export. If not specified, the
service exports the current key version.

--logging-context [complex type]

Information that provides context for audit logging. You can provide
this additional data as key-value pairs to include in the audit logs
when audit logging is enabled. This is a complex type whose value must
be valid JSON. The value can be provided as a string on the command
line or passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-rc-file", "--
config-file", "--debug", "--defaults-file", "--endpoint", "--generate-
full-command-json-input", "--generate-param-json-input", "--help", "--
latest-version", "--no-retry", "--opc-client-request-id", "--opc-
request-id", "--output", "--profile", "--query", "--raw-output", "--
region", "--release-info", "--request-id", "--version", "-?", "-d",
"-h", "-v"
