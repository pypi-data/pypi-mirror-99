"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters


Description
===========

Creates a new entity attribute.


Usage
=====

   oci data-catalog attribute create [OPTIONS]


Required Parameters
===================

--catalog-id [text]

Unique catalog identifier.

--data-asset-key [text]

Unique data asset key.

--display-name [text]

A user-friendly display name. Does not have to be unique, and it's
changeable. Avoid entering confidential information.

--entity-key [text]

Unique entity key.

--external-data-type [text]

Data type of the attribute as defined in the external system.

--time-external [datetime]

Last modified timestamp of this object in the external system.

   The following datetime formats are supported:

      Format: YYYY-MM-DDTHH:mm:ss.sssTZD
      Example: 2017-09-15T20:30:00.123Z

      Format: YYYY-MM-DDTHH:mm:ssTZD
      Example: 2017-09-15T20:30:00Z

      Format: YYYY-MM-DDTHH:mmTZD
      Example: 2017-09-15T20:30Z

      Format: YYYY-MM-DDTHH:mm:ssTZD
      Example: 2017-09-15T12:30:00.456-08:00, 2017-09-15T12:30:00.456-0800

      Format: YYYY-MM-DDTHH:mm:ssTZD
      Example: 2017-09-15T12:30:00-08:00, 2017-09-15T12:30:00-0800

      Format: YYYY-MM-DDTHH:mmTZD
      Example: 2017-09-15T12:30-08:00, 2017-09-15T12:30-0800

   The timezone for this date and time will be taken as UTC (Needs to
   be surrounded by single or double quotes)

      Format: 'YYYY-MM-DD HH:mm' or "YYYY-MM-DD HH:mm"
      Example: '2017-09-15 17:25'

   This date will be taken as midnight UTC of that day

      Format: YYYY-MM-DD
      Example: 2017-09-15

      Example: 1412195400


Optional Parameters
===================

--custom-property-members [complex type]

The list of customized properties along with the values for this
object

This option is a JSON list with items of type CustomPropertySetUsage.
For documentation on CustomPropertySetUsage please see our API
reference: https://docs.cloud.oracle.com/api/#/en/datacatalog/2019032
5/datatypes/CustomPropertySetUsage. This is a complex type whose value
must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--description [text]

Detailed description of the attribute.

--external-datatype-entity-key [text]

External entity key that represents the datatype of this attribute ,
applicable if this attribute is a complex type.

--external-parent-attribute-key [text]

External attribute key that represents the parent attribute  of this
attribute , applicable if the parent attribute is of complex type.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id -->
compartmentId), while the values of the keys need to be populated by
the user before using the sample file as an input to this command. For
any command option that accepts multiple values, the value of the key
can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--is-incremental-data [boolean]

Property that identifies if this attribute can be used as a watermark
to extract incremental data.

--is-nullable [boolean]

Property that identifies if this attribute can be assigned null
values.

--length [integer]

Max allowed length of the attribute value.

--max-collection-count [integer]

The maximum count for the number of instances of a given type stored
in this collection type attribute,applicable if this attribute is a
complex type. For type specifications in systems that specify only
"capacity" without upper or lower bound , this property can also be
used to just mean "capacity". Some examples are Varray size in Oracle
, Occurs Clause in Cobol , capacity in XmlSchemaObjectCollection ,
maxOccurs in  Xml , maxItems in Json

--max-wait-seconds [integer]

The maximum time to wait for the resource to reach the lifecycle state
defined by "--wait-for-state". Defaults to 1200 seconds.

--min-collection-count [integer]

The minimum count for the number of instances of a given type stored
in this collection type attribute,applicable if this attribute is a
complex type.

--position [integer]

Position of the attribute in the record definition.

--precision [integer]

Precision of the attribute value usually applies to float data type.

--properties [complex type]

A map of maps that contains the properties which are specific to the
attribute type. Each attribute type definition defines it's set of
required and optional properties. The map keys are category names and
the values are maps of property name to property value. Every property
is contained inside of a category. Most attributes have required
properties within the "default" category. To determine the set of
required and optional properties for an attribute type, a query can be
done on '/types?type=attribute' that returns a collection of all
attribute types. The appropriate attribute type, which will include
definitions of all of it's properties, can be identified from this
collection. Example: *{"properties": { "default": { "key1":
"value1"}}}* This is a complex type whose value must be valid JSON.
The value can be provided as a string on the command line or passed in
as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--scale [integer]

Scale of the attribute value usually applies to float data type.

--wait-for-state [text]

This operation creates, modifies or deletes a resource that has a
defined lifecycle state. Specify this option to perform the action and
then wait until the resource reaches a given lifecycle state. Multiple
states can be specified, returning on the first state. For example, "
--wait-for-state" SUCCEEDED "--wait-for-state" FAILED would return on
whichever lifecycle state is reached first. If timeout is reached, a
return code of 2 is returned. For any other error, a return code of 1
is returned.

Accepted values are:

   ACTIVE, CREATING, DELETED, DELETING, FAILED, INACTIVE, MOVING, UPDATING

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the resource to
see if it has reached the lifecycle state defined by "--wait-for-
state". Defaults to 30 seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-rc-file", "--
config-file", "--debug", "--defaults-file", "--endpoint", "--generate-
full-command-json-input", "--generate-param-json-input", "--help", "--
latest-version", "--no-retry", "--opc-client-request-id", "--opc-
request-id", "--output", "--profile", "--query", "--raw-output", "--
region", "--release-info", "--request-id", "--version", "-?", "-d",
"-h", "-v"
