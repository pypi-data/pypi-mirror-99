"create-rest-monitor"
*********************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters


Description
===========

Creates a new monitor.


Usage
=====

   oci apm-synthetics monitor create-rest-monitor [OPTIONS]


Required Parameters
===================

--apm-domain-id [text]

The APM domain ID the request is intended for.

--display-name [text]

Unique name that can be edited. The name should not contain any
confidential information.

--monitor-type [text]

Type of monitor.

Accepted values are:

   BROWSER, REST, SCRIPTED_BROWSER, SCRIPTED_REST

--repeat-interval-in-seconds [integer]

Interval in seconds after the start time when the job should be
repeated. Minimum repeatIntervalInSeconds should be 300 seconds.

--vantage-points [complex type]

A list of vantage points from which to execute the monitor. Use
/publicVantagePoints to fetch public vantage points. This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Optional Parameters
===================

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. Example: *{"foo-namespace": {"bar-key": "value"}}* This is
a complex type whose value must be valid JSON. The value can be
provided as a string on the command line or passed in as a file using
the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--freeform-tags [complex type]

Simple key-value pair that is applied without any predefined name,
type or scope. Exists for cross-compatibility only. Example: *{"bar-
key": "value"}* This is a complex type whose value must be valid JSON.
The value can be provided as a string on the command line or passed in
as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id -->
compartmentId), while the values of the keys need to be populated by
the user before using the sample file as an input to this command. For
any command option that accepts multiple values, the value of the key
can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--is-certificate-validation-enabled [boolean]

If certificate validation enabled, then call will fail for certificate
errors.

--is-failure-retried [boolean]

If isFailureRetried enabled, then if call is failed then it will be
retried.

--is-redirection-enabled [boolean]

If redirection enabled, then redirects will be allowed while accessing
target URL.

--req-authentication-details [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--req-authentication-scheme [text]

Request http authentication scheme.

Accepted values are:

   BASIC, BEARER, NONE, OAUTH

--request-headers [complex type]

List of request headers. Example: *[{"headerName": "content-type",
"headerValue":"json"}]*

This option is a JSON list with items of type Header.  For
documentation on Header please see our API reference: https://docs.cl
oud.oracle.com/api/#/en/apmsynthetic/20200630/datatypes/Header. This
is a complex type whose value must be valid JSON. The value can be
provided as a string on the command line or passed in as a file using
the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--request-method [text]

Request HTTP method.

Accepted values are:

   GET, POST

--request-post-body [text]

Request post body content.

--request-query-params [complex type]

List of request query params. Example: *[{"paramName": "sortOrder",
"paramValue": "asc"}]*

This option is a JSON list with items of type RequestQueryParam.  For
documentation on RequestQueryParam please see our API reference: http
s://docs.cloud.oracle.com/api/#/en/apmsynthetic/20200630/datatypes/Re
questQueryParam. This is a complex type whose value must be valid
JSON. The value can be provided as a string on the command line or
passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--script-id [text]

The OCID of the script. scriptId is mandatory for creation of
SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor
types, it should be set to null.

--script-parameters [complex type]

List of script parameters in the monitor. This is valid only for
SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor
types, it should be set to null. Example: *[{"paramName": "userid",
"paramValue":"testuser"}]*

This option is a JSON list with items of type MonitorScriptParameter.
For documentation on MonitorScriptParameter please see our API
reference: https://docs.cloud.oracle.com/api/#/en/apmsynthetic/202006
30/datatypes/MonitorScriptParameter. This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--status [text]

Enables or disables the monitor.

Accepted values are:

   DISABLED, ENABLED, INVALID

--target [text]

Specify the endpoint on which to run the monitor. For BROWSER and REST
monitor types, target is mandatory. If target is specified in the
SCRIPTED_BROWSER monitor type, then the monitor will run the selected
script (specified by scriptId in monitor) against the specified target
endpoint. If target is not specified in the SCRIPTED_BROWSER monitor
type, then the monitor will run the selected script as it is.

--timeout-in-seconds [integer]

Timeout in seconds. Timeout cannot be more than 30% of
repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds
should be a multiple of 60. Monitor will be allowed to run only for
timeoutInSeconds time. It would be terminated after that.

--verify-response-codes [complex type]

Expected HTTP response codes. For status code range, please set values
like 2xx, 3xx. This is a complex type whose value must be valid JSON.
The value can be provided as a string on the command line or passed in
as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--verify-response-content [text]

Verify response content against regular expression based string. If
response content does not match with the verifyResponseContent, then
it will be considered as failure.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-rc-file", "--
config-file", "--debug", "--defaults-file", "--endpoint", "--generate-
full-command-json-input", "--generate-param-json-input", "--help", "--
latest-version", "--no-retry", "--opc-client-request-id", "--opc-
request-id", "--output", "--profile", "--query", "--raw-output", "--
region", "--release-info", "--request-id", "--version", "-?", "-d",
"-h", "-v"
