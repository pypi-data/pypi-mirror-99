"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters


Description
===========

Create a new pattern.


Usage
=====

   oci data-catalog pattern create [OPTIONS]


Required Parameters
===================

--catalog-id [text]

Unique catalog identifier.

--display-name [text]

A user-friendly display name. Does not have to be unique, and it's
changeable. Avoid entering confidential information.


Optional Parameters
===================

--check-failure-limit [integer]

The maximum number of UNMATCHED files, in checkFilePathList, above
which the check fails. Optional, if checkFilePathList is provided -
but if isEnableCheckFailureLimit is set to true it is required.

--check-file-path-list [complex type]

List of file paths against which the expression can be tried, as a
check. This documents, for reference purposes, some example objects a
pattern is meant to work with. If isEnableCheckFailureLimit is set to
true, this will be run as a validation during the request, such that
if the check fails the request fails. If isEnableCheckFailureLimit
instead is set to (the default) false, a pattern will still be created
or updated even if the check fails, with a lifecycleState of FAILED.
This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--description [text]

Detailed description of the Pattern.

--expression [text]

The expression used in the pattern that may include qualifiers. Refer
to the user documentation for details of the format and examples.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id -->
compartmentId), while the values of the keys need to be populated by
the user before using the sample file as an input to this command. For
any command option that accepts multiple values, the value of the key
can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--is-enable-check-failure-limit [boolean]

Indicates whether the expression check, against the checkFilePathList,
will fail the request if the count of UNMATCHED files is above the
checkFailureLimit.

--max-wait-seconds [integer]

The maximum time to wait for the resource to reach the lifecycle state
defined by "--wait-for-state". Defaults to 1200 seconds.

--properties [complex type]

A map of maps that contains the properties which are specific to the
pattern type. Each pattern type definition defines it's set of
required and optional properties. Example: *{"properties": {
"default": { "tbd"}}}* This is a complex type whose value must be
valid JSON. The value can be provided as a string on the command line
or passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--wait-for-state [text]

This operation creates, modifies or deletes a resource that has a
defined lifecycle state. Specify this option to perform the action and
then wait until the resource reaches a given lifecycle state. Multiple
states can be specified, returning on the first state. For example, "
--wait-for-state" SUCCEEDED "--wait-for-state" FAILED would return on
whichever lifecycle state is reached first. If timeout is reached, a
return code of 2 is returned. For any other error, a return code of 1
is returned.

Accepted values are:

   ACTIVE, CREATING, DELETED, DELETING, FAILED, INACTIVE, MOVING, UPDATING

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the resource to
see if it has reached the lifecycle state defined by "--wait-for-
state". Defaults to 30 seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-rc-file", "--
config-file", "--debug", "--defaults-file", "--endpoint", "--generate-
full-command-json-input", "--generate-param-json-input", "--help", "--
latest-version", "--no-retry", "--opc-client-request-id", "--opc-
request-id", "--output", "--profile", "--query", "--raw-output", "--
region", "--release-info", "--request-id", "--version", "-?", "-d",
"-h", "-v"
