"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters


Description
===========

Creates an Exadata infrastructure resource. Applies to Exadata
Cloud@Customer instances only. To create an Exadata Cloud Service
infrastructure resource, use the  CreateCloudExadataInfrastructure
operation.


Usage
=====

   oci db exadata-infrastructure create [OPTIONS]


Required Parameters
===================

--admin-network-cidr [text]

The CIDR block for the Exadata administration network.

--cloud-control-plane-server1 [text]

The IP address for the first control plane server.

--cloud-control-plane-server2 [text]

The IP address for the second control plane server.

--compartment-id, -c [text]

The OCID of the compartment.

--display-name [text]

The user-friendly name for the Exadata infrastructure. The name does
not need to be unique.

--dns-server [complex type]

The list of DNS server IP addresses. Maximum of 3 allowed. This is a
complex type whose value must be valid JSON. The value can be provided
as a string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--gateway [text]

The gateway for the control plane network.

--infini-band-network-cidr [text]

The CIDR block for the Exadata InfiniBand interconnect.

--netmask [text]

The netmask for the control plane network.

--ntp-server [complex type]

The list of NTP server IP addresses. Maximum of 3 allowed. This is a
complex type whose value must be valid JSON. The value can be provided
as a string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--shape [text]

The shape of the Exadata infrastructure. The shape determines the
amount of CPU, storage, and memory resources allocated to the
instance.

--time-zone [text]

The time zone of the Exadata infrastructure. For details, see Exadata
Infrastructure Time Zones.


Optional Parameters
===================

--contacts [complex type]

The list of contacts for the Exadata infrastructure.

This option is a JSON list with items of type
ExadataInfrastructureContact.  For documentation on
ExadataInfrastructureContact please see our API reference: https://do
cs.cloud.oracle.com/api/#/en/database/20160918/datatypes/ExadataInfra
structureContact. This is a complex type whose value must be valid
JSON. The value can be provided as a string on the command line or
passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--corporate-proxy [text]

The corporate network proxy for access to the control plane network.
Oracle recommends using an HTTPS proxy when possible for enhanced
security.

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags. This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--freeform-tags [complex type]

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. For more information, see
Resource Tags.

Example:

   {"Department": "Finance"}

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id -->
compartmentId), while the values of the keys need to be populated by
the user before using the sample file as an input to this command. For
any command option that accepts multiple values, the value of the key
can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--maintenance-window [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--max-wait-seconds [integer]

The maximum time to wait for the resource to reach the lifecycle state
defined by "--wait-for-state". Defaults to 1200 seconds.

--wait-for-state [text]

This operation creates, modifies or deletes a resource that has a
defined lifecycle state. Specify this option to perform the action and
then wait until the resource reaches a given lifecycle state. Multiple
states can be specified, returning on the first state. For example, "
--wait-for-state" SUCCEEDED "--wait-for-state" FAILED would return on
whichever lifecycle state is reached first. If timeout is reached, a
return code of 2 is returned. For any other error, a return code of 1
is returned.

Accepted values are:

   ACTIVATING, ACTIVATION_FAILED, ACTIVE, CREATING, DELETED, DELETING, DISCONNECTED, FAILED, MAINTENANCE_IN_PROGRESS, REQUIRES_ACTIVATION, UPDATING

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the resource to
see if it has reached the lifecycle state defined by "--wait-for-
state". Defaults to 30 seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-rc-file", "--
config-file", "--debug", "--defaults-file", "--endpoint", "--generate-
full-command-json-input", "--generate-param-json-input", "--help", "--
latest-version", "--no-retry", "--opc-client-request-id", "--opc-
request-id", "--output", "--profile", "--query", "--raw-output", "--
region", "--release-info", "--request-id", "--version", "-?", "-d",
"-h", "-v"
