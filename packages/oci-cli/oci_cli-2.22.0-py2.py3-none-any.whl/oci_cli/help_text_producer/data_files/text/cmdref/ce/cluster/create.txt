"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters


Description
===========

Create a new cluster.


Usage
=====

   oci ce cluster create [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

The OCID of the compartment in which to create the cluster.

--kubernetes-version [text]

The version of Kubernetes to install into the cluster masters.

--name [text]

The name of the cluster. Avoid entering confidential information.

--vcn-id [text]

The OCID of the virtual cloud network (VCN) in which to create the
cluster.


Optional Parameters
===================

--dashboard-enabled [boolean]

Select if you want to use the Kubernetes Dashboard to deploy and
troubleshoot containerized applications, and to manage Kubernetes
resources. Default value is false.

--endpoint-nsg-ids [complex type]

A list of the OCIDs of the network security groups (NSGs) to apply to
the cluster endpoint. You must also specify --endpoint-subnet-id. This
is a complex type whose value must be valid JSON. The value can be
provided as a string on the command line or passed in as a file using
the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--endpoint-public-ip-enabled [boolean]

Whether the cluster should be assigned a public IP address. Defaults
to false. If set to true on a private subnet, the cluster provisioning
will fail. You must also specify --endpoint-subnet-id.

--endpoint-subnet-id [text]

The OCID of the regional subnet in which to place the Cluster
endpoint.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id -->
compartmentId), while the values of the keys need to be populated by
the user before using the sample file as an input to this command. For
any command option that accepts multiple values, the value of the key
can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--kms-key-id [text]

The OCID of the KMS key to be used as the master encryption key for
Kubernetes secret encryption. When used, *kubernetesVersion* must be
at least *v1.13.0*.

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--pods-cidr [text]

The available group of network addresses that can be allocated to pods
running in the cluster, expressed as a single, contiguous IPv4 CIDR
block. For example, 10.244.0.0/16.

--service-lb-subnet-ids [complex type]

The two subnets configured to host load balancers in a Kubernetes
cluster. This is a complex type whose value must be valid JSON. The
value can be provided as a string on the command line or passed in as
a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--services-cidr [text]

The available group of network addresses that can be exposed as
Kubernetes services (ClusterIPs), expressed as a single, contiguous
IPv4 CIDR block. For example, 10.96.0.0/16.

--tiller-enabled [boolean]

Select if you want Tiller (the server portion of Helm) to run in the
Kubernetes cluster. Default value is false.

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, SUCCEEDED

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
to see if it has reached the state defined by "--wait-for-state".
Defaults to 30 seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-rc-file", "--
config-file", "--debug", "--defaults-file", "--endpoint", "--generate-
full-command-json-input", "--generate-param-json-input", "--help", "--
latest-version", "--no-retry", "--opc-client-request-id", "--opc-
request-id", "--output", "--profile", "--query", "--raw-output", "--
region", "--release-info", "--request-id", "--version", "-?", "-d",
"-h", "-v"
