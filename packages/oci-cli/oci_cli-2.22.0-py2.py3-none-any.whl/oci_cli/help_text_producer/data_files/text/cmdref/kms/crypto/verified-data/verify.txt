"verify"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters


Description
===========

Verifies a digital signature that was generated by the Sign operation
using the public key in the same asymmetric key. You can also verify
the digital signature by using the public key in the asymmetric key
outside of KMS

The top level --endpoint parameter must be supplied for this
operation.


Usage
=====

   oci kms crypto verified-data verify [OPTIONS]


Required Parameters
===================

--key-id [text]

The OCID of the key used to sign the message

--key-version-id [text]

The OCID of the keyVersion used to sign the message

--message [text]

The Base64-encoded binary data object denoting the message or message
digest to be signed. Message can be upto 4096 size in bytes. To sign a
larger message, provide the message digest.

--signature [text]

The Base64-encoded binary data object denoting the cryptographic
signature that was generated for the message.

--signing-algorithm [text]

The algorithm to be used for signing the message or message digest For
RSA keys, there are two supported Signature Schemes: PKCS1 and PSS
along with different Hashing algorithms. For ECDSA keys, ECDSA is the
supported signature scheme with different hashing algorithms. In case
of passing digest for signing, make sure the same hashing algorithm is
specified as used for created for digest.

Accepted values are:

   ECDSA_SHA_256, ECDSA_SHA_384, ECDSA_SHA_512, SHA_224_RSA_PKCS1_V1_5, SHA_224_RSA_PKCS_PSS, SHA_256_RSA_PKCS1_V1_5, SHA_256_RSA_PKCS_PSS, SHA_384_RSA_PKCS1_V1_5, SHA_384_RSA_PKCS_PSS, SHA_512_RSA_PKCS1_V1_5, SHA_512_RSA_PKCS_PSS


Optional Parameters
===================

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id -->
compartmentId), while the values of the keys need to be populated by
the user before using the sample file as an input to this command. For
any command option that accepts multiple values, the value of the key
can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--message-type [text]

Denotes whether the value of the message parameter is a raw message or
a message digest. The default value, RAW, indicates a message. To
indicate a message digest, enter DIGEST.

Accepted values are:

   DIGEST, RAW


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-rc-file", "--
config-file", "--debug", "--defaults-file", "--endpoint", "--generate-
full-command-json-input", "--generate-param-json-input", "--help", "--
latest-version", "--no-retry", "--opc-client-request-id", "--opc-
request-id", "--output", "--profile", "--query", "--raw-output", "--
region", "--release-info", "--request-id", "--version", "-?", "-d",
"-h", "-v"
