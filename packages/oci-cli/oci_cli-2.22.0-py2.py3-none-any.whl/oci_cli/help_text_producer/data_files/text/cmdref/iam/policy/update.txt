"update"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Examples

  * Description

  * Command

  * Output


Description
===========

Updates the specified policy. You can update the description or the
policy statements themselves.

Policy changes take effect typically within 10 seconds.


Usage
=====

   oci iam policy update [OPTIONS]


Required Parameters
===================

--policy-id [text]

The OCID of the policy.


Optional Parameters
===================

--defined-tags [complex type]

Usage of predefined tag keys. These predefined keys are scoped to
namespaces. Example: *{"foo-namespace": {"bar-key": "foo-value"}}*
This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--description [text]

The description you assign to the policy. Does not have to be unique,
and it's changeable.

--force

Perform update without prompting for confirmation.

--freeform-tags [complex type]

Simple key-value pair that is applied without any predefined name,
type or scope. Exists for cross-compatibility only. Example: *{"bar-
key": "value"}* This is a complex type whose value must be valid JSON.
The value can be provided as a string on the command line or passed in
as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id -->
compartmentId), while the values of the keys need to be populated by
the user before using the sample file as an input to this command. For
any command option that accepts multiple values, the value of the key
can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--if-match [text]

For optimistic concurrency control. In the PUT or DELETE call for a
resource, set the *if-match* parameter to the value of the etag from a
previous GET or POST response for that resource.  The resource will be
updated or deleted only if the etag you provide matches the resource's
current etag value.

--statements [text]

A JSON array of policy statements written in the policy language. See
How Policies Work and Common Policies. Example: '["statement
1","statement 2"]' (The single quotes are required.)

--version-date [text]

The version of the policy. If set to an empty string, when a request
comes in for authorization, the policy will be evaluated according to
the current behavior of the services at that moment. If set to a
particular date (YYYY-MM-DD), the policy will be evaluated according
to the behavior of the services on that date.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-rc-file", "--
config-file", "--debug", "--defaults-file", "--endpoint", "--generate-
full-command-json-input", "--generate-param-json-input", "--help", "--
latest-version", "--no-retry", "--opc-client-request-id", "--opc-
request-id", "--output", "--profile", "--query", "--raw-output", "--
region", "--release-info", "--request-id", "--version", "-?", "-d",
"-h", "-v"


Examples
========


Description
-----------

Update oci iam policy


Command
-------

    oci iam policy update --policy-id ocid1.policy.oc1..<POLICY OCID> --statements "[\"Allow group Administrators to manage all-resources on compartment policy-test \"]" --version-date


Output
------

   {
    "data": [
         {
              "compartment-id": "ocid1.compartment.oc1...........",
              "defined-tags": {},
              "description": "test-policy",
              "freeform-tags": {},
              "id": "ocid1.policy.oc1..........",
              "inactive-status": "null",
              "lifecycle-state": "ACTIVE",
              "name": "test-policy",
              "statements": [
                   "Allow group Administrators to manage all-resources on compartment policy-test "
              ],
              "time-created": "2020-09-29T18:21:39.356000+00:00",
              "version-date": "null"
         }
    ]
   }
