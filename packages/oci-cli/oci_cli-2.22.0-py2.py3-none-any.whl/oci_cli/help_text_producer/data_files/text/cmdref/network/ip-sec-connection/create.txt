"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters


Description
===========

Creates a new IPSec connection between the specified DRG and CPE. For
more information, see IPSec VPNs.

If you configure at least one tunnel to use static routing, then in
the request you must provide at least one valid static route (you're
allowed a maximum of 10). For example: 10.0.0.0/16. If you configure
both tunnels to use BGP dynamic routing, you can provide an empty list
for the static routes. For more information, see the important note in
IPSecConnection.

For the purposes of access control, you must provide the OCID of the
compartment where you want the IPSec connection to reside. Notice that
the IPSec connection doesn't have to be in the same compartment as the
DRG, CPE, or other Networking Service components. If you're not sure
which compartment to use, put the IPSec connection in the same
compartment as the DRG. For more information about compartments and
access control, see Overview of the IAM Service. For information about
OCIDs, see Resource Identifiers.

You may optionally specify a *display name* for the IPSec connection,
otherwise a default is provided. It does not have to be unique, and
you can change it. Avoid entering confidential information.

After creating the IPSec connection, you need to configure your on-
premises router with tunnel-specific information. For tunnel status
and the required configuration information, see:

   * IPSecConnectionTunnel   * IPSecConnectionTunnelSharedSecret

For each tunnel, you need the IP address of Oracle's VPN headend and
the shared secret (that is, the pre-shared key). For more information,
see Configuring Your On-Premises Router for an IPSec VPN.


Usage
=====

   oci network ip-sec-connection create [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

The OCID of the compartment to contain the IPSec connection.

--cpe-id [text]

The OCID of the Cpe object.

--drg-id [text]

The OCID of the DRG.

--static-routes [complex type]

Static routes to the CPE. At least one route must be included. The
CIDR must not be a multicast address or class E address. This must be
provided in JSON format.

Example:

   '["10.0.0.0/16"]'


Optional Parameters
===================

--cpe-local-identifier [text]

Your identifier for your CPE device. Can be either an IP address or a
hostname (specifically, the fully qualified domain name (FQDN)). The
type of identifier you provide here must correspond to the value for
*cpeLocalIdentifierType*.

If you don't provide a value, the *ipAddress* attribute for the Cpe
object specified by *cpeId* is used as the *cpeLocalIdentifier*.

For information about why you'd provide this value, see If Your CPE Is
Behind a NAT Device.

Example IP address: *10.0.3.3*

Example hostname: *cpe.example.com*

--cpe-local-identifier-type [text]

The type of identifier for your CPE device. The value you provide here
must correspond to the value for *cpeLocalIdentifier*.

Accepted values are:

   HOSTNAME, IP_ADDRESS

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags.

Example:

   {"Operations": {"CostCenter": "42"}}

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--display-name [text]

A user-friendly name. Does not have to be unique, and it's changeable.
Avoid entering confidential information.

--freeform-tags [complex type]

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. For more information, see
Resource Tags.

Example:

   {"Department": "Finance"}

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id -->
compartmentId), while the values of the keys need to be populated by
the user before using the sample file as an input to this command. For
any command option that accepts multiple values, the value of the key
can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--max-wait-seconds [integer]

The maximum time to wait for the resource to reach the lifecycle state
defined by "--wait-for-state". Defaults to 1200 seconds.

--tunnel-configuration [complex type]

Information for creating the individual tunnels in the IPSec
connection. You can provide a maximum of 2 *tunnelConfiguration*
objects in the array (one for each of the two tunnels).

This option is a JSON list with items of type
CreateIPSecConnectionTunnelDetails.  For documentation on
CreateIPSecConnectionTunnelDetails please see our API reference: http
s://docs.cloud.oracle.com/api/#/en/iaas/20160918/datatypes/CreateIPSe
cConnectionTunnelDetails. This is a complex type whose value must be
valid JSON. The value can be provided as a string on the command line
or passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--wait-for-state [text]

This operation creates, modifies or deletes a resource that has a
defined lifecycle state. Specify this option to perform the action and
then wait until the resource reaches a given lifecycle state. Multiple
states can be specified, returning on the first state. For example, "
--wait-for-state" SUCCEEDED "--wait-for-state" FAILED would return on
whichever lifecycle state is reached first. If timeout is reached, a
return code of 2 is returned. For any other error, a return code of 1
is returned.

Accepted values are:

   AVAILABLE, PROVISIONING, TERMINATED, TERMINATING

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the resource to
see if it has reached the lifecycle state defined by "--wait-for-
state". Defaults to 30 seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-rc-file", "--
config-file", "--debug", "--defaults-file", "--endpoint", "--generate-
full-command-json-input", "--generate-param-json-input", "--help", "--
latest-version", "--no-retry", "--opc-client-request-id", "--opc-
request-id", "--output", "--profile", "--query", "--raw-output", "--
region", "--release-info", "--request-id", "--version", "-?", "-d",
"-h", "-v"
