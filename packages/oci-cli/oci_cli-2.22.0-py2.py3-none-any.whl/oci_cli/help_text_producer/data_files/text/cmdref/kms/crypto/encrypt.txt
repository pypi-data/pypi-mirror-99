"encrypt"
*********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters


Description
===========

Encrypts data using the given EncryptDataDetails resource. Plaintext
included in the example request is a base64-encoded value of a UTF-8
string.

The top level --endpoint parameter must be supplied for this
operation.


Usage
=====

   oci kms crypto encrypt [OPTIONS]


Required Parameters
===================

--key-id [text]

The OCID of the key to encrypt with.

--plaintext [text]

The plaintext data to encrypt.


Optional Parameters
===================

--associated-data [complex type]

Information that can be used to provide an encryption context for the
encrypted data. The length of the string representation of the
associated data must be fewer than 4096 characters. This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--encryption-algorithm [text]

Encryption algorithm to be used while encrypting/decrypting data using
a customer key AES_256_GCM is the supported value AES keys and uses
GCM mode of operation RSA_OAEP_SHA_1 and RSA_OAEP_SHA_256 are
supported for RSA keys and use OAEP padding.

Accepted values are:

   AES_256_GCM, RSA_OAEP_SHA_1, RSA_OAEP_SHA_256

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id -->
compartmentId), while the values of the keys need to be populated by
the user before using the sample file as an input to this command. For
any command option that accepts multiple values, the value of the key
can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--key-version-id [text]

The OCID of the keyVersion used to encrypt the ciphertext.

--logging-context [complex type]

Information that provides context for audit logging. You can provide
this additional data as key-value pairs to include in the audit logs
when audit logging is enabled. This is a complex type whose value must
be valid JSON. The value can be provided as a string on the command
line or passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-rc-file", "--
config-file", "--debug", "--defaults-file", "--endpoint", "--generate-
full-command-json-input", "--generate-param-json-input", "--help", "--
latest-version", "--no-retry", "--opc-client-request-id", "--opc-
request-id", "--output", "--profile", "--query", "--raw-output", "--
region", "--release-info", "--request-id", "--version", "-?", "-d",
"-h", "-v"
