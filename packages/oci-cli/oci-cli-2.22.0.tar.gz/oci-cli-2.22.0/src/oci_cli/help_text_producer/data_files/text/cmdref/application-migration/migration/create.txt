"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters


Description
===========

Creates a migration. A migration represents the end-to-end workflow of
moving an application from a source environment to Oracle Cloud
Infrastructure. Each migration moves a single application to Oracle
Cloud Infrastructure. For more information, see Manage Migrations.

When you create a migration, provide the required information to let
Application Migration access the source environment. Application
Migration uses this information to access the application in the
source environment and discover application artifacts.

All Oracle Cloud Infrastructure resources, including migrations, get
an Oracle-assigned, unique ID called an Oracle Cloud Identifier
(OCID). When you create a resource, you can find its OCID in the
response. You can also retrieve a resource's OCID by using a List API
operation on that resource type, or by viewing the resource in the
Console. For more information, see Resource Identifiers.

After you send your request, a migration is created in the compartment
that contains the source. The new migration's lifecycle state will
temporarily be <code>CREATING</code> and the state of the migration
will be <code>DISCOVERING_APPLICATION</code>. During this phase,
Application Migration sets the template for the
<code>serviceConfig</code> and <code>applicationConfig</code> fields
of the migration. When this operation is complete, the state of the
migration changes to <code>MISSING_CONFIG_VALUES</code>. Next, you'll
need to update the migration to provide configuration values. Before
updating the migration, ensure that its state has changed to
<code>MISSING_CONFIG_VALUES</code>.

To track the progress of this operation, you can monitor the status of
the Create Migration and Discover Application work requests by using
the <code>`GetWorkRequest <https://docs.cloud.oracle.com/en-
us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/application-migration
/work-request/get.html>`__</code> REST API operation on the work
request or by viewing the status of the work request in the console.


Usage
=====

   oci application-migration migration create [OPTIONS]


Required Parameters
===================

--application-name [text]

Name of the application that you want to migrate from the source
environment.

--compartment-id, -c [text]

The OCID of the compartment that contains the source.

--discovery-details [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--source-id [text]

The OCID of the source.


Optional Parameters
===================

--application-config [complex type]

Configuration required to migrate the application. In addition to the
key and value, additional fields are provided to describe type type
and purpose of each field. Only the value for each key is required
when passing configuration to the CreateMigration operation.

This option is a JSON dictionary of type dict(str,
ConfigurationField).  For documentation on ConfigurationField please
see our API reference: https://docs.cloud.oracle.com/api/#/en/applica
tionmigration/20191031/datatypes/ConfigurationField. This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags. Example:
*{"Operations": {"CostCenter": "42"}}* This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--description [text]

Description of the application that you are migrating.

--display-name [text]

User-friendly name of the application. This will be the name of the
migrated application in Oracle Cloud Infrastructure.

--freeform-tags [complex type]

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. For more information, see
Resource Tags. Example: *{"Department": "Finance"}* This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id -->
compartmentId), while the values of the keys need to be populated by
the user before using the sample file as an input to this command. For
any command option that accepts multiple values, the value of the key
can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--is-selective-migration [boolean]

If set to *true*, Application Migration migrates the application
resources selectively depending on the source.

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--pre-created-target-database-type [text]

The pre-existing database type to be used in this migration.
Currently, Application migration only supports Oracle Cloud
Infrastrure databases and this option is currently available only for
*JAVA_CLOUD_SERVICE* and *WEBLOGIC_CLOUD_SERVICE* target instance
types.

Accepted values are:

   DATABASE_SYSTEM, NOT_SET

--service-config [complex type]

Configuration required to migrate the application. In addition to the
key and value, additional fields are provided to describe type type
and purpose of each field. Only the value for each key is required
when passing configuration to the CreateMigration operation.

This option is a JSON dictionary of type dict(str,
ConfigurationField).  For documentation on ConfigurationField please
see our API reference: https://docs.cloud.oracle.com/api/#/en/applica
tionmigration/20191031/datatypes/ConfigurationField. This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, SUCCEEDED

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
to see if it has reached the state defined by "--wait-for-state".
Defaults to 30 seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-rc-file", "--
config-file", "--debug", "--defaults-file", "--endpoint", "--generate-
full-command-json-input", "--generate-param-json-input", "--help", "--
latest-version", "--no-retry", "--opc-client-request-id", "--opc-
request-id", "--output", "--profile", "--query", "--raw-output", "--
region", "--release-info", "--request-id", "--version", "-?", "-d",
"-h", "-v"
