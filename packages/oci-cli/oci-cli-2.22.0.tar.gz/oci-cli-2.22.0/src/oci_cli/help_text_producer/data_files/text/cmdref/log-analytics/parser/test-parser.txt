"test-parser"
*************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters


Description
===========

test parser


Usage
=====

   oci log-analytics parser test-parser [OPTIONS]


Required Parameters
===================

--namespace-name [text]

The Logging Analytics namespace used for the request.


Optional Parameters
===================

--content [text]

content

--description [text]

description

--display-name [text]

Display name

--encoding [text]

encoding

--example-content [text]

exampleContent

--field-maps [complex type]

fieldMaps

This option is a JSON list with items of type LogAnalyticsParserField.
For documentation on LogAnalyticsParserField please see our API
reference: https://docs.cloud.oracle.com/api/#/en/loganalytics/202006
01/datatypes/LogAnalyticsParserField. This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--footer-content [text]

footerRegex

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id -->
compartmentId), while the values of the keys need to be populated by
the user before using the sample file as an input to this command. For
any command option that accepts multiple values, the value of the key
can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--header-content [text]

headerContent

--is-default [boolean]

isDefault

--is-hidden [integer]

parser is hidden

--is-parser-written-once [boolean]

isParserWrittenOnce

--is-single-line-content [boolean]

isSingleLineContent

--is-system [boolean]

isSystem

--language [text]

language

--log-type-test-request-version [integer]

logTypeTestRequestVersion

--metadata [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--name [text]

name

--parser-functions [complex type]

plugin instance list

This option is a JSON list with items of type
LogAnalyticsParserFunction.  For documentation on
LogAnalyticsParserFunction please see our API reference: https://docs
.cloud.oracle.com/api/#/en/loganalytics/20200601/datatypes/LogAnalyti
csParserFunction. This is a complex type whose value must be valid
JSON. The value can be provided as a string on the command line or
passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--parser-ignoreline-chars [text]

Ignore line characters

--parser-sequence [integer]

parser seq

--parser-timezone [text]

parser timezone

--req-origin-module [text]

module

--scope [text]

scope

Accepted values are:

   LOG_ENTRIES, LOG_LINES, LOG_LINES_LOG_ENTRIES

--time-updated [datetime]

lastUpdatedDate

   The following datetime formats are supported:

      Format: YYYY-MM-DDTHH:mm:ss.sssTZD
      Example: 2017-09-15T20:30:00.123Z

      Format: YYYY-MM-DDTHH:mm:ssTZD
      Example: 2017-09-15T20:30:00Z

      Format: YYYY-MM-DDTHH:mmTZD
      Example: 2017-09-15T20:30Z

      Format: YYYY-MM-DDTHH:mm:ssTZD
      Example: 2017-09-15T12:30:00.456-08:00, 2017-09-15T12:30:00.456-0800

      Format: YYYY-MM-DDTHH:mm:ssTZD
      Example: 2017-09-15T12:30:00-08:00, 2017-09-15T12:30:00-0800

      Format: YYYY-MM-DDTHH:mmTZD
      Example: 2017-09-15T12:30-08:00, 2017-09-15T12:30-0800

   The timezone for this date and time will be taken as UTC (Needs to
   be surrounded by single or double quotes)

      Format: 'YYYY-MM-DD HH:mm' or "YYYY-MM-DD HH:mm"
      Example: '2017-09-15 17:25'

   This date will be taken as midnight UTC of that day

      Format: YYYY-MM-DD
      Example: 2017-09-15

      Example: 1412195400

--tokenize-original-text [text]

Tokenize original text: true/false

--type [text]

type

Accepted values are:

   JSON, ODL, REGEX, XML


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-rc-file", "--
config-file", "--debug", "--defaults-file", "--endpoint", "--generate-
full-command-json-input", "--generate-param-json-input", "--help", "--
latest-version", "--no-retry", "--opc-client-request-id", "--opc-
request-id", "--output", "--profile", "--query", "--raw-output", "--
region", "--release-info", "--request-id", "--version", "-?", "-d",
"-h", "-v"
