"update"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters


Description
===========

Updates the configuration details for the specified migration.

When you create a migration, Application Migration sets the template
for the <code>serviceConfig</code> and <code>applicationConfig</code>
attributes of the migration. When you update the migration, you must
provide values for these fields to specify configuration information
for the application in the target environment.

Before updating the migration, complete the following tasks: <ol>
<li>Identify the migration that you want to update and ensure that the
migration is in the <code>MISSING_CONFIG_VALUES</code> state.</li>
<li>Get details of the migration using the <code>GetMigration</code>
command. This returns the  template for the <code>serviceConfig</code>
and <code>applicationConfig</code> attributes of the migration.</li>
<li>You must fill out the required details for the
<code>serviceConfig</code> and <code>applicationConfig</code>
attributes. The <code>isRequired</code> attribute of a configuration
property indicates whether it is mandatory to provide a value.</li>
<li>You can provide values for the optional configuration properties
or you can delete the optional properties for which you do not provide
values. Note that you cannot add any property that is not present in
the template.</li> </ol>

To update the migration, pass the configuration values in the request
body. The information that you must provide depends on the type of
application that you are migrating. For reference information about
configuration fields, see Provide Configuration Information.

To track the progress of the operation, you can monitor the status of
the Update Migration work request by using the <code>`GetWorkRequest
<https://docs.cloud.oracle.com/en-us/iaas/tools/oci-
cli/latest/oci_cli_docs/cmdref/application-migration/work-
request/get.html>`__</code> REST API operation on the work request or
by viewing the status of the work request in the console.

When the migration has been updated, the state of the migration
changes to <code>READY</code>. After updating the migration, you can
start the migration whenever you are ready.


Usage
=====

   oci application-migration migration update [OPTIONS]


Required Parameters
===================

--migration-id [text]

The OCID of the migration.


Optional Parameters
===================

--application-config [complex type]

Configuration required to migrate the application. In addition to the
key and value, additional fields are provided to describe type type
and purpose of each field. Only the value for each key is required
when passing configuration to the CreateMigration operation.

This option is a JSON dictionary of type dict(str,
ConfigurationField).  For documentation on ConfigurationField please
see our API reference: https://docs.cloud.oracle.com/api/#/en/applica
tionmigration/20191031/datatypes/ConfigurationField. This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags. Example:
*{"Operations": {"CostCenter": "42"}}* This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--description [text]

Description of the migration.

--discovery-details [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--display-name [text]

User-friendly name of the migration.

--force

Perform update without prompting for confirmation.

--freeform-tags [complex type]

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. For more information, see
Resource Tags. Example: *{"Department": "Finance"}* This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id -->
compartmentId), while the values of the keys need to be populated by
the user before using the sample file as an input to this command. For
any command option that accepts multiple values, the value of the key
can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--if-match [text]

For optimistic concurrency control. In the *PUT* or *DELETE* call for
a resource, set the *if-match* parameter to the value of the etag from
a previous *GET* or *POST* response for that resource. The resource
will be updated or deleted only if the etag you provide matches the
resource's current etag value.

--is-selective-migration [boolean]

If set to *true*, Application Migration migrates the application
resources selectively depending on the source.

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--service-config [complex type]

Configuration required to migrate the application. In addition to the
key and value, additional fields are provided to describe type type
and purpose of each field. Only the value for each key is required
when passing configuration to the CreateMigration operation.

This option is a JSON dictionary of type dict(str,
ConfigurationField).  For documentation on ConfigurationField please
see our API reference: https://docs.cloud.oracle.com/api/#/en/applica
tionmigration/20191031/datatypes/ConfigurationField. This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, SUCCEEDED

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
to see if it has reached the state defined by "--wait-for-state".
Defaults to 30 seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-rc-file", "--
config-file", "--debug", "--defaults-file", "--endpoint", "--generate-
full-command-json-input", "--generate-param-json-input", "--help", "--
latest-version", "--no-retry", "--opc-client-request-id", "--opc-
request-id", "--output", "--profile", "--query", "--raw-output", "--
region", "--release-info", "--request-id", "--version", "-?", "-d",
"-h", "-v"
