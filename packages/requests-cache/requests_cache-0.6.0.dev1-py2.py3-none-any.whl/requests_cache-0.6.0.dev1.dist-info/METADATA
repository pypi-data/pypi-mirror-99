Metadata-Version: 2.1
Name: requests-cache
Version: 0.6.0.dev1
Summary: Persistent cache for requests library
Home-page: https://github.com/reclosedev/requests-cache
Author: Roman Haritonov
Author-email: reclosedev@gmail.com
License: BSD License
Keywords: requests,http,cache,persistence,sqlite,redis,mongodb,gridfs,dynamodb
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Description-Content-Type: text/markdown
Requires-Dist: requests (>=2.0.0)
Provides-Extra: backends
Requires-Dist: boto3 ; extra == 'backends'
Requires-Dist: pymongo ; extra == 'backends'
Requires-Dist: redis ; extra == 'backends'
Requires-Dist: itsdangerous ; extra == 'backends'
Provides-Extra: build
Requires-Dist: coveralls ; extra == 'build'
Requires-Dist: twine ; extra == 'build'
Requires-Dist: wheel ; extra == 'build'
Provides-Extra: dev
Requires-Dist: coveralls ; extra == 'dev'
Requires-Dist: twine ; extra == 'dev'
Requires-Dist: wheel ; extra == 'dev'
Requires-Dist: boto3 ; extra == 'dev'
Requires-Dist: pymongo ; extra == 'dev'
Requires-Dist: redis ; extra == 'dev'
Requires-Dist: itsdangerous ; extra == 'dev'
Requires-Dist: m2r2 ; extra == 'dev'
Requires-Dist: Sphinx (~=3.5.1) ; extra == 'dev'
Requires-Dist: sphinx-autodoc-typehints ; extra == 'dev'
Requires-Dist: sphinx-copybutton ; extra == 'dev'
Requires-Dist: sphinx-rtd-theme ; extra == 'dev'
Requires-Dist: sphinxcontrib-apidoc ; extra == 'dev'
Requires-Dist: black (==20.8b1) ; extra == 'dev'
Requires-Dist: flake8 ; extra == 'dev'
Requires-Dist: isort ; extra == 'dev'
Requires-Dist: pre-commit ; extra == 'dev'
Requires-Dist: pytest (>=5.0) ; extra == 'dev'
Requires-Dist: pytest-cov (>=2.11) ; extra == 'dev'
Requires-Dist: requests-mock (>=1.8) ; extra == 'dev'
Provides-Extra: docs
Requires-Dist: m2r2 ; extra == 'docs'
Requires-Dist: Sphinx (~=3.5.1) ; extra == 'docs'
Requires-Dist: sphinx-autodoc-typehints ; extra == 'docs'
Requires-Dist: sphinx-copybutton ; extra == 'docs'
Requires-Dist: sphinx-rtd-theme ; extra == 'docs'
Requires-Dist: sphinxcontrib-apidoc ; extra == 'docs'
Provides-Extra: test
Requires-Dist: black (==20.8b1) ; extra == 'test'
Requires-Dist: flake8 ; extra == 'test'
Requires-Dist: isort ; extra == 'test'
Requires-Dist: pre-commit ; extra == 'test'
Requires-Dist: pytest (>=5.0) ; extra == 'test'
Requires-Dist: pytest-cov (>=2.11) ; extra == 'test'
Requires-Dist: requests-mock (>=1.8) ; extra == 'test'

# requests-cache
[![Build](https://github.com/reclosedev/requests-cache/actions/workflows/build.yml/badge.svg)](https://github.com/reclosedev/requests-cache/actions/workflows/build.yml)
[![Coverage](https://coveralls.io/repos/github/reclosedev/requests-cache/badge.svg?branch=master)](https://coveralls.io/github/reclosedev/requests-cache?branch=master)
[![Documentation](https://img.shields.io/readthedocs/requests-cache/latest)](https://requests-cache.readthedocs.io/en/latest/)
[![PyPI](https://img.shields.io/pypi/v/requests-cache?color=blue)](https://pypi.org/project/requests-cache)
[![PyPI - Python Versions](https://img.shields.io/pypi/pyversions/requests-cache)](https://pypi.org/project/requests-cache)
[![PyPI - Format](https://img.shields.io/pypi/format/requests-cache?color=blue)](https://pypi.org/project/requests-cache)
[![Code Shelter](https://www.codeshelter.co/static/badges/badge-flat.svg)](https://www.codeshelter.co/)

## Summary
**Requests-cache** is a transparent persistent HTTP cache for the python [requests](http://python-requests.org)
library. It is especially useful for web scraping, consuming REST APIs, slow or rate-limited
sites, or any other scenario in which you're making lots of requests that are likely to be sent
more than once.

Several storage backends are included: **SQLite**, **Redis**, **MongoDB**, and **DynamoDB**.

See full project documentation at: https://requests-cache.readthedocs.io

## Installation
Install with pip:
```bash
pip install requests-cache
```

Requirements:
Requires python 3.6+.
You may need additional dependencies depending on which backend you want to use.
To install with extra dependencies for all supported backends:
```bash
pip install requests-cache[backends]
```

See [Contributing Guide](https://github.com/reclosedev/requests-cache/blob/master/CONTRIBUTING.md)
for setup info for local development.

## Full Examples
* You can find a working example at Real Python:
[Caching External API Requests](https://realpython.com/blog/python/caching-external-api-requests)
* There are some additional examples in the [examples/](https://github.com/reclosedev/requests-cache/tree/master/examples) folder

## General Usage
There are two main ways of using `requests-cache`:
* Using [CachedSession](https://requests-cache.readthedocs.io/en/latest/api.html#requests_cache.core.CachedSession) (recommended)
* Globally patching `requests` using [install_cache](https://requests-cache.readthedocs.io/en/latest/api.html#requests_cache.core.install_cache)

### Sessions
`CachedSession` wraps `requests.Session` with caching features, and otherwise behaves the same as a
normal session.

Basic example:
```python
from requests_cache import CachedSession

session = CachedSession('demo_cache', backend='sqlite')
for i in range(100):
    session.get('http://httpbin.org/delay/1')
```
The URL in this example adds a delay of 1 second, but all 100 requests will complete in just over 1
second. The response will be fetched once, saved to `demo_cache.sqlite`, and subsequent requests
will return the cached response near-instantly.

There are many ways to customize caching behavior; see
[Advanced Usage](https://requests-cache.readthedocs.io/en/latest/advanced_usage.html) for details.

### Patching
Patching with `requests_cache.install_cache()` will add caching to all `requests` functions:
```python
import requests
import requests_cache

requests_cache.install_cache()
requests.get('http://httpbin.org/get')
session = requests.Session()
session.get('http://httpbin.org/get')
```

`install_cache()` takes all the same parameters as `CachedSession`. It can be temporarily disabled
with `disabled()`, and completely removed with `uninstall_cache()`:
```python
# Neither of these requests will use the cache
with requests_cache.disabled():
    requests.get('http://httpbin.org/get')

requests_cache.uninstall_cache()
requests.get('http://httpbin.org/get')
```

**Limitations:**

Like any other utility that uses global patching, there are some scenarios where you won't want to
use this:
* In a multi-threaded or multiprocess applications
* In an application that uses other packages that extend or modify `requests.Session`
* In a package that will be used by other packages or applications

### Cache Backends
Several cache backends are included, which can be selected with the `backend` parameter to
`CachedSession` or `install_cache()`:

* `'memory'` : Not persistent, just stores responses with an in-memory dict
* `'sqlite'` : [SQLite](https://www.sqlite.org) database (**default**)
* `'redis'` : [Redis](https://redis.io/) cache (requires `redis`)
* `'mongodb'` : [MongoDB](https://www.mongodb.com/) database (requires `pymongo`)
* `'dynamodb'` : [Amazon DynamoDB](https://aws.amazon.com/dynamodb/) database (requires `boto3`)

### Cache Expiration
By default, cached responses will be stored indefinitely. There are a number of ways you can handle
cache expiration. The simplest is using the `expire_after` param with a value in seconds:
```python
# Expire after 30 seconds
session = CachedSession(expire_after=30)
```

Or a `timedelta`:
```python
from datetime import timedelta

# Expire after 30 days
session = CachedSession(expire_after=timedelta(days=30))
```

You can also set expiration on a per-request basis, which will override any session settings:
```python
# Expire after 6 minutes
session.get('http://httpbin.org/get', expire_after=360)
```

If a per-session expiration is set but you want to temporarily disable it, use ```-1```:
```python
# Never expire
session.get('http://httpbin.org/get', expire_after=-1)
```

For better performance, expired responses won't be removed immediately, but will be removed
(or replaced) the next time they are accessed. To manually clear all expired responses:
```python
session.remove_expired_responses()
```
Or, when using patching:
```python
requests_cache.remove_expired_responses()
```

Or, to revalidate the cache with a new expiration:
```python
session.remove_expired_responses(expire_after=360)
```

## Related Projects
If `requests-cache` isn't quite what you need, you can help make it better! See the
[Contributing Guide](https://github.com/reclosedev/requests-cache/blob/master/CONTRIBUTING.md)
for details.

You can also check out these other python cache projects:

* [CacheControl](https://github.com/ionrock/cachecontrol): An HTTP cache for `requests` that caches
  according to uses HTTP headers and status codes
* [aiohttp-client-cache](https://github.com/JWCook/aiohttp-client-cache): An async HTTP cache for
  `aiohttp`, based on `requests-cache`
* [aiohttp-cache](https://github.com/cr0hn/aiohttp-cache): A server-side async HTTP cache for the
  `aiohttp` web server
* [diskcache](https://github.com/grantjenks/python-diskcache): A general-purpose (not HTTP-specific)
  file-based cache built on SQLite
* [aiocache](https://github.com/aio-libs/aiocache): General-purpose (not HTTP-specific) async cache
  backends

# History

## 0.6.0 (2021-04-TBD)
[See all included issues and PRs](https://github.com/reclosedev/requests-cache/milestone/1?closed=1)

* Drop support for python <= 3.5
* Add support for setting expiration for individual requests
* Add support for setting expiration based on URL glob patterns
* Add support for overriding original expiration (i.e., revalidating) in `CachedSession.remove_expired_responses()` 
* Add `CacheMixin` class to be make the features of `CachedSession` usable as a mixin class,
  for compatibility with other `requests`-based libraries
* Add `CachedResponse` class to wrapped cached `requests.Response` objects, make additional cache
  information available to client code
* Add `BaseCache.urls` property to get all URLs persisted in the cache
* Add `timeout` parameter to SQLite backend
* Add optional support for `itsdangerous` for more secure serialization
* Update usage of deprecated MongoClient `save()` method
* Fix TypeError with `DbPickleDict` initialization
* Fix usage of `CachedSession.cache_disabled` if used within another contextmanager
* Fix non-thread-safe iteration in `BaseCache`
* Fix `get_cache()`, `clear()`, and `remove_expired_responses()` so they will do nothing if
  requests-cache is not installed
* Add `HEAD` to default `allowable_methods`

## 0.5.2 (2019-08-14)
* Fix DeprecationWarning from collections #140

## 0.5.1 (2019-08-13)
* Remove Python 2.6 Testing from travis #133
* Fix DeprecationWarning from collections #131
* vacuum the sqlite database after clearing a table #134
* Fix handling of unpickle errors #128

## 0.5.0 (2019-04-18)
Project is now added to [Code Shelter](https://www.codeshelter.co)

* Add gridfs support, thanks to @chengguangnan
* Add dynamodb support, thanks to @ar90n
* Add response filter #104, thanks to @christopher-dG
* Fix bulk_commit #78
* Fix remove_expired_responses missed in __init__.py #93
* Fix deprecation warnings #122, thanks to mbarkhau

## 0.4.13 (2016-12-23)
* Support PyMongo3, thanks to @craigls #72
* Fix streaming releate issue #68

## 0.4.12 (2016-03-19)
* Fix ability to pass backend instance in `install_cache` #61


## 0.4.11 (2016-03-07)
* `ignore_parameters` feature, thanks to @themiurgo and @YetAnotherNerd (#52, #55)
* More informative message for missing backend dependencies, thanks to @Garrett-R (#60)

## 0.4.10 (2015-04-28)
* Better transactional handling in sqlite #50, thanks to @rgant
* Compatibility with streaming in requests >= 2.6.x

## 0.4.9 (2015-01-17)
* `expire_after` now also accepts `timedelta`, thanks to @femtotrader
* Added Ability to include headers to cache key (`include_get_headers` option)
* Added string representation for `CachedSession`

## 0.4.8 (2014-12-13)
* Fix bug in reading cached streaming response

## 0.4.7 (2014-12-06)
* Fix compatibility with Requests > 2.4.1 (json arg, response history)

## 0.4.6 (2014-10-13)
* Monkey patch now uses class instead lambda (compatibility with rauth)
* Normalize (sort) parameters passed as builtin dict

## 0.4.5 (2014-08-22)
* Requests==2.3.0 compatibility, thanks to @gwillem

## 0.4.4 (2013-10-31)
* Check for backend availability in install_cache(), not at the first request
* Default storage fallbacks to memory if `sqlite` is not available

## 0.4.3 (2013-09-12)
* Fix `response.from_cache` not set in hooks

## 0.4.2 (2013-08-25)
* Fix `UnpickleableError` for gzip responses


## 0.4.1 (2013-08-19)
* `requests_cache.enabled()` context manager
* Compatibility with Requests 1.2.3 cookies handling

## 0.4.0 (2013-04-25)
* Redis backend. Thanks to @michaelbeaumont
* Fix for changes in Requests 1.2.0 hooks dispatching


## 0.3.0 (2013-02-24)
* Support for `Requests` 1.x.x
* `CachedSession`
* Many backward incompatible changes

## 0.2.1 (2013-01-13)
* Fix broken PyPi package

## 0.2.0 (2013-01-12)
* Last backward compatible version for `Requests` 0.14.2

## 0.1.3 (2012-05-04)
* Thread safety for default `sqlite` backend
* Take into account the POST parameters when cache is configured
  with 'POST' in `allowable_methods`

## 0.1.2 (2012-05-02)
* Reduce number of `sqlite` database write operations
* `fast_save` option for `sqlite` backend

## 0.1.1 (2012-04-11)
* Fix: restore responses from response.history
* Internal refactoring (`MemoryCache` -> `BaseCache`, `reduce_response`
  and `restore_response` moved to `BaseCache`)
* `connection` option for `MongoCache`

## 0.1.0 (2012-04-10)
* initial PyPI release


