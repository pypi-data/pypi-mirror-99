# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import repository_service_pb2 as repository__service__pb2


class RepositoryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RepositoryExists = channel.unary_unary(
                '/gitaly.RepositoryService/RepositoryExists',
                request_serializer=repository__service__pb2.RepositoryExistsRequest.SerializeToString,
                response_deserializer=repository__service__pb2.RepositoryExistsResponse.FromString,
                )
        self.RepackIncremental = channel.unary_unary(
                '/gitaly.RepositoryService/RepackIncremental',
                request_serializer=repository__service__pb2.RepackIncrementalRequest.SerializeToString,
                response_deserializer=repository__service__pb2.RepackIncrementalResponse.FromString,
                )
        self.RepackFull = channel.unary_unary(
                '/gitaly.RepositoryService/RepackFull',
                request_serializer=repository__service__pb2.RepackFullRequest.SerializeToString,
                response_deserializer=repository__service__pb2.RepackFullResponse.FromString,
                )
        self.MidxRepack = channel.unary_unary(
                '/gitaly.RepositoryService/MidxRepack',
                request_serializer=repository__service__pb2.MidxRepackRequest.SerializeToString,
                response_deserializer=repository__service__pb2.MidxRepackResponse.FromString,
                )
        self.GarbageCollect = channel.unary_unary(
                '/gitaly.RepositoryService/GarbageCollect',
                request_serializer=repository__service__pb2.GarbageCollectRequest.SerializeToString,
                response_deserializer=repository__service__pb2.GarbageCollectResponse.FromString,
                )
        self.WriteCommitGraph = channel.unary_unary(
                '/gitaly.RepositoryService/WriteCommitGraph',
                request_serializer=repository__service__pb2.WriteCommitGraphRequest.SerializeToString,
                response_deserializer=repository__service__pb2.WriteCommitGraphResponse.FromString,
                )
        self.RepositorySize = channel.unary_unary(
                '/gitaly.RepositoryService/RepositorySize',
                request_serializer=repository__service__pb2.RepositorySizeRequest.SerializeToString,
                response_deserializer=repository__service__pb2.RepositorySizeResponse.FromString,
                )
        self.ApplyGitattributes = channel.unary_unary(
                '/gitaly.RepositoryService/ApplyGitattributes',
                request_serializer=repository__service__pb2.ApplyGitattributesRequest.SerializeToString,
                response_deserializer=repository__service__pb2.ApplyGitattributesResponse.FromString,
                )
        self.FetchRemote = channel.unary_unary(
                '/gitaly.RepositoryService/FetchRemote',
                request_serializer=repository__service__pb2.FetchRemoteRequest.SerializeToString,
                response_deserializer=repository__service__pb2.FetchRemoteResponse.FromString,
                )
        self.CreateRepository = channel.unary_unary(
                '/gitaly.RepositoryService/CreateRepository',
                request_serializer=repository__service__pb2.CreateRepositoryRequest.SerializeToString,
                response_deserializer=repository__service__pb2.CreateRepositoryResponse.FromString,
                )
        self.GetArchive = channel.unary_stream(
                '/gitaly.RepositoryService/GetArchive',
                request_serializer=repository__service__pb2.GetArchiveRequest.SerializeToString,
                response_deserializer=repository__service__pb2.GetArchiveResponse.FromString,
                )
        self.HasLocalBranches = channel.unary_unary(
                '/gitaly.RepositoryService/HasLocalBranches',
                request_serializer=repository__service__pb2.HasLocalBranchesRequest.SerializeToString,
                response_deserializer=repository__service__pb2.HasLocalBranchesResponse.FromString,
                )
        self.FetchSourceBranch = channel.unary_unary(
                '/gitaly.RepositoryService/FetchSourceBranch',
                request_serializer=repository__service__pb2.FetchSourceBranchRequest.SerializeToString,
                response_deserializer=repository__service__pb2.FetchSourceBranchResponse.FromString,
                )
        self.Fsck = channel.unary_unary(
                '/gitaly.RepositoryService/Fsck',
                request_serializer=repository__service__pb2.FsckRequest.SerializeToString,
                response_deserializer=repository__service__pb2.FsckResponse.FromString,
                )
        self.WriteRef = channel.unary_unary(
                '/gitaly.RepositoryService/WriteRef',
                request_serializer=repository__service__pb2.WriteRefRequest.SerializeToString,
                response_deserializer=repository__service__pb2.WriteRefResponse.FromString,
                )
        self.FindMergeBase = channel.unary_unary(
                '/gitaly.RepositoryService/FindMergeBase',
                request_serializer=repository__service__pb2.FindMergeBaseRequest.SerializeToString,
                response_deserializer=repository__service__pb2.FindMergeBaseResponse.FromString,
                )
        self.CreateFork = channel.unary_unary(
                '/gitaly.RepositoryService/CreateFork',
                request_serializer=repository__service__pb2.CreateForkRequest.SerializeToString,
                response_deserializer=repository__service__pb2.CreateForkResponse.FromString,
                )
        self.IsRebaseInProgress = channel.unary_unary(
                '/gitaly.RepositoryService/IsRebaseInProgress',
                request_serializer=repository__service__pb2.IsRebaseInProgressRequest.SerializeToString,
                response_deserializer=repository__service__pb2.IsRebaseInProgressResponse.FromString,
                )
        self.IsSquashInProgress = channel.unary_unary(
                '/gitaly.RepositoryService/IsSquashInProgress',
                request_serializer=repository__service__pb2.IsSquashInProgressRequest.SerializeToString,
                response_deserializer=repository__service__pb2.IsSquashInProgressResponse.FromString,
                )
        self.CreateRepositoryFromURL = channel.unary_unary(
                '/gitaly.RepositoryService/CreateRepositoryFromURL',
                request_serializer=repository__service__pb2.CreateRepositoryFromURLRequest.SerializeToString,
                response_deserializer=repository__service__pb2.CreateRepositoryFromURLResponse.FromString,
                )
        self.CreateBundle = channel.unary_stream(
                '/gitaly.RepositoryService/CreateBundle',
                request_serializer=repository__service__pb2.CreateBundleRequest.SerializeToString,
                response_deserializer=repository__service__pb2.CreateBundleResponse.FromString,
                )
        self.CreateRepositoryFromBundle = channel.stream_unary(
                '/gitaly.RepositoryService/CreateRepositoryFromBundle',
                request_serializer=repository__service__pb2.CreateRepositoryFromBundleRequest.SerializeToString,
                response_deserializer=repository__service__pb2.CreateRepositoryFromBundleResponse.FromString,
                )
        self.SetConfig = channel.unary_unary(
                '/gitaly.RepositoryService/SetConfig',
                request_serializer=repository__service__pb2.SetConfigRequest.SerializeToString,
                response_deserializer=repository__service__pb2.SetConfigResponse.FromString,
                )
        self.DeleteConfig = channel.unary_unary(
                '/gitaly.RepositoryService/DeleteConfig',
                request_serializer=repository__service__pb2.DeleteConfigRequest.SerializeToString,
                response_deserializer=repository__service__pb2.DeleteConfigResponse.FromString,
                )
        self.FindLicense = channel.unary_unary(
                '/gitaly.RepositoryService/FindLicense',
                request_serializer=repository__service__pb2.FindLicenseRequest.SerializeToString,
                response_deserializer=repository__service__pb2.FindLicenseResponse.FromString,
                )
        self.GetInfoAttributes = channel.unary_stream(
                '/gitaly.RepositoryService/GetInfoAttributes',
                request_serializer=repository__service__pb2.GetInfoAttributesRequest.SerializeToString,
                response_deserializer=repository__service__pb2.GetInfoAttributesResponse.FromString,
                )
        self.CalculateChecksum = channel.unary_unary(
                '/gitaly.RepositoryService/CalculateChecksum',
                request_serializer=repository__service__pb2.CalculateChecksumRequest.SerializeToString,
                response_deserializer=repository__service__pb2.CalculateChecksumResponse.FromString,
                )
        self.Cleanup = channel.unary_unary(
                '/gitaly.RepositoryService/Cleanup',
                request_serializer=repository__service__pb2.CleanupRequest.SerializeToString,
                response_deserializer=repository__service__pb2.CleanupResponse.FromString,
                )
        self.GetSnapshot = channel.unary_stream(
                '/gitaly.RepositoryService/GetSnapshot',
                request_serializer=repository__service__pb2.GetSnapshotRequest.SerializeToString,
                response_deserializer=repository__service__pb2.GetSnapshotResponse.FromString,
                )
        self.CreateRepositoryFromSnapshot = channel.unary_unary(
                '/gitaly.RepositoryService/CreateRepositoryFromSnapshot',
                request_serializer=repository__service__pb2.CreateRepositoryFromSnapshotRequest.SerializeToString,
                response_deserializer=repository__service__pb2.CreateRepositoryFromSnapshotResponse.FromString,
                )
        self.GetRawChanges = channel.unary_stream(
                '/gitaly.RepositoryService/GetRawChanges',
                request_serializer=repository__service__pb2.GetRawChangesRequest.SerializeToString,
                response_deserializer=repository__service__pb2.GetRawChangesResponse.FromString,
                )
        self.SearchFilesByContent = channel.unary_stream(
                '/gitaly.RepositoryService/SearchFilesByContent',
                request_serializer=repository__service__pb2.SearchFilesByContentRequest.SerializeToString,
                response_deserializer=repository__service__pb2.SearchFilesByContentResponse.FromString,
                )
        self.SearchFilesByName = channel.unary_stream(
                '/gitaly.RepositoryService/SearchFilesByName',
                request_serializer=repository__service__pb2.SearchFilesByNameRequest.SerializeToString,
                response_deserializer=repository__service__pb2.SearchFilesByNameResponse.FromString,
                )
        self.RestoreCustomHooks = channel.stream_unary(
                '/gitaly.RepositoryService/RestoreCustomHooks',
                request_serializer=repository__service__pb2.RestoreCustomHooksRequest.SerializeToString,
                response_deserializer=repository__service__pb2.RestoreCustomHooksResponse.FromString,
                )
        self.BackupCustomHooks = channel.unary_stream(
                '/gitaly.RepositoryService/BackupCustomHooks',
                request_serializer=repository__service__pb2.BackupCustomHooksRequest.SerializeToString,
                response_deserializer=repository__service__pb2.BackupCustomHooksResponse.FromString,
                )
        self.GetObjectDirectorySize = channel.unary_unary(
                '/gitaly.RepositoryService/GetObjectDirectorySize',
                request_serializer=repository__service__pb2.GetObjectDirectorySizeRequest.SerializeToString,
                response_deserializer=repository__service__pb2.GetObjectDirectorySizeResponse.FromString,
                )
        self.CloneFromPool = channel.unary_unary(
                '/gitaly.RepositoryService/CloneFromPool',
                request_serializer=repository__service__pb2.CloneFromPoolRequest.SerializeToString,
                response_deserializer=repository__service__pb2.CloneFromPoolResponse.FromString,
                )
        self.CloneFromPoolInternal = channel.unary_unary(
                '/gitaly.RepositoryService/CloneFromPoolInternal',
                request_serializer=repository__service__pb2.CloneFromPoolInternalRequest.SerializeToString,
                response_deserializer=repository__service__pb2.CloneFromPoolInternalResponse.FromString,
                )
        self.RemoveRepository = channel.unary_unary(
                '/gitaly.RepositoryService/RemoveRepository',
                request_serializer=repository__service__pb2.RemoveRepositoryRequest.SerializeToString,
                response_deserializer=repository__service__pb2.RemoveRepositoryResponse.FromString,
                )
        self.RenameRepository = channel.unary_unary(
                '/gitaly.RepositoryService/RenameRepository',
                request_serializer=repository__service__pb2.RenameRepositoryRequest.SerializeToString,
                response_deserializer=repository__service__pb2.RenameRepositoryResponse.FromString,
                )
        self.ReplicateRepository = channel.unary_unary(
                '/gitaly.RepositoryService/ReplicateRepository',
                request_serializer=repository__service__pb2.ReplicateRepositoryRequest.SerializeToString,
                response_deserializer=repository__service__pb2.ReplicateRepositoryResponse.FromString,
                )
        self.OptimizeRepository = channel.unary_unary(
                '/gitaly.RepositoryService/OptimizeRepository',
                request_serializer=repository__service__pb2.OptimizeRepositoryRequest.SerializeToString,
                response_deserializer=repository__service__pb2.OptimizeRepositoryResponse.FromString,
                )


class RepositoryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RepositoryExists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RepackIncremental(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RepackFull(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MidxRepack(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GarbageCollect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteCommitGraph(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RepositorySize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApplyGitattributes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchRemote(self, request, context):
        """FetchRemote fetches references from a remote repository into the local
        repository.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRepository(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetArchive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HasLocalBranches(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchSourceBranch(self, request, context):
        """FetchSourceBranch fetches a branch from a second (potentially remote)
        repository into the given repository.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Fsck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteRef(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindMergeBase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateFork(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsRebaseInProgress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsSquashInProgress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRepositoryFromURL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBundle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRepositoryFromBundle(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindLicense(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInfoAttributes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateChecksum(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Cleanup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSnapshot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRepositoryFromSnapshot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRawChanges(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchFilesByContent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchFilesByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RestoreCustomHooks(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BackupCustomHooks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetObjectDirectorySize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloneFromPool(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloneFromPoolInternal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveRepository(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RenameRepository(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateRepository(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OptimizeRepository(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RepositoryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RepositoryExists': grpc.unary_unary_rpc_method_handler(
                    servicer.RepositoryExists,
                    request_deserializer=repository__service__pb2.RepositoryExistsRequest.FromString,
                    response_serializer=repository__service__pb2.RepositoryExistsResponse.SerializeToString,
            ),
            'RepackIncremental': grpc.unary_unary_rpc_method_handler(
                    servicer.RepackIncremental,
                    request_deserializer=repository__service__pb2.RepackIncrementalRequest.FromString,
                    response_serializer=repository__service__pb2.RepackIncrementalResponse.SerializeToString,
            ),
            'RepackFull': grpc.unary_unary_rpc_method_handler(
                    servicer.RepackFull,
                    request_deserializer=repository__service__pb2.RepackFullRequest.FromString,
                    response_serializer=repository__service__pb2.RepackFullResponse.SerializeToString,
            ),
            'MidxRepack': grpc.unary_unary_rpc_method_handler(
                    servicer.MidxRepack,
                    request_deserializer=repository__service__pb2.MidxRepackRequest.FromString,
                    response_serializer=repository__service__pb2.MidxRepackResponse.SerializeToString,
            ),
            'GarbageCollect': grpc.unary_unary_rpc_method_handler(
                    servicer.GarbageCollect,
                    request_deserializer=repository__service__pb2.GarbageCollectRequest.FromString,
                    response_serializer=repository__service__pb2.GarbageCollectResponse.SerializeToString,
            ),
            'WriteCommitGraph': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteCommitGraph,
                    request_deserializer=repository__service__pb2.WriteCommitGraphRequest.FromString,
                    response_serializer=repository__service__pb2.WriteCommitGraphResponse.SerializeToString,
            ),
            'RepositorySize': grpc.unary_unary_rpc_method_handler(
                    servicer.RepositorySize,
                    request_deserializer=repository__service__pb2.RepositorySizeRequest.FromString,
                    response_serializer=repository__service__pb2.RepositorySizeResponse.SerializeToString,
            ),
            'ApplyGitattributes': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyGitattributes,
                    request_deserializer=repository__service__pb2.ApplyGitattributesRequest.FromString,
                    response_serializer=repository__service__pb2.ApplyGitattributesResponse.SerializeToString,
            ),
            'FetchRemote': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchRemote,
                    request_deserializer=repository__service__pb2.FetchRemoteRequest.FromString,
                    response_serializer=repository__service__pb2.FetchRemoteResponse.SerializeToString,
            ),
            'CreateRepository': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRepository,
                    request_deserializer=repository__service__pb2.CreateRepositoryRequest.FromString,
                    response_serializer=repository__service__pb2.CreateRepositoryResponse.SerializeToString,
            ),
            'GetArchive': grpc.unary_stream_rpc_method_handler(
                    servicer.GetArchive,
                    request_deserializer=repository__service__pb2.GetArchiveRequest.FromString,
                    response_serializer=repository__service__pb2.GetArchiveResponse.SerializeToString,
            ),
            'HasLocalBranches': grpc.unary_unary_rpc_method_handler(
                    servicer.HasLocalBranches,
                    request_deserializer=repository__service__pb2.HasLocalBranchesRequest.FromString,
                    response_serializer=repository__service__pb2.HasLocalBranchesResponse.SerializeToString,
            ),
            'FetchSourceBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchSourceBranch,
                    request_deserializer=repository__service__pb2.FetchSourceBranchRequest.FromString,
                    response_serializer=repository__service__pb2.FetchSourceBranchResponse.SerializeToString,
            ),
            'Fsck': grpc.unary_unary_rpc_method_handler(
                    servicer.Fsck,
                    request_deserializer=repository__service__pb2.FsckRequest.FromString,
                    response_serializer=repository__service__pb2.FsckResponse.SerializeToString,
            ),
            'WriteRef': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteRef,
                    request_deserializer=repository__service__pb2.WriteRefRequest.FromString,
                    response_serializer=repository__service__pb2.WriteRefResponse.SerializeToString,
            ),
            'FindMergeBase': grpc.unary_unary_rpc_method_handler(
                    servicer.FindMergeBase,
                    request_deserializer=repository__service__pb2.FindMergeBaseRequest.FromString,
                    response_serializer=repository__service__pb2.FindMergeBaseResponse.SerializeToString,
            ),
            'CreateFork': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateFork,
                    request_deserializer=repository__service__pb2.CreateForkRequest.FromString,
                    response_serializer=repository__service__pb2.CreateForkResponse.SerializeToString,
            ),
            'IsRebaseInProgress': grpc.unary_unary_rpc_method_handler(
                    servicer.IsRebaseInProgress,
                    request_deserializer=repository__service__pb2.IsRebaseInProgressRequest.FromString,
                    response_serializer=repository__service__pb2.IsRebaseInProgressResponse.SerializeToString,
            ),
            'IsSquashInProgress': grpc.unary_unary_rpc_method_handler(
                    servicer.IsSquashInProgress,
                    request_deserializer=repository__service__pb2.IsSquashInProgressRequest.FromString,
                    response_serializer=repository__service__pb2.IsSquashInProgressResponse.SerializeToString,
            ),
            'CreateRepositoryFromURL': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRepositoryFromURL,
                    request_deserializer=repository__service__pb2.CreateRepositoryFromURLRequest.FromString,
                    response_serializer=repository__service__pb2.CreateRepositoryFromURLResponse.SerializeToString,
            ),
            'CreateBundle': grpc.unary_stream_rpc_method_handler(
                    servicer.CreateBundle,
                    request_deserializer=repository__service__pb2.CreateBundleRequest.FromString,
                    response_serializer=repository__service__pb2.CreateBundleResponse.SerializeToString,
            ),
            'CreateRepositoryFromBundle': grpc.stream_unary_rpc_method_handler(
                    servicer.CreateRepositoryFromBundle,
                    request_deserializer=repository__service__pb2.CreateRepositoryFromBundleRequest.FromString,
                    response_serializer=repository__service__pb2.CreateRepositoryFromBundleResponse.SerializeToString,
            ),
            'SetConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConfig,
                    request_deserializer=repository__service__pb2.SetConfigRequest.FromString,
                    response_serializer=repository__service__pb2.SetConfigResponse.SerializeToString,
            ),
            'DeleteConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteConfig,
                    request_deserializer=repository__service__pb2.DeleteConfigRequest.FromString,
                    response_serializer=repository__service__pb2.DeleteConfigResponse.SerializeToString,
            ),
            'FindLicense': grpc.unary_unary_rpc_method_handler(
                    servicer.FindLicense,
                    request_deserializer=repository__service__pb2.FindLicenseRequest.FromString,
                    response_serializer=repository__service__pb2.FindLicenseResponse.SerializeToString,
            ),
            'GetInfoAttributes': grpc.unary_stream_rpc_method_handler(
                    servicer.GetInfoAttributes,
                    request_deserializer=repository__service__pb2.GetInfoAttributesRequest.FromString,
                    response_serializer=repository__service__pb2.GetInfoAttributesResponse.SerializeToString,
            ),
            'CalculateChecksum': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateChecksum,
                    request_deserializer=repository__service__pb2.CalculateChecksumRequest.FromString,
                    response_serializer=repository__service__pb2.CalculateChecksumResponse.SerializeToString,
            ),
            'Cleanup': grpc.unary_unary_rpc_method_handler(
                    servicer.Cleanup,
                    request_deserializer=repository__service__pb2.CleanupRequest.FromString,
                    response_serializer=repository__service__pb2.CleanupResponse.SerializeToString,
            ),
            'GetSnapshot': grpc.unary_stream_rpc_method_handler(
                    servicer.GetSnapshot,
                    request_deserializer=repository__service__pb2.GetSnapshotRequest.FromString,
                    response_serializer=repository__service__pb2.GetSnapshotResponse.SerializeToString,
            ),
            'CreateRepositoryFromSnapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRepositoryFromSnapshot,
                    request_deserializer=repository__service__pb2.CreateRepositoryFromSnapshotRequest.FromString,
                    response_serializer=repository__service__pb2.CreateRepositoryFromSnapshotResponse.SerializeToString,
            ),
            'GetRawChanges': grpc.unary_stream_rpc_method_handler(
                    servicer.GetRawChanges,
                    request_deserializer=repository__service__pb2.GetRawChangesRequest.FromString,
                    response_serializer=repository__service__pb2.GetRawChangesResponse.SerializeToString,
            ),
            'SearchFilesByContent': grpc.unary_stream_rpc_method_handler(
                    servicer.SearchFilesByContent,
                    request_deserializer=repository__service__pb2.SearchFilesByContentRequest.FromString,
                    response_serializer=repository__service__pb2.SearchFilesByContentResponse.SerializeToString,
            ),
            'SearchFilesByName': grpc.unary_stream_rpc_method_handler(
                    servicer.SearchFilesByName,
                    request_deserializer=repository__service__pb2.SearchFilesByNameRequest.FromString,
                    response_serializer=repository__service__pb2.SearchFilesByNameResponse.SerializeToString,
            ),
            'RestoreCustomHooks': grpc.stream_unary_rpc_method_handler(
                    servicer.RestoreCustomHooks,
                    request_deserializer=repository__service__pb2.RestoreCustomHooksRequest.FromString,
                    response_serializer=repository__service__pb2.RestoreCustomHooksResponse.SerializeToString,
            ),
            'BackupCustomHooks': grpc.unary_stream_rpc_method_handler(
                    servicer.BackupCustomHooks,
                    request_deserializer=repository__service__pb2.BackupCustomHooksRequest.FromString,
                    response_serializer=repository__service__pb2.BackupCustomHooksResponse.SerializeToString,
            ),
            'GetObjectDirectorySize': grpc.unary_unary_rpc_method_handler(
                    servicer.GetObjectDirectorySize,
                    request_deserializer=repository__service__pb2.GetObjectDirectorySizeRequest.FromString,
                    response_serializer=repository__service__pb2.GetObjectDirectorySizeResponse.SerializeToString,
            ),
            'CloneFromPool': grpc.unary_unary_rpc_method_handler(
                    servicer.CloneFromPool,
                    request_deserializer=repository__service__pb2.CloneFromPoolRequest.FromString,
                    response_serializer=repository__service__pb2.CloneFromPoolResponse.SerializeToString,
            ),
            'CloneFromPoolInternal': grpc.unary_unary_rpc_method_handler(
                    servicer.CloneFromPoolInternal,
                    request_deserializer=repository__service__pb2.CloneFromPoolInternalRequest.FromString,
                    response_serializer=repository__service__pb2.CloneFromPoolInternalResponse.SerializeToString,
            ),
            'RemoveRepository': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveRepository,
                    request_deserializer=repository__service__pb2.RemoveRepositoryRequest.FromString,
                    response_serializer=repository__service__pb2.RemoveRepositoryResponse.SerializeToString,
            ),
            'RenameRepository': grpc.unary_unary_rpc_method_handler(
                    servicer.RenameRepository,
                    request_deserializer=repository__service__pb2.RenameRepositoryRequest.FromString,
                    response_serializer=repository__service__pb2.RenameRepositoryResponse.SerializeToString,
            ),
            'ReplicateRepository': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateRepository,
                    request_deserializer=repository__service__pb2.ReplicateRepositoryRequest.FromString,
                    response_serializer=repository__service__pb2.ReplicateRepositoryResponse.SerializeToString,
            ),
            'OptimizeRepository': grpc.unary_unary_rpc_method_handler(
                    servicer.OptimizeRepository,
                    request_deserializer=repository__service__pb2.OptimizeRepositoryRequest.FromString,
                    response_serializer=repository__service__pb2.OptimizeRepositoryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gitaly.RepositoryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RepositoryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RepositoryExists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/RepositoryExists',
            repository__service__pb2.RepositoryExistsRequest.SerializeToString,
            repository__service__pb2.RepositoryExistsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RepackIncremental(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/RepackIncremental',
            repository__service__pb2.RepackIncrementalRequest.SerializeToString,
            repository__service__pb2.RepackIncrementalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RepackFull(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/RepackFull',
            repository__service__pb2.RepackFullRequest.SerializeToString,
            repository__service__pb2.RepackFullResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MidxRepack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/MidxRepack',
            repository__service__pb2.MidxRepackRequest.SerializeToString,
            repository__service__pb2.MidxRepackResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GarbageCollect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/GarbageCollect',
            repository__service__pb2.GarbageCollectRequest.SerializeToString,
            repository__service__pb2.GarbageCollectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteCommitGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/WriteCommitGraph',
            repository__service__pb2.WriteCommitGraphRequest.SerializeToString,
            repository__service__pb2.WriteCommitGraphResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RepositorySize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/RepositorySize',
            repository__service__pb2.RepositorySizeRequest.SerializeToString,
            repository__service__pb2.RepositorySizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ApplyGitattributes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/ApplyGitattributes',
            repository__service__pb2.ApplyGitattributesRequest.SerializeToString,
            repository__service__pb2.ApplyGitattributesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchRemote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/FetchRemote',
            repository__service__pb2.FetchRemoteRequest.SerializeToString,
            repository__service__pb2.FetchRemoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRepository(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/CreateRepository',
            repository__service__pb2.CreateRepositoryRequest.SerializeToString,
            repository__service__pb2.CreateRepositoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetArchive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gitaly.RepositoryService/GetArchive',
            repository__service__pb2.GetArchiveRequest.SerializeToString,
            repository__service__pb2.GetArchiveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HasLocalBranches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/HasLocalBranches',
            repository__service__pb2.HasLocalBranchesRequest.SerializeToString,
            repository__service__pb2.HasLocalBranchesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchSourceBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/FetchSourceBranch',
            repository__service__pb2.FetchSourceBranchRequest.SerializeToString,
            repository__service__pb2.FetchSourceBranchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Fsck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/Fsck',
            repository__service__pb2.FsckRequest.SerializeToString,
            repository__service__pb2.FsckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteRef(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/WriteRef',
            repository__service__pb2.WriteRefRequest.SerializeToString,
            repository__service__pb2.WriteRefResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindMergeBase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/FindMergeBase',
            repository__service__pb2.FindMergeBaseRequest.SerializeToString,
            repository__service__pb2.FindMergeBaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateFork(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/CreateFork',
            repository__service__pb2.CreateForkRequest.SerializeToString,
            repository__service__pb2.CreateForkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsRebaseInProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/IsRebaseInProgress',
            repository__service__pb2.IsRebaseInProgressRequest.SerializeToString,
            repository__service__pb2.IsRebaseInProgressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsSquashInProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/IsSquashInProgress',
            repository__service__pb2.IsSquashInProgressRequest.SerializeToString,
            repository__service__pb2.IsSquashInProgressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRepositoryFromURL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/CreateRepositoryFromURL',
            repository__service__pb2.CreateRepositoryFromURLRequest.SerializeToString,
            repository__service__pb2.CreateRepositoryFromURLResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBundle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gitaly.RepositoryService/CreateBundle',
            repository__service__pb2.CreateBundleRequest.SerializeToString,
            repository__service__pb2.CreateBundleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRepositoryFromBundle(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/gitaly.RepositoryService/CreateRepositoryFromBundle',
            repository__service__pb2.CreateRepositoryFromBundleRequest.SerializeToString,
            repository__service__pb2.CreateRepositoryFromBundleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/SetConfig',
            repository__service__pb2.SetConfigRequest.SerializeToString,
            repository__service__pb2.SetConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/DeleteConfig',
            repository__service__pb2.DeleteConfigRequest.SerializeToString,
            repository__service__pb2.DeleteConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindLicense(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/FindLicense',
            repository__service__pb2.FindLicenseRequest.SerializeToString,
            repository__service__pb2.FindLicenseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInfoAttributes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gitaly.RepositoryService/GetInfoAttributes',
            repository__service__pb2.GetInfoAttributesRequest.SerializeToString,
            repository__service__pb2.GetInfoAttributesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalculateChecksum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/CalculateChecksum',
            repository__service__pb2.CalculateChecksumRequest.SerializeToString,
            repository__service__pb2.CalculateChecksumResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Cleanup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/Cleanup',
            repository__service__pb2.CleanupRequest.SerializeToString,
            repository__service__pb2.CleanupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gitaly.RepositoryService/GetSnapshot',
            repository__service__pb2.GetSnapshotRequest.SerializeToString,
            repository__service__pb2.GetSnapshotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRepositoryFromSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/CreateRepositoryFromSnapshot',
            repository__service__pb2.CreateRepositoryFromSnapshotRequest.SerializeToString,
            repository__service__pb2.CreateRepositoryFromSnapshotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRawChanges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gitaly.RepositoryService/GetRawChanges',
            repository__service__pb2.GetRawChangesRequest.SerializeToString,
            repository__service__pb2.GetRawChangesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchFilesByContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gitaly.RepositoryService/SearchFilesByContent',
            repository__service__pb2.SearchFilesByContentRequest.SerializeToString,
            repository__service__pb2.SearchFilesByContentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchFilesByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gitaly.RepositoryService/SearchFilesByName',
            repository__service__pb2.SearchFilesByNameRequest.SerializeToString,
            repository__service__pb2.SearchFilesByNameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RestoreCustomHooks(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/gitaly.RepositoryService/RestoreCustomHooks',
            repository__service__pb2.RestoreCustomHooksRequest.SerializeToString,
            repository__service__pb2.RestoreCustomHooksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BackupCustomHooks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gitaly.RepositoryService/BackupCustomHooks',
            repository__service__pb2.BackupCustomHooksRequest.SerializeToString,
            repository__service__pb2.BackupCustomHooksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetObjectDirectorySize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/GetObjectDirectorySize',
            repository__service__pb2.GetObjectDirectorySizeRequest.SerializeToString,
            repository__service__pb2.GetObjectDirectorySizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloneFromPool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/CloneFromPool',
            repository__service__pb2.CloneFromPoolRequest.SerializeToString,
            repository__service__pb2.CloneFromPoolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloneFromPoolInternal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/CloneFromPoolInternal',
            repository__service__pb2.CloneFromPoolInternalRequest.SerializeToString,
            repository__service__pb2.CloneFromPoolInternalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveRepository(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/RemoveRepository',
            repository__service__pb2.RemoveRepositoryRequest.SerializeToString,
            repository__service__pb2.RemoveRepositoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RenameRepository(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/RenameRepository',
            repository__service__pb2.RenameRepositoryRequest.SerializeToString,
            repository__service__pb2.RenameRepositoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReplicateRepository(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/ReplicateRepository',
            repository__service__pb2.ReplicateRepositoryRequest.SerializeToString,
            repository__service__pb2.ReplicateRepositoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OptimizeRepository(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RepositoryService/OptimizeRepository',
            repository__service__pb2.OptimizeRepositoryRequest.SerializeToString,
            repository__service__pb2.OptimizeRepositoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
