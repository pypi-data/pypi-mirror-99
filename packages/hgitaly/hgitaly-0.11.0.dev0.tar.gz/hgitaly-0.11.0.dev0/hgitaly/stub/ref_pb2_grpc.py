# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import ref_pb2 as ref__pb2


class RefServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FindDefaultBranchName = channel.unary_unary(
                '/gitaly.RefService/FindDefaultBranchName',
                request_serializer=ref__pb2.FindDefaultBranchNameRequest.SerializeToString,
                response_deserializer=ref__pb2.FindDefaultBranchNameResponse.FromString,
                )
        self.FindAllBranchNames = channel.unary_stream(
                '/gitaly.RefService/FindAllBranchNames',
                request_serializer=ref__pb2.FindAllBranchNamesRequest.SerializeToString,
                response_deserializer=ref__pb2.FindAllBranchNamesResponse.FromString,
                )
        self.FindAllTagNames = channel.unary_stream(
                '/gitaly.RefService/FindAllTagNames',
                request_serializer=ref__pb2.FindAllTagNamesRequest.SerializeToString,
                response_deserializer=ref__pb2.FindAllTagNamesResponse.FromString,
                )
        self.FindRefName = channel.unary_unary(
                '/gitaly.RefService/FindRefName',
                request_serializer=ref__pb2.FindRefNameRequest.SerializeToString,
                response_deserializer=ref__pb2.FindRefNameResponse.FromString,
                )
        self.FindLocalBranches = channel.unary_stream(
                '/gitaly.RefService/FindLocalBranches',
                request_serializer=ref__pb2.FindLocalBranchesRequest.SerializeToString,
                response_deserializer=ref__pb2.FindLocalBranchesResponse.FromString,
                )
        self.FindAllBranches = channel.unary_stream(
                '/gitaly.RefService/FindAllBranches',
                request_serializer=ref__pb2.FindAllBranchesRequest.SerializeToString,
                response_deserializer=ref__pb2.FindAllBranchesResponse.FromString,
                )
        self.FindAllTags = channel.unary_stream(
                '/gitaly.RefService/FindAllTags',
                request_serializer=ref__pb2.FindAllTagsRequest.SerializeToString,
                response_deserializer=ref__pb2.FindAllTagsResponse.FromString,
                )
        self.FindTag = channel.unary_unary(
                '/gitaly.RefService/FindTag',
                request_serializer=ref__pb2.FindTagRequest.SerializeToString,
                response_deserializer=ref__pb2.FindTagResponse.FromString,
                )
        self.FindAllRemoteBranches = channel.unary_stream(
                '/gitaly.RefService/FindAllRemoteBranches',
                request_serializer=ref__pb2.FindAllRemoteBranchesRequest.SerializeToString,
                response_deserializer=ref__pb2.FindAllRemoteBranchesResponse.FromString,
                )
        self.RefExists = channel.unary_unary(
                '/gitaly.RefService/RefExists',
                request_serializer=ref__pb2.RefExistsRequest.SerializeToString,
                response_deserializer=ref__pb2.RefExistsResponse.FromString,
                )
        self.FindBranch = channel.unary_unary(
                '/gitaly.RefService/FindBranch',
                request_serializer=ref__pb2.FindBranchRequest.SerializeToString,
                response_deserializer=ref__pb2.FindBranchResponse.FromString,
                )
        self.DeleteRefs = channel.unary_unary(
                '/gitaly.RefService/DeleteRefs',
                request_serializer=ref__pb2.DeleteRefsRequest.SerializeToString,
                response_deserializer=ref__pb2.DeleteRefsResponse.FromString,
                )
        self.ListBranchNamesContainingCommit = channel.unary_stream(
                '/gitaly.RefService/ListBranchNamesContainingCommit',
                request_serializer=ref__pb2.ListBranchNamesContainingCommitRequest.SerializeToString,
                response_deserializer=ref__pb2.ListBranchNamesContainingCommitResponse.FromString,
                )
        self.ListTagNamesContainingCommit = channel.unary_stream(
                '/gitaly.RefService/ListTagNamesContainingCommit',
                request_serializer=ref__pb2.ListTagNamesContainingCommitRequest.SerializeToString,
                response_deserializer=ref__pb2.ListTagNamesContainingCommitResponse.FromString,
                )
        self.GetTagMessages = channel.unary_stream(
                '/gitaly.RefService/GetTagMessages',
                request_serializer=ref__pb2.GetTagMessagesRequest.SerializeToString,
                response_deserializer=ref__pb2.GetTagMessagesResponse.FromString,
                )
        self.ListNewCommits = channel.unary_stream(
                '/gitaly.RefService/ListNewCommits',
                request_serializer=ref__pb2.ListNewCommitsRequest.SerializeToString,
                response_deserializer=ref__pb2.ListNewCommitsResponse.FromString,
                )
        self.ListNewBlobs = channel.unary_stream(
                '/gitaly.RefService/ListNewBlobs',
                request_serializer=ref__pb2.ListNewBlobsRequest.SerializeToString,
                response_deserializer=ref__pb2.ListNewBlobsResponse.FromString,
                )
        self.PackRefs = channel.unary_unary(
                '/gitaly.RefService/PackRefs',
                request_serializer=ref__pb2.PackRefsRequest.SerializeToString,
                response_deserializer=ref__pb2.PackRefsResponse.FromString,
                )


class RefServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FindDefaultBranchName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindAllBranchNames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindAllTagNames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindRefName(self, request, context):
        """Find a Ref matching the given constraints. Response may be empty.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindLocalBranches(self, request, context):
        """Return a stream so we can divide the response in chunks of branches
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindAllBranches(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindAllTags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindAllRemoteBranches(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefExists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindBranch(self, request, context):
        """FindBranch finds a branch by its unqualified name (like "master") and
        returns the commit it currently points to.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRefs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBranchNamesContainingCommit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTagNamesContainingCommit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTagMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListNewCommits(self, request, context):
        """Returns commits that are only reachable from the ref passed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListNewBlobs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PackRefs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RefServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FindDefaultBranchName': grpc.unary_unary_rpc_method_handler(
                    servicer.FindDefaultBranchName,
                    request_deserializer=ref__pb2.FindDefaultBranchNameRequest.FromString,
                    response_serializer=ref__pb2.FindDefaultBranchNameResponse.SerializeToString,
            ),
            'FindAllBranchNames': grpc.unary_stream_rpc_method_handler(
                    servicer.FindAllBranchNames,
                    request_deserializer=ref__pb2.FindAllBranchNamesRequest.FromString,
                    response_serializer=ref__pb2.FindAllBranchNamesResponse.SerializeToString,
            ),
            'FindAllTagNames': grpc.unary_stream_rpc_method_handler(
                    servicer.FindAllTagNames,
                    request_deserializer=ref__pb2.FindAllTagNamesRequest.FromString,
                    response_serializer=ref__pb2.FindAllTagNamesResponse.SerializeToString,
            ),
            'FindRefName': grpc.unary_unary_rpc_method_handler(
                    servicer.FindRefName,
                    request_deserializer=ref__pb2.FindRefNameRequest.FromString,
                    response_serializer=ref__pb2.FindRefNameResponse.SerializeToString,
            ),
            'FindLocalBranches': grpc.unary_stream_rpc_method_handler(
                    servicer.FindLocalBranches,
                    request_deserializer=ref__pb2.FindLocalBranchesRequest.FromString,
                    response_serializer=ref__pb2.FindLocalBranchesResponse.SerializeToString,
            ),
            'FindAllBranches': grpc.unary_stream_rpc_method_handler(
                    servicer.FindAllBranches,
                    request_deserializer=ref__pb2.FindAllBranchesRequest.FromString,
                    response_serializer=ref__pb2.FindAllBranchesResponse.SerializeToString,
            ),
            'FindAllTags': grpc.unary_stream_rpc_method_handler(
                    servicer.FindAllTags,
                    request_deserializer=ref__pb2.FindAllTagsRequest.FromString,
                    response_serializer=ref__pb2.FindAllTagsResponse.SerializeToString,
            ),
            'FindTag': grpc.unary_unary_rpc_method_handler(
                    servicer.FindTag,
                    request_deserializer=ref__pb2.FindTagRequest.FromString,
                    response_serializer=ref__pb2.FindTagResponse.SerializeToString,
            ),
            'FindAllRemoteBranches': grpc.unary_stream_rpc_method_handler(
                    servicer.FindAllRemoteBranches,
                    request_deserializer=ref__pb2.FindAllRemoteBranchesRequest.FromString,
                    response_serializer=ref__pb2.FindAllRemoteBranchesResponse.SerializeToString,
            ),
            'RefExists': grpc.unary_unary_rpc_method_handler(
                    servicer.RefExists,
                    request_deserializer=ref__pb2.RefExistsRequest.FromString,
                    response_serializer=ref__pb2.RefExistsResponse.SerializeToString,
            ),
            'FindBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.FindBranch,
                    request_deserializer=ref__pb2.FindBranchRequest.FromString,
                    response_serializer=ref__pb2.FindBranchResponse.SerializeToString,
            ),
            'DeleteRefs': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRefs,
                    request_deserializer=ref__pb2.DeleteRefsRequest.FromString,
                    response_serializer=ref__pb2.DeleteRefsResponse.SerializeToString,
            ),
            'ListBranchNamesContainingCommit': grpc.unary_stream_rpc_method_handler(
                    servicer.ListBranchNamesContainingCommit,
                    request_deserializer=ref__pb2.ListBranchNamesContainingCommitRequest.FromString,
                    response_serializer=ref__pb2.ListBranchNamesContainingCommitResponse.SerializeToString,
            ),
            'ListTagNamesContainingCommit': grpc.unary_stream_rpc_method_handler(
                    servicer.ListTagNamesContainingCommit,
                    request_deserializer=ref__pb2.ListTagNamesContainingCommitRequest.FromString,
                    response_serializer=ref__pb2.ListTagNamesContainingCommitResponse.SerializeToString,
            ),
            'GetTagMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.GetTagMessages,
                    request_deserializer=ref__pb2.GetTagMessagesRequest.FromString,
                    response_serializer=ref__pb2.GetTagMessagesResponse.SerializeToString,
            ),
            'ListNewCommits': grpc.unary_stream_rpc_method_handler(
                    servicer.ListNewCommits,
                    request_deserializer=ref__pb2.ListNewCommitsRequest.FromString,
                    response_serializer=ref__pb2.ListNewCommitsResponse.SerializeToString,
            ),
            'ListNewBlobs': grpc.unary_stream_rpc_method_handler(
                    servicer.ListNewBlobs,
                    request_deserializer=ref__pb2.ListNewBlobsRequest.FromString,
                    response_serializer=ref__pb2.ListNewBlobsResponse.SerializeToString,
            ),
            'PackRefs': grpc.unary_unary_rpc_method_handler(
                    servicer.PackRefs,
                    request_deserializer=ref__pb2.PackRefsRequest.FromString,
                    response_serializer=ref__pb2.PackRefsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gitaly.RefService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RefService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FindDefaultBranchName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RefService/FindDefaultBranchName',
            ref__pb2.FindDefaultBranchNameRequest.SerializeToString,
            ref__pb2.FindDefaultBranchNameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindAllBranchNames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gitaly.RefService/FindAllBranchNames',
            ref__pb2.FindAllBranchNamesRequest.SerializeToString,
            ref__pb2.FindAllBranchNamesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindAllTagNames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gitaly.RefService/FindAllTagNames',
            ref__pb2.FindAllTagNamesRequest.SerializeToString,
            ref__pb2.FindAllTagNamesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindRefName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RefService/FindRefName',
            ref__pb2.FindRefNameRequest.SerializeToString,
            ref__pb2.FindRefNameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindLocalBranches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gitaly.RefService/FindLocalBranches',
            ref__pb2.FindLocalBranchesRequest.SerializeToString,
            ref__pb2.FindLocalBranchesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindAllBranches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gitaly.RefService/FindAllBranches',
            ref__pb2.FindAllBranchesRequest.SerializeToString,
            ref__pb2.FindAllBranchesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindAllTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gitaly.RefService/FindAllTags',
            ref__pb2.FindAllTagsRequest.SerializeToString,
            ref__pb2.FindAllTagsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RefService/FindTag',
            ref__pb2.FindTagRequest.SerializeToString,
            ref__pb2.FindTagResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindAllRemoteBranches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gitaly.RefService/FindAllRemoteBranches',
            ref__pb2.FindAllRemoteBranchesRequest.SerializeToString,
            ref__pb2.FindAllRemoteBranchesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RefExists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RefService/RefExists',
            ref__pb2.RefExistsRequest.SerializeToString,
            ref__pb2.RefExistsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RefService/FindBranch',
            ref__pb2.FindBranchRequest.SerializeToString,
            ref__pb2.FindBranchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRefs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RefService/DeleteRefs',
            ref__pb2.DeleteRefsRequest.SerializeToString,
            ref__pb2.DeleteRefsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBranchNamesContainingCommit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gitaly.RefService/ListBranchNamesContainingCommit',
            ref__pb2.ListBranchNamesContainingCommitRequest.SerializeToString,
            ref__pb2.ListBranchNamesContainingCommitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTagNamesContainingCommit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gitaly.RefService/ListTagNamesContainingCommit',
            ref__pb2.ListTagNamesContainingCommitRequest.SerializeToString,
            ref__pb2.ListTagNamesContainingCommitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTagMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gitaly.RefService/GetTagMessages',
            ref__pb2.GetTagMessagesRequest.SerializeToString,
            ref__pb2.GetTagMessagesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListNewCommits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gitaly.RefService/ListNewCommits',
            ref__pb2.ListNewCommitsRequest.SerializeToString,
            ref__pb2.ListNewCommitsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListNewBlobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gitaly.RefService/ListNewBlobs',
            ref__pb2.ListNewBlobsRequest.SerializeToString,
            ref__pb2.ListNewBlobsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PackRefs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gitaly.RefService/PackRefs',
            ref__pb2.PackRefsRequest.SerializeToString,
            ref__pb2.PackRefsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
