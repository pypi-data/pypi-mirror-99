# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['ddebug']

package_data = \
{'': ['*']}

install_requires = \
['friendly', 'icecream', 'inputimeout', 'rich', 'snoop', 'watchpoints']

setup_kwargs = {
    'name': 'ddebug',
    'version': '0.3.0',
    'description': 'python library for cool debugging of python progams.',
    'long_description': '# ddebug\nddebug is a python library for simple debugging of python progams. It works only within a python file, not in the console.\n\nddebug is both\n[icecream](https://github.com/gruns/icecream) and\n[snoop](https://github.com/alexmojaki/snoop)\nbut simple and quick to use in the style of [q](https://github.com/zestyping/q).\n\nddebug works with python 3.6+.\n\n## Installation\nInstall using pip: ```(python -m) pip install ddebug```\n\n\n## Simple Example\n```python\nfrom ddebug import dd\n@dd #do @snoop on a function\ndef foo(n):\n    return n+333\n@dd # do @snoop on all class functions (only possible in ddebug)\nclass A:\n    def a(self):\n        pass\n\ndd(foo(123)) # use like icecream.\n```\noutput:\n```shell\n12:30:49.47 >>> Call to foo in File "python-file.py", line 3\n12:30:49.47 ...... n = 123\n12:30:49.47    3 | def foo(n):\n12:30:49.47    4 |     return n+333\n12:30:49.47 <<< Return value from foo: 456\ndd| foo(123): 456\n```\n## More options\n\n### min cls:\nSometimes you don\'t want to view all the class functions internal processes, just see when it was called. Then you can use mincls(named also mc) option to just see the function call:\n```python\nfrom ddebug import dd\n@dd.mincls\nclass A:\n    def a(self):\n        pass\n\na = A()\na.a()\n```\nOutput:\n```shell\ndd| python-file.py:8 in <module>: call method \'a\' from class \'A\' at 11:34:15.383\n```\nmincls does not yet support the __ <> __  functions(e.g. __ init __).\n\n### Concatenating\nIf you use ddebug as a function like icecream, e.g. `dd(value)` it will returns the arguments you passed in to it:\n```python\nfrom ddebug import dd\na = "a"\nb = "b"\nc = dd(dd(a)+dd(b))\ndd(c)\n```\nOutput:\n```shell\ndd| a: \'a\'\ndd| b: \'b\'\ndd| dd(a)+dd(b): \'ab\'\ndd| c: \'ab\'\n```\n\n\n### Tracebacks\nIn `ddebug` there is an option for more detailed traceback than the regular traceback:\n```python\nfrom ddebug import dd\n#place at start of program\ndd.set_excepthook()\n```\n\nThen when an error occurrs `ddebug` creates a file named `<file>-errors.txt`:\nthe file starts with [rich](https://github.com/willmcgugan/rich) (render Python tracebacks with syntax highlighting and formatting)\nand then  [friendly](https://github.com/aroberge/friendly) explanation of the error.\n\nIn addition, you can press Enter within the first 5 seconds after exception and it will open the standard pdb.\n\nIf you don\'t want\\can\'t use excepthook (because usually other modules use the excepthook), you can use `atexit`:\n```python\nfrom ddebug import dd\ndd.set_atexit()\n```\nif you want to choose file name:\njust pass `file=<file>` to the function.\n### watch\n`ddebug` has a `watch` and `unwatch` (named also `w` and `unw`) uses [watchpoints](https://github.com/gaogaotiantian/watchpoints).\n```python\nfrom ddebug import dd\na = []\ndd.watch(a)\na = {}\n```\nOutput\n\n```shell\nWatch trigger ::: File "python-file.py", line 4, in <module>\n\ta:was [] is now {}\n```\nBy default all of this output is printed with the icecream printer.\nIf you want to change this, do:\n```python\nfrom ddebug import dd\nimport sys\ndd.watch_stream = sys.stderr # or another file/stream as you want\n```\n\n### install()\nTo make dd available in every file (without needing to import ddebug) just write in the first file:\n```python\nfrom ddebug import dd\ndd.install() # install only "dd" name\n# you can chose an alias\ndd.install(("dd","d"))\n```\n\n### Disabling\ndd has an attribute named `enabled`. Set to false to suppress output.\n```python\nfrom ddebug import dd\ndd(12) # will output ic(12)\ndd.enabled = False\ndd(12) # not output anything\n```\nThis disabes `@dd`,`dd()`,`dd.<un>watch` and `dd.mincls`\nFor disabling the excepthook do:\n```python\nimport sys\nsys.excepthook = sys.__excepthook__\n```\nor comment out the call to `dd.set_excepthook()``.\n### Operations\ndd has a lot of operations that are equal to `dd(a)`:\n```python\nfrom ddebug import dd\na = "a"\nb = dd+a\nb = dd*a\nb = dd@a\nb = dd>>a\nb = dd<<a\nb = a|dd\nb = dd|a\nb = dd&a\n```\nfor example: instead of trying to add `dd()` to `l = list(map(str,filter(bool,range(12))))`\nyou can do `l = dd @ list(map(str,filter(bool,range(12))))`\n\nDon\'t use `<>=`(e.g. `+=`) operations. icecream can\'t get source code and will throw a ScoreError.\n### print stack\nif you want to see the current stack without raising an error do:\n```python\nfrom ddebug import dd\n#  print sorted (from last frame to call of dd.print_stack()) stack (takes some time)\ndd.print_stack()\n# print stack (quick) like traceback\ndd.print_stack(sort=False)\n```\n\n### Streams\nIf you want to write ddebug output to tmp file (like [q](https://github.com/zestyping/q)) and also to stderr just do:\n```python\ndd.add_tmp_stream()\n```\nIf you want only a tmp file(without stderr):\n```python\ndd.add_tmp_stream(with_print=False)\n```\nif you want to write only to custom file do:\n```python\ndd.stream = open("output.txt","w")\n```\n**Don\'t forget to close the file.**\nIf you do not close the file - the file will probably not write.\nMy recommendation is to use built-in`atexit` module to close the file (you can use it even if you alredy use atexit (e.g. `dd.set_atexit()`):\n```python\nimport atexit\nfrom ddebug import dd\noutput_stream = open("output.txt", "w")\natexit.register(output_stream.close) #will close the file at the end of the program\ndd.stream = output_stream\n```\nAll of them will remove color form stderr print.\n\nAll of them will affect:`@dd`,`dd()`, `dd.mincls` and `dd.<un>watch`.\n\n### Output folder\nIf you want to see all the output of ddebug in one folder you can do:\n```python\nfrom ddebug import dd\ndd.add_output_folder()  # then all output goes to folder and stderr - it will also remove color.\n```\nit will create a folder named `<file>_log` and create 3 .txt files:\n* `watch-log` - output from `dd.<un>watch`\n* `snoop-log` - output from `@dd` on class or function\n* `icecream-log` - output from `dd()`, `@dd.mincls` and `dd.print_stack()`\n\nIt will also set excepthook or atexit to create a file named `error.txt` in this folder.\nPass `with_errors=False` to this function to prevent this.\n\nIf you dont want each run of the program to overwrite the files in the folder or you want to see the date your script was run - do:\n```python\ndd.add_output_folder(with_date=True)\n```\nor:\n```python\ndd.add_output_folder(True)\n```\nThere is way to choose folder name using a file:\n```python\ndd.add_output_folder(pyfile="python-file.py") # will create a folder python-file_log\n```\nor:\n```python\ndd.add_output_folder(folder="my-cool-folder") # will create a folder my-cool-folder\n```\n### config\nYou can [config snoop common arguments](https://github.com/alexmojaki/snoop#common-arguments) with  `dd.snoop_short_config` (named also ssc) with:\n```python\nfrom ddebug import dd\ndd.snoop_short_config(watch=(\'foo.bar\', \'self.x["whatever"]\'),watch_explode=[\'foo\', \'self\'])\n@dd.ssc(watch=(\'foo.bar\', \'self.x["whatever"]\'))   # you even use that as the @dd\ndef foo(n):\n    return n+333\nfoo(123)\n```\nYou can [config snoop](https://github.com/alexmojaki/snoop#output-configuration) with:\n`dd.snoopconfig(snoop-config-options)`.\nAll options but builtins and snoop names are valid.\n\nYou can config `icecream.includeContext` (dd() calls filename, line number, and parent function to dd output.) by:`dd.icecream_includeContext = True`.\n\nyou can config [`friendly.language`](https://aroberge.github.io/friendly-traceback-docs/docs/html/usage_adv.html#language-used) by `dd.friendly_lang = "<languages>"`\n\n## with dd\n`with dd` equal to [`with snoop`](https://github.com/alexmojaki/snoop#basic-snoop-usage).\n\n## more debbug tools:\n### inspect()\n`dd.inspect(obj)` equal to [`rich.inspect`](https://github.com/willmcgugan/rich#rich-inspect)\n### deep()\n`dd.deep` equal to [`snoop.pp.deep`](https://github.com/alexmojaki/snoop#ppdeep-for-tracing-subexpressions)\n\n\n## Dependencies\nddebug depends on the python librarys:\n* [icecream](https://github.com/gruns/icecream) - main dependency\n* [snoop](https://github.com/alexmojaki/snoop) - main dependency\n* [watchpoints](https://github.com/gaogaotiantian/watchpoints) - for `dd.watch` and `dd.unwatch`\n* [inputimeout](https://pypi.org/project/inputimeout) - to ask to start pdb debugger in error hooks\n* [friendly](https://github.com/aroberge/friendly) - for explanation on the error in error-hooks\n* [rich](https://github.com/willmcgugan/rich) - to create the traceback before friendly-traceback in error hooks and for `dd.inspect` function\n\n## Contribute\nOn all errors, problems or suggestions please open a [github issue](https://github.com/matan-h/ddebug/issues)\n\n<a href="https://www.buymeacoffee.com/matanh" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/default-blue.png" alt="Buy Me A Coffee" height="47" width="200"></a>\n',
    'author': 'matan h',
    'author_email': 'matan.honig2@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/matan-h/ddebug',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6',
}


setup(**setup_kwargs)
