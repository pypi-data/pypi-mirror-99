# coding: utf-8

"""
    Cythereal Dashboard API

     The API used exclusively by the MAGIC Dashboard for populating charts, graphs, tables, etc... on the dashboard.  # API Conventions  **All responses** MUST be of type `APIResponse` and contain the following fields:  * `api_version` |  The current api version * `success` | Boolean value indicating if the operation succeeded. * `code` | Status code. Typically corresponds to the HTTP status code.  * `message` | A human readable message providing more details about the operation. Can be null or empty.  **Successful operations** MUST return a `SuccessResponse`, which extends `APIResponse` by adding:  * `data` | Properties containing the response object. * `success` | MUST equal True  When returning objects from a successful response, the `data` object SHOULD contain a property named after the requested object type. For example, the `/alerts` endpoint should return a response object with `data.alerts`. This property SHOULD  contain a list of the returned objects. For the `/alerts` endpoint, the `data.alerts` property contains a list of MagicAlerts objects. See the `/alerts` endpoint documentation for an example.  **Failed Operations** MUST return an `ErrorResponse`, which extends `APIResponse` by adding:  * `success` | MUST equal False.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@cythereal.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AlertModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alert_id': 'str',
        'severity_level': 'str',
        'status': 'str',
        'creation_date': 'str',
        'title': 'str',
        'description': 'str',
        'campaign': 'str',
        'binary': 'str'
    }

    attribute_map = {
        'alert_id': 'alert_id',
        'severity_level': 'severity_level',
        'status': 'status',
        'creation_date': 'creation_date',
        'title': 'title',
        'description': 'description',
        'campaign': 'campaign',
        'binary': 'binary'
    }

    def __init__(self, alert_id=None, severity_level=None, status=None, creation_date=None, title=None, description=None, campaign=None, binary=None):  # noqa: E501
        """AlertModel - a model defined in Swagger"""  # noqa: E501

        self._alert_id = None
        self._severity_level = None
        self._status = None
        self._creation_date = None
        self._title = None
        self._description = None
        self._campaign = None
        self._binary = None
        self.discriminator = None

        if alert_id is not None:
            self.alert_id = alert_id
        if severity_level is not None:
            self.severity_level = severity_level
        if status is not None:
            self.status = status
        if creation_date is not None:
            self.creation_date = creation_date
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if campaign is not None:
            self.campaign = campaign
        if binary is not None:
            self.binary = binary

    @property
    def alert_id(self):
        """Gets the alert_id of this AlertModel.  # noqa: E501

        Unique identifier of an alert.  # noqa: E501

        :return: The alert_id of this AlertModel.  # noqa: E501
        :rtype: str
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """Sets the alert_id of this AlertModel.

        Unique identifier of an alert.  # noqa: E501

        :param alert_id: The alert_id of this AlertModel.  # noqa: E501
        :type: str
        """
        if alert_id is not None and not re.search(r'Alert-[0-9]{6}', alert_id):  # noqa: E501
            raise ValueError(r"Invalid value for `alert_id`, must be a follow pattern or equal to `/Alert-[0-9]{6}/`")  # noqa: E501

        self._alert_id = alert_id

    @property
    def severity_level(self):
        """Gets the severity_level of this AlertModel.  # noqa: E501

        Severity Level of the alert.  # noqa: E501

        :return: The severity_level of this AlertModel.  # noqa: E501
        :rtype: str
        """
        return self._severity_level

    @severity_level.setter
    def severity_level(self, severity_level):
        """Sets the severity_level of this AlertModel.

        Severity Level of the alert.  # noqa: E501

        :param severity_level: The severity_level of this AlertModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["Benign", "Warning", "Severe"]  # noqa: E501
        if severity_level not in allowed_values:
            raise ValueError(
                "Invalid value for `severity_level` ({0}), must be one of {1}"  # noqa: E501
                .format(severity_level, allowed_values)
            )

        self._severity_level = severity_level

    @property
    def status(self):
        """Gets the status of this AlertModel.  # noqa: E501

        Current status of the alert.  # noqa: E501

        :return: The status of this AlertModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AlertModel.

        Current status of the alert.  # noqa: E501

        :param status: The status of this AlertModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unread", "Open", "In Progress", "Closed", "Archived"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def creation_date(self):
        """Gets the creation_date of this AlertModel.  # noqa: E501

        The datetime that the alert was created.  # noqa: E501

        :return: The creation_date of this AlertModel.  # noqa: E501
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this AlertModel.

        The datetime that the alert was created.  # noqa: E501

        :param creation_date: The creation_date of this AlertModel.  # noqa: E501
        :type: str
        """
        if creation_date is not None and not re.search(r'202[0-9]-[0-9]{2}-[0-9]{2}T[0-2][0-9]:[0-5][0-9]:[0-5][0-9].[0-9]{6}Z', creation_date):  # noqa: E501
            raise ValueError(r"Invalid value for `creation_date`, must be a follow pattern or equal to `/202[0-9]-[0-9]{2}-[0-9]{2}T[0-2][0-9]:[0-5][0-9]:[0-5][0-9].[0-9]{6}Z/`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def title(self):
        """Gets the title of this AlertModel.  # noqa: E501

        The short title of the alert.  # noqa: E501

        :return: The title of this AlertModel.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AlertModel.

        The short title of the alert.  # noqa: E501

        :param title: The title of this AlertModel.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this AlertModel.  # noqa: E501

        The longer more detailed description of the alert.  # noqa: E501

        :return: The description of this AlertModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AlertModel.

        The longer more detailed description of the alert.  # noqa: E501

        :param description: The description of this AlertModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def campaign(self):
        """Gets the campaign of this AlertModel.  # noqa: E501

        The Campaign Id of the campaign that the alert is linked to. Can be null  # noqa: E501

        :return: The campaign of this AlertModel.  # noqa: E501
        :rtype: str
        """
        return self._campaign

    @campaign.setter
    def campaign(self, campaign):
        """Sets the campaign of this AlertModel.

        The Campaign Id of the campaign that the alert is linked to. Can be null  # noqa: E501

        :param campaign: The campaign of this AlertModel.  # noqa: E501
        :type: str
        """

        self._campaign = campaign

    @property
    def binary(self):
        """Gets the binary of this AlertModel.  # noqa: E501

        The hash of the binary that the alert is linked to. Can be null  # noqa: E501

        :return: The binary of this AlertModel.  # noqa: E501
        :rtype: str
        """
        return self._binary

    @binary.setter
    def binary(self, binary):
        """Sets the binary of this AlertModel.

        The hash of the binary that the alert is linked to. Can be null  # noqa: E501

        :param binary: The binary of this AlertModel.  # noqa: E501
        :type: str
        """

        self._binary = binary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
