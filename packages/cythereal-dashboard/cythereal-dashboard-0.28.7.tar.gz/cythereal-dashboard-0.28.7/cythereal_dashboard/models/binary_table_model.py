# coding: utf-8

"""
    Cythereal Dashboard API

     The API used exclusively by the MAGIC Dashboard for populating charts, graphs, tables, etc... on the dashboard.  # API Conventions  **All responses** MUST be of type `APIResponse` and contain the following fields:  * `api_version` |  The current api version * `success` | Boolean value indicating if the operation succeeded. * `code` | Status code. Typically corresponds to the HTTP status code.  * `message` | A human readable message providing more details about the operation. Can be null or empty.  **Successful operations** MUST return a `SuccessResponse`, which extends `APIResponse` by adding:  * `data` | Properties containing the response object. * `success` | MUST equal True  When returning objects from a successful response, the `data` object SHOULD contain a property named after the requested object type. For example, the `/alerts` endpoint should return a response object with `data.alerts`. This property SHOULD  contain a list of the returned objects. For the `/alerts` endpoint, the `data.alerts` property contains a list of MagicAlerts objects. See the `/alerts` endpoint documentation for an example.  **Failed Operations** MUST return an `ErrorResponse`, which extends `APIResponse` by adding:  * `success` | MUST equal False.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@cythereal.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BinaryTableModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sha1': 'Sha1',
        'md5': 'Md5',
        'sha256': 'Sha256',
        'sha512': 'Sha512',
        'object_class': 'ObjectClass',
        'file_type': 'Filetype',
        'upload_timestamp': 'Timestamp',
        'first_seen': 'Timestamp',
        'num_matches': 'int',
        'num_scans': 'int',
        'num_detections': 'int',
        'scan_date': 'Timestamp',
        'evasiveness': 'Evasiveness',
        'categories': 'Categories',
        'filename': 'list[str]',
        'tags': 'list[str]',
        'status': 'str',
        'analysis': 'list[BinaryTableModelAnalysis]',
        'is_public': 'bool',
        'is_owned': 'bool',
        'tokens': 'list[str]',
        'av_names': 'list[str]',
        'labels': 'list[BinaryTableModelLabels]',
        'packed_campaign_size': 'int',
        'payload_campaign_size': 'int',
        'yara_id': 'YaraId',
        'yara_id_unpacked': 'YaraId'
    }

    attribute_map = {
        'sha1': 'sha1',
        'md5': 'md5',
        'sha256': 'sha256',
        'sha512': 'sha512',
        'object_class': 'object_class',
        'file_type': 'file_type',
        'upload_timestamp': 'upload_timestamp',
        'first_seen': 'first_seen',
        'num_matches': 'num_matches',
        'num_scans': 'num_scans',
        'num_detections': 'num_detections',
        'scan_date': 'scan_date',
        'evasiveness': 'evasiveness',
        'categories': 'categories',
        'filename': 'filename',
        'tags': 'tags',
        'status': 'status',
        'analysis': 'analysis',
        'is_public': 'is_public',
        'is_owned': 'is_owned',
        'tokens': 'tokens',
        'av_names': 'av_names',
        'labels': 'labels',
        'packed_campaign_size': 'packed_campaign_size',
        'payload_campaign_size': 'payload_campaign_size',
        'yara_id': 'yara_id',
        'yara_id_unpacked': 'yara_id_unpacked'
    }

    def __init__(self, sha1=None, md5=None, sha256=None, sha512=None, object_class=None, file_type=None, upload_timestamp=None, first_seen=None, num_matches=None, num_scans=None, num_detections=None, scan_date=None, evasiveness=None, categories=None, filename=None, tags=None, status=None, analysis=None, is_public=None, is_owned=None, tokens=None, av_names=None, labels=None, packed_campaign_size=None, payload_campaign_size=None, yara_id=None, yara_id_unpacked=None):  # noqa: E501
        """BinaryTableModel - a model defined in Swagger"""  # noqa: E501

        self._sha1 = None
        self._md5 = None
        self._sha256 = None
        self._sha512 = None
        self._object_class = None
        self._file_type = None
        self._upload_timestamp = None
        self._first_seen = None
        self._num_matches = None
        self._num_scans = None
        self._num_detections = None
        self._scan_date = None
        self._evasiveness = None
        self._categories = None
        self._filename = None
        self._tags = None
        self._status = None
        self._analysis = None
        self._is_public = None
        self._is_owned = None
        self._tokens = None
        self._av_names = None
        self._labels = None
        self._packed_campaign_size = None
        self._payload_campaign_size = None
        self._yara_id = None
        self._yara_id_unpacked = None
        self.discriminator = None

        if sha1 is not None:
            self.sha1 = sha1
        if md5 is not None:
            self.md5 = md5
        if sha256 is not None:
            self.sha256 = sha256
        if sha512 is not None:
            self.sha512 = sha512
        if object_class is not None:
            self.object_class = object_class
        if file_type is not None:
            self.file_type = file_type
        if upload_timestamp is not None:
            self.upload_timestamp = upload_timestamp
        if first_seen is not None:
            self.first_seen = first_seen
        if num_matches is not None:
            self.num_matches = num_matches
        if num_scans is not None:
            self.num_scans = num_scans
        if num_detections is not None:
            self.num_detections = num_detections
        if scan_date is not None:
            self.scan_date = scan_date
        if evasiveness is not None:
            self.evasiveness = evasiveness
        if categories is not None:
            self.categories = categories
        if filename is not None:
            self.filename = filename
        if tags is not None:
            self.tags = tags
        if status is not None:
            self.status = status
        if analysis is not None:
            self.analysis = analysis
        if is_public is not None:
            self.is_public = is_public
        if is_owned is not None:
            self.is_owned = is_owned
        if tokens is not None:
            self.tokens = tokens
        if av_names is not None:
            self.av_names = av_names
        if labels is not None:
            self.labels = labels
        if packed_campaign_size is not None:
            self.packed_campaign_size = packed_campaign_size
        if payload_campaign_size is not None:
            self.payload_campaign_size = payload_campaign_size
        if yara_id is not None:
            self.yara_id = yara_id
        if yara_id_unpacked is not None:
            self.yara_id_unpacked = yara_id_unpacked

    @property
    def sha1(self):
        """Gets the sha1 of this BinaryTableModel.  # noqa: E501


        :return: The sha1 of this BinaryTableModel.  # noqa: E501
        :rtype: Sha1
        """
        return self._sha1

    @sha1.setter
    def sha1(self, sha1):
        """Sets the sha1 of this BinaryTableModel.


        :param sha1: The sha1 of this BinaryTableModel.  # noqa: E501
        :type: Sha1
        """

        self._sha1 = sha1

    @property
    def md5(self):
        """Gets the md5 of this BinaryTableModel.  # noqa: E501


        :return: The md5 of this BinaryTableModel.  # noqa: E501
        :rtype: Md5
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this BinaryTableModel.


        :param md5: The md5 of this BinaryTableModel.  # noqa: E501
        :type: Md5
        """

        self._md5 = md5

    @property
    def sha256(self):
        """Gets the sha256 of this BinaryTableModel.  # noqa: E501


        :return: The sha256 of this BinaryTableModel.  # noqa: E501
        :rtype: Sha256
        """
        return self._sha256

    @sha256.setter
    def sha256(self, sha256):
        """Sets the sha256 of this BinaryTableModel.


        :param sha256: The sha256 of this BinaryTableModel.  # noqa: E501
        :type: Sha256
        """

        self._sha256 = sha256

    @property
    def sha512(self):
        """Gets the sha512 of this BinaryTableModel.  # noqa: E501


        :return: The sha512 of this BinaryTableModel.  # noqa: E501
        :rtype: Sha512
        """
        return self._sha512

    @sha512.setter
    def sha512(self, sha512):
        """Sets the sha512 of this BinaryTableModel.


        :param sha512: The sha512 of this BinaryTableModel.  # noqa: E501
        :type: Sha512
        """

        self._sha512 = sha512

    @property
    def object_class(self):
        """Gets the object_class of this BinaryTableModel.  # noqa: E501


        :return: The object_class of this BinaryTableModel.  # noqa: E501
        :rtype: ObjectClass
        """
        return self._object_class

    @object_class.setter
    def object_class(self, object_class):
        """Sets the object_class of this BinaryTableModel.


        :param object_class: The object_class of this BinaryTableModel.  # noqa: E501
        :type: ObjectClass
        """

        self._object_class = object_class

    @property
    def file_type(self):
        """Gets the file_type of this BinaryTableModel.  # noqa: E501


        :return: The file_type of this BinaryTableModel.  # noqa: E501
        :rtype: Filetype
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this BinaryTableModel.


        :param file_type: The file_type of this BinaryTableModel.  # noqa: E501
        :type: Filetype
        """

        self._file_type = file_type

    @property
    def upload_timestamp(self):
        """Gets the upload_timestamp of this BinaryTableModel.  # noqa: E501


        :return: The upload_timestamp of this BinaryTableModel.  # noqa: E501
        :rtype: Timestamp
        """
        return self._upload_timestamp

    @upload_timestamp.setter
    def upload_timestamp(self, upload_timestamp):
        """Sets the upload_timestamp of this BinaryTableModel.


        :param upload_timestamp: The upload_timestamp of this BinaryTableModel.  # noqa: E501
        :type: Timestamp
        """

        self._upload_timestamp = upload_timestamp

    @property
    def first_seen(self):
        """Gets the first_seen of this BinaryTableModel.  # noqa: E501


        :return: The first_seen of this BinaryTableModel.  # noqa: E501
        :rtype: Timestamp
        """
        return self._first_seen

    @first_seen.setter
    def first_seen(self, first_seen):
        """Sets the first_seen of this BinaryTableModel.


        :param first_seen: The first_seen of this BinaryTableModel.  # noqa: E501
        :type: Timestamp
        """

        self._first_seen = first_seen

    @property
    def num_matches(self):
        """Gets the num_matches of this BinaryTableModel.  # noqa: E501

        The number of similar files to this one.  # noqa: E501

        :return: The num_matches of this BinaryTableModel.  # noqa: E501
        :rtype: int
        """
        return self._num_matches

    @num_matches.setter
    def num_matches(self, num_matches):
        """Sets the num_matches of this BinaryTableModel.

        The number of similar files to this one.  # noqa: E501

        :param num_matches: The num_matches of this BinaryTableModel.  # noqa: E501
        :type: int
        """

        self._num_matches = num_matches

    @property
    def num_scans(self):
        """Gets the num_scans of this BinaryTableModel.  # noqa: E501

        The number of virus vendors that scanned this file similar payload  # noqa: E501

        :return: The num_scans of this BinaryTableModel.  # noqa: E501
        :rtype: int
        """
        return self._num_scans

    @num_scans.setter
    def num_scans(self, num_scans):
        """Sets the num_scans of this BinaryTableModel.

        The number of virus vendors that scanned this file similar payload  # noqa: E501

        :param num_scans: The num_scans of this BinaryTableModel.  # noqa: E501
        :type: int
        """

        self._num_scans = num_scans

    @property
    def num_detections(self):
        """Gets the num_detections of this BinaryTableModel.  # noqa: E501

        The number of virus vendors that detected this file as malicious  # noqa: E501

        :return: The num_detections of this BinaryTableModel.  # noqa: E501
        :rtype: int
        """
        return self._num_detections

    @num_detections.setter
    def num_detections(self, num_detections):
        """Sets the num_detections of this BinaryTableModel.

        The number of virus vendors that detected this file as malicious  # noqa: E501

        :param num_detections: The num_detections of this BinaryTableModel.  # noqa: E501
        :type: int
        """

        self._num_detections = num_detections

    @property
    def scan_date(self):
        """Gets the scan_date of this BinaryTableModel.  # noqa: E501


        :return: The scan_date of this BinaryTableModel.  # noqa: E501
        :rtype: Timestamp
        """
        return self._scan_date

    @scan_date.setter
    def scan_date(self, scan_date):
        """Sets the scan_date of this BinaryTableModel.


        :param scan_date: The scan_date of this BinaryTableModel.  # noqa: E501
        :type: Timestamp
        """

        self._scan_date = scan_date

    @property
    def evasiveness(self):
        """Gets the evasiveness of this BinaryTableModel.  # noqa: E501


        :return: The evasiveness of this BinaryTableModel.  # noqa: E501
        :rtype: Evasiveness
        """
        return self._evasiveness

    @evasiveness.setter
    def evasiveness(self, evasiveness):
        """Sets the evasiveness of this BinaryTableModel.


        :param evasiveness: The evasiveness of this BinaryTableModel.  # noqa: E501
        :type: Evasiveness
        """

        self._evasiveness = evasiveness

    @property
    def categories(self):
        """Gets the categories of this BinaryTableModel.  # noqa: E501


        :return: The categories of this BinaryTableModel.  # noqa: E501
        :rtype: Categories
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this BinaryTableModel.


        :param categories: The categories of this BinaryTableModel.  # noqa: E501
        :type: Categories
        """

        self._categories = categories

    @property
    def filename(self):
        """Gets the filename of this BinaryTableModel.  # noqa: E501


        :return: The filename of this BinaryTableModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this BinaryTableModel.


        :param filename: The filename of this BinaryTableModel.  # noqa: E501
        :type: list[str]
        """

        self._filename = filename

    @property
    def tags(self):
        """Gets the tags of this BinaryTableModel.  # noqa: E501


        :return: The tags of this BinaryTableModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this BinaryTableModel.


        :param tags: The tags of this BinaryTableModel.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def status(self):
        """Gets the status of this BinaryTableModel.  # noqa: E501

        The overall processing status of the file  # noqa: E501

        :return: The status of this BinaryTableModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BinaryTableModel.

        The overall processing status of the file  # noqa: E501

        :param status: The status of this BinaryTableModel.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def analysis(self):
        """Gets the analysis of this BinaryTableModel.  # noqa: E501


        :return: The analysis of this BinaryTableModel.  # noqa: E501
        :rtype: list[BinaryTableModelAnalysis]
        """
        return self._analysis

    @analysis.setter
    def analysis(self, analysis):
        """Sets the analysis of this BinaryTableModel.


        :param analysis: The analysis of this BinaryTableModel.  # noqa: E501
        :type: list[BinaryTableModelAnalysis]
        """

        self._analysis = analysis

    @property
    def is_public(self):
        """Gets the is_public of this BinaryTableModel.  # noqa: E501

        States whether this matched binary is public  # noqa: E501

        :return: The is_public of this BinaryTableModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this BinaryTableModel.

        States whether this matched binary is public  # noqa: E501

        :param is_public: The is_public of this BinaryTableModel.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def is_owned(self):
        """Gets the is_owned of this BinaryTableModel.  # noqa: E501

        States whether this matched binary is owned by the user  # noqa: E501

        :return: The is_owned of this BinaryTableModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_owned

    @is_owned.setter
    def is_owned(self, is_owned):
        """Sets the is_owned of this BinaryTableModel.

        States whether this matched binary is owned by the user  # noqa: E501

        :param is_owned: The is_owned of this BinaryTableModel.  # noqa: E501
        :type: bool
        """

        self._is_owned = is_owned

    @property
    def tokens(self):
        """Gets the tokens of this BinaryTableModel.  # noqa: E501


        :return: The tokens of this BinaryTableModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this BinaryTableModel.


        :param tokens: The tokens of this BinaryTableModel.  # noqa: E501
        :type: list[str]
        """

        self._tokens = tokens

    @property
    def av_names(self):
        """Gets the av_names of this BinaryTableModel.  # noqa: E501


        :return: The av_names of this BinaryTableModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._av_names

    @av_names.setter
    def av_names(self, av_names):
        """Sets the av_names of this BinaryTableModel.


        :param av_names: The av_names of this BinaryTableModel.  # noqa: E501
        :type: list[str]
        """

        self._av_names = av_names

    @property
    def labels(self):
        """Gets the labels of this BinaryTableModel.  # noqa: E501


        :return: The labels of this BinaryTableModel.  # noqa: E501
        :rtype: list[BinaryTableModelLabels]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this BinaryTableModel.


        :param labels: The labels of this BinaryTableModel.  # noqa: E501
        :type: list[BinaryTableModelLabels]
        """

        self._labels = labels

    @property
    def packed_campaign_size(self):
        """Gets the packed_campaign_size of this BinaryTableModel.  # noqa: E501

        The size of the campaign that the packed binary belongs to  # noqa: E501

        :return: The packed_campaign_size of this BinaryTableModel.  # noqa: E501
        :rtype: int
        """
        return self._packed_campaign_size

    @packed_campaign_size.setter
    def packed_campaign_size(self, packed_campaign_size):
        """Sets the packed_campaign_size of this BinaryTableModel.

        The size of the campaign that the packed binary belongs to  # noqa: E501

        :param packed_campaign_size: The packed_campaign_size of this BinaryTableModel.  # noqa: E501
        :type: int
        """

        self._packed_campaign_size = packed_campaign_size

    @property
    def payload_campaign_size(self):
        """Gets the payload_campaign_size of this BinaryTableModel.  # noqa: E501

        The size of the campaign that the payload binary belongs to, if one exists  # noqa: E501

        :return: The payload_campaign_size of this BinaryTableModel.  # noqa: E501
        :rtype: int
        """
        return self._payload_campaign_size

    @payload_campaign_size.setter
    def payload_campaign_size(self, payload_campaign_size):
        """Sets the payload_campaign_size of this BinaryTableModel.

        The size of the campaign that the payload binary belongs to, if one exists  # noqa: E501

        :param payload_campaign_size: The payload_campaign_size of this BinaryTableModel.  # noqa: E501
        :type: int
        """

        self._payload_campaign_size = payload_campaign_size

    @property
    def yara_id(self):
        """Gets the yara_id of this BinaryTableModel.  # noqa: E501


        :return: The yara_id of this BinaryTableModel.  # noqa: E501
        :rtype: YaraId
        """
        return self._yara_id

    @yara_id.setter
    def yara_id(self, yara_id):
        """Sets the yara_id of this BinaryTableModel.


        :param yara_id: The yara_id of this BinaryTableModel.  # noqa: E501
        :type: YaraId
        """

        self._yara_id = yara_id

    @property
    def yara_id_unpacked(self):
        """Gets the yara_id_unpacked of this BinaryTableModel.  # noqa: E501


        :return: The yara_id_unpacked of this BinaryTableModel.  # noqa: E501
        :rtype: YaraId
        """
        return self._yara_id_unpacked

    @yara_id_unpacked.setter
    def yara_id_unpacked(self, yara_id_unpacked):
        """Sets the yara_id_unpacked of this BinaryTableModel.


        :param yara_id_unpacked: The yara_id_unpacked of this BinaryTableModel.  # noqa: E501
        :type: YaraId
        """

        self._yara_id_unpacked = yara_id_unpacked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BinaryTableModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BinaryTableModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
