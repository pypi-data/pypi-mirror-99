# coding: utf-8

"""
    Cythereal Dashboard API

     The API used exclusively by the MAGIC Dashboard for populating charts, graphs, tables, etc... on the dashboard.  # API Conventions  **All responses** MUST be of type `APIResponse` and contain the following fields:  * `api_version` |  The current api version * `success` | Boolean value indicating if the operation succeeded. * `code` | Status code. Typically corresponds to the HTTP status code.  * `message` | A human readable message providing more details about the operation. Can be null or empty.  **Successful operations** MUST return a `SuccessResponse`, which extends `APIResponse` by adding:  * `data` | Properties containing the response object. * `success` | MUST equal True  When returning objects from a successful response, the `data` object SHOULD contain a property named after the requested object type. For example, the `/alerts` endpoint should return a response object with `data.alerts`. This property SHOULD  contain a list of the returned objects. For the `/alerts` endpoint, the `data.alerts` property contains a list of MagicAlerts objects. See the `/alerts` endpoint documentation for an example.  **Failed Operations** MUST return an `ErrorResponse`, which extends `APIResponse` by adding:  * `success` | MUST equal False.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@cythereal.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import cythereal_dashboard
from cythereal_dashboard.api.files_api import FilesApi  # noqa: E501
from cythereal_dashboard.rest import ApiException


class TestFilesApi(unittest.TestCase):
    """FilesApi unit test stubs"""

    def setUp(self):
        self.api = cythereal_dashboard.api.files_api.FilesApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_add_binary(self):
        """Test case for add_binary

        Add public binaries to your account  # noqa: E501
        """
        pass

    def test_create_file(self):
        """Test case for create_file

        Upload a file for processing  # noqa: E501
        """
        pass

    def test_download_file(self):
        """Test case for download_file

        Download a file  # noqa: E501
        """
        pass

    def test_get_file_details(self):
        """Test case for get_file_details

        Get additional details about certain filetypes  # noqa: E501
        """
        pass

    def test_get_file_info(self):
        """Test case for get_file_info

        Get file info and analysis status  # noqa: E501
        """
        pass

    def test_get_file_status(self):
        """Test case for get_file_status

        Get processing status of the file.  # noqa: E501
        """
        pass

    def test_get_owned_files(self):
        """Test case for get_owned_files

        List files owned by the authenticated user.  # noqa: E501
        """
        pass

    def test_reprocess_file(self):
        """Test case for reprocess_file

        Reprocess a previously uploaded file  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
