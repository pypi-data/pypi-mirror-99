# coding: utf-8

"""
    Cythereal Dashboard API

     The API used exclusively by the MAGIC Dashboard for populating charts, graphs, tables, etc... on the dashboard.  # API Conventions  **All responses** MUST be of type `APIResponse` and contain the following fields:  * `api_version` |  The current api version * `success` | Boolean value indicating if the operation succeeded. * `code` | Status code. Typically corresponds to the HTTP status code.  * `message` | A human readable message providing more details about the operation. Can be null or empty.  **Successful operations** MUST return a `SuccessResponse`, which extends `APIResponse` by adding:  * `data` | Properties containing the response object. * `success` | MUST equal True  When returning objects from a successful response, the `data` object SHOULD contain a property named after the requested object type. For example, the `/alerts` endpoint should return a response object with `data.alerts`. This property SHOULD  contain a list of the returned objects. For the `/alerts` endpoint, the `data.alerts` property contains a list of MagicAlerts objects. See the `/alerts` endpoint documentation for an example.  **Failed Operations** MUST return an `ErrorResponse`, which extends `APIResponse` by adding:  * `success` | MUST equal False.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@cythereal.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ArchiveReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sha1': 'Sha1',
        'sha256': 'Sha256',
        'sha512': 'Sha512',
        'md5': 'Md5',
        'first_seen': 'Timestamp',
        'filename': 'Filenames',
        'object_class': 'ObjectClass',
        'unix_filetype': 'Filetype',
        'tags': 'Tags',
        'children': 'list[EmailObjectFileChildren]'
    }

    attribute_map = {
        'sha1': 'sha1',
        'sha256': 'sha256',
        'sha512': 'sha512',
        'md5': 'md5',
        'first_seen': 'first_seen',
        'filename': 'filename',
        'object_class': 'object_class',
        'unix_filetype': 'unix_filetype',
        'tags': 'tags',
        'children': 'children'
    }

    def __init__(self, sha1=None, sha256=None, sha512=None, md5=None, first_seen=None, filename=None, object_class=None, unix_filetype=None, tags=None, children=None):  # noqa: E501
        """ArchiveReport - a model defined in Swagger"""  # noqa: E501

        self._sha1 = None
        self._sha256 = None
        self._sha512 = None
        self._md5 = None
        self._first_seen = None
        self._filename = None
        self._object_class = None
        self._unix_filetype = None
        self._tags = None
        self._children = None
        self.discriminator = None

        if sha1 is not None:
            self.sha1 = sha1
        if sha256 is not None:
            self.sha256 = sha256
        if sha512 is not None:
            self.sha512 = sha512
        if md5 is not None:
            self.md5 = md5
        if first_seen is not None:
            self.first_seen = first_seen
        if filename is not None:
            self.filename = filename
        if object_class is not None:
            self.object_class = object_class
        if unix_filetype is not None:
            self.unix_filetype = unix_filetype
        if tags is not None:
            self.tags = tags
        if children is not None:
            self.children = children

    @property
    def sha1(self):
        """Gets the sha1 of this ArchiveReport.  # noqa: E501


        :return: The sha1 of this ArchiveReport.  # noqa: E501
        :rtype: Sha1
        """
        return self._sha1

    @sha1.setter
    def sha1(self, sha1):
        """Sets the sha1 of this ArchiveReport.


        :param sha1: The sha1 of this ArchiveReport.  # noqa: E501
        :type: Sha1
        """

        self._sha1 = sha1

    @property
    def sha256(self):
        """Gets the sha256 of this ArchiveReport.  # noqa: E501


        :return: The sha256 of this ArchiveReport.  # noqa: E501
        :rtype: Sha256
        """
        return self._sha256

    @sha256.setter
    def sha256(self, sha256):
        """Sets the sha256 of this ArchiveReport.


        :param sha256: The sha256 of this ArchiveReport.  # noqa: E501
        :type: Sha256
        """

        self._sha256 = sha256

    @property
    def sha512(self):
        """Gets the sha512 of this ArchiveReport.  # noqa: E501


        :return: The sha512 of this ArchiveReport.  # noqa: E501
        :rtype: Sha512
        """
        return self._sha512

    @sha512.setter
    def sha512(self, sha512):
        """Sets the sha512 of this ArchiveReport.


        :param sha512: The sha512 of this ArchiveReport.  # noqa: E501
        :type: Sha512
        """

        self._sha512 = sha512

    @property
    def md5(self):
        """Gets the md5 of this ArchiveReport.  # noqa: E501


        :return: The md5 of this ArchiveReport.  # noqa: E501
        :rtype: Md5
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this ArchiveReport.


        :param md5: The md5 of this ArchiveReport.  # noqa: E501
        :type: Md5
        """

        self._md5 = md5

    @property
    def first_seen(self):
        """Gets the first_seen of this ArchiveReport.  # noqa: E501


        :return: The first_seen of this ArchiveReport.  # noqa: E501
        :rtype: Timestamp
        """
        return self._first_seen

    @first_seen.setter
    def first_seen(self, first_seen):
        """Sets the first_seen of this ArchiveReport.


        :param first_seen: The first_seen of this ArchiveReport.  # noqa: E501
        :type: Timestamp
        """

        self._first_seen = first_seen

    @property
    def filename(self):
        """Gets the filename of this ArchiveReport.  # noqa: E501


        :return: The filename of this ArchiveReport.  # noqa: E501
        :rtype: Filenames
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this ArchiveReport.


        :param filename: The filename of this ArchiveReport.  # noqa: E501
        :type: Filenames
        """

        self._filename = filename

    @property
    def object_class(self):
        """Gets the object_class of this ArchiveReport.  # noqa: E501


        :return: The object_class of this ArchiveReport.  # noqa: E501
        :rtype: ObjectClass
        """
        return self._object_class

    @object_class.setter
    def object_class(self, object_class):
        """Sets the object_class of this ArchiveReport.


        :param object_class: The object_class of this ArchiveReport.  # noqa: E501
        :type: ObjectClass
        """

        self._object_class = object_class

    @property
    def unix_filetype(self):
        """Gets the unix_filetype of this ArchiveReport.  # noqa: E501


        :return: The unix_filetype of this ArchiveReport.  # noqa: E501
        :rtype: Filetype
        """
        return self._unix_filetype

    @unix_filetype.setter
    def unix_filetype(self, unix_filetype):
        """Sets the unix_filetype of this ArchiveReport.


        :param unix_filetype: The unix_filetype of this ArchiveReport.  # noqa: E501
        :type: Filetype
        """

        self._unix_filetype = unix_filetype

    @property
    def tags(self):
        """Gets the tags of this ArchiveReport.  # noqa: E501


        :return: The tags of this ArchiveReport.  # noqa: E501
        :rtype: Tags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ArchiveReport.


        :param tags: The tags of this ArchiveReport.  # noqa: E501
        :type: Tags
        """

        self._tags = tags

    @property
    def children(self):
        """Gets the children of this ArchiveReport.  # noqa: E501


        :return: The children of this ArchiveReport.  # noqa: E501
        :rtype: list[EmailObjectFileChildren]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this ArchiveReport.


        :param children: The children of this ArchiveReport.  # noqa: E501
        :type: list[EmailObjectFileChildren]
        """

        self._children = children

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArchiveReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArchiveReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
