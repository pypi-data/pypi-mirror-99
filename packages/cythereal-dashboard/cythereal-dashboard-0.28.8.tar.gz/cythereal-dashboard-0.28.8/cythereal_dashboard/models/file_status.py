# coding: utf-8

"""
    Cythereal Dashboard API

     The API used exclusively by the MAGIC Dashboard for populating charts, graphs, tables, etc... on the dashboard.  # API Conventions  **All responses** MUST be of type `APIResponse` and contain the following fields:  * `api_version` |  The current api version * `success` | Boolean value indicating if the operation succeeded. * `code` | Status code. Typically corresponds to the HTTP status code.  * `message` | A human readable message providing more details about the operation. Can be null or empty.  **Successful operations** MUST return a `SuccessResponse`, which extends `APIResponse` by adding:  * `data` | Properties containing the response object. * `success` | MUST equal True  When returning objects from a successful response, the `data` object SHOULD contain a property named after the requested object type. For example, the `/alerts` endpoint should return a response object with `data.alerts`. This property SHOULD  contain a list of the returned objects. For the `/alerts` endpoint, the `data.alerts` property contains a list of MagicAlerts objects. See the `/alerts` endpoint documentation for an example.  **Failed Operations** MUST return an `ErrorResponse`, which extends `APIResponse` by adding:  * `success` | MUST equal False.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@cythereal.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FileStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sha1': 'Sha1',
        'status': 'Status',
        'file_type': 'Filetype',
        'first_upload': 'Timestamp',
        'analysis': 'Analysis'
    }

    attribute_map = {
        'sha1': 'sha1',
        'status': 'status',
        'file_type': 'file_type',
        'first_upload': 'first_upload',
        'analysis': 'analysis'
    }

    def __init__(self, sha1=None, status=None, file_type=None, first_upload=None, analysis=None):  # noqa: E501
        """FileStatus - a model defined in Swagger"""  # noqa: E501

        self._sha1 = None
        self._status = None
        self._file_type = None
        self._first_upload = None
        self._analysis = None
        self.discriminator = None

        self.sha1 = sha1
        self.status = status
        if file_type is not None:
            self.file_type = file_type
        if first_upload is not None:
            self.first_upload = first_upload
        if analysis is not None:
            self.analysis = analysis

    @property
    def sha1(self):
        """Gets the sha1 of this FileStatus.  # noqa: E501


        :return: The sha1 of this FileStatus.  # noqa: E501
        :rtype: Sha1
        """
        return self._sha1

    @sha1.setter
    def sha1(self, sha1):
        """Sets the sha1 of this FileStatus.


        :param sha1: The sha1 of this FileStatus.  # noqa: E501
        :type: Sha1
        """
        if sha1 is None:
            raise ValueError("Invalid value for `sha1`, must not be `None`")  # noqa: E501

        self._sha1 = sha1

    @property
    def status(self):
        """Gets the status of this FileStatus.  # noqa: E501


        :return: The status of this FileStatus.  # noqa: E501
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FileStatus.


        :param status: The status of this FileStatus.  # noqa: E501
        :type: Status
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def file_type(self):
        """Gets the file_type of this FileStatus.  # noqa: E501


        :return: The file_type of this FileStatus.  # noqa: E501
        :rtype: Filetype
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this FileStatus.


        :param file_type: The file_type of this FileStatus.  # noqa: E501
        :type: Filetype
        """

        self._file_type = file_type

    @property
    def first_upload(self):
        """Gets the first_upload of this FileStatus.  # noqa: E501


        :return: The first_upload of this FileStatus.  # noqa: E501
        :rtype: Timestamp
        """
        return self._first_upload

    @first_upload.setter
    def first_upload(self, first_upload):
        """Sets the first_upload of this FileStatus.


        :param first_upload: The first_upload of this FileStatus.  # noqa: E501
        :type: Timestamp
        """

        self._first_upload = first_upload

    @property
    def analysis(self):
        """Gets the analysis of this FileStatus.  # noqa: E501


        :return: The analysis of this FileStatus.  # noqa: E501
        :rtype: Analysis
        """
        return self._analysis

    @analysis.setter
    def analysis(self, analysis):
        """Sets the analysis of this FileStatus.


        :param analysis: The analysis of this FileStatus.  # noqa: E501
        :type: Analysis
        """

        self._analysis = analysis

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
