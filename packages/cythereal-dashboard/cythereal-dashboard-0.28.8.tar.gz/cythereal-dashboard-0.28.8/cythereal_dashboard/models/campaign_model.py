# coding: utf-8

"""
    Cythereal Dashboard API

     The API used exclusively by the MAGIC Dashboard for populating charts, graphs, tables, etc... on the dashboard.  # API Conventions  **All responses** MUST be of type `APIResponse` and contain the following fields:  * `api_version` |  The current api version * `success` | Boolean value indicating if the operation succeeded. * `code` | Status code. Typically corresponds to the HTTP status code.  * `message` | A human readable message providing more details about the operation. Can be null or empty.  **Successful operations** MUST return a `SuccessResponse`, which extends `APIResponse` by adding:  * `data` | Properties containing the response object. * `success` | MUST equal True  When returning objects from a successful response, the `data` object SHOULD contain a property named after the requested object type. For example, the `/alerts` endpoint should return a response object with `data.alerts`. This property SHOULD  contain a list of the returned objects. For the `/alerts` endpoint, the `data.alerts` property contains a list of MagicAlerts objects. See the `/alerts` endpoint documentation for an example.  **Failed Operations** MUST return an `ErrorResponse`, which extends `APIResponse` by adding:  * `success` | MUST equal False.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@cythereal.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CampaignModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'size': 'Size',
        'category': 'Category',
        'color': 'Color',
        'yara_rule': 'YaraRule',
        'evasiveness': 'Evasiveness',
        'stddev_evasiveness': 'Evasiveness'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'size': 'size',
        'category': 'category',
        'color': 'color',
        'yara_rule': 'yara_rule',
        'evasiveness': 'evasiveness',
        'stddev_evasiveness': 'stddev_evasiveness'
    }

    def __init__(self, id=None, name=None, size=None, category=None, color=None, yara_rule=None, evasiveness=None, stddev_evasiveness=None):  # noqa: E501
        """CampaignModel - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._size = None
        self._category = None
        self._color = None
        self._yara_rule = None
        self._evasiveness = None
        self._stddev_evasiveness = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size
        if category is not None:
            self.category = category
        if color is not None:
            self.color = color
        if yara_rule is not None:
            self.yara_rule = yara_rule
        if evasiveness is not None:
            self.evasiveness = evasiveness
        if stddev_evasiveness is not None:
            self.stddev_evasiveness = stddev_evasiveness

    @property
    def id(self):
        """Gets the id of this CampaignModel.  # noqa: E501

        The campaign id is a sha1 representation of the entire campaign, based on it's yara rule.  # noqa: E501

        :return: The id of this CampaignModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CampaignModel.

        The campaign id is a sha1 representation of the entire campaign, based on it's yara rule.  # noqa: E501

        :param id: The id of this CampaignModel.  # noqa: E501
        :type: str
        """
        if id is not None and not re.search(r'[a-fA-F0-9]{40}', id):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/[a-fA-F0-9]{40}/`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this CampaignModel.  # noqa: E501

        A unique name for each campaign  # noqa: E501

        :return: The name of this CampaignModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CampaignModel.

        A unique name for each campaign  # noqa: E501

        :param name: The name of this CampaignModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this CampaignModel.  # noqa: E501


        :return: The size of this CampaignModel.  # noqa: E501
        :rtype: Size
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this CampaignModel.


        :param size: The size of this CampaignModel.  # noqa: E501
        :type: Size
        """

        self._size = size

    @property
    def category(self):
        """Gets the category of this CampaignModel.  # noqa: E501


        :return: The category of this CampaignModel.  # noqa: E501
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CampaignModel.


        :param category: The category of this CampaignModel.  # noqa: E501
        :type: Category
        """

        self._category = category

    @property
    def color(self):
        """Gets the color of this CampaignModel.  # noqa: E501


        :return: The color of this CampaignModel.  # noqa: E501
        :rtype: Color
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this CampaignModel.


        :param color: The color of this CampaignModel.  # noqa: E501
        :type: Color
        """

        self._color = color

    @property
    def yara_rule(self):
        """Gets the yara_rule of this CampaignModel.  # noqa: E501


        :return: The yara_rule of this CampaignModel.  # noqa: E501
        :rtype: YaraRule
        """
        return self._yara_rule

    @yara_rule.setter
    def yara_rule(self, yara_rule):
        """Sets the yara_rule of this CampaignModel.


        :param yara_rule: The yara_rule of this CampaignModel.  # noqa: E501
        :type: YaraRule
        """

        self._yara_rule = yara_rule

    @property
    def evasiveness(self):
        """Gets the evasiveness of this CampaignModel.  # noqa: E501


        :return: The evasiveness of this CampaignModel.  # noqa: E501
        :rtype: Evasiveness
        """
        return self._evasiveness

    @evasiveness.setter
    def evasiveness(self, evasiveness):
        """Sets the evasiveness of this CampaignModel.


        :param evasiveness: The evasiveness of this CampaignModel.  # noqa: E501
        :type: Evasiveness
        """

        self._evasiveness = evasiveness

    @property
    def stddev_evasiveness(self):
        """Gets the stddev_evasiveness of this CampaignModel.  # noqa: E501


        :return: The stddev_evasiveness of this CampaignModel.  # noqa: E501
        :rtype: Evasiveness
        """
        return self._stddev_evasiveness

    @stddev_evasiveness.setter
    def stddev_evasiveness(self, stddev_evasiveness):
        """Sets the stddev_evasiveness of this CampaignModel.


        :param stddev_evasiveness: The stddev_evasiveness of this CampaignModel.  # noqa: E501
        :type: Evasiveness
        """

        self._stddev_evasiveness = stddev_evasiveness

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CampaignModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
