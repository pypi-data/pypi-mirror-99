# coding: utf-8

"""
    Cythereal Dashboard API

     The API used exclusively by the MAGIC Dashboard for populating charts, graphs, tables, etc... on the dashboard.  # API Conventions  **All responses** MUST be of type `APIResponse` and contain the following fields:  * `api_version` |  The current api version * `success` | Boolean value indicating if the operation succeeded. * `code` | Status code. Typically corresponds to the HTTP status code.  * `message` | A human readable message providing more details about the operation. Can be null or empty.  **Successful operations** MUST return a `SuccessResponse`, which extends `APIResponse` by adding:  * `data` | Properties containing the response object. * `success` | MUST equal True  When returning objects from a successful response, the `data` object SHOULD contain a property named after the requested object type. For example, the `/alerts` endpoint should return a response object with `data.alerts`. This property SHOULD  contain a list of the returned objects. For the `/alerts` endpoint, the `data.alerts` property contains a list of MagicAlerts objects. See the `/alerts` endpoint documentation for an example.  **Failed Operations** MUST return an `ErrorResponse`, which extends `APIResponse` by adding:  * `success` | MUST equal False.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@cythereal.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TagModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_field': 'str',
        'model_id': 'str',
        'database': 'str',
        'collection': 'str',
        'comments': 'list[str]'
    }

    attribute_map = {
        'id_field': 'id_field',
        'model_id': 'model_id',
        'database': 'database',
        'collection': 'collection',
        'comments': 'comments'
    }

    def __init__(self, id_field=None, model_id=None, database=None, collection=None, comments=None):  # noqa: E501
        """TagModel - a model defined in Swagger"""  # noqa: E501

        self._id_field = None
        self._model_id = None
        self._database = None
        self._collection = None
        self._comments = None
        self.discriminator = None

        if id_field is not None:
            self.id_field = id_field
        if model_id is not None:
            self.model_id = model_id
        if database is not None:
            self.database = database
        if collection is not None:
            self.collection = collection
        if comments is not None:
            self.comments = comments

    @property
    def id_field(self):
        """Gets the id_field of this TagModel.  # noqa: E501


        :return: The id_field of this TagModel.  # noqa: E501
        :rtype: str
        """
        return self._id_field

    @id_field.setter
    def id_field(self, id_field):
        """Sets the id_field of this TagModel.


        :param id_field: The id_field of this TagModel.  # noqa: E501
        :type: str
        """

        self._id_field = id_field

    @property
    def model_id(self):
        """Gets the model_id of this TagModel.  # noqa: E501


        :return: The model_id of this TagModel.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this TagModel.


        :param model_id: The model_id of this TagModel.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def database(self):
        """Gets the database of this TagModel.  # noqa: E501


        :return: The database of this TagModel.  # noqa: E501
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this TagModel.


        :param database: The database of this TagModel.  # noqa: E501
        :type: str
        """

        self._database = database

    @property
    def collection(self):
        """Gets the collection of this TagModel.  # noqa: E501


        :return: The collection of this TagModel.  # noqa: E501
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this TagModel.


        :param collection: The collection of this TagModel.  # noqa: E501
        :type: str
        """

        self._collection = collection

    @property
    def comments(self):
        """Gets the comments of this TagModel.  # noqa: E501


        :return: The comments of this TagModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this TagModel.


        :param comments: The comments of this TagModel.  # noqa: E501
        :type: list[str]
        """

        self._comments = comments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TagModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TagModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
