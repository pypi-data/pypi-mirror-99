# coding: utf-8

"""
    Cythereal Dashboard API

     The API used exclusively by the MAGIC Dashboard for populating charts, graphs, tables, etc... on the dashboard.  # API Conventions  **All responses** MUST be of type `APIResponse` and contain the following fields:  * `api_version` |  The current api version * `success` | Boolean value indicating if the operation succeeded. * `code` | Status code. Typically corresponds to the HTTP status code.  * `message` | A human readable message providing more details about the operation. Can be null or empty.  **Successful operations** MUST return a `SuccessResponse`, which extends `APIResponse` by adding:  * `data` | Properties containing the response object. * `success` | MUST equal True  When returning objects from a successful response, the `data` object SHOULD contain a property named after the requested object type. For example, the `/alerts` endpoint should return a response object with `data.alerts`. This property SHOULD  contain a list of the returned objects. For the `/alerts` endpoint, the `data.alerts` property contains a list of MagicAlerts objects. See the `/alerts` endpoint documentation for an example.  **Failed Operations** MUST return an `ErrorResponse`, which extends `APIResponse` by adding:  * `success` | MUST equal False.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@cythereal.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BinaryGraphModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sha1': 'Sha1',
        'first_seen': 'Timestamp',
        'evasiveness': 'Evasiveness',
        'category': 'Category',
        'color': 'Color',
        'yara_id': 'YaraId',
        'yara_id_unpacked': 'YaraId'
    }

    attribute_map = {
        'sha1': 'sha1',
        'first_seen': 'first_seen',
        'evasiveness': 'evasiveness',
        'category': 'category',
        'color': 'color',
        'yara_id': 'yara_id',
        'yara_id_unpacked': 'yara_id_unpacked'
    }

    def __init__(self, sha1=None, first_seen=None, evasiveness=None, category=None, color=None, yara_id=None, yara_id_unpacked=None):  # noqa: E501
        """BinaryGraphModel - a model defined in Swagger"""  # noqa: E501

        self._sha1 = None
        self._first_seen = None
        self._evasiveness = None
        self._category = None
        self._color = None
        self._yara_id = None
        self._yara_id_unpacked = None
        self.discriminator = None

        if sha1 is not None:
            self.sha1 = sha1
        if first_seen is not None:
            self.first_seen = first_seen
        if evasiveness is not None:
            self.evasiveness = evasiveness
        if category is not None:
            self.category = category
        if color is not None:
            self.color = color
        if yara_id is not None:
            self.yara_id = yara_id
        if yara_id_unpacked is not None:
            self.yara_id_unpacked = yara_id_unpacked

    @property
    def sha1(self):
        """Gets the sha1 of this BinaryGraphModel.  # noqa: E501


        :return: The sha1 of this BinaryGraphModel.  # noqa: E501
        :rtype: Sha1
        """
        return self._sha1

    @sha1.setter
    def sha1(self, sha1):
        """Sets the sha1 of this BinaryGraphModel.


        :param sha1: The sha1 of this BinaryGraphModel.  # noqa: E501
        :type: Sha1
        """

        self._sha1 = sha1

    @property
    def first_seen(self):
        """Gets the first_seen of this BinaryGraphModel.  # noqa: E501


        :return: The first_seen of this BinaryGraphModel.  # noqa: E501
        :rtype: Timestamp
        """
        return self._first_seen

    @first_seen.setter
    def first_seen(self, first_seen):
        """Sets the first_seen of this BinaryGraphModel.


        :param first_seen: The first_seen of this BinaryGraphModel.  # noqa: E501
        :type: Timestamp
        """

        self._first_seen = first_seen

    @property
    def evasiveness(self):
        """Gets the evasiveness of this BinaryGraphModel.  # noqa: E501


        :return: The evasiveness of this BinaryGraphModel.  # noqa: E501
        :rtype: Evasiveness
        """
        return self._evasiveness

    @evasiveness.setter
    def evasiveness(self, evasiveness):
        """Sets the evasiveness of this BinaryGraphModel.


        :param evasiveness: The evasiveness of this BinaryGraphModel.  # noqa: E501
        :type: Evasiveness
        """

        self._evasiveness = evasiveness

    @property
    def category(self):
        """Gets the category of this BinaryGraphModel.  # noqa: E501


        :return: The category of this BinaryGraphModel.  # noqa: E501
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this BinaryGraphModel.


        :param category: The category of this BinaryGraphModel.  # noqa: E501
        :type: Category
        """

        self._category = category

    @property
    def color(self):
        """Gets the color of this BinaryGraphModel.  # noqa: E501


        :return: The color of this BinaryGraphModel.  # noqa: E501
        :rtype: Color
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this BinaryGraphModel.


        :param color: The color of this BinaryGraphModel.  # noqa: E501
        :type: Color
        """

        self._color = color

    @property
    def yara_id(self):
        """Gets the yara_id of this BinaryGraphModel.  # noqa: E501


        :return: The yara_id of this BinaryGraphModel.  # noqa: E501
        :rtype: YaraId
        """
        return self._yara_id

    @yara_id.setter
    def yara_id(self, yara_id):
        """Sets the yara_id of this BinaryGraphModel.


        :param yara_id: The yara_id of this BinaryGraphModel.  # noqa: E501
        :type: YaraId
        """

        self._yara_id = yara_id

    @property
    def yara_id_unpacked(self):
        """Gets the yara_id_unpacked of this BinaryGraphModel.  # noqa: E501


        :return: The yara_id_unpacked of this BinaryGraphModel.  # noqa: E501
        :rtype: YaraId
        """
        return self._yara_id_unpacked

    @yara_id_unpacked.setter
    def yara_id_unpacked(self, yara_id_unpacked):
        """Sets the yara_id_unpacked of this BinaryGraphModel.


        :param yara_id_unpacked: The yara_id_unpacked of this BinaryGraphModel.  # noqa: E501
        :type: YaraId
        """

        self._yara_id_unpacked = yara_id_unpacked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BinaryGraphModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BinaryGraphModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
