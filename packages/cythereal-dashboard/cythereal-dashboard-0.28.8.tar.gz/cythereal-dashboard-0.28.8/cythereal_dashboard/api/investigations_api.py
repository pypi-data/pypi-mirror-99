# coding: utf-8

"""
    Cythereal Dashboard API

     The API used exclusively by the MAGIC Dashboard for populating charts, graphs, tables, etc... on the dashboard.  # API Conventions  **All responses** MUST be of type `APIResponse` and contain the following fields:  * `api_version` |  The current api version * `success` | Boolean value indicating if the operation succeeded. * `code` | Status code. Typically corresponds to the HTTP status code.  * `message` | A human readable message providing more details about the operation. Can be null or empty.  **Successful operations** MUST return a `SuccessResponse`, which extends `APIResponse` by adding:  * `data` | Properties containing the response object. * `success` | MUST equal True  When returning objects from a successful response, the `data` object SHOULD contain a property named after the requested object type. For example, the `/alerts` endpoint should return a response object with `data.alerts`. This property SHOULD  contain a list of the returned objects. For the `/alerts` endpoint, the `data.alerts` property contains a list of MagicAlerts objects. See the `/alerts` endpoint documentation for an example.  **Failed Operations** MUST return an `ErrorResponse`, which extends `APIResponse` by adding:  * `success` | MUST equal False.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@cythereal.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cythereal_dashboard.api_client import ApiClient


class InvestigationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_to_investigation(self, investigation_name, binaries, **kwargs):  # noqa: E501
        """Adds a list of files to an investigation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_to_investigation(investigation_name, binaries, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str investigation_name: Unique user created name of a collection of files (required)
        :param list[str] binaries: A list of binary hashes (required)
        :return: AddToInvestigationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_to_investigation_with_http_info(investigation_name, binaries, **kwargs)  # noqa: E501
        else:
            (data) = self.add_to_investigation_with_http_info(investigation_name, binaries, **kwargs)  # noqa: E501
            return data

    def add_to_investigation_with_http_info(self, investigation_name, binaries, **kwargs):  # noqa: E501
        """Adds a list of files to an investigation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_to_investigation_with_http_info(investigation_name, binaries, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str investigation_name: Unique user created name of a collection of files (required)
        :param list[str] binaries: A list of binary hashes (required)
        :return: AddToInvestigationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['investigation_name', 'binaries']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_to_investigation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'investigation_name' is set
        if ('investigation_name' not in params or
                params['investigation_name'] is None):
            raise ValueError("Missing the required parameter `investigation_name` when calling `add_to_investigation`")  # noqa: E501
        # verify the required parameter 'binaries' is set
        if ('binaries' not in params or
                params['binaries'] is None):
            raise ValueError("Missing the required parameter `binaries` when calling `add_to_investigation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'investigation_name' in params:
            path_params['investigation_name'] = params['investigation_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'binaries' in params:
            form_params.append(('binaries', params['binaries']))  # noqa: E501
            collection_formats['binaries'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_query_param']  # noqa: E501

        return self.api_client.call_api(
            '/investigations/{investigation_name}/add/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddToInvestigationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_investigation(self, name, binaries, **kwargs):  # noqa: E501
        """Create a new Investigation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_investigation(name, binaries, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Unique user created name of a collection of files (required)
        :param list[str] binaries: A list of binary hashes (required)
        :return: NewInvestigation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_investigation_with_http_info(name, binaries, **kwargs)  # noqa: E501
        else:
            (data) = self.create_investigation_with_http_info(name, binaries, **kwargs)  # noqa: E501
            return data

    def create_investigation_with_http_info(self, name, binaries, **kwargs):  # noqa: E501
        """Create a new Investigation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_investigation_with_http_info(name, binaries, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Unique user created name of a collection of files (required)
        :param list[str] binaries: A list of binary hashes (required)
        :return: NewInvestigation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'binaries']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_investigation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_investigation`")  # noqa: E501
        # verify the required parameter 'binaries' is set
        if ('binaries' not in params or
                params['binaries'] is None):
            raise ValueError("Missing the required parameter `binaries` when calling `create_investigation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'binaries' in params:
            form_params.append(('binaries', params['binaries']))  # noqa: E501
            collection_formats['binaries'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_query_param']  # noqa: E501

        return self.api_client.call_api(
            '/investigations/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewInvestigation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_investigation(self, name, **kwargs):  # noqa: E501
        """Deletes an individual investigation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_investigation(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Unique user created name of a collection of files (required)
        :return: DeletedResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_investigation_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_investigation_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_investigation_with_http_info(self, name, **kwargs):  # noqa: E501
        """Deletes an individual investigation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_investigation_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Unique user created name of a collection of files (required)
        :return: DeletedResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_investigation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_investigation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_query_param']  # noqa: E501

        return self.api_client.call_api(
            '/investigations/delete/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeletedResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_investigation(self, investigation_name, **kwargs):  # noqa: E501
        """Retrieve a specific Investigation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_investigation(investigation_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str investigation_name: Unique user created name of a collection of files (required)
        :return: Investigation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_investigation_with_http_info(investigation_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_investigation_with_http_info(investigation_name, **kwargs)  # noqa: E501
            return data

    def get_investigation_with_http_info(self, investigation_name, **kwargs):  # noqa: E501
        """Retrieve a specific Investigation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_investigation_with_http_info(investigation_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str investigation_name: Unique user created name of a collection of files (required)
        :return: Investigation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['investigation_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_investigation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'investigation_name' is set
        if ('investigation_name' not in params or
                params['investigation_name'] is None):
            raise ValueError("Missing the required parameter `investigation_name` when calling `get_investigation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'investigation_name' in params:
            path_params['investigation_name'] = params['investigation_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_query_param']  # noqa: E501

        return self.api_client.call_api(
            '/investigations/{investigation_name}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Investigation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_investigations(self, **kwargs):  # noqa: E501
        """List all investigations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_investigations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InvestigationListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_investigations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_investigations_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_investigations_with_http_info(self, **kwargs):  # noqa: E501
        """List all investigations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_investigations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InvestigationListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_investigations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_query_param']  # noqa: E501

        return self.api_client.call_api(
            '/investigations/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InvestigationListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_from_investigation(self, investigation_name, binaries, **kwargs):  # noqa: E501
        """Removes a list of files from an investigation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_from_investigation(investigation_name, binaries, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str investigation_name: Unique user created name of a collection of files (required)
        :param list[str] binaries: A list of binary hashes (required)
        :return: RemoveFromInvestigationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_from_investigation_with_http_info(investigation_name, binaries, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_from_investigation_with_http_info(investigation_name, binaries, **kwargs)  # noqa: E501
            return data

    def remove_from_investigation_with_http_info(self, investigation_name, binaries, **kwargs):  # noqa: E501
        """Removes a list of files from an investigation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_from_investigation_with_http_info(investigation_name, binaries, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str investigation_name: Unique user created name of a collection of files (required)
        :param list[str] binaries: A list of binary hashes (required)
        :return: RemoveFromInvestigationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['investigation_name', 'binaries']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_from_investigation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'investigation_name' is set
        if ('investigation_name' not in params or
                params['investigation_name'] is None):
            raise ValueError("Missing the required parameter `investigation_name` when calling `remove_from_investigation`")  # noqa: E501
        # verify the required parameter 'binaries' is set
        if ('binaries' not in params or
                params['binaries'] is None):
            raise ValueError("Missing the required parameter `binaries` when calling `remove_from_investigation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'investigation_name' in params:
            path_params['investigation_name'] = params['investigation_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'binaries' in params:
            form_params.append(('binaries', params['binaries']))  # noqa: E501
            collection_formats['binaries'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_query_param']  # noqa: E501

        return self.api_client.call_api(
            '/investigations/{investigation_name}/remove/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoveFromInvestigationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reprocess_investigation(self, investigation_name, **kwargs):  # noqa: E501
        """Reprocess/Update a specific Investigation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reprocess_investigation(investigation_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str investigation_name: Unique user created name of a collection of files (required)
        :return: Investigation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reprocess_investigation_with_http_info(investigation_name, **kwargs)  # noqa: E501
        else:
            (data) = self.reprocess_investigation_with_http_info(investigation_name, **kwargs)  # noqa: E501
            return data

    def reprocess_investigation_with_http_info(self, investigation_name, **kwargs):  # noqa: E501
        """Reprocess/Update a specific Investigation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reprocess_investigation_with_http_info(investigation_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str investigation_name: Unique user created name of a collection of files (required)
        :return: Investigation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['investigation_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reprocess_investigation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'investigation_name' is set
        if ('investigation_name' not in params or
                params['investigation_name'] is None):
            raise ValueError("Missing the required parameter `investigation_name` when calling `reprocess_investigation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'investigation_name' in params:
            path_params['investigation_name'] = params['investigation_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_query_param']  # noqa: E501

        return self.api_client.call_api(
            '/investigations/{investigation_name}/reprocess/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Investigation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
