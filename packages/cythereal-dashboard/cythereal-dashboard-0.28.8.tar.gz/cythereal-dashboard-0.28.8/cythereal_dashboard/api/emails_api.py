# coding: utf-8

"""
    Cythereal Dashboard API

     The API used exclusively by the MAGIC Dashboard for populating charts, graphs, tables, etc... on the dashboard.  # API Conventions  **All responses** MUST be of type `APIResponse` and contain the following fields:  * `api_version` |  The current api version * `success` | Boolean value indicating if the operation succeeded. * `code` | Status code. Typically corresponds to the HTTP status code.  * `message` | A human readable message providing more details about the operation. Can be null or empty.  **Successful operations** MUST return a `SuccessResponse`, which extends `APIResponse` by adding:  * `data` | Properties containing the response object. * `success` | MUST equal True  When returning objects from a successful response, the `data` object SHOULD contain a property named after the requested object type. For example, the `/alerts` endpoint should return a response object with `data.alerts`. This property SHOULD  contain a list of the returned objects. For the `/alerts` endpoint, the `data.alerts` property contains a list of MagicAlerts objects. See the `/alerts` endpoint documentation for an example.  **Failed Operations** MUST return an `ErrorResponse`, which extends `APIResponse` by adding:  * `success` | MUST equal False.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@cythereal.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cythereal_dashboard.api_client import ApiClient


class EmailsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_owned_email_binaries(self, **kwargs):  # noqa: E501
        """List Binaries found in emails owned by the authenticated user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_owned_email_binaries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: Return uploads from the given date. If not provided, all owned files from startDate to endDate will be returned Specify date as `YYYY-MM-DD`. 
        :param str start_date: Return uploads from the given date until endDate. Specify date as `YYYY-MM-DD`. 
        :param str end_date: Return uploads from startDate until the given date. Specify date as `YYYY-MM-DD`. 
        :param float page: Page of results to retrieve. Starts at 1.  If not provided, the first page of results will be returned. 
        :param float limit: Limit of files to return for each page. 
        :return: EmailChildrenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_owned_email_binaries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_owned_email_binaries_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_owned_email_binaries_with_http_info(self, **kwargs):  # noqa: E501
        """List Binaries found in emails owned by the authenticated user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_owned_email_binaries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: Return uploads from the given date. If not provided, all owned files from startDate to endDate will be returned Specify date as `YYYY-MM-DD`. 
        :param str start_date: Return uploads from the given date until endDate. Specify date as `YYYY-MM-DD`. 
        :param str end_date: Return uploads from startDate until the given date. Specify date as `YYYY-MM-DD`. 
        :param float page: Page of results to retrieve. Starts at 1.  If not provided, the first page of results will be returned. 
        :param float limit: Limit of files to return for each page. 
        :return: EmailChildrenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', 'start_date', 'end_date', 'page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_owned_email_binaries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_query_param']  # noqa: E501

        return self.api_client.call_api(
            '/emails/binaries/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmailChildrenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_owned_email_children(self, **kwargs):  # noqa: E501
        """List Children found in emails owned by the authenticated user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_owned_email_children(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: Return uploads from the given date. If not provided, all owned files from startDate to endDate will be returned Specify date as `YYYY-MM-DD`. 
        :param str start_date: Return uploads from the given date until endDate. Specify date as `YYYY-MM-DD`. 
        :param str end_date: Return uploads from startDate until the given date. Specify date as `YYYY-MM-DD`. 
        :param float page: Page of results to retrieve. Starts at 1.  If not provided, the first page of results will be returned. 
        :param float limit: Limit of files to return for each page. 
        :param str file_type:
        :return: EmailChildrenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_owned_email_children_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_owned_email_children_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_owned_email_children_with_http_info(self, **kwargs):  # noqa: E501
        """List Children found in emails owned by the authenticated user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_owned_email_children_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: Return uploads from the given date. If not provided, all owned files from startDate to endDate will be returned Specify date as `YYYY-MM-DD`. 
        :param str start_date: Return uploads from the given date until endDate. Specify date as `YYYY-MM-DD`. 
        :param str end_date: Return uploads from startDate until the given date. Specify date as `YYYY-MM-DD`. 
        :param float page: Page of results to retrieve. Starts at 1.  If not provided, the first page of results will be returned. 
        :param float limit: Limit of files to return for each page. 
        :param str file_type:
        :return: EmailChildrenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', 'start_date', 'end_date', 'page', 'limit', 'file_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_owned_email_children" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'file_type' in params:
            query_params.append(('file_type', params['file_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_query_param']  # noqa: E501

        return self.api_client.call_api(
            '/emails/children/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmailChildrenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_owned_emails(self, **kwargs):  # noqa: E501
        """List emails owned by the authenticated user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_owned_emails(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: Return uploads from the given date. If not provided, all owned files from startDate to endDate will be returned Specify date as `YYYY-MM-DD`. 
        :param str start_date: Return uploads from the given date until endDate. Specify date as `YYYY-MM-DD`. 
        :param str end_date: Return uploads from startDate until the given date. Specify date as `YYYY-MM-DD`. 
        :param float page: Page of results to retrieve. Starts at 1.  If not provided, the first page of results will be returned. 
        :param float limit: Limit of files to return for each page. 
        :return: EmailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_owned_emails_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_owned_emails_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_owned_emails_with_http_info(self, **kwargs):  # noqa: E501
        """List emails owned by the authenticated user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_owned_emails_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: Return uploads from the given date. If not provided, all owned files from startDate to endDate will be returned Specify date as `YYYY-MM-DD`. 
        :param str start_date: Return uploads from the given date until endDate. Specify date as `YYYY-MM-DD`. 
        :param str end_date: Return uploads from startDate until the given date. Specify date as `YYYY-MM-DD`. 
        :param float page: Page of results to retrieve. Starts at 1.  If not provided, the first page of results will be returned. 
        :param float limit: Limit of files to return for each page. 
        :return: EmailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', 'start_date', 'end_date', 'page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_owned_emails" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_query_param']  # noqa: E501

        return self.api_client.call_api(
            '/emails/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmailsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
