language: python

# use the faster container-based architecture
sudo: false

addons:
  apt_packages:
    - pandoc

# versions to test
# list of packages in miniconda:
# http://repo.continuum.io/pkgs/free/linux-64/index.html
matrix:
  include:
    # Drop Python 3.3 tests because Anaconda doesn't have NumPy 1.10 for Python 3.3
    #
    # - python: 3.3
    #   env:
    #     - PYTHONVERSION==3.3
    #     - NUMPYVERSION==1.10.0
    #     - SCIPYVERSION==0.13.0
    #     - MATPLOTLIBVERSION==1.3.0  # matplotlib 1.2.0 fails unit tests
    #                                 # because of small offsets in plotting
    #                                 # compared to more recent versions
    # - python: 3.3
    #   env:
    #     - PYTHONVERSION==3.3
    #     - NUMPYVERSION=
    #     - SCIPYVERSION=
    #     - MATPLOTLIBVERSION=
    - python: 3.4
      env:
        - PYTHONVERSION==3.4
        - NUMPYVERSION==1.10.0
        - SCIPYVERSION=
        - MATPLOTLIBVERSION=
    - python: 3.4
      env:
        - PYTHONVERSION==3.4
        - NUMPYVERSION=
        - SCIPYVERSION=
        - MATPLOTLIBVERSION=
    - python: 3.5
      env:
        - PYTHONVERSION==3.5
        - NUMPYVERSION=
        - SCIPYVERSION=
        - MATPLOTLIBVERSION=

# install Miniconda; use it to install dependencies
install:
  - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
  - bash miniconda.sh -b -p $(pwd)/miniconda
  - export PATH="$(pwd)/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda info -a
  - DEPS="pip nose coverage"
  - conda create -q -n test-environment python$PYTHONVERSION $DEPS
  - conda install -n test-environment --yes numpy$NUMPYVERSION
  - conda install -n test-environment --yes scipy$SCIPYVERSION
  - conda install -n test-environment --yes matplotlib$MATPLOTLIBVERSION
  - conda install -n test-environment --yes h5py
  - source activate test-environment
  - pip install coveralls
  - pip install ipython
  - pip install -e .[dev,doc]
  - pip freeze


# Select a proper matplotlib backend
before_script:
  - mkdir -p ~/.config/matplotlib
  - "echo backend : Agg > ~/.config/matplotlib/matplotlibrc"

# Run unit tests for the code, docstrings and documentation
script:
  - travis_wait 30 python -m nose -c setup.cfg
  - cd doc
  - travis_wait 50 make doctest
  - cd ..

# Run doctests only for recent enough NumPy.
# - python -c "import sys; import numpy; from distutils.version import StrictVersion; sys.exit(StrictVersion(numpy.__version__) < StrictVersion('1.11'))"
# - if [ $? -eq 0]; then travis_wait 50 make doctest; fi

# if tests fail, upload images to imgur
after_failure:
  - wget http://imgur.com/tools/imgurbash.sh
  - for img in result_images/test_plot/*.png; do echo -e "\n$img"; bash imgurbash.sh $img; done

# check coverage
after_script:
  - coveralls

notifications:
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/d33dd85624e42382050a
    on_success: change  # options: [always|never|change] default: always
    on_failure: always  # options: [always|never|change] default: always
    on_start: never     # options: [always|never|change] default: always
