Metadata-Version: 2.1
Name: mypy-boto3-opsworks
Version: 1.17.33.0
Summary: Type annotations for boto3.OpsWorks 1.17.33 service, generated by mypy-boto3-buider 4.4.0
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Description: # mypy-boto3-opsworks
        
        [![PyPI - mypy-boto3-opsworks](https://img.shields.io/pypi/v/mypy-boto3-opsworks.svg?color=blue)](https://pypi.org/project/mypy-boto3-opsworks)
        [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-opsworks.svg?color=blue)](https://pypi.org/project/mypy-boto3-opsworks)
        [![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
        
        ![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/master/logo.png)
        
        Type annotations for
        [boto3.OpsWorks 1.17.33](https://boto3.amazonaws.com/v1/documentation/api/1.17.33/reference/services/opsworks.html#OpsWorks) service
        compatible with
        [VSCode](https://code.visualstudio.com/),
        [PyCharm](https://www.jetbrains.com/pycharm/),
        [Emacs](https://www.gnu.org/software/emacs/),
        [Sublime Text](https://www.sublimetext.com/),
        [mypy](https://github.com/python/mypy),
        [pyright](https://github.com/microsoft/pyright)
        and other tools.
        
        Generated by [mypy-boto3-buider 4.4.0](https://github.com/vemel/mypy_boto3_builder).
        
        More information can be found on [boto3-stubs](https://pypi.org/project/boto3-stubs/) page.
        
        See how it helps to find and fix potential bugs:
        
        ![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/master/demo.gif)
        
        - [mypy-boto3-opsworks](#mypy-boto3-opsworks)
          - [How to install](#how-to-install)
          - [Usage](#usage)
            - [VSCode](#vscode)
            - [PyCharm](#pycharm)
            - [Other IDEs](#other-ides)
            - [mypy](#mypy)
            - [pyright](#pyright)
          - [Explicit type annotations](#explicit-type-annotations)
            - [Client annotations](#client-annotations)
            - [Paginators annotations](#paginators-annotations)
            - [Waiters annotations](#waiters-annotations)
            - [Service Resource annotations](#service-resource-annotations)
            - [Other resources annotations](#other-resources-annotations)
            - [Collections annotations](#collections-annotations)
            - [Typed dictionations](#typed-dictionations)
        
        ## How to install
        
        Install `boto3-stubs` for `OpsWorks` service.
        
        ```bash
        python -m pip install boto3-stubs[opsworks]
        ```
        
        ## Usage
        
        ### VSCode
        
        - Install [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
        - Install [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
        - Set `Pylance` as your Python Language Server
        - Install `boto-stubs[opsworks]` in your environment: `python -m pip install 'boto3-stubs[opsworks]'`
        
        Both type checking and auto-complete should work for `OpsWorks` service.
        No explicit type annotations required, write your `boto3` code as usual.
        
        ### PyCharm
        
        - Install `boto-stubs[opsworks]` in your environment: `python -m pip install 'boto3-stubs[opsworks]'`
        
        Both type checking and auto-complete should work for `OpsWorks` service.
        No explicit type annotations required, write your `boto3` code as usual.
        Auto-complete can be slow on big projects or if you have a lot of installed `boto3-stubs` submodules.
        
        ### Other IDEs
        
        Not tested, but as long as your IDE support `mypy` or `pyright`, everything should work.
        
        ### mypy
        
        - Install `mypy`: `python -m pip install mypy`
        - Install `boto-stubs[opsworks]` in your environment: `python -m pip install 'boto3-stubs[opsworks]'`
        - Run `mypy` as usual
        
        Type checking should work for `OpsWorks` service.
        No explicit type annotations required, write your `boto3` code as usual.
        
        ### pyright
        
        - Install `pyright`: `yarn global add pyright`
        - Install `boto-stubs[opsworks]` in your environment: `python -m pip install 'boto3-stubs[opsworks]'`
        - Optionally, you can install `boto3-stubs` to `typings` folder.
        
        Type checking should work for `OpsWorks` service.
        No explicit type annotations required, write your `boto3` code as usual.
        
        ## Explicit type annotations
        
        ### Client annotations
        
        `OpsWorksClient` provides annotations for `boto3.client("opsworks")`.
        
        ```python
        import boto3
        
        from mypy_boto3_opsworks import OpsWorksClient
        
        client: OpsWorksClient = boto3.client("opsworks")
        
        # now client usage is checked by mypy and IDE should provide code auto-complete
        
        # works for session as well
        session = boto3.session.Session(region="us-west-1")
        session_client: OpsWorksClient = session.client("opsworks")
        ```
        
        ### Paginators annotations
        
        `mypy_boto3_opsworks.paginator` module contains type annotations for all paginators.
        
        ```python
        from mypy_boto3_opsworks import OpsWorksClient
        from mypy_boto3_opsworks.paginator import (
            DescribeEcsClustersPaginator,
        )
        
        client: OpsWorksClient = boto3.client("opsworks")
        
        # Explicit type annotations are optional here
        # Type should be correctly discovered by mypy and IDEs
        # VSCode requires explicit type annotations
        describe_ecs_clusters_paginator: DescribeEcsClustersPaginator = client.get_paginator("describe_ecs_clusters")
        ```
        
        
        ### Waiters annotations
        
        `mypy_boto3_opsworks.waiter` module contains type annotations for all waiters.
        
        ```python
        from mypy_boto3_opsworks import OpsWorksClient
        from mypy_boto3_opsworks.waiter import (
            AppExistsWaiter,
            DeploymentSuccessfulWaiter,
            InstanceOnlineWaiter,
            InstanceRegisteredWaiter,
            InstanceStoppedWaiter,
            InstanceTerminatedWaiter,
        )
        
        client: OpsWorksClient = boto3.client("opsworks")
        
        # Explicit type annotations are optional here
        # Type should be correctly discovered by mypy and IDEs
        # VSCode requires explicit type annotations
        app_exists_waiter: AppExistsWaiter = client.get_waiter("app_exists")
        deployment_successful_waiter: DeploymentSuccessfulWaiter = client.get_waiter("deployment_successful")
        instance_online_waiter: InstanceOnlineWaiter = client.get_waiter("instance_online")
        instance_registered_waiter: InstanceRegisteredWaiter = client.get_waiter("instance_registered")
        instance_stopped_waiter: InstanceStoppedWaiter = client.get_waiter("instance_stopped")
        instance_terminated_waiter: InstanceTerminatedWaiter = client.get_waiter("instance_terminated")
        ```
        
        
        ### Service Resource annotations
        
        `OpsWorksServiceResource` provides annotations for `boto3.resource("opsworks")`.
        
        ```python
        from mypy_boto3_opsworks import OpsWorksServiceResource
        
        resource: OpsWorksServiceResource = boto3.resource("opsworks")
        
        # now resource usage is checked by mypy and IDE should provide code auto-complete
        
        # works for session as well
        session = boto3.session.Session(region="us-west-1")
        session_resource: OpsWorksServiceResource = session.resource("opsworks")
        ```
        
        
        ### Other resources annotations
        
        `mypy_boto3_opsworks.service_resource` module contains type annotations for all resources.
        
        ```python
        from mypy_boto3_opsworks import OpsWorksServiceResource
        from mypy_boto3_opsworks.service_resource import (
            Layer,
            Stack,
            StackSummary,
        )
        
        resource: OpsWorksServiceResource = boto3.resource("opsworks")
        
        # Explicit type annotations are optional here
        # Type should be correctly discovered by mypy and IDEs
        my_layer: Layer = resource.Layer(...)
        my_stack: Stack = resource.Stack(...)
        my_stack_summary: StackSummary = resource.StackSummary(...)
        ```
        
        
        
        ### Collections annotations
        
        `mypy_boto3_opsworks.service_resource` module contains type annotations
        for all `OpsWorksServiceResource` collections.
        
        ```python
        from mypy_boto3_opsworks import OpsWorksServiceResource
        from mypy_boto3_opsworks.service_resource import (
            ServiceResourceStacksCollection,
        )
        
        resource: OpsWorksServiceResource = boto3.resource("opsworks")
        
        # Explicit type annotations are optional here
        # Type should be correctly discovered by mypy and IDEs
        stacks: opsworks_resources.ServiceResourceStacksCollection = resource.stacks
        ```
        
        
        
        
        ### Typed dictionations
        
        `mypy_boto3_opsworks.type_defs` module contains structures and shapes assembled
        to typed dictionaries for additional type checking.
        
        ```python
        from mypy_boto3_opsworks.type_defs import (
            AgentVersionTypeDef,
            AppTypeDef,
            AutoScalingThresholdsTypeDef,
            BlockDeviceMappingTypeDef,
            ChefConfigurationTypeDef,
            CloudWatchLogsConfigurationTypeDef,
            CloudWatchLogsLogStreamTypeDef,
            CommandTypeDef,
            DataSourceTypeDef,
            DeploymentCommandTypeDef,
            DeploymentTypeDef,
            EbsBlockDeviceTypeDef,
            EcsClusterTypeDef,
            ElasticIpTypeDef,
            ElasticLoadBalancerTypeDef,
            EnvironmentVariableTypeDef,
            InstanceTypeDef,
            InstancesCountTypeDef,
            LayerTypeDef,
            LifecycleEventConfigurationTypeDef,
            LoadBasedAutoScalingConfigurationTypeDef,
            OperatingSystemConfigurationManagerTypeDef,
            OperatingSystemTypeDef,
            PermissionTypeDef,
            RaidArrayTypeDef,
            RdsDbInstanceTypeDef,
            RecipesTypeDef,
            ReportedOsTypeDef,
            SelfUserProfileTypeDef,
            ServiceErrorTypeDef,
            ShutdownEventConfigurationTypeDef,
            SourceTypeDef,
            SslConfigurationTypeDef,
            StackConfigurationManagerTypeDef,
            StackSummaryTypeDef,
            StackTypeDef,
            TemporaryCredentialTypeDef,
            TimeBasedAutoScalingConfigurationTypeDef,
            UserProfileTypeDef,
            VolumeConfigurationTypeDef,
            VolumeTypeDef,
            WeeklyAutoScalingScheduleTypeDef,
            CloneStackResultTypeDef,
            CreateAppResultTypeDef,
            CreateDeploymentResultTypeDef,
            CreateInstanceResultTypeDef,
            CreateLayerResultTypeDef,
            CreateStackResultTypeDef,
            CreateUserProfileResultTypeDef,
            DescribeAgentVersionsResultTypeDef,
            DescribeAppsResultTypeDef,
            DescribeCommandsResultTypeDef,
            DescribeDeploymentsResultTypeDef,
            DescribeEcsClustersResultTypeDef,
            DescribeElasticIpsResultTypeDef,
            DescribeElasticLoadBalancersResultTypeDef,
            DescribeInstancesResultTypeDef,
            DescribeLayersResultTypeDef,
            DescribeLoadBasedAutoScalingResultTypeDef,
            DescribeMyUserProfileResultTypeDef,
            DescribeOperatingSystemsResponseTypeDef,
            DescribePermissionsResultTypeDef,
            DescribeRaidArraysResultTypeDef,
            DescribeRdsDbInstancesResultTypeDef,
            DescribeServiceErrorsResultTypeDef,
            DescribeStackProvisioningParametersResultTypeDef,
            DescribeStackSummaryResultTypeDef,
            DescribeStacksResultTypeDef,
            DescribeTimeBasedAutoScalingResultTypeDef,
            DescribeUserProfilesResultTypeDef,
            DescribeVolumesResultTypeDef,
            GetHostnameSuggestionResultTypeDef,
            GrantAccessResultTypeDef,
            InstanceIdentityTypeDef,
            ListTagsResultTypeDef,
            PaginatorConfigTypeDef,
            RegisterEcsClusterResultTypeDef,
            RegisterElasticIpResultTypeDef,
            RegisterInstanceResultTypeDef,
            RegisterVolumeResultTypeDef,
            WaiterConfigTypeDef,
        )
        
        def get_structure() -> AgentVersionTypeDef:
            return {
              ...
            }
        ```
        
Keywords: boto3 opsworks type-annotations boto3-stubs mypy typeshed autocomplete auto-generated
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
