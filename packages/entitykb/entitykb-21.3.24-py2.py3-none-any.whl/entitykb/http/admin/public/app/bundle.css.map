{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../SvelteToast.svelte",
    "../../ToastItem.svelte",
    "../../App.svelte",
    "../../AuthMain.svelte",
    "../../LoginForm.svelte",
    "../../ArrayField.svelte",
    "../../ColumnFilter.svelte",
    "../../FormTemplate.svelte",
    "../../InputField.svelte",
    "../../Pagination.svelte",
    "../../SelectField.svelte",
    "../../DocFrame.svelte",
    "../../NodeDetail.svelte",
    "../../NodeListing.svelte"
  ],
  "sourcesContent": [
    "<script>\nimport { fade, fly } from 'svelte/transition'\nimport { flip } from 'svelte/animate'\nimport { toast } from './stores.js'\nimport ToastItem from './ToastItem.svelte'\n\nexport let options = {}\nconst defaults = {\n  duration: 4000,\n  dismissable: true,\n  initial: 1,\n  progress: 0,\n  reversed: false,\n  intro: { x: 256 },\n  theme: {}\n}\ntoast._opts(defaults)\n$: toast._opts(options)\n\nconst getCss = theme => Object.keys(theme).reduce((a, c) => `${a}${c}:${theme[c]};`, '')\n</script>\n\n<style>\nul {\n  position: fixed;\n  margin: 0;\n  padding: 0;\n  list-style-type: none;\n  z-index: 9999;\n  pointer-events: none;\n  top: var(--toastContainerTop,1.5rem);\n  right: var(--toastContainerRight,2rem);\n  bottom: var(--toastContainerBottom,auto);\n  left: var(--toastContainerLeft,auto);\n}\n</style>\n\n<ul>\n  {#each $toast as item (item.id)}\n  <li\n    in:fly={item.intro}\n    out:fade\n    animate:flip={{ duration: 200 }}\n    style={getCss(item.theme)}\n    >\n    <ToastItem {item} />\n  </li>\n  {/each}\n</ul>\n",
    "<script>\nimport { tweened } from 'svelte/motion'\nimport { linear } from 'svelte/easing'\nimport { toast } from './stores.js'\n\nexport let item\n\nconst progress = tweened(item.initial, { duration: item.duration, easing: linear })\n\nlet prevProgress = item.initial\n\n$: if (prevProgress !== item.progress) {\n  if (item.progress === 1 || item.progress === 0) {\n    progress.set(item.progress).then(() => toast.pop(item.id))\n  } else {\n    progress.set(item.progress)\n  }\n  prevProgress = item.progress\n}\n</script>\n\n<style>\n._toastItem {\n  width: var(--toastWidth,16rem);\n  height: var(--toastHeight,3.5rem);\n  margin: var(--toastMargin,0 0 0.5rem 0);\n  background: var(--toastBackground,rgba(66,66,66,0.9));\n  color: var(--toastColor,#FFF);\n  box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1),0 2px 4px -1px rgba(0,0,0,0.06);\n  border-radius: 0.125rem;\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  will-change: transform,opacity;\n  -webkit-tap-highlight-color: transparent;\n}\n._toastMsg {\n  font: var(--toastFont);\n  flex: 1 1 0%;\n  padding: 0 0.5rem;\n}\n._toastBtn {\n  width: 2rem;\n  height: 100%;\n  font: 1rem sans-serif;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  outline: none;\n  pointer-events: auto;\n}\n._toastBar {\n  display: block;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  border: none;\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  height: 6px;\n  background: transparent;\n}\n._toastBar::-webkit-progress-bar {\n  background: transparent;\n}\n._toastBar::-webkit-progress-value {\n  background: var(--toastProgressBackground,rgba(33,150,243,0.75));\n}\n._toastBar::-moz-progress-bar {\n  background: var(--toastProgressBackground,rgba(33,150,243,0.75));\n}\n</style>\n\n<div class=\"_toastItem\">\n  <div class=\"_toastMsg\">{item.msg}</div>\n\n  {#if item.dismissable}\n  <div class=\"_toastBtn\" role=\"button\" tabindex=\"-1\" on:click={() => toast.pop(item.id)}>âœ•</div>\n  {/if}\n\n  <progress class=\"_toastBar\" value={$progress}></progress>\n</div>\n",
    "<script>\n    import {onMount} from \"svelte\";\n    import {SvelteToast} from \"@zerodevx/svelte-toast\";\n\n    import Router from 'svelte-spa-router';\n    import routes from './routes';\n    import AuthMain from \"./auth/AuthMain.svelte\";\n\n    import {initToken} from \"./auth/token\";\n    import {myToken} from \"./auth/token\";\n    import {Schema} from \"./kb/schema\";\n    import TopMenu from \"./common/TopMenu.svelte\";\n    import BottomMenu from \"./common/BottomMenu.svelte\";\n\n    onMount(async () => {\n        await Schema.instance().load();\n        await initToken();\n    });\n\n    let token = null;\n\n    myToken.subscribe(\n            newToken => {\n                token = newToken;\n            }\n    );\n\n    const options = {\n        theme: {\n            '--toastWidth': '20rem',\n            '--toastHeight': '5rem'\n        },\n        duration: 1500\n    }\n</script>\n\n{#if token}\n    <TopMenu/>\n\n    <div id=\"appContainer\">\n        <Router {routes}/>\n    </div>\n\n    <BottomMenu/>\n{:else}\n    <AuthMain/>\n{/if}\n\n<SvelteToast {options}/>\n\n<style>\n    #appContainer {\n        margin-left: 2em;\n        margin-right: 2em;\n        padding-bottom: 5em;\n    }\n</style>\n",
    "<script>\n    import LoginForm from \"./LoginForm.svelte\";\n</script>\n\n<div id=\"authContainer\" class=\"ui middle aligned center aligned grid\">\n    <div class=\"column\">\n        <h1 class=\"ui image header\">\n            <i class=\"lightbulb outline icon\"></i> EntityKB\n        </h1>\n        <div id=\"authContent\" class=\"ui top attached stacked segment\">\n            <LoginForm/>\n        </div>\n    </div>\n</div>\n\n<style>\n    div#authContainer {\n        height: calc(100vh);\n        background-color: #e0e0e0;\n    }\n\n    div#authContent {\n        padding-top: 1.5em;\n        height: 30em;\n    }\n\n    .image {\n        margin-top: -100px;\n    }\n\n    .image img {\n        width: 2em !important;\n    }\n\n    .column {\n        max-width: 450px;\n    }\n</style>",
    "<script>\n    import {createEventDispatcher} from 'svelte';\n    import {loginUser} from \"./manager\";\n\n    const dispatch = createEventDispatcher();\n\n    let hasError = false;\n\n    const onSubmit = async (e) => {\n        const success = await loginUser(\n                e.target.elements['username'].value,\n                e.target.elements['password'].value,\n        );\n        hasError = !success;\n    };\n</script>\n\n<h2>Login</h2>\n\n<form on:submit|preventDefault={onSubmit} class=\"ui large form\">\n    <div class=\"field\">\n        <div class=\"ui left icon input\">\n            <i class=\"user icon\"></i>\n            <input required=\"required\" type=\"text\" name=\"username\"\n                   placeholder=\"Username\">\n        </div>\n    </div>\n    <div class=\"field\">\n        <div class=\"ui left icon input\">\n            <i class=\"lock icon\"></i>\n            <input required=\"required\" type=\"password\" name=\"password\"\n                   placeholder=\"Password\">\n        </div>\n    </div>\n\n    <div>\n        <button class=\"ui large primary submit button\"\n                type=\"submit\">\n            Submit\n        </button>\n    </div>\n    {#if hasError }\n        <div class=\"ui visible error message\">\n            Invalid Username or Password\n        </div>\n    {:else}\n        <div>&nbsp;</div>\n    {/if}\n</form>\n\n<style>\n    h2 {\n        padding-bottom: 1em;\n    }\n</style>\n",
    "<script>\n    export let label;\n    export let value = [];\n    let editPosition = null;\n    let removePosition = null;\n\n    const onClickItem = (event) => {\n        editPosition = parseInt(event.target.dataset.position);\n    };\n\n    const onDelete = (event) => {\n        removePosition = parseInt(event.target.parentNode.dataset.position);\n\n        window.$(\"#remove-item\").modal({\n            onApprove: function () {\n                value = value.filter((_, index) => index !== removePosition);\n            }\n        }).modal('show');\n    };\n\n    const onAdd = () => {\n        value = [...value, \"\"];\n        editPosition = value.length - 1;\n    };\n\n    const clearEdit = () => {\n        if (editPosition === (value.length - 1)) {\n            if (!value[editPosition]) {\n                value = value.filter((_, index) => index !== editPosition);\n            }\n        }\n        editPosition = null;\n    };\n\n    const saveEdit = (event) => {\n        if (event.target.value) {\n            value[editPosition] = event.target.value;\n        } else {\n            value = value.filter((_, index) => index !== editPosition);\n        }\n        editPosition = null;\n    };\n\n    const handleKey = (event) => {\n        if (event.code === \"Escape\") {\n            clearEdit();\n\n        } else if (event.code === \"Enter\") {\n            event.preventDefault();\n            saveEdit(event);\n            return false;\n        }\n    };\n</script>\n\n\n<div class=\"field\">\n    <div class=\"ui labeled right input\">\n        <div class=\"ui label\">\n            {label}:\n        </div>\n        <div class=\"array\">\n            {#each (value || []) as item, position}\n                <div class=\"item\">\n                    {#if position === editPosition}\n                        <div class=\"edit\">\n                            <input on:keydown={handleKey}\n                                   on:blur={saveEdit}\n                                   data-position={position}\n                                   value={item}\n                                   autofocus/>\n                        </div>\n                    {:else}\n                        <div class=\"view\"\n                             on:click={onClickItem}\n                             data-position={position}>\n                            {item}\n                            <i on:click={onDelete} class=\"trash icon\"></i>\n                        </div>\n                    {/if}\n                </div>\n            {/each}\n            <div class=\"item\">\n                <div on:click={onAdd} class=\"add\">\n                    Add another item\n                    <i class=\"circle plus icon\"></i>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div id=\"remove-item\" class=\"ui tiny modal\">\n    <div class=\"header\">{value[removePosition]}</div>\n    <div class=\"content\">\n        <p>\n            Are you should you want to remove?<br/>\n        </p>\n    </div>\n    <div class=\"actions\">\n        <div class=\"ui approve positive button\">Yes, remove.</div>\n        <div class=\"ui cancel negative button\">Cancel, keep.</div>\n    </div>\n</div>\n\n\n<style>\n    .ui.label {\n        width: 8em;\n        text-align: left;\n    }\n\n    .array {\n        padding-top: .2em;\n        padding-left: 0.5em;\n        min-width: 25.8em;\n    }\n\n    div.item {\n        width: 100%;\n        text-align: left;\n    }\n\n    /** view **/\n\n    div.view {\n        padding: .5em;\n    }\n\n    div.view:hover {\n        background-color: #FFFFAA;\n        cursor: pointer;\n    }\n\n    .trash.icon {\n        color: #DDCCCC;\n        float: right;\n        padding-left: 1em;\n        padding-right: 1em;\n    }\n\n    .trash.icon:hover {\n        color: red;\n        font-weight: bold;\n    }\n\n    /** edit **/\n\n    div.edit input {\n        width: 100% !important;\n        padding: .45em !important;\n    }\n\n\n    /** add item **/\n\n    div.add {\n        color: #AAAAAA;\n        padding: .5em;\n        font-style: italic;\n    }\n\n    div.add:hover {\n        background-color: #CCEEDD;\n        cursor: pointer;\n        color: #333333;\n    }\n\n    .plus.icon {\n        color: #99CC99;\n        float: right;\n        padding-left: 1em;\n        padding-right: 1em;\n    }\n\n    .plus.icon:hover {\n        color: #66FF66;\n        font-weight: bold;\n    }\n</style>",
    "<script>\n    import {createEventDispatcher, onMount} from 'svelte';\n    const dispatch = createEventDispatcher();\n\n    export let name = null;\n    export let value = null;\n    export let display = null;\n    export let options = \"\";\n\n    let inFilterMode = false;\n\n    const cancelFilter = () => {\n        inFilterMode = false;\n        value = \"\";\n    };\n\n    const openFilter = () => {\n        inFilterMode = true;\n    };\n\n    $: dispatch(\"update\", {\"name\": name, \"value\": value});\n</script>\n\n<div id=\"column\">\n    {#if inFilterMode}\n        <a class=\"clickable\" on:click={cancelFilter}>\n            <i class=\"red window close icon\"></i>\n        </a>\n        {#if options}\n            <select bind:value={value}>\n                <option value=\"\">Any {display}</option>\n            {#each options as option}\n                <option>{option}</option>\n            {/each}\n            </select>\n        {:else}\n            <input placeholder=\"{display}\" bind:value={value} autofocus>\n        {/if}\n    {:else}\n        <a href=\"javascript:void(0)\" class=\"clickable\" on:click={openFilter}>\n            <i class=\"blue filter icon\"></i>\n            {display}\n        </a>\n    {/if}\n</div>\n\n<style>\n    #column {\n        white-space: nowrap;\n        vertical-align: middle;\n        height: 1.5em;\n    }\n    .icon {\n        width: 1em;\n    }\n</style>\n\n",
    "<script>\n    import {createEventDispatcher} from 'svelte';\n\n    const dispatch = createEventDispatcher();\n\n    export let waiting = false;\n    export let error = \"\";\n    let dirty = false;\n\n    function submit(event) {\n        dirty = false;\n        dispatch(\"submit\", {elements: event.target.elements});\n    }\n\n    function cancel() {\n        dirty = false;\n        dispatch(\"cancel\");\n    }\n\n    function setDirty() {\n        dirty = true;\n    }\n</script>\n\n\n<div id=\"formContainer\" class=\"ui aligned center aligned grid\">\n    <div class=\"column\">\n        <div class=\"ui top attached stacked segment\">\n            <h2>\n                <slot name=\"heading\"/>\n            </h2>\n\n            <form class=\"ui large form\" id=\"formId\"\n                  on:submit|preventDefault={submit} on:change={setDirty}>\n\n                <slot name=\"fields\"/>\n\n                <div id=\"buttons\">\n                    {#if waiting}\n                        <button class=\"ui large primary disabled loading button\">\n                            Loading\n                        </button>\n                    {:else}\n                        <button class=\"ui large primary button\" type=\"submit\">\n                            Submit\n                        </button>\n                    {/if}\n                    <span id=\"cancel\">\n                        <a href=\"javascript:void(0)\"\n                           on:click={cancel}>Cancel</a>\n                    </span>\n                </div>\n            </form>\n        </div>\n        {#if !dirty && error}\n            <div class=\"ui visible error message\">\n                {error}\n            </div>\n        {/if}\n    </div>\n\n    <!--\nhttps://github.com/sveltejs/svelte/issues/4546#issuecomment-627357929\n-->\n    {#if false}\n    <!--suppress CheckTagEmptyBody -->\n        <slot></slot>\n    {/if}\n</div>\n\n<style>\n    h2 {\n        padding-bottom: 1em;\n    }\n\n    div#buttons {\n        padding-top: 2em;\n    }\n\n    .column {\n        max-width: 600px !important;\n    }\n\n    div#formContainer {\n        padding-top: 3em;\n    }\n\n    span#cancel a {\n        color: #9999CC;\n        margin-left: 3em;\n    }\n</style>\n",
    "<script>\n    export let icon = \"\";\n    export let label = \"\";\n    export let placeholder = \"\";\n    export let required = false;\n    export let type = \"text\";\n    export let value = \"\";\n    export let readonly = false;\n\n    placeholder = placeholder || label;\n\n    const handleInputType = (e) => {\n        e.target.type = type;\n    };\n</script>\n\n<div class=\"field\">\n    <div class=\"ui labeled right icon input field\">\n        <div class:black={readonly} class=\"ui label\">\n            {label}:\n        </div>\n        {#if readonly}\n            <span class=\"readonly\">{value}</span>\n        {:else}\n        <input {required}\n               {placeholder}\n               on:input={handleInputType}\n               bind:value/>\n        {/if}\n        {#if icon}<i class=\"{icon} icon\"></i>{/if}\n    </div>\n</div>\n\n<style>\n    .ui.label {\n        width: 8em;\n        text-align: left;\n    }\n    .icon {\n        width: 1.1em;\n    }\n    span.readonly {\n        padding-top: .4em;\n        padding-left: 1em;\n        font-weight: bold;\n        color: #666666;\n    }\n</style>",
    "<script>\n    import {createEventDispatcher} from 'svelte';\n    const dispatch = createEventDispatcher();\n\n    export let page = 0;\n    export let page_size = 10;\n    export let page_count = 0;\n    export let total_count = null;\n\n    let page_min = 0;\n    let page_max = 0;\n    let has_prev = false;\n    let has_next = false;\n\n    const update_nums = () => {\n        page_min = (page * page_size) + 1;\n        page_max = (page * page_size) + page_count;\n        has_prev = page > 0;\n        has_next = page_max < total_count;\n    };\n\n    function firstPage() {\n        dispatch(\"doPageChange\", 0);\n    }\n\n    function previousPage() {\n        dispatch(\"doPageChange\", page - 1);\n    }\n\n    function nextPage() {\n        dispatch(\"doPageChange\", page + 1);\n    }\n\n    $: update_nums(page, page_size, page_count, total_count);\n</script>\n<div id=\"pagination\">\n    <button class=\"circular ui icon button\"\n            class:disabled={!has_prev}\n            on:click={firstPage}>\n        <i class=\"angle double left icon\"></i>\n    </button>\n\n    <button class=\"circular ui icon button\"\n            class:disabled={!has_prev}\n            on:click={previousPage}>\n        <i class=\"angle left icon\"></i>\n    </button>\n\n    &nbsp;\n\n    {#if page_max}\n        {page_min.toLocaleString()} - {page_max.toLocaleString()}\n        {#if total_count !== null}\n            of {total_count.toLocaleString()}\n        {/if}\n    {/if}\n\n    &nbsp;\n\n    <button class=\"circular ui icon button\"\n            class:disabled={!has_next}\n            on:click={nextPage}>\n        <i class=\"angle right icon\"></i>\n    </button>\n</div>\n\n<style>\n    div#pagination {\n        white-space: nowrap !important;\n        font-weight: bold;\n        color: #999999;\n    }\n</style>\n",
    "<script>\n    import {onMount} from \"svelte\";\n    import {createEventDispatcher} from 'svelte';\n\n    const dispatch = createEventDispatcher();\n\n    export let name = null;\n    export let label = false;\n    export let options = {};\n    export let value = \"\";\n    export let placeholder = \"\";\n    export let display = \"\";\n    let dropdown = null;\n\n    placeholder = placeholder || label;\n\n    const updateValue = (event) => {\n        value = event.target.value;\n        display = options[value];\n        dispatch(\"change\", {name, value});\n    };\n\n    onMount(() => {\n       updateDropdown();\n    });\n\n    const updateDropdown = () => {\n        if (value !== null) {\n            window.$(dropdown).dropdown(\"set selected\", value);\n        } else {\n            window.$(dropdown).dropdown(\"restore defaults preventChangeTrigger\");\n\n        }\n    };\n\n    $: updateDropdown(value);\n</script>\n\n<div class=\"field\">\n    <div class:labeled={label} class=\"ui right icon input\">\n        {#if label}\n            <div class=\"ui label\">\n                {label}:\n            </div>\n        {/if}\n        <div bind:this={dropdown} class=\"ui search selection dropdown\">\n            <input type=\"hidden\" value={value} on:change={updateValue}>\n            <i class=\"dropdown icon\"></i>\n            <div class=\"default text\">{placeholder}</div>\n            <div class=\"menu\">\n                {#each Object.entries(options || {}) as [item, display]}\n                    <div class=\"item\" data-value={item}>\n                        {display}\n                    </div>\n                {/each}\n            </div>\n        </div>\n    </div>\n</div>\n\n<style>\n    .ui.label {\n        width: 8em;\n        text-align: left;\n    }\n</style>",
    "<script>\n    export let source = null;\n    export let title = null;\n    $: document.title = title;\n</script>\n\n<iframe title={title} src={source}></iframe>\n\n<style>\n    iframe {\n        width: 100%;\n        height: calc(85vh);\n        border: 0;\n    }\n</style>\n\n",
    "<script>\n    import {push, pop} from \"svelte-spa-router\";\n    import {toastFail} from \"../common/toast\";\n\n    import {manager} from '../kb/manager';\n    import {Schema} from \"../kb/schema\";\n    import ColumnFilter from \"../common/ColumnFilter.svelte\"\n    import Pagination from \"../common/Pagination.svelte\"\n\n    export let params = {};\n    let schema = Schema.instance();\n    let entity = null;\n    let neighbors = [];\n    let total_count = null;\n    let isDynamic = false;\n\n    let labelOptions = [];\n    let verbOptions = [];\n    const directions = [\"incoming\", \"outgoing\"];\n\n    const nextRequest = {\n        node_key: '',\n        verb: '',\n        direction: null,\n        name: '',\n        label: '',\n        page: 0,\n    };\n\n    const loadEntity = async () => {\n        entity = await manager.getNode(params.key);\n        if (!entity) {\n            entity = await manager.findOne(params.key);\n            isDynamic = true;\n        }\n\n        if (entity) {\n            nextRequest[\"node_key\"] = entity.key;\n            await loadNeighbors();\n            document.title = `Detail: ${entity.name} [${entity.label}]`;\n        } else {\n            toastFail(`Failed to load: ${params.key}`);\n            await push(\"/\");\n        }\n    };\n\n    const loadNeighbors = async () => {\n        neighbors = null;\n        if (nextRequest.node_key) {\n            const response = await manager.getNeighbors(nextRequest);\n            if (response !== null) {\n                neighbors = response.neighbors;\n                total_count = response.total;\n            } else {\n                neighbors = [];\n                total_count = null;\n            }\n\n            console.log(neighbors);\n        }\n    };\n\n    const onUpdate = async (event) => {\n        nextRequest[event.detail.name] = event.detail.value;\n        nextRequest[\"page\"] = 0;\n        await loadNeighbors();\n    };\n\n    async function doPageChange(event) {\n        nextRequest[\"page\"] = event.detail;\n        await loadNeighbors();\n    }\n\n    const openRow = (key) => {\n        const encodedKey = encodeURIComponent(key);\n        push(\"/detail/\" + encodedKey);\n        nextRequest[\"page\"] = 0;\n    };\n\n    const openEdit = () => {\n        push(\"/edit/\" + entity.key);\n    };\n\n    $: loadEntity(params.key);\n</script>\n\n{#if entity && schema}\n    <div class=\"ui stackable two column grid\">\n        <div class=\"six wide column\">\n            <h2>Node Details</h2>\n            <table class=\"ui definition table top aligned\">\n                <tbody>\n                <tr>\n                    <td class=\"two wide column\">name:</td>\n                    <td class=\"five wide column\">{entity.name}</td>\n                </tr>\n                <tr>\n                    <td>label:</td>\n                    <td>{entity.label}</td>\n                </tr>\n                <tr>\n                    <td>key:</td>\n                    <td>{entity.key}</td>\n                </tr>\n                {#each entity.attributes as [name, value]}\n                    <tr>\n                        <td>{name}:</td>\n                        <td>\n                            {#if value instanceof Array}\n                                {#each value as item}\n                                    {item}<br/>\n                                {/each}\n                            {:else if value instanceof Object}\n                                <table class=\"ui compact celled table top aligned\">\n                                    {#each Object.entries(value) as kv}\n                                        <tr>\n                                            <td>{kv[0]}:</td>\n                                            <td>{kv[1]}</td>\n                                        </tr>\n                                    {/each}\n                                </table>\n                            {:else if (value.startsWith(\"http://\") || value.startsWith(\"https://\"))}\n                                <a target=\"_blank\" href=\"{value}\">{value}</a>\n                            {:else}\n                                {value}\n                            {/if}\n                        </td>\n                    </tr>\n                {/each}\n                </tbody>\n            </table>\n<!--            {#if (!isDynamic)}-->\n<!--                <div class=\"ui right floated blue button\"-->\n<!--                     on:click={openEdit}>-->\n<!--                    <i class=\"edit icon\"></i>-->\n<!--                    Edit Node-->\n<!--                </div>-->\n<!--            {/if}-->\n        </div>\n        <div class=\"ten wide column\">\n            <div class=\"ui grid\">\n                <div class=\"row\">\n                    <div class=\"column\">\n                        <h2>Relationships</h2>\n                    </div>\n                    <div class=\"ten wide column\"></div>\n                    <div class=\"column\">\n                        {#if neighbors}\n                        <Pagination page={nextRequest.page}\n                                    page_count={neighbors.length}\n                                    total_count={total_count}\n                                    on:doPageChange={doPageChange}\n                        />\n                        {/if}\n                    </div>\n                </div>\n            </div>\n\n            <table class=\"ui striped selectable celled table top aligned\">\n                <thead class=\"full-width\">\n                <tr>\n                    <th class=\"two wide\" nowrap=\"nowrap\">\n                        <ColumnFilter name=\"direction\"\n                                      display=\"Direction\"\n                                      options={directions}\n                                      on:update={onUpdate}/>\n                    </th>\n                    <th class=\"two wide\" nowrap=\"nowrap\">\n                        <ColumnFilter name=\"verb\" display=\"Verb\"\n                                      options={schema.verbs}\n                                      on:update={onUpdate}/>\n                    </th>\n                    <th class=\"three wide\" nowrap=\"nowrap\">Name\n<!--                        <ColumnFilter name=\"name\" display=\"Name\"-->\n<!--                                      on:update={onUpdate}/>-->\n                    </th>\n                    <th class=\"two wide\">\n                        <ColumnFilter name=\"label\" display=\"Label\"\n                                      options={schema.labels}\n                                      on:update={onUpdate}/>\n                    </th>\n                </tr>\n                </thead>\n            <tbody>\n                {#if !neighbors}\n                <tr>\n                    <td class=\"no-rels\" colspan=\"4\">\n                        {#if neighbors === null}\n                            Loading....\n                        {:else if neighbors === false}\n                            Load failed.\n                        {:else}\n                            No relationships found.\n                        {/if}\n                    </td>\n                </tr>\n                {:else}\n                    {#each neighbors as neighbor}\n                    <tr on:click={openRow(neighbor.key)}>\n                        <td>{neighbor.direction}</td>\n                        <td>{neighbor.verb}</td>\n                        <td>{neighbor.node.name}</td>\n                        <td>{neighbor.node.label}</td>\n                    </tr>\n                    {/each}\n                {/if}\n            </table>\n        </div>\n    </div>\n{/if}\n\n<style>\n    h2 {\n        min-height: 2em;\n    }\n\n    .no-rels {\n        text-align: center !important;\n        font-style: italic;\n    }\n</style>\n",
    "<script>\n    import {onMount} from 'svelte';\n    import {push} from \"svelte-spa-router\";\n\n    import MultiSelect from \"../common/MultiSelect.svelte\"\n    import Pagination from \"../common/Pagination.svelte\"\n    import SearchBox from \"../common/SearchBox.svelte\"\n\n    import {manager} from '../kb/manager';\n    import {Schema} from \"../kb/schema\";\n\n    export let params;\n    const nextRequest = {\n        q: '',\n        labels: '',\n        page: 0\n    };\n    let entities = [];\n    let total_count = null;\n    let schema = Schema.instance();\n\n    onMount(() => {\n        refreshData();\n    });\n\n    const refreshData = async () => {\n        entities = await manager.getEntities(nextRequest);\n        total_count = await manager.getTotalCount(nextRequest);\n    };\n\n    const onUpdate = async (event) => {\n        nextRequest[event.detail.name] = event.detail.value;\n        nextRequest[\"page\"] = 0;\n        await refreshData();\n    };\n\n    async function doPageChange(event) {\n        nextRequest[\"page\"] = event.detail;\n        await refreshData();\n    }\n\n    const openRow = (key) => {\n        const encodedKey = encodeURIComponent(key);\n        push(\"/detail/\" + encodedKey);\n        nextRequest[\"page\"] = 0;\n    };\n\n    document.title = \"Graph Search\";\n</script>\n\n<div class=\"ui stackable sixteen column grid\">\n    <div class=\"two wide column\">\n        <h2>Graph</h2>\n    </div>\n    <div class=\"five wide column\">\n        <SearchBox name=\"q\" on:update={onUpdate}/>\n    </div>\n    <div class=\"five wide column\">\n        <MultiSelect\n                display=\"Labels\"\n                name=\"labels\"\n                options={schema.labels}\n                on:update={onUpdate}\n        />\n    </div>\n    <div class=\"four wide column\">\n        <Pagination page={nextRequest.page}\n                    page_count={entities.length}\n                    total_count={total_count}\n                    on:doPageChange={doPageChange}\n        />\n    </div>\n</div>\n\n<table class=\"ui compact selectable celled striped table top aligned\">\n    <thead class=\"full-width\">\n    <tr>\n        <th class=\"three wide\">Name</th>\n        <th class=\"three wide\">Label</th>\n        <th class=\"three wide\">Key</th>\n        <th class=\"seven wide\">Attributes</th>\n    </tr>\n    </thead>\n    <tbody>\n    {#if entities.length === 0}\n        <tr>\n            <td colspan=\"4\" class=\"ui center aligned\">\n                No records found.\n            </td>\n        </tr>\n    {/if}\n    {#each entities as entity}\n        <tr on:click={openRow(entity.key)}>\n            <td>{entity.name}</td>\n            <td>{entity.label}</td>\n            <td>{entity.key}</td>\n            <td>\n                <table class=\"ui compact celled table top aligned\">\n                    {#each entity.attributes as [name, value]}\n                        <tr class=\"top aligned\">\n                            <td class=\"four wide field_name\">{name}:</td>\n                            <td class=\"twelve wide\">\n                                {#if value instanceof Array}\n                                    {#each value.slice(0, 5) as item}\n                                        {item}<br/>\n                                    {/each}\n                                    {#if value.length > 5}\n                                        <i>{value.length - 5} more...</i>\n                                    {/if}\n                                {:else}\n                                    {value}\n                                {/if}\n                            </td>\n                        </tr>\n                    {/each}\n                </table>\n            </td>\n        </tr>\n    {/each}\n    </tbody>\n</table>\n\n<style>\n    .field_name {\n        font-weight: bold;\n        color: #444444;\n        background-color: #DDD5DD;\n    }\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}