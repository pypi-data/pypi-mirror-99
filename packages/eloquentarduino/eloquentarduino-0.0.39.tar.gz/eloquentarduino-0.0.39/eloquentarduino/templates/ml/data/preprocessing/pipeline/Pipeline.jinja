{% extends './templates/Namespace.jinja' %}

{% block preamble %}

    #pragma once

    {% for library in includes %}
    #include "{{ library }}"
    {% endfor %}

    {% include './AbstractStep.jinja' %}

    {% for i, step in enumerate(steps) %}
    {{ step.port(pipeline=name) }}
    {% endfor %}

{% endblock %}

{% block body %}


    class {{ name }} {
        public:
            float X[{{ output_dim }}] = {0};

            /**
             * Constructor
             */
            {{ name }}() {
                {% for i, step in enumerate(steps) %}
                    steps[{{ i }}] = new {{ step.name }}(buffer);
                {% endfor %}
            }

            /**
             * Transform input vector
             */
            bool transform(float *x) {
                memcpy(X, x, sizeof(float) * {{ input_dim }});

                return {% for i, step in enumerate(steps) %}
                    // {{ step.name }}
                    {% if i > 0 %} && {% endif %} steps[{{ i }}]->transform(X)
                {% endfor %};
            }

        protected:
            // shared temporary memory for the steps
            float buffer[{{ working_dim }}] = {0};
            Step *steps[{{ steps | length }}];
    };

{% endblock %}