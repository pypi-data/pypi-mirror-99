#pragma once

#include <EloquentArduino.h>
#include <eloquentarduino/data_structures/Queue.h>


{{ simplex_clf }}

{{ complex_clf }}


namespace Eloquent {
    namespace ML {
        namespace Port {
            class {{ classname }} {
                public:

                    /**
                     * Push new sample to the inner queue
                     */
                    void push(float *x) {
                        push(_simplexClf.predict(x));
                    }

                    /**
                     * Push new prediction to the inner queue
                     */
                    void push(uint8_t y) {
                        _simplexPredictions.append(y);
                    }

                    /**
                     * Run prediction
                     * @param *x optional sample to push to the inner queue
                     */
                    uint8_t predict(float *x = NULL) {
                        if (x != NULL)
                            push(x);

                        if (!_simplexPredictions.isFull())
                            return sqrt(-1);

                        return _complexClf.predict(_simplexPredictions.X);
                    }

                    {% if len(classmap) %}
                        /**
                         * Predict readable class name
                         */
                        const char* predictLabel(float *x) {
                            return idxToLabel(predict(x));
                        }

                        /**
                         * Convert class idx to readable name
                         */
                        const char* idxToLabel(uint8_t classIdx) {
                            switch (classIdx) {
                                {% for idx, name in classmap.items() %}
                                    case {{ idx }}:
                                        return "{{ name }}";
                                {% endfor %}
                                default:
                                    return "Houston we have a problem";
                            }
                        }
                    {% endif %}

                protected:
                    Eloquent::DataStructures::Queue<{{ depth }}> _simplexPredictions;
                    {{ simplex_classname }} _simplexClf;
                    {{ complex_classname }} _complexClf;
            };
        }
    }
}