#!/usr/bin/env python

from typing import List
from hither import computeresource, __version__
import os
import json
import click
import socket
from copy import deepcopy
import inquirer
import kachery_p2p as kp
import hither as hi

@click.group(help="Configure and run a hither compute resource. Start by entering a new directory and running the 'config' command.")
def cli():
    pass

@click.command(help="Display hither version and exit.")
def version():
    click.echo(f"Using hither version {__version__}.")
    exit()


class ComputeResourceConfig:
    def __init__(self, config_fname):
        assert os.path.isfile(config_fname), f'File {config_fname} not found.'
        try:
            with open(config_fname, 'r') as f:
                self._config = json.load(f)
        except:
            raise Exception(f'Problem loading configuration file: {config_fname}')
        self._config_fname = config_fname
    def all_keys(self):
        return self._config.keys()
    def get(self, key, default=None):
        if type(key) == list:
            if len(key) == 0:
                raise Exception('Invalid key', key)
            elif len(key) == 1:
                return self.get(key=key[0], default=default)
            else:
                a = self.get(key=key[:-1], default=dict())
                if type(a) != dict:
                    return None
                return a.get(key[-1], default)
        return deepcopy(self._config.get(key, default))
    def set(self, key, value):
        if type(key) == list:
            if len(key) == 0:
                raise Exception('Invalid key', key)
            elif len(key) == 1:
                return self.set(key=key[0], value=value)
            else:
                config = self._config
                for k in key[:-1]:
                    if k not in config or type(config[k]) != dict:
                        config[k] = dict()
                    config = config[k]
                config[key[-1]] = value
                self._write_config()
        else:
            self._config[key] = value
            self._write_config()
    def unset(self, key):
        if type(key) == list:
            if len(key) == 0:
                raise Exception('Invalid key', key)
            elif len(key) == 1:
                return self.unset(key=key[0])
            else:
                config = self._config
                for k in key[:-1]:
                    if k not in config:
                        return
                    config = config[k]
                k_last = key[-1]
                if k_last in config:
                    del config[k_last]
                    self._write_config()
        else:
            if key in self._config:
                del self._config[key]
                self._write_config()
    def _write_config(self):
        with open(self._config_fname, 'w') as f:
            json.dump(self._config, f, indent=4)

@click.command(help='Start the configured compute resource.')
def start():
    config_fname = os.getcwd() + '/compute_resource.json'
    config = ComputeResourceConfig(config_fname)

    compute_resource_name = config.get('compute_resource_name')
    compute_resource_uri = config.get('compute_resource_uri')
    
    job_handlers_config = config.get('job_handlers', {})
    job_handler_config = config.get('job_handler', None)
    if (job_handler_config is None) and (len(job_handlers_config.keys()) == 0):
        print('Setting job_handlers config based on job_handler')
        job_handlers_config = dict(
            default=job_handler_config
        )
        config.set('job_handlers_config', job_handlers_config)

    nodes_with_access: List[dict] = config.get('nodes_with_access', [])
    if (config.get('access_rules')) and (len(nodes_with_access) == 0):
        print('Setting nodes_with_access based on access_rules')
        nodes_with_access = [dict(node_id=x['node_id']) for x in config.get('access_rules')]
        config.set('nodes_with_access', nodes_with_access)
    assert isinstance(nodes_with_access, list)

    assert compute_resource_name, 'Compute resource name not found. Please run: hither-compute-resource config'
    assert compute_resource_uri, 'Compute resource URI not found. Please run: hither-compute-resource config'
    assert job_handlers_config, 'Job handlers config not found. Please run: hither-compute-resource config'

    compute_resource_feed = kp.load_feed(compute_resource_uri)
    assert compute_resource_feed.is_writeable(), 'Compute resource feed is not writeable.'

    print('')
    print(f"{bcolors.HEADER}Compute resource name{bcolors.ENDC}: {compute_resource_name}")
    print(f"{bcolors.HEADER}Compute resource URI{bcolors.ENDC}: {compute_resource_uri}?name={compute_resource_name}")
    print('')

    if len(nodes_with_access) > 0:
        print(f'{bcolors.HEADER}The following kachery-p2p nodes have access to this compute resource{bcolors.ENDC}')
        for n in nodes_with_access:
            print(n['node_id'])
    else:
        print(f'{bcolors.HEADER}No kachery-p2p nodes have access to this compute resource{bcolors.ENDC}')
    print('')

    job_handlers = dict()
    for jhname, jhc in job_handlers_config.items():
        job_handler_type = jhc['type']
        if job_handler_type == 'parallel':
            num_workers = jhc['config']['num_workers']
            print(f'{jhname}: parallel job handler with {num_workers} workers.')
            jh = hi.ParallelJobHandler(num_workers=num_workers)
            job_handlers[jhname] = jh
        else:
            raise Exception(f'Unsupported job handler type: {job_handler_type}')
    
    assert 'default' in job_handlers, 'No default job handler configured. Please run: hither-compute-resource config'

    cr = hi.ComputeResource(
        compute_resource_uri=compute_resource_uri,
        job_handlers=job_handlers,
        nodes_with_access=nodes_with_access
    )

    print(f'{bcolors.HEADER}Starting compute resource{bcolors.ENDC}: {compute_resource_name}')
    cr.run()
    
@click.command(help='Configure a new compute resource server or update an existing one.')
def config():
    config_fname = os.getcwd() + '/compute_resource.json'
    if not os.path.isfile(config_fname):
        if not inquirer.confirm(f'Create a new configuration file at {config_fname}?', default=True):
            print(f'{bcolors.FAIL}Aborting configuration.{bcolors.ENDC}')
            return
        with open(config_fname, 'w') as f:
            json.dump({}, f, indent=4)
    print(f'{bcolors.HEADER}Loading configuration from{bcolors.ENDC}: {config_fname}')
    config = ComputeResourceConfig(config_fname)

    # Checking kachery-p2p daemon
    print('')
    print(f'{bcolors.HEADER}Checking kachery-p2p daemon{bcolors.ENDC}')
    print(f'{bcolors.HEADER}==========================={bcolors.ENDC}')
    try:
        this_node_id = kp.get_node_id()
    except:
        print('''
        The kachery-p2p daemon does not appear to be running
        Please start the kachery-p2p daemon by running the following
        command in a separate terminal:
        > kachery-p2p-start-daemon
        ''')
        return
    
    print(f'Kachery-p2p daemom is running. Node ID: {this_node_id}')

    # Hither compute resource server
    print('')
    print(f'{bcolors.HEADER}Hither compute resource server{bcolors.ENDC}')
    print(f'{bcolors.HEADER}=============================={bcolors.ENDC}')
    compute_resource_name = inquirer.text('Choose a compute resource name', default=config.get('compute_resource_name', socket.gethostname()))
    config.set('compute_resource_name', compute_resource_name)
    compute_resource_uri = config.get('compute_resource_uri', None)
    if compute_resource_uri is not None:
        print(f'Compute resource URI: {compute_resource_uri}?name={compute_resource_name}')
        if inquirer.confirm(f'Would you like to replace this with a new feed URI for this compute resource?', default=False):
            create_new_uri = True
        else:
            create_new_uri = False
    else:
        create_new_uri = True
    if create_new_uri:
        print('Creating new compute resource feed...')
        new_feed = kp.create_feed()
        config.set('compute_resource_uri', new_feed.get_uri())
        compute_resource_uri = config.get('compute_resource_uri')
        print(f'Compute resource URI: {compute_resource_uri}?name={compute_resource_name}')
    _ = kp.load_feed(compute_resource_uri)

    # todo: allow slurm type
    job_handlers_config = config.get('job_handlers', {})
    if 'default' not in job_handlers_config.keys():
        job_handlers_config['default'] = {
            'type': 'parallel',
            'config': {
                'num_workers': 4
            }
        }
    default_job_handler_config = job_handlers_config['default']
    default_job_handler_type = inquirer.list_input('Default job handler type', choices=['parallel'], default=default_job_handler_config.get('type', 'parallel'))
    if default_job_handler_type != default_job_handler_config['type']:
        default_job_handler_config['type'] = default_job_handler_type
        default_job_handler_config['config'] = {}
    if default_job_handler_type == 'parallel':
        num_workers = int(inquirer.text('num_workers', default=default_job_handler_config.get('config', {}).get('num_workers', 4)))
        default_job_handler_config['config']['num_workers'] = num_workers
    else:
        raise Exception(f'Job handler type not yet supported by this config utility: {job_handler_type}')
    config.set('job_handlers', job_handlers_config)

    while True:
        nodes_with_access = config.get('nodes_with_access', [])
        assert isinstance(nodes_with_access, list), 'Problem in nodes_with_access of config file. You should edit the file directly'
        print('')
        if len(nodes_with_access) == 0:
            print(f'{bcolors.HEADER}No kachery-p2p nodes have access to this compute resource{bcolors.ENDC}')
        else:
            print(f'{bcolors.HEADER}The following kachery-p2p nodes have access to this compute resource{bcolors.ENDC}')
            for n in nodes_with_access:
                print(n['node_id'])
        print('')
        if inquirer.confirm('Would you like to grant access to a new kachery-p2p node?', default=False):
            node_id = inquirer.text('Enter the kachery-p2p node ID')
            if node_id:
                if node_id in [n['node_id'] for n in nodes_with_access]:
                    print('This node already has access.')
                else:
                    nodes_with_access.append(dict(node_id=node_id))
                    config.set('nodes_with_access', nodes_with_access)
        else:
            break

    print('')
    print(f'{bcolors.HEADER}To further configure your compute resource server, rerun this utility, or directly edit this file{bcolors.ENDC}: {config_fname}')
    print('')
    print('')

    _print_info()

def _hide_password(x):
    if type(x) == dict:
        ret = dict()
        for k, v in x.items():
            if k == 'password' and isinstance(v, str):
                ret[k] = '****'
            else:
                ret[k] = v
        return ret
    else:
        return x

def _print_info():
    config_fname = os.getcwd() + '/compute_resource.json'
    print(f'{bcolors.HEADER}Loading configuration from {config_fname}{bcolors.ENDC}')
    if not os.path.exists(config_fname):
        print(f'{bcolors.FAIL}Problem loading configuration file. Use config command to create one in this directory.{bcolors.ENDC}')
        return
    config = ComputeResourceConfig(config_fname)

    print('')

    keys = config.all_keys()
    for key in keys:
        print(f'{key}: {_hide_password(config.get(key))}')

    print('')
    
    print(f'{bcolors.HEADER}You can start the compute resource server by running the following command:{bcolors.ENDC}')
    print('hither-compute-resource start')

@click.command(help="Display information about the current configuration and exit.")
def info():
    _print_info()

# @click.command(help='Monitor a remote (or local) compute resource')
# @click.option('--uri', help='The URI of the compute resource')
# @click.option('--job-handler', help='The URI of the job handler', default=None)
# def monitor(uri, job_handler):
#     feed = kp.load_feed(uri)
#     if job_handler is None:
#         job_handler_registry = feed.get_subfeed('job_handler_registry')
#         for msg in job_handler_registry.message_stream():
#             _type = msg.get('type', None)
#             _ts = _fmt_time(msg.get('timestamp', None))
#             if _type == ComputeResourceActionTypes.COMPUTE_RESOURCE_STARTED:
#                 print(f"{bcolors.HEADER}{_ts} COMPUTE RESOURCE STARTED{bcolors.ENDC}")
#             elif _type == ComputeResourceActionTypes.REGISTER_JOB_HANDLER:
#                 job_handler_uri = msg.get("uri", None)
#                 print(f"{_ts} REGISTER JOB HANDLER: {job_handler_uri}")
#             else:
#                 print(msg)
#     else:
#         job_handler_feed = feed.get_subfeed(job_handler)
#         for msg in job_handler_feed.message_stream():
#             _type = msg.get('type', None)
#             _ts = _fmt_time(msg.get('timestamp', None))
#             if _type == ComputeResourceActionTypes.JOB_HANDLER_REGISTERED:
#                 print(f"{bcolors.HEADER}{_ts} JOB HANDLER REGISTERED{bcolors.ENDC}")
#             elif _type == ComputeResourceActionTypes.JOB_FINISHED:
#                 job_id = msg.get('job_id', None)
#                 label = msg.get('label', None)
#                 print(f"{bcolors.OKGREEN}{_ts} JOB FINISHED: {job_id} {label}{bcolors.ENDC}")
#             elif _type == ComputeResourceActionTypes.JOB_ERROR:
#                 job_id = msg.get('job_id', None)
#                 label = msg.get('label', None)
#                 print(f"{bcolors.WARNING}{_ts} JOB ERROR: {job_id} {label}{bcolors.ENDC}")
#             elif _type == ComputeResourceActionTypes.LOG:
#                 action0 = msg.get('action', {})
#                 type0 = action0.get('type')
#                 # latency0 = action0.get('timestamp', 0) - msg.get('timestamp', 0)
#                 if type0 == ComputeResourceActionTypes.ADD_JOB:
#                     job_id = action0.get('job_id', None)
#                     label = action0.get('label', None)
#                     print(f"{bcolors.OKBLUE}{_ts} JOB ADDED: {job_id} {label}{bcolors.ENDC}")
#                 elif type0 == ComputeResourceActionTypes.JOB_HANDLER_FINISHED:
#                     print(f"{bcolors.HEADER}{_ts} JOB HANDLER FINISHED{bcolors.ENDC}")
#                     break
#                 else:
#                     print(f"LOG: {type0}", msg)
#             else:
#                 print(f'{_type}', msg)

def _fmt_time(t):
    import datetime
    if t is None:
        return ''
    return datetime.datetime.fromtimestamp(t).isoformat()

# Thanks: https://stackoverflow.com/questions/287871/how-to-print-colored-text-in-terminal-in-python
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


cli.add_command(config)
cli.add_command(start)
cli.add_command(info)
# cli.add_command(monitor)
cli.add_command(version)

if __name__ == "__main__":
    cli()