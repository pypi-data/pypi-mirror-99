# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _UltrasoundPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkTimeGainCompensationImageFilterPython
else:
    import _itkTimeGainCompensationImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkTimeGainCompensationImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkTimeGainCompensationImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImageToImageFilterAPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkCurvilinearArraySpecialCoordinatesImagePython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython
import itk.itkSpectra1DSupportWindowImageFilterPython
import itk.ITKIOImageBaseBasePython
import itk.itkTransformBasePython
import itk.itkArray2DPython
import itk.itkOptimizerParametersPython
import itk.itkDiffusionTensor3DPython
import itk.itkContinuousIndexPython

def itkTimeGainCompensationImageFilterCASCID2_New():
    return itkTimeGainCompensationImageFilterCASCID2.New()

class itkTimeGainCompensationImageFilterCASCID2(itk.itkCurvilinearArraySpecialCoordinatesImagePython.itkCastImageFilterCASCID2CASCID2_Superclass_Superclass):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterCASCID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID2___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID2_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID2_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID2_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterCASCID2
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID2_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterCASCID2

        Create a new object of the class itkTimeGainCompensationImageFilterCASCID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterCASCID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterCASCID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterCASCID2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterCASCID2 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID2_swigregister(itkTimeGainCompensationImageFilterCASCID2)
itkTimeGainCompensationImageFilterCASCID2___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID2___New_orig__
itkTimeGainCompensationImageFilterCASCID2_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID2_cast


def itkTimeGainCompensationImageFilterCASCID3_New():
    return itkTimeGainCompensationImageFilterCASCID3.New()

class itkTimeGainCompensationImageFilterCASCID3(itk.itkCurvilinearArraySpecialCoordinatesImagePython.itkCastImageFilterCASCID3CASCID3_Superclass_Superclass):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterCASCID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID3___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID3_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID3_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID3_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterCASCID3
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID3_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterCASCID3

        Create a new object of the class itkTimeGainCompensationImageFilterCASCID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterCASCID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterCASCID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterCASCID3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterCASCID3 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID3_swigregister(itkTimeGainCompensationImageFilterCASCID3)
itkTimeGainCompensationImageFilterCASCID3___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID3___New_orig__
itkTimeGainCompensationImageFilterCASCID3_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID3_cast


def itkTimeGainCompensationImageFilterCASCID4_New():
    return itkTimeGainCompensationImageFilterCASCID4.New()

class itkTimeGainCompensationImageFilterCASCID4(itk.itkCurvilinearArraySpecialCoordinatesImagePython.itkCastImageFilterCASCID4CASCID4_Superclass_Superclass):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterCASCID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID4___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID4_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID4_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID4_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterCASCID4
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID4_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterCASCID4

        Create a new object of the class itkTimeGainCompensationImageFilterCASCID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterCASCID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterCASCID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterCASCID4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterCASCID4 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID4_swigregister(itkTimeGainCompensationImageFilterCASCID4)
itkTimeGainCompensationImageFilterCASCID4___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID4___New_orig__
itkTimeGainCompensationImageFilterCASCID4_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCID4_cast


def itkTimeGainCompensationImageFilterCASCIF2_New():
    return itkTimeGainCompensationImageFilterCASCIF2.New()

class itkTimeGainCompensationImageFilterCASCIF2(itk.itkCurvilinearArraySpecialCoordinatesImagePython.itkCastImageFilterCASCIF2CASCIF2_Superclass_Superclass):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterCASCIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF2_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF2_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF2_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterCASCIF2
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF2_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterCASCIF2

        Create a new object of the class itkTimeGainCompensationImageFilterCASCIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterCASCIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterCASCIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterCASCIF2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterCASCIF2 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF2_swigregister(itkTimeGainCompensationImageFilterCASCIF2)
itkTimeGainCompensationImageFilterCASCIF2___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF2___New_orig__
itkTimeGainCompensationImageFilterCASCIF2_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF2_cast


def itkTimeGainCompensationImageFilterCASCIF3_New():
    return itkTimeGainCompensationImageFilterCASCIF3.New()

class itkTimeGainCompensationImageFilterCASCIF3(itk.itkCurvilinearArraySpecialCoordinatesImagePython.itkCastImageFilterCASCIF3CASCIF3_Superclass_Superclass):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterCASCIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF3_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF3_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF3_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterCASCIF3
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF3_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterCASCIF3

        Create a new object of the class itkTimeGainCompensationImageFilterCASCIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterCASCIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterCASCIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterCASCIF3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterCASCIF3 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF3_swigregister(itkTimeGainCompensationImageFilterCASCIF3)
itkTimeGainCompensationImageFilterCASCIF3___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF3___New_orig__
itkTimeGainCompensationImageFilterCASCIF3_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF3_cast


def itkTimeGainCompensationImageFilterCASCIF4_New():
    return itkTimeGainCompensationImageFilterCASCIF4.New()

class itkTimeGainCompensationImageFilterCASCIF4(itk.itkCurvilinearArraySpecialCoordinatesImagePython.itkCastImageFilterCASCIF4CASCIF4_Superclass_Superclass):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterCASCIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF4___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF4_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF4_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF4_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterCASCIF4
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF4_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterCASCIF4

        Create a new object of the class itkTimeGainCompensationImageFilterCASCIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterCASCIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterCASCIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterCASCIF4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterCASCIF4 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF4_swigregister(itkTimeGainCompensationImageFilterCASCIF4)
itkTimeGainCompensationImageFilterCASCIF4___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF4___New_orig__
itkTimeGainCompensationImageFilterCASCIF4_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIF4_cast


def itkTimeGainCompensationImageFilterCASCISS2_New():
    return itkTimeGainCompensationImageFilterCASCISS2.New()

class itkTimeGainCompensationImageFilterCASCISS2(itk.itkCurvilinearArraySpecialCoordinatesImagePython.itkCastImageFilterCASCISS2CASCISS2_Superclass_Superclass):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterCASCISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS2_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS2_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS2_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterCASCISS2
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS2_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterCASCISS2

        Create a new object of the class itkTimeGainCompensationImageFilterCASCISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterCASCISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterCASCISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterCASCISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterCASCISS2 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS2_swigregister(itkTimeGainCompensationImageFilterCASCISS2)
itkTimeGainCompensationImageFilterCASCISS2___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS2___New_orig__
itkTimeGainCompensationImageFilterCASCISS2_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS2_cast


def itkTimeGainCompensationImageFilterCASCISS3_New():
    return itkTimeGainCompensationImageFilterCASCISS3.New()

class itkTimeGainCompensationImageFilterCASCISS3(itk.itkCurvilinearArraySpecialCoordinatesImagePython.itkCastImageFilterCASCISS3CASCISS3_Superclass_Superclass):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterCASCISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS3_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS3_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS3_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterCASCISS3
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS3_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterCASCISS3

        Create a new object of the class itkTimeGainCompensationImageFilterCASCISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterCASCISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterCASCISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterCASCISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterCASCISS3 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS3_swigregister(itkTimeGainCompensationImageFilterCASCISS3)
itkTimeGainCompensationImageFilterCASCISS3___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS3___New_orig__
itkTimeGainCompensationImageFilterCASCISS3_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS3_cast


def itkTimeGainCompensationImageFilterCASCISS4_New():
    return itkTimeGainCompensationImageFilterCASCISS4.New()

class itkTimeGainCompensationImageFilterCASCISS4(itk.itkCurvilinearArraySpecialCoordinatesImagePython.itkCastImageFilterCASCISS4CASCISS4_Superclass_Superclass):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterCASCISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS4_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS4_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS4_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterCASCISS4
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS4_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterCASCISS4

        Create a new object of the class itkTimeGainCompensationImageFilterCASCISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterCASCISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterCASCISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterCASCISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterCASCISS4 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS4_swigregister(itkTimeGainCompensationImageFilterCASCISS4)
itkTimeGainCompensationImageFilterCASCISS4___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS4___New_orig__
itkTimeGainCompensationImageFilterCASCISS4_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCISS4_cast


def itkTimeGainCompensationImageFilterCASCIUC2_New():
    return itkTimeGainCompensationImageFilterCASCIUC2.New()

class itkTimeGainCompensationImageFilterCASCIUC2(itk.itkCurvilinearArraySpecialCoordinatesImagePython.itkCastImageFilterCASCIUC2CASCIUC2_Superclass_Superclass):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterCASCIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC2_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC2_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC2_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterCASCIUC2
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterCASCIUC2

        Create a new object of the class itkTimeGainCompensationImageFilterCASCIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterCASCIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterCASCIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterCASCIUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterCASCIUC2 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC2_swigregister(itkTimeGainCompensationImageFilterCASCIUC2)
itkTimeGainCompensationImageFilterCASCIUC2___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC2___New_orig__
itkTimeGainCompensationImageFilterCASCIUC2_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC2_cast


def itkTimeGainCompensationImageFilterCASCIUC3_New():
    return itkTimeGainCompensationImageFilterCASCIUC3.New()

class itkTimeGainCompensationImageFilterCASCIUC3(itk.itkCurvilinearArraySpecialCoordinatesImagePython.itkCastImageFilterCASCIUC3CASCIUC3_Superclass_Superclass):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterCASCIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC3_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC3_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC3_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterCASCIUC3
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterCASCIUC3

        Create a new object of the class itkTimeGainCompensationImageFilterCASCIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterCASCIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterCASCIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterCASCIUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterCASCIUC3 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC3_swigregister(itkTimeGainCompensationImageFilterCASCIUC3)
itkTimeGainCompensationImageFilterCASCIUC3___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC3___New_orig__
itkTimeGainCompensationImageFilterCASCIUC3_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC3_cast


def itkTimeGainCompensationImageFilterCASCIUC4_New():
    return itkTimeGainCompensationImageFilterCASCIUC4.New()

class itkTimeGainCompensationImageFilterCASCIUC4(itk.itkCurvilinearArraySpecialCoordinatesImagePython.itkCastImageFilterCASCIUC4CASCIUC4_Superclass_Superclass):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterCASCIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC4_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC4_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC4_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterCASCIUC4
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC4_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterCASCIUC4

        Create a new object of the class itkTimeGainCompensationImageFilterCASCIUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterCASCIUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterCASCIUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterCASCIUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterCASCIUC4 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC4_swigregister(itkTimeGainCompensationImageFilterCASCIUC4)
itkTimeGainCompensationImageFilterCASCIUC4___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC4___New_orig__
itkTimeGainCompensationImageFilterCASCIUC4_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUC4_cast


def itkTimeGainCompensationImageFilterCASCIUS2_New():
    return itkTimeGainCompensationImageFilterCASCIUS2.New()

class itkTimeGainCompensationImageFilterCASCIUS2(itk.itkCurvilinearArraySpecialCoordinatesImagePython.itkCastImageFilterCASCIUS2CASCIUS2_Superclass_Superclass):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterCASCIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS2_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS2_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS2_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterCASCIUS2
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterCASCIUS2

        Create a new object of the class itkTimeGainCompensationImageFilterCASCIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterCASCIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterCASCIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterCASCIUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterCASCIUS2 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS2_swigregister(itkTimeGainCompensationImageFilterCASCIUS2)
itkTimeGainCompensationImageFilterCASCIUS2___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS2___New_orig__
itkTimeGainCompensationImageFilterCASCIUS2_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS2_cast


def itkTimeGainCompensationImageFilterCASCIUS3_New():
    return itkTimeGainCompensationImageFilterCASCIUS3.New()

class itkTimeGainCompensationImageFilterCASCIUS3(itk.itkCurvilinearArraySpecialCoordinatesImagePython.itkCastImageFilterCASCIUS3CASCIUS3_Superclass_Superclass):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterCASCIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS3_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS3_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS3_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterCASCIUS3
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterCASCIUS3

        Create a new object of the class itkTimeGainCompensationImageFilterCASCIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterCASCIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterCASCIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterCASCIUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterCASCIUS3 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS3_swigregister(itkTimeGainCompensationImageFilterCASCIUS3)
itkTimeGainCompensationImageFilterCASCIUS3___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS3___New_orig__
itkTimeGainCompensationImageFilterCASCIUS3_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS3_cast


def itkTimeGainCompensationImageFilterCASCIUS4_New():
    return itkTimeGainCompensationImageFilterCASCIUS4.New()

class itkTimeGainCompensationImageFilterCASCIUS4(itk.itkCurvilinearArraySpecialCoordinatesImagePython.itkCastImageFilterCASCIUS4CASCIUS4_Superclass_Superclass):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterCASCIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS4_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS4_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS4_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterCASCIUS4
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS4_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterCASCIUS4

        Create a new object of the class itkTimeGainCompensationImageFilterCASCIUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterCASCIUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterCASCIUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterCASCIUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterCASCIUS4 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS4_swigregister(itkTimeGainCompensationImageFilterCASCIUS4)
itkTimeGainCompensationImageFilterCASCIUS4___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS4___New_orig__
itkTimeGainCompensationImageFilterCASCIUS4_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterCASCIUS4_cast


def itkTimeGainCompensationImageFilterID2_New():
    return itkTimeGainCompensationImageFilterID2.New()

class itkTimeGainCompensationImageFilterID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID2_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID2_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID2_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterID2
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID2_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterID2

        Create a new object of the class itkTimeGainCompensationImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterID2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterID2 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID2_swigregister(itkTimeGainCompensationImageFilterID2)
itkTimeGainCompensationImageFilterID2___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID2___New_orig__
itkTimeGainCompensationImageFilterID2_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID2_cast


def itkTimeGainCompensationImageFilterID3_New():
    return itkTimeGainCompensationImageFilterID3.New()

class itkTimeGainCompensationImageFilterID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID3_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID3_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID3_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterID3
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterID3

        Create a new object of the class itkTimeGainCompensationImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterID3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterID3 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID3_swigregister(itkTimeGainCompensationImageFilterID3)
itkTimeGainCompensationImageFilterID3___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID3___New_orig__
itkTimeGainCompensationImageFilterID3_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID3_cast


def itkTimeGainCompensationImageFilterID4_New():
    return itkTimeGainCompensationImageFilterID4.New()

class itkTimeGainCompensationImageFilterID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID4___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID4_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID4_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID4_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterID4
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID4_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterID4

        Create a new object of the class itkTimeGainCompensationImageFilterID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterID4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterID4 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID4_swigregister(itkTimeGainCompensationImageFilterID4)
itkTimeGainCompensationImageFilterID4___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID4___New_orig__
itkTimeGainCompensationImageFilterID4_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterID4_cast


def itkTimeGainCompensationImageFilterIF2_New():
    return itkTimeGainCompensationImageFilterIF2.New()

class itkTimeGainCompensationImageFilterIF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF2_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF2_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF2_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterIF2
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterIF2

        Create a new object of the class itkTimeGainCompensationImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterIF2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterIF2 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF2_swigregister(itkTimeGainCompensationImageFilterIF2)
itkTimeGainCompensationImageFilterIF2___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF2___New_orig__
itkTimeGainCompensationImageFilterIF2_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF2_cast


def itkTimeGainCompensationImageFilterIF3_New():
    return itkTimeGainCompensationImageFilterIF3.New()

class itkTimeGainCompensationImageFilterIF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF3_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF3_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF3_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterIF3
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterIF3

        Create a new object of the class itkTimeGainCompensationImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterIF3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterIF3 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF3_swigregister(itkTimeGainCompensationImageFilterIF3)
itkTimeGainCompensationImageFilterIF3___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF3___New_orig__
itkTimeGainCompensationImageFilterIF3_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF3_cast


def itkTimeGainCompensationImageFilterIF4_New():
    return itkTimeGainCompensationImageFilterIF4.New()

class itkTimeGainCompensationImageFilterIF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF4___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF4_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF4_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF4_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterIF4
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF4_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterIF4

        Create a new object of the class itkTimeGainCompensationImageFilterIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterIF4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterIF4 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF4_swigregister(itkTimeGainCompensationImageFilterIF4)
itkTimeGainCompensationImageFilterIF4___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF4___New_orig__
itkTimeGainCompensationImageFilterIF4_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIF4_cast


def itkTimeGainCompensationImageFilterISS2_New():
    return itkTimeGainCompensationImageFilterISS2.New()

class itkTimeGainCompensationImageFilterISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS2_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS2_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS2_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterISS2
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS2_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterISS2

        Create a new object of the class itkTimeGainCompensationImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterISS2 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS2_swigregister(itkTimeGainCompensationImageFilterISS2)
itkTimeGainCompensationImageFilterISS2___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS2___New_orig__
itkTimeGainCompensationImageFilterISS2_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS2_cast


def itkTimeGainCompensationImageFilterISS3_New():
    return itkTimeGainCompensationImageFilterISS3.New()

class itkTimeGainCompensationImageFilterISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS3_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS3_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS3_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterISS3
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS3_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterISS3

        Create a new object of the class itkTimeGainCompensationImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterISS3 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS3_swigregister(itkTimeGainCompensationImageFilterISS3)
itkTimeGainCompensationImageFilterISS3___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS3___New_orig__
itkTimeGainCompensationImageFilterISS3_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS3_cast


def itkTimeGainCompensationImageFilterISS4_New():
    return itkTimeGainCompensationImageFilterISS4.New()

class itkTimeGainCompensationImageFilterISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS4_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS4_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS4_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterISS4
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS4_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterISS4

        Create a new object of the class itkTimeGainCompensationImageFilterISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterISS4 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS4_swigregister(itkTimeGainCompensationImageFilterISS4)
itkTimeGainCompensationImageFilterISS4___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS4___New_orig__
itkTimeGainCompensationImageFilterISS4_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterISS4_cast


def itkTimeGainCompensationImageFilterIUC2_New():
    return itkTimeGainCompensationImageFilterIUC2.New()

class itkTimeGainCompensationImageFilterIUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC2_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC2_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC2_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterIUC2
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterIUC2

        Create a new object of the class itkTimeGainCompensationImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterIUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterIUC2 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC2_swigregister(itkTimeGainCompensationImageFilterIUC2)
itkTimeGainCompensationImageFilterIUC2___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC2___New_orig__
itkTimeGainCompensationImageFilterIUC2_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC2_cast


def itkTimeGainCompensationImageFilterIUC3_New():
    return itkTimeGainCompensationImageFilterIUC3.New()

class itkTimeGainCompensationImageFilterIUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC3_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC3_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC3_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterIUC3
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterIUC3

        Create a new object of the class itkTimeGainCompensationImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterIUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterIUC3 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC3_swigregister(itkTimeGainCompensationImageFilterIUC3)
itkTimeGainCompensationImageFilterIUC3___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC3___New_orig__
itkTimeGainCompensationImageFilterIUC3_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC3_cast


def itkTimeGainCompensationImageFilterIUC4_New():
    return itkTimeGainCompensationImageFilterIUC4.New()

class itkTimeGainCompensationImageFilterIUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC4_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC4_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC4_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterIUC4
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC4_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterIUC4

        Create a new object of the class itkTimeGainCompensationImageFilterIUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterIUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterIUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterIUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterIUC4 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC4_swigregister(itkTimeGainCompensationImageFilterIUC4)
itkTimeGainCompensationImageFilterIUC4___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC4___New_orig__
itkTimeGainCompensationImageFilterIUC4_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUC4_cast


def itkTimeGainCompensationImageFilterIUS2_New():
    return itkTimeGainCompensationImageFilterIUS2.New()

class itkTimeGainCompensationImageFilterIUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS2_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS2_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS2_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterIUS2
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterIUS2

        Create a new object of the class itkTimeGainCompensationImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterIUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterIUS2 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS2_swigregister(itkTimeGainCompensationImageFilterIUS2)
itkTimeGainCompensationImageFilterIUS2___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS2___New_orig__
itkTimeGainCompensationImageFilterIUS2_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS2_cast


def itkTimeGainCompensationImageFilterIUS3_New():
    return itkTimeGainCompensationImageFilterIUS3.New()

class itkTimeGainCompensationImageFilterIUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS3_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS3_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS3_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterIUS3
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterIUS3

        Create a new object of the class itkTimeGainCompensationImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterIUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterIUS3 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS3_swigregister(itkTimeGainCompensationImageFilterIUS3)
itkTimeGainCompensationImageFilterIUS3___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS3___New_orig__
itkTimeGainCompensationImageFilterIUS3_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS3_cast


def itkTimeGainCompensationImageFilterIUS4_New():
    return itkTimeGainCompensationImageFilterIUS4.New()

class itkTimeGainCompensationImageFilterIUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkTimeGainCompensationImageFilterIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS4_Clone)
    SetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS4_SetGain)
    GetGain = _swig_new_instance_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS4_GetGain)
    __swig_destroy__ = _itkTimeGainCompensationImageFilterPython.delete_itkTimeGainCompensationImageFilterIUS4
    cast = _swig_new_static_method(_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS4_cast)

    def New(*args, **kargs):
        """New() -> itkTimeGainCompensationImageFilterIUS4

        Create a new object of the class itkTimeGainCompensationImageFilterIUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeGainCompensationImageFilterIUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeGainCompensationImageFilterIUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeGainCompensationImageFilterIUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeGainCompensationImageFilterIUS4 in _itkTimeGainCompensationImageFilterPython:
_itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS4_swigregister(itkTimeGainCompensationImageFilterIUS4)
itkTimeGainCompensationImageFilterIUS4___New_orig__ = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS4___New_orig__
itkTimeGainCompensationImageFilterIUS4_cast = _itkTimeGainCompensationImageFilterPython.itkTimeGainCompensationImageFilterIUS4_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def time_gain_compensation_image_filter(*args, **kwargs):
    """Procedural interface for TimeGainCompensationImageFilter"""
    import itk

    instance = itk.TimeGainCompensationImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def time_gain_compensation_image_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.Ultrasound.TimeGainCompensationImageFilter
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    time_gain_compensation_image_filter.__doc__ = filter_object.__doc__
    time_gain_compensation_image_filter.__doc__ += "\n args are input(s) to the filter.\n\n"
    time_gain_compensation_image_filter.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        time_gain_compensation_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        time_gain_compensation_image_filter.__doc__ += "\n"
        time_gain_compensation_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        time_gain_compensation_image_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




