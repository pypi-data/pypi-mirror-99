# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _UltrasoundPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFrequencyDomain1DImageFilterPython
else:
    import _itkFrequencyDomain1DImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkFrequencyDomain1DImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkFrequencyDomain1DImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImageSourceCommonPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkFrequencyDomain1DFilterFunctionPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkFixedArrayPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkCurvilinearArraySpecialCoordinatesImagePython
import itk.ITKIOImageBaseBasePython
import itk.itkContinuousIndexPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython
import itk.itkSpectra1DSupportWindowImageFilterPython
import itk.itkTransformBasePython
import itk.itkOptimizerParametersPython
import itk.itkDiffusionTensor3DPython
import itk.itkVariableLengthVectorPython
import itk.itkArray2DPython
class itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetOutput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_GetOutput)
    GraftOutput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_GraftNthOutput)
    MakeOutput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_MakeOutput)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_cast)

# Register itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_swigregister(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass)
itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_cast

class itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetOutput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_GetOutput)
    GraftOutput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_GraftNthOutput)
    MakeOutput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_MakeOutput)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_cast)

# Register itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_swigregister(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass)
itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_cast

class itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetOutput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_GetOutput)
    GraftOutput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_GraftNthOutput)
    MakeOutput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_MakeOutput)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_cast)

# Register itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_swigregister(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass)
itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_cast

class itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetOutput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_Superclass_GetOutput)
    GraftOutput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_Superclass_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_Superclass_GraftNthOutput)
    MakeOutput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_Superclass_MakeOutput)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_Superclass
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_Superclass_cast)

# Register itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_Superclass in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_Superclass_swigregister(itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_Superclass)
itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_Superclass_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_Superclass_cast

class itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_cast)

# Register itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_swigregister(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass)
itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_cast

class itkFrequencyDomain1DImageFilterICF2ICF2_Superclass(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterICF2ICF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICF2ICF2_Superclass
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_cast)

# Register itkFrequencyDomain1DImageFilterICF2ICF2_Superclass in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_swigregister(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass)
itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_cast

class itkFrequencyDomain1DImageFilterICF3ICF3_Superclass(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterICF3ICF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICF3ICF3_Superclass
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_cast)

# Register itkFrequencyDomain1DImageFilterICF3ICF3_Superclass in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_swigregister(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass)
itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_cast

class itkFrequencyDomain1DImageFilterICF4ICF4_Superclass(itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_Superclass):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterICF4ICF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICF4ICF4_Superclass
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_cast)

# Register itkFrequencyDomain1DImageFilterICF4ICF4_Superclass in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_swigregister(itkFrequencyDomain1DImageFilterICF4ICF4_Superclass)
itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_cast


def itkFrequencyDomain1DImageFilterCASCICFCASCICF_New():
    return itkFrequencyDomain1DImageFilterCASCICFCASCICF.New()

class itkFrequencyDomain1DImageFilterCASCICFCASCICF(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterCASCICFCASCICF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Clone)
    SetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_SetDirection)
    GetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_GetDirection)
    SetFilterFunction = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_SetFilterFunction)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterCASCICFCASCICF
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterCASCICFCASCICF

        Create a new object of the class itkFrequencyDomain1DImageFilterCASCICFCASCICF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterCASCICFCASCICF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterCASCICFCASCICF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyDomain1DImageFilterCASCICFCASCICF.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyDomain1DImageFilterCASCICFCASCICF in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_swigregister(itkFrequencyDomain1DImageFilterCASCICFCASCICF)
itkFrequencyDomain1DImageFilterCASCICFCASCICF___New_orig__ = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF___New_orig__
itkFrequencyDomain1DImageFilterCASCICFCASCICF_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_cast


def itkFrequencyDomain1DImageFilterICF2ICF2_New():
    return itkFrequencyDomain1DImageFilterICF2ICF2.New()

class itkFrequencyDomain1DImageFilterICF2ICF2(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterICF2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Clone)
    SetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_SetDirection)
    GetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_GetDirection)
    SetFilterFunction = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_SetFilterFunction)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICF2ICF2
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterICF2ICF2

        Create a new object of the class itkFrequencyDomain1DImageFilterICF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterICF2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterICF2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyDomain1DImageFilterICF2ICF2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyDomain1DImageFilterICF2ICF2 in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_swigregister(itkFrequencyDomain1DImageFilterICF2ICF2)
itkFrequencyDomain1DImageFilterICF2ICF2___New_orig__ = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2___New_orig__
itkFrequencyDomain1DImageFilterICF2ICF2_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_cast


def itkFrequencyDomain1DImageFilterICF3ICF3_New():
    return itkFrequencyDomain1DImageFilterICF3ICF3.New()

class itkFrequencyDomain1DImageFilterICF3ICF3(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterICF3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Clone)
    SetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_SetDirection)
    GetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_GetDirection)
    SetFilterFunction = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_SetFilterFunction)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICF3ICF3
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterICF3ICF3

        Create a new object of the class itkFrequencyDomain1DImageFilterICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterICF3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterICF3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyDomain1DImageFilterICF3ICF3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyDomain1DImageFilterICF3ICF3 in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_swigregister(itkFrequencyDomain1DImageFilterICF3ICF3)
itkFrequencyDomain1DImageFilterICF3ICF3___New_orig__ = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3___New_orig__
itkFrequencyDomain1DImageFilterICF3ICF3_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_cast


def itkFrequencyDomain1DImageFilterICF4ICF4_New():
    return itkFrequencyDomain1DImageFilterICF4ICF4.New()

class itkFrequencyDomain1DImageFilterICF4ICF4(itkFrequencyDomain1DImageFilterICF4ICF4_Superclass):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterICF4ICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Clone)
    SetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_SetDirection)
    GetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_GetDirection)
    SetFilterFunction = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_SetFilterFunction)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICF4ICF4
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterICF4ICF4

        Create a new object of the class itkFrequencyDomain1DImageFilterICF4ICF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterICF4ICF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterICF4ICF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyDomain1DImageFilterICF4ICF4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyDomain1DImageFilterICF4ICF4 in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_swigregister(itkFrequencyDomain1DImageFilterICF4ICF4)
itkFrequencyDomain1DImageFilterICF4ICF4___New_orig__ = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4___New_orig__
itkFrequencyDomain1DImageFilterICF4ICF4_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_source(*args, **kwargs):
    """Procedural interface for ImageSource"""
    import itk

    instance = itk.ImageSource.New(*args, **kwargs)
    return instance.__internal_call__()


def image_source_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.Ultrasound.ImageSource
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_source.__doc__ = filter_object.__doc__
    image_source.__doc__ += "\n args are input(s) to the filter.\n\n"
    image_source.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        image_source.__doc__ += itkHelpers.filter_args(filter_object)[0]
        image_source.__doc__ += "\n"
        image_source.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        image_source.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )

from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_to_image_filter(*args, **kwargs):
    """Procedural interface for ImageToImageFilter"""
    import itk

    instance = itk.ImageToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def image_to_image_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.Ultrasound.ImageToImageFilter
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_to_image_filter.__doc__ = filter_object.__doc__
    image_to_image_filter.__doc__ += "\n args are input(s) to the filter.\n\n"
    image_to_image_filter.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        image_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        image_to_image_filter.__doc__ += "\n"
        image_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        image_to_image_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )

from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def frequency_domain1_d_image_filter(*args, **kwargs):
    """Procedural interface for FrequencyDomain1DImageFilter"""
    import itk

    instance = itk.FrequencyDomain1DImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def frequency_domain1_d_image_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.Ultrasound.FrequencyDomain1DImageFilter
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    frequency_domain1_d_image_filter.__doc__ = filter_object.__doc__
    frequency_domain1_d_image_filter.__doc__ += "\n args are input(s) to the filter.\n\n"
    frequency_domain1_d_image_filter.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        frequency_domain1_d_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        frequency_domain1_d_image_filter.__doc__ += "\n"
        frequency_domain1_d_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        frequency_domain1_d_image_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




