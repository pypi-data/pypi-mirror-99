# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class CreateDataDriftDto(Model):
    """CreateDataDriftDto.

    :param name:
    :type name: str
    :param type: Possible values include: 'ModelBased', 'DatasetBased'
    :type type: str or ~_restclient.models.enum
    :param model_name:
    :type model_name: str
    :param model_version:
    :type model_version: int
    :param base_dataset_id:
    :type base_dataset_id: str
    :param target_dataset_id:
    :type target_dataset_id: str
    :param services:
    :type services: list[str]
    :param compute_target_name:
    :type compute_target_name: str
    :param features:
    :type features: list[str]
    :param drift_threshold:
    :type drift_threshold: float
    :param job_latency:
    :type job_latency: int
    :param frequency:
    :type frequency: str
    :param schedule_start_time:
    :type schedule_start_time: datetime
    :param interval:
    :type interval: int
    :param alert_configuration:
    :type alert_configuration: ~_restclient.models.AlertConfiguration
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'model_name': {'key': 'modelName', 'type': 'str'},
        'model_version': {'key': 'modelVersion', 'type': 'int'},
        'base_dataset_id': {'key': 'baseDatasetId', 'type': 'str'},
        'target_dataset_id': {'key': 'targetDatasetId', 'type': 'str'},
        'services': {'key': 'services', 'type': '[str]'},
        'compute_target_name': {'key': 'computeTargetName', 'type': 'str'},
        'features': {'key': 'features', 'type': '[str]'},
        'drift_threshold': {'key': 'driftThreshold', 'type': 'float'},
        'job_latency': {'key': 'jobLatency', 'type': 'int'},
        'frequency': {'key': 'frequency', 'type': 'str'},
        'schedule_start_time': {'key': 'scheduleStartTime', 'type': 'iso-8601'},
        'interval': {'key': 'interval', 'type': 'int'},
        'alert_configuration': {'key': 'alertConfiguration', 'type': 'AlertConfiguration'},
    }

    def __init__(self, **kwargs):
        super(CreateDataDriftDto, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = kwargs.get('type', None)
        self.model_name = kwargs.get('model_name', None)
        self.model_version = kwargs.get('model_version', None)
        self.base_dataset_id = kwargs.get('base_dataset_id', None)
        self.target_dataset_id = kwargs.get('target_dataset_id', None)
        self.services = kwargs.get('services', None)
        self.compute_target_name = kwargs.get('compute_target_name', None)
        self.features = kwargs.get('features', None)
        self.drift_threshold = kwargs.get('drift_threshold', None)
        self.job_latency = kwargs.get('job_latency', None)
        self.frequency = kwargs.get('frequency', None)
        self.schedule_start_time = kwargs.get('schedule_start_time', None)
        self.interval = kwargs.get('interval', None)
        self.alert_configuration = kwargs.get('alert_configuration', None)
