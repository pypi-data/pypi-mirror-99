# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tools
else:
    import _tools

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


N_CHILDREN = _tools.N_CHILDREN
class gofmmTree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tools.gofmmTree_swiginit(self, _tools.new_gofmmTree(*args))

    def convert_to_vector(self):
        return _tools.gofmmTree_convert_to_vector(self)

    def mul_denseSPD(self, w, mul_numpy):
        return _tools.gofmmTree_mul_denseSPD(self, w, mul_numpy)

    def invert_denseSPD(self, _lambda, inv_numpy):
        return _tools.gofmmTree_invert_denseSPD(self, _lambda, inv_numpy)
    __swig_destroy__ = _tools.delete_gofmmTree

# Register gofmmTree in _tools:
_tools.gofmmTree_swigregister(gofmmTree)

class file_to_argv(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tools.file_to_argv_swiginit(self, _tools.new_file_to_argv(*args))
    __swig_destroy__ = _tools.delete_file_to_argv

    def print_argv(self):
        return _tools.file_to_argv_print_argv(self)

    def return_argv(self):
        return _tools.file_to_argv_return_argv(self)

# Register file_to_argv in _tools:
_tools.file_to_argv_swigregister(file_to_argv)


def call_Launchhelper(filename):
    return _tools.call_Launchhelper(filename)

def launchhelper_denseSPD(K, filename):
    return _tools.launchhelper_denseSPD(K, filename)

def load_denseSPD(height, width, filename):
    return _tools.load_denseSPD(height, width, filename)

def hello_world():
    return _tools.hello_world()

def load_denseSPD_from_console(numpyArr):
    return _tools.load_denseSPD_from_console(numpyArr)

def load_matrix_from_console(numpyMat):
    return _tools.load_matrix_from_console(numpyMat)


