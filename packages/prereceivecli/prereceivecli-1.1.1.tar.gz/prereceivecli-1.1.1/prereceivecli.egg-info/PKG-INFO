Metadata-Version: 1.1
Name: prereceivecli
Version: 1.1.1
Summary: A cli that implements a git server side pre-receive hook that gets driven from dynamodb and reports to slack offending pushes.
Home-page: https://github.com/schubergphilis/prereceivecli.git
Author: Costas Tyfoxylos
Author-email: ctyfoxylos@schubergphilis.com
License: MIT
Description: =============
        prereceivecli
        =============
        
        A cli that implements a gitlab git server side pre-receive hook that gets driven from dynamodb and reports to slack offending pushes.
        
        
        * Documentation: https://prereceivecli.readthedocs.org/en/latest
        
        
        Development Workflow
        ====================
        
        The workflow supports the following steps
        
         * lint
         * test
         * build
         * document
         * upload
         * graph
        
        These actions are supported out of the box by the corresponding scripts under _CI/scripts directory with sane defaults based on best practices.
        Sourcing setup_aliases.ps1 for windows powershell or setup_aliases.sh in bash on Mac or Linux will provide with handy aliases for the shell of all those commands prepended with an underscore.
        
        The bootstrap script creates a .venv directory inside the project directory hosting the virtual environment. It uses pipenv for that.
        It is called by all other scripts before they do anything. So one could simple start by calling _lint and that would set up everything before it tried to actually lint the project
        
        Once the code is ready to be delivered the _tag script should be called accepting one of three arguments, patch, minor, major following the semantic versioning scheme.
        So for the initial delivery one would call
        
            $ _tag --minor
        
        which would bump the version of the project to 0.1.0 tag it in git and do a push and also ask for the change and automagically update HISTORY.rst with the version and the change provided.
        
        
        So the full workflow after git is initialized is:
        
         * repeat as necessary (of course it could be test - code - lint :) )
        
           * code
           * lint
           * test
         * commit and push
         * develop more through the code-lint-test cycle
         * tag (with the appropriate argument)
         * build
         * upload (if you want to host your package in pypi)
         * document (of course this could be run at any point)
        
        
        Important Information
        =====================
        
        This template is based on pipenv. In order to be compatible with requirements.txt so the actual created package can be used by any part of the existing python ecosystem some hacks were needed.
        So when building a package out of this **do not** simple call
        
            $ python setup.py sdist bdist_egg
        
        **as this will produce an unusable artifact with files missing.**
        Instead use the provided build and upload scripts that create all the necessary files in the artifact.
        
        
        
        Project Features
        ================
        
        Can protect directories and files from tampering by checking hash entries for them in a dynamodb
        Please refer to USAGE.rst for setup details.
        
        
        
        
        History
        -------
        
        0.0.1 (26-02-2019)
        ---------------------
        
        * First code creation
        
        
        0.1.0 (26-02-2019)
        ------------------
        
        * First public release
        
        
        0.1.1 (29-09-2020)
        ------------------
        
        * Updated quaratine path logic
        
        
        0.1.2 (02-10-2020)
        ------------------
        
        * Fix for get_project method
        
        
        0.1.3 (02-10-2020)
        ------------------
        
        * Fixed project_group name logic
        
        
        0.2.0 (16-10-2020)
        ------------------
        
        * Implemented web identity authentication.
        
        
        0.2.1 (16-10-2020)
        ------------------
        
        * Bumped dependencies
        
        
        1.0.0 (30-12-2020)
        ------------------
        
        * Replace hyphens with underscores in all project names for dynamo lookup.
        
        
        1.0.1 (07-01-2021)
        ------------------
        
        * Made error message friendlier.
        
        
        1.0.2 (09-03-2021)
        ------------------
        
        * Explicitly targeting the copy git repo for the latest gitlab.
        
        
        1.1.0 (16-03-2021)
        ------------------
        
        * Implemented archive instead of checkout as checkout corrupted repositories in Gitlab after 13.8 and the exposure of GIT_DIR environment variable.
        
        
        1.1.1 (22-03-2021)
        ------------------
        
        * Handling special 00000 ref case by not handling it.
        
Keywords: prereceivecli git hook serverside pre receive
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.7
