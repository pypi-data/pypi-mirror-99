import sys
sys.path.append("..")
from datetime import datetime
from ..utils import Utils

class OrderProductPackageDimensions:
    def __init__(self, height='', width='', length='', weigth=''):
        self.height = height
        self.width = width
        self.length = length
        self.weight = weigth

class OrderProduct:
    def __init__(self, orderId='',
                        storeProductId='',
                        quantity='',
                        salePrice='',
                        listPrice='',
                        productDescription='',
                        productCode='',
                        eanProduct='',
                        discount='',
                        cubicWeight='',
                        height='',
                        length='',
                        weight='',
                        width='',
                        measurementUnit='',
                        shippingCost='',
                        giftWrap='',
                        packageDimensions=''):
        self.orderId = orderId if orderId else None
        self.storeProductId = storeProductId if storeProductId else None
        self.quantity = quantity
        self.salePrice = salePrice
        self.listPrice = Utils.create_values(listPrice, 'Float64') if listPrice else None
        self.productDescription = productDescription
        self.productCode = Utils.create_values(productCode, 'String')
        self.productEan = Utils.create_values(eanProduct, 'String')
        self.discount = Utils.create_values(discount, 'Float64') if discount else Utils.create_values(0, 'Float64')
        self.cubicWeight = cubicWeight if cubicWeight else None
        self.height = height if height else None
        self.length = length if length else None
        self.weight = weight if weight else None
        self.width = width if width else None
        self.measurementUnit = Utils.create_values(measurementUnit, 'String')
        self.shippingCost = shippingCost if shippingCost else None
        self.giftWrap = giftWrap if giftWrap else False
        self.packageDimensions = Utils.create_values(packageDimensions, 'Float64')

class OrderAddress:
    def __init__(self, billingName = '',
                        billingPhoneNumber = '',
                        billingAddress = '',
                        billingAddressNumber = '',
                        billingAddressExtra = '',
                        billingNeighborhood = '',
                        billingCity = '',
                        billingState = '',
                        billingZipCode = '',
                        billingCountry = '',
                        billingReference = '',
                        deliveryName = '',
                        deliveryPhoneNumber = '',
                        deliveryAddress = '',
                        deliveryAddressNumber = '',
                        deliveryAddressExtra = '',
                        deliveryNeighborhood = '',
                        deliveryCity = '',
                        deliveryState = '',
                        deliveryZipCode = '',
                        deliveryCountry = '',
                        deliveryReference = ''):
        self.billingName = Utils.create_values(billingName, 'String')
        self.billingPhoneNumber = Utils.create_values(billingPhoneNumber, 'String')
        self.billingAddress = billingAddress if billingAddress else None
        self.billingAddressNumber = billingAddressNumber if billingAddressNumber else None
        self.billingAddressExtra = Utils.create_values(billingAddressExtra, "String") if billingAddressExtra else None
        self.billingNeighborhood = billingNeighborhood if billingNeighborhood else None
        self.billingCity = billingCity if billingCity else None
        self.bollingState = billingState if billingState else None
        self.billingZipCode = billingZipCode if billingZipCode else None
        self.billingCountry = Utils.create_values(billingCountry, 'String')
        self.billingReference = Utils.create_values(billingReference, 'String')
        self.deliveryName = Utils.create_values(deliveryName, 'String')
        self.deliveryPhoneNumber = Utils.create_values(deliveryPhoneNumber, 'String')
        self.deliveryAddress = deliveryAddress if deliveryAddress else None
        self.deliveryAddressNumber = deliveryAddressNumber if deliveryAddressNumber else None
        self.deliveryAddressExtra = Utils.create_values(deliveryAddressExtra, "String") if deliveryAddressExtra else None
        self.deliveryNeighborhood = deliveryNeighborhood if deliveryNeighborhood else None
        self.deliveryCity = deliveryCity if deliveryCity else None
        self.deliveryState = deliveryState if deliveryState else None
        self.deliveryZipCode = deliveryZipCode if deliveryZipCode else None
        self.deliveryCountry = Utils.create_values(deliveryCountry, 'String')
        self.deliveryReference = Utils.create_values(deliveryReference, 'String') if deliveryReference else None

class OrderPayment:
    def __init__(self, orderId='',
                        amount='',
                        date='',
                        status='',
                        planId='',
                        methodId='',
                        external_code='',
                        description='',
                        cardIssuer='',
                        authorizationId='',
                        nsu=''):
        self.orderId = orderId if orderId else None
        self.amount = amount if amount else None
        self.date = Utils.normalize_datetime(date) if date else None
        self.status = status if status else None
        self.planId = planId if planId else None
        self.methodId = methodId if methodId else None
        self.externalCode = external_code if external_code else None
        self.description = description if description else None
        self.cardIssuer = cardIssuer if cardIssuer else None
        self.authorizationId = authorizationId if authorizationId else None
        self.nsu = Utils.create_values(nsu, "String") if nsu else None

class OrderCustomerAddress:
    def __init__(self, address='', 
                        addressNumber='', 
                        city='', 
                        country='', 
                        zipCode='', 
                        reference='',
                        neighborhood=''):
            self.address = address
            self.addressNumber = addressNumber
            self.city = city
            self.country = Utils.create_values(country, 'String')
            self.zipCode = zipCode
            self.reference = Utils.create_values(reference, 'String')
            self.neighborhood = neighborhood

class OrderCustomer:
    def __init__(self, id='',
                        document='',
                        mainNumber='',
                        secundaryNumber='',
                        name='',
                        gender='',
                        birthDate='',
                        addresses=[],
                        email='',
                        type=''):
        self.id = id if id else None
        self.document = document
        self.mainNumber = Utils.create_values(mainNumber, 'String')
        self.secundaryNumber = Utils.create_values(secundaryNumber, 'String')
        self.name = name
        self.gender = gender
        self.birthDate = Utils.create_values(birthDate, 'String')
        self.addresses = addresses
        self.email = email
        self.type = type

class OrderShippingAddress:
    def __init__(self, deliveryName = '',
                        deliveryPhoneNumber = '',
                        deliveryAddress = '',
                        deliveryAddressNumber = '',
                        deliveryAddressExtra = '',
                        deliveryNeighborhood = '',
                        deliveryCity = '',
                        deliveryState = '',
                        deliveryZipCode = '',
                        deliveryCountry = '',
                        deliveryReference = ''):
        self.deliveryName = Utils.create_values(deliveryName, 'String')
        self.deliveryPhoneNumber = Utils.create_values(deliveryPhoneNumber, 'String')
        self.deliveryAddress = deliveryAddress if deliveryAddress else None
        self.deliveryAddressNumber = deliveryAddressNumber if deliveryAddressNumber else None
        self.deliveryAddressExtra = deliveryAddressExtra if deliveryAddressExtra else None
        self.deliveryNeighborhood = deliveryNeighborhood if deliveryNeighborhood else None
        self.deliveryCity = deliveryCity if deliveryCity else None
        self.deliveryState = deliveryState if deliveryState else None
        self.deliveryZipCode = deliveryZipCode if deliveryZipCode else None
        self.deliveryCountry = Utils.create_values(deliveryCountry, 'String')
        self.deliveryReference = Utils.create_values(deliveryReference, 'String') if deliveryReference else None

class OrderShippingItem:
    def __init__(self, id='', 
                        quantity='', 
                        salePrice='', 
                        productDescription='', 
                        giftWrap='', 
                        productEan='',
                        productCode=''):
        self.id = id if id else None
        self.quantity = quantity
        self.salePrice = salePrice
        self.productDescription = productDescription
        self.giftWrap = giftWrap
        self.productEan = productEan if productEan else None
        self.productCode = Utils.create_values(productCode, 'String') if productCode else None
        
class OrderShipping:
    def __init__(self, orderId='',
                        externalCode='',
                        method='',
                        trackingCode='',
                        trackingURL='',
                        shippingEstimate='',
                        exceptionShippingDate='',
                        exceptionShippingObservation='',
                        estimateDeliveryDate='', 
                        carrierName='', 
                        shippingDate='',
                        address=dict(),
                        itens=[]):
        self.orderId = Utils.create_values(orderId, 'Int64') if orderId else None
        self.externalCode = externalCode if externalCode else ''
        self.method = method if method else ''
        self.trackingCode = Utils.create_values(trackingCode, 'String')
        self.trackingURL = Utils.create_values(trackingURL, 'String')
        self.shippingDate = Utils.create_values(shippingDate, 'String')
        self.shippingEstimate = Utils.create_values(shippingEstimate, 'String')
        self.estimateDeliveryDate = Utils.create_values(estimateDeliveryDate, 'String')
        self.exceptionShippingDate = Utils.create_values(exceptionShippingDate, 'String')
        self.exceptionShippingObservation = Utils.create_values(exceptionShippingObservation, 'String')
        self.carrierName = carrierName if carrierName else None
        self.address = address if address else dict()
        self.itens = itens

class InvoiceItem:
    def __init__(self, id='', 
                        invoiceId='',
                        ordersProductsId='', 
                        cfop='',
                        productCode='', 
                        productName='', 
                        productEan='', 
                        quantity='', 
                        value='', 
                        discount='', 
                        totalValue=''):
        self.id = id if id else None
        self.invoiceId = invoiceId if invoiceId else None
        self.ordersProductsId = Utils.create_values(ordersProductsId, 'Int64') if ordersProductsId else None
        self.cfop = cfop
        self.productCode = Utils.create_values(productCode, 'String')
        self.productName = Utils.create_values(productName, 'String')
        self.productEan = Utils.create_values(productEan, 'String')
        self.quantity = quantity
        self.value = value
        self.discount = discount if discount else None
        self.totalValue = totalValue

class Invoice:
    def __init__(self, orderId='', 
                        _type='', 
                        number='', 
                        serie='', 
                        key='', 
                        totalItens='', 
                        totalValue='', 
                        discount='', 
                        issueDate='', 
                        invoiceXML='', 
                        status='', 
                        storeId='', 
                        orderForeignId='', 
                        payments=[], 
                        itens=[]):
        self.orderId = orderId if orderId else None
        self.type = _type if _type else None
        self.number = number
        self.serie = serie
        self.key = key
        self.totalItens = totalItens if totalItens else None
        self.totalValue = totalValue if totalValue else None
        self.discount = discount if discount else None
        self.issueDate = issueDate
        self.invoiceXML = invoiceXML
        self.status = status if status else None
        self.storeId = Utils.create_values(storeId, 'Int64')
        self.orderForeignId = Utils.create_values(orderForeignId, 'String')
        self.payments = payments
        self.itens = itens

class Order:
    def __init__(self,  id='',
                        storeId='', 
                        orderStatus='',
                        customerId='',
                        marketplaceId='',
                        createdAt='',
                        purchasedAt='',
                        approvedAt='',
                        updatedAt='',
                        estimatedDeliveryDate='',
                        totalAmount='',
                        totalFreight='',
                        totalDiscount='',
                        totalTax='',
                        totalItens='',
                        deliveredDate='',
                        contactName='',
                        contactTelephoneNumber='',
                        orderForeignId='',
                        channelOrigin='',
                        products=[],
                        invoices=[],
                        payments=[],
                        shippings=[],
                        customer='',
                        orderAddress=''):
        self.id = id if id else None
        self.storeId = storeId
        self.orderStatus = Utils.create_values(orderStatus, 'String')
        self.customerId = Utils.create_values(customerId, 'Int64') if customerId else None
        self.marketplaceId = Utils.create_values(marketplaceId, 'Int64') if marketplaceId else None
        self.createdAt = Utils.create_values(createdAt, 'String')
        self.purchasedAt = Utils.create_values(purchasedAt, 'String')
        self.approvedAt = Utils.create_values(approvedAt, 'String')
        self.updatedAt = Utils.create_values(updatedAt, 'String')
        self.estimatedDeliveryDate = Utils.create_values(estimatedDeliveryDate, 'String')
        self.totalAmount = Utils.create_values(totalAmount, 'Float64')
        self.totalFreight = Utils.create_values(totalFreight, 'Float64')
        self.totalDiscount = Utils.create_values(totalDiscount, 'Float64')
        self.totalTax = Utils.create_values(totalTax, 'Float64')
        self.totalItens = totalItens if totalItens else 0
        self.deliveredDate = Utils.create_values(deliveredDate, 'String')
        self.contactName = Utils.create_values(contactName, 'String')
        self.contactTelephoneNumber = Utils.create_values(contactTelephoneNumber, 'String') if contactTelephoneNumber else None
        self.orderForeignId = Utils.create_values(orderForeignId, 'String')
        self.channelOrigin = channelOrigin
        self.products = products
        self.invoices = invoices
        self.payments = payments
        self.shippings = shippings 
        self.customer = customer if customer else None
        self.orderAddress = orderAddress if orderAddress else None