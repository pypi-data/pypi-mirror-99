# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DhcpAllocationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_vip_address': 'str',
        'ingress_vip_address': 'str',
        'api_vip_lease': 'str',
        'ingress_vip_lease': 'str'
    }

    attribute_map = {
        'api_vip_address': 'api_vip_address',
        'ingress_vip_address': 'ingress_vip_address',
        'api_vip_lease': 'api_vip_lease',
        'ingress_vip_lease': 'ingress_vip_lease'
    }

    def __init__(self, api_vip_address=None, ingress_vip_address=None, api_vip_lease=None, ingress_vip_lease=None):  # noqa: E501
        """DhcpAllocationResponse - a model defined in Swagger"""  # noqa: E501

        self._api_vip_address = None
        self._ingress_vip_address = None
        self._api_vip_lease = None
        self._ingress_vip_lease = None
        self.discriminator = None

        self.api_vip_address = api_vip_address
        self.ingress_vip_address = ingress_vip_address
        if api_vip_lease is not None:
            self.api_vip_lease = api_vip_lease
        if ingress_vip_lease is not None:
            self.ingress_vip_lease = ingress_vip_lease

    @property
    def api_vip_address(self):
        """Gets the api_vip_address of this DhcpAllocationResponse.  # noqa: E501

        The IPv4 address that was allocated by DHCP for the API virtual IP.  # noqa: E501

        :return: The api_vip_address of this DhcpAllocationResponse.  # noqa: E501
        :rtype: str
        """
        return self._api_vip_address

    @api_vip_address.setter
    def api_vip_address(self, api_vip_address):
        """Sets the api_vip_address of this DhcpAllocationResponse.

        The IPv4 address that was allocated by DHCP for the API virtual IP.  # noqa: E501

        :param api_vip_address: The api_vip_address of this DhcpAllocationResponse.  # noqa: E501
        :type: str
        """
        if api_vip_address is None:
            raise ValueError("Invalid value for `api_vip_address`, must not be `None`")  # noqa: E501

        self._api_vip_address = api_vip_address

    @property
    def ingress_vip_address(self):
        """Gets the ingress_vip_address of this DhcpAllocationResponse.  # noqa: E501

        The IPv4 address that was allocated by DHCP for the Ingress virtual IP.  # noqa: E501

        :return: The ingress_vip_address of this DhcpAllocationResponse.  # noqa: E501
        :rtype: str
        """
        return self._ingress_vip_address

    @ingress_vip_address.setter
    def ingress_vip_address(self, ingress_vip_address):
        """Sets the ingress_vip_address of this DhcpAllocationResponse.

        The IPv4 address that was allocated by DHCP for the Ingress virtual IP.  # noqa: E501

        :param ingress_vip_address: The ingress_vip_address of this DhcpAllocationResponse.  # noqa: E501
        :type: str
        """
        if ingress_vip_address is None:
            raise ValueError("Invalid value for `ingress_vip_address`, must not be `None`")  # noqa: E501

        self._ingress_vip_address = ingress_vip_address

    @property
    def api_vip_lease(self):
        """Gets the api_vip_lease of this DhcpAllocationResponse.  # noqa: E501

        Contents of last acquired lease for API virtual IP.  # noqa: E501

        :return: The api_vip_lease of this DhcpAllocationResponse.  # noqa: E501
        :rtype: str
        """
        return self._api_vip_lease

    @api_vip_lease.setter
    def api_vip_lease(self, api_vip_lease):
        """Sets the api_vip_lease of this DhcpAllocationResponse.

        Contents of last acquired lease for API virtual IP.  # noqa: E501

        :param api_vip_lease: The api_vip_lease of this DhcpAllocationResponse.  # noqa: E501
        :type: str
        """

        self._api_vip_lease = api_vip_lease

    @property
    def ingress_vip_lease(self):
        """Gets the ingress_vip_lease of this DhcpAllocationResponse.  # noqa: E501

        Contents of last acquired lease for Ingress virtual IP.  # noqa: E501

        :return: The ingress_vip_lease of this DhcpAllocationResponse.  # noqa: E501
        :rtype: str
        """
        return self._ingress_vip_lease

    @ingress_vip_lease.setter
    def ingress_vip_lease(self, ingress_vip_lease):
        """Sets the ingress_vip_lease of this DhcpAllocationResponse.

        Contents of last acquired lease for Ingress virtual IP.  # noqa: E501

        :param ingress_vip_lease: The ingress_vip_lease of this DhcpAllocationResponse.  # noqa: E501
        :type: str
        """

        self._ingress_vip_lease = ingress_vip_lease

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DhcpAllocationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DhcpAllocationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
