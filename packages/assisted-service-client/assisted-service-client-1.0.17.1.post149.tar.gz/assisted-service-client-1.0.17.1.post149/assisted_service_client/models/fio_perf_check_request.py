# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FioPerfCheckRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'duration_threshold_ms': 'int',
        'exit_code': 'int'
    }

    attribute_map = {
        'path': 'path',
        'duration_threshold_ms': 'duration_threshold_ms',
        'exit_code': 'exit_code'
    }

    def __init__(self, path=None, duration_threshold_ms=None, exit_code=None):  # noqa: E501
        """FioPerfCheckRequest - a model defined in Swagger"""  # noqa: E501

        self._path = None
        self._duration_threshold_ms = None
        self._exit_code = None
        self.discriminator = None

        self.path = path
        self.duration_threshold_ms = duration_threshold_ms
        self.exit_code = exit_code

    @property
    def path(self):
        """Gets the path of this FioPerfCheckRequest.  # noqa: E501

        --filename argument for fio (expects a file or a block device path).  # noqa: E501

        :return: The path of this FioPerfCheckRequest.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this FioPerfCheckRequest.

        --filename argument for fio (expects a file or a block device path).  # noqa: E501

        :param path: The path of this FioPerfCheckRequest.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def duration_threshold_ms(self):
        """Gets the duration_threshold_ms of this FioPerfCheckRequest.  # noqa: E501

        The maximal fdatasync duration in ms that is considered acceptable.  # noqa: E501

        :return: The duration_threshold_ms of this FioPerfCheckRequest.  # noqa: E501
        :rtype: int
        """
        return self._duration_threshold_ms

    @duration_threshold_ms.setter
    def duration_threshold_ms(self, duration_threshold_ms):
        """Sets the duration_threshold_ms of this FioPerfCheckRequest.

        The maximal fdatasync duration in ms that is considered acceptable.  # noqa: E501

        :param duration_threshold_ms: The duration_threshold_ms of this FioPerfCheckRequest.  # noqa: E501
        :type: int
        """
        if duration_threshold_ms is None:
            raise ValueError("Invalid value for `duration_threshold_ms`, must not be `None`")  # noqa: E501

        self._duration_threshold_ms = duration_threshold_ms

    @property
    def exit_code(self):
        """Gets the exit_code of this FioPerfCheckRequest.  # noqa: E501

        Exit code to return in case of an error.  # noqa: E501

        :return: The exit_code of this FioPerfCheckRequest.  # noqa: E501
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this FioPerfCheckRequest.

        Exit code to return in case of an error.  # noqa: E501

        :param exit_code: The exit_code of this FioPerfCheckRequest.  # noqa: E501
        :type: int
        """
        if exit_code is None:
            raise ValueError("Invalid value for `exit_code`, must not be `None`")  # noqa: E501

        self._exit_code = exit_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FioPerfCheckRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FioPerfCheckRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
