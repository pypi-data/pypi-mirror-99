# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ContainerImageAvailability(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'size_bytes': 'float',
        'time': 'float',
        'download_rate': 'float',
        'result': 'ContainerImageAvailabilityResult'
    }

    attribute_map = {
        'name': 'name',
        'size_bytes': 'size_bytes',
        'time': 'time',
        'download_rate': 'download_rate',
        'result': 'result'
    }

    def __init__(self, name=None, size_bytes=None, time=None, download_rate=None, result=None):  # noqa: E501
        """ContainerImageAvailability - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._size_bytes = None
        self._time = None
        self._download_rate = None
        self._result = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if size_bytes is not None:
            self.size_bytes = size_bytes
        if time is not None:
            self.time = time
        if download_rate is not None:
            self.download_rate = download_rate
        if result is not None:
            self.result = result

    @property
    def name(self):
        """Gets the name of this ContainerImageAvailability.  # noqa: E501

        A fully qualified image name (FQIN).  # noqa: E501

        :return: The name of this ContainerImageAvailability.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContainerImageAvailability.

        A fully qualified image name (FQIN).  # noqa: E501

        :param name: The name of this ContainerImageAvailability.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size_bytes(self):
        """Gets the size_bytes of this ContainerImageAvailability.  # noqa: E501

        Size of the image in bytes.  # noqa: E501

        :return: The size_bytes of this ContainerImageAvailability.  # noqa: E501
        :rtype: float
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this ContainerImageAvailability.

        Size of the image in bytes.  # noqa: E501

        :param size_bytes: The size_bytes of this ContainerImageAvailability.  # noqa: E501
        :type: float
        """

        self._size_bytes = size_bytes

    @property
    def time(self):
        """Gets the time of this ContainerImageAvailability.  # noqa: E501

        Seconds it took to pull the image.  # noqa: E501

        :return: The time of this ContainerImageAvailability.  # noqa: E501
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ContainerImageAvailability.

        Seconds it took to pull the image.  # noqa: E501

        :param time: The time of this ContainerImageAvailability.  # noqa: E501
        :type: float
        """

        self._time = time

    @property
    def download_rate(self):
        """Gets the download_rate of this ContainerImageAvailability.  # noqa: E501

        The rate of size/time in seconds MBps.  # noqa: E501

        :return: The download_rate of this ContainerImageAvailability.  # noqa: E501
        :rtype: float
        """
        return self._download_rate

    @download_rate.setter
    def download_rate(self, download_rate):
        """Sets the download_rate of this ContainerImageAvailability.

        The rate of size/time in seconds MBps.  # noqa: E501

        :param download_rate: The download_rate of this ContainerImageAvailability.  # noqa: E501
        :type: float
        """

        self._download_rate = download_rate

    @property
    def result(self):
        """Gets the result of this ContainerImageAvailability.  # noqa: E501


        :return: The result of this ContainerImageAvailability.  # noqa: E501
        :rtype: ContainerImageAvailabilityResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ContainerImageAvailability.


        :param result: The result of this ContainerImageAvailability.  # noqa: E501
        :type: ContainerImageAvailabilityResult
        """

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContainerImageAvailability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContainerImageAvailability):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
