# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MacInterfaceMapInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mac_address': 'str',
        'logical_nic_name': 'str'
    }

    attribute_map = {
        'mac_address': 'mac_address',
        'logical_nic_name': 'logical_nic_name'
    }

    def __init__(self, mac_address=None, logical_nic_name=None):  # noqa: E501
        """MacInterfaceMapInner - a model defined in Swagger"""  # noqa: E501

        self._mac_address = None
        self._logical_nic_name = None
        self.discriminator = None

        if mac_address is not None:
            self.mac_address = mac_address
        if logical_nic_name is not None:
            self.logical_nic_name = logical_nic_name

    @property
    def mac_address(self):
        """Gets the mac_address of this MacInterfaceMapInner.  # noqa: E501

        mac address present on the host  # noqa: E501

        :return: The mac_address of this MacInterfaceMapInner.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this MacInterfaceMapInner.

        mac address present on the host  # noqa: E501

        :param mac_address: The mac_address of this MacInterfaceMapInner.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def logical_nic_name(self):
        """Gets the logical_nic_name of this MacInterfaceMapInner.  # noqa: E501

        nic name used in the yaml, which relates 1:1 to the mac address  # noqa: E501

        :return: The logical_nic_name of this MacInterfaceMapInner.  # noqa: E501
        :rtype: str
        """
        return self._logical_nic_name

    @logical_nic_name.setter
    def logical_nic_name(self, logical_nic_name):
        """Sets the logical_nic_name of this MacInterfaceMapInner.

        nic name used in the yaml, which relates 1:1 to the mac address  # noqa: E501

        :param logical_nic_name: The logical_nic_name of this MacInterfaceMapInner.  # noqa: E501
        :type: str
        """

        self._logical_nic_name = logical_nic_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MacInterfaceMapInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MacInterfaceMapInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
