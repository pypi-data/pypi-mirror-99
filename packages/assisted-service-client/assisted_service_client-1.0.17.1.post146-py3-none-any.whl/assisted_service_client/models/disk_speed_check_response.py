# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DiskSpeedCheckResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'io_sync_duration': 'int',
        'path': 'str'
    }

    attribute_map = {
        'io_sync_duration': 'io_sync_duration',
        'path': 'path'
    }

    def __init__(self, io_sync_duration=None, path=None):  # noqa: E501
        """DiskSpeedCheckResponse - a model defined in Swagger"""  # noqa: E501

        self._io_sync_duration = None
        self._path = None
        self.discriminator = None

        if io_sync_duration is not None:
            self.io_sync_duration = io_sync_duration
        if path is not None:
            self.path = path

    @property
    def io_sync_duration(self):
        """Gets the io_sync_duration of this DiskSpeedCheckResponse.  # noqa: E501

        The 99th percentile of fdatasync durations in milliseconds.  # noqa: E501

        :return: The io_sync_duration of this DiskSpeedCheckResponse.  # noqa: E501
        :rtype: int
        """
        return self._io_sync_duration

    @io_sync_duration.setter
    def io_sync_duration(self, io_sync_duration):
        """Sets the io_sync_duration of this DiskSpeedCheckResponse.

        The 99th percentile of fdatasync durations in milliseconds.  # noqa: E501

        :param io_sync_duration: The io_sync_duration of this DiskSpeedCheckResponse.  # noqa: E501
        :type: int
        """

        self._io_sync_duration = io_sync_duration

    @property
    def path(self):
        """Gets the path of this DiskSpeedCheckResponse.  # noqa: E501

        The device path.  # noqa: E501

        :return: The path of this DiskSpeedCheckResponse.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this DiskSpeedCheckResponse.

        The device path.  # noqa: E501

        :param path: The path of this DiskSpeedCheckResponse.  # noqa: E501
        :type: str
        """

        self._path = path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiskSpeedCheckResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiskSpeedCheckResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
