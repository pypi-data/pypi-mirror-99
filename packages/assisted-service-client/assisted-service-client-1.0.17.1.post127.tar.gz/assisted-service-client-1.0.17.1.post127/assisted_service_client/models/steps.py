# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Steps(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'next_instruction_seconds': 'int',
        'post_step_action': 'str',
        'instructions': 'list[Step]'
    }

    attribute_map = {
        'next_instruction_seconds': 'next_instruction_seconds',
        'post_step_action': 'post_step_action',
        'instructions': 'instructions'
    }

    def __init__(self, next_instruction_seconds=None, post_step_action='continue', instructions=None):  # noqa: E501
        """Steps - a model defined in Swagger"""  # noqa: E501

        self._next_instruction_seconds = None
        self._post_step_action = None
        self._instructions = None
        self.discriminator = None

        if next_instruction_seconds is not None:
            self.next_instruction_seconds = next_instruction_seconds
        if post_step_action is not None:
            self.post_step_action = post_step_action
        if instructions is not None:
            self.instructions = instructions

    @property
    def next_instruction_seconds(self):
        """Gets the next_instruction_seconds of this Steps.  # noqa: E501


        :return: The next_instruction_seconds of this Steps.  # noqa: E501
        :rtype: int
        """
        return self._next_instruction_seconds

    @next_instruction_seconds.setter
    def next_instruction_seconds(self, next_instruction_seconds):
        """Sets the next_instruction_seconds of this Steps.


        :param next_instruction_seconds: The next_instruction_seconds of this Steps.  # noqa: E501
        :type: int
        """

        self._next_instruction_seconds = next_instruction_seconds

    @property
    def post_step_action(self):
        """Gets the post_step_action of this Steps.  # noqa: E501

        What to do after finishing to run step instructions  # noqa: E501

        :return: The post_step_action of this Steps.  # noqa: E501
        :rtype: str
        """
        return self._post_step_action

    @post_step_action.setter
    def post_step_action(self, post_step_action):
        """Sets the post_step_action of this Steps.

        What to do after finishing to run step instructions  # noqa: E501

        :param post_step_action: The post_step_action of this Steps.  # noqa: E501
        :type: str
        """
        allowed_values = ["exit", "continue"]  # noqa: E501
        if post_step_action not in allowed_values:
            raise ValueError(
                "Invalid value for `post_step_action` ({0}), must be one of {1}"  # noqa: E501
                .format(post_step_action, allowed_values)
            )

        self._post_step_action = post_step_action

    @property
    def instructions(self):
        """Gets the instructions of this Steps.  # noqa: E501


        :return: The instructions of this Steps.  # noqa: E501
        :rtype: list[Step]
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this Steps.


        :param instructions: The instructions of this Steps.  # noqa: E501
        :type: list[Step]
        """

        self._instructions = instructions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Steps, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Steps):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
