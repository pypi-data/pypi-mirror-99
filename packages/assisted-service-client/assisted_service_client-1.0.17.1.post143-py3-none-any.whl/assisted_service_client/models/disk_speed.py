# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DiskSpeed(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tested': 'bool',
        'exit_code': 'int',
        'speed_ms': 'int'
    }

    attribute_map = {
        'tested': 'tested',
        'exit_code': 'exit_code',
        'speed_ms': 'speed_ms'
    }

    def __init__(self, tested=None, exit_code=None, speed_ms=None):  # noqa: E501
        """DiskSpeed - a model defined in Swagger"""  # noqa: E501

        self._tested = None
        self._exit_code = None
        self._speed_ms = None
        self.discriminator = None

        if tested is not None:
            self.tested = tested
        if exit_code is not None:
            self.exit_code = exit_code
        if speed_ms is not None:
            self.speed_ms = speed_ms

    @property
    def tested(self):
        """Gets the tested of this DiskSpeed.  # noqa: E501


        :return: The tested of this DiskSpeed.  # noqa: E501
        :rtype: bool
        """
        return self._tested

    @tested.setter
    def tested(self, tested):
        """Sets the tested of this DiskSpeed.


        :param tested: The tested of this DiskSpeed.  # noqa: E501
        :type: bool
        """

        self._tested = tested

    @property
    def exit_code(self):
        """Gets the exit_code of this DiskSpeed.  # noqa: E501


        :return: The exit_code of this DiskSpeed.  # noqa: E501
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this DiskSpeed.


        :param exit_code: The exit_code of this DiskSpeed.  # noqa: E501
        :type: int
        """

        self._exit_code = exit_code

    @property
    def speed_ms(self):
        """Gets the speed_ms of this DiskSpeed.  # noqa: E501


        :return: The speed_ms of this DiskSpeed.  # noqa: E501
        :rtype: int
        """
        return self._speed_ms

    @speed_ms.setter
    def speed_ms(self, speed_ms):
        """Sets the speed_ms of this DiskSpeed.


        :param speed_ms: The speed_ms of this DiskSpeed.  # noqa: E501
        :type: int
        """

        self._speed_ms = speed_ms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiskSpeed, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiskSpeed):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
