# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OperatorProperty(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'data_type': 'str',
        'mandatory': 'bool',
        'options': 'list[str]',
        'description': 'str',
        'default_value': 'str'
    }

    attribute_map = {
        'name': 'name',
        'data_type': 'data_type',
        'mandatory': 'mandatory',
        'options': 'options',
        'description': 'description',
        'default_value': 'default_value'
    }

    def __init__(self, name=None, data_type=None, mandatory=None, options=None, description=None, default_value=None):  # noqa: E501
        """OperatorProperty - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._data_type = None
        self._mandatory = None
        self._options = None
        self._description = None
        self._default_value = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if data_type is not None:
            self.data_type = data_type
        if mandatory is not None:
            self.mandatory = mandatory
        if options is not None:
            self.options = options
        if description is not None:
            self.description = description
        if default_value is not None:
            self.default_value = default_value

    @property
    def name(self):
        """Gets the name of this OperatorProperty.  # noqa: E501

        Name of the property  # noqa: E501

        :return: The name of this OperatorProperty.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OperatorProperty.

        Name of the property  # noqa: E501

        :param name: The name of this OperatorProperty.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def data_type(self):
        """Gets the data_type of this OperatorProperty.  # noqa: E501

        Type of the property  # noqa: E501

        :return: The data_type of this OperatorProperty.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this OperatorProperty.

        Type of the property  # noqa: E501

        :param data_type: The data_type of this OperatorProperty.  # noqa: E501
        :type: str
        """
        allowed_values = ["boolean", "string", "integer", "float"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"  # noqa: E501
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def mandatory(self):
        """Gets the mandatory of this OperatorProperty.  # noqa: E501

        Indicates whether the property is reqired  # noqa: E501

        :return: The mandatory of this OperatorProperty.  # noqa: E501
        :rtype: bool
        """
        return self._mandatory

    @mandatory.setter
    def mandatory(self, mandatory):
        """Sets the mandatory of this OperatorProperty.

        Indicates whether the property is reqired  # noqa: E501

        :param mandatory: The mandatory of this OperatorProperty.  # noqa: E501
        :type: bool
        """

        self._mandatory = mandatory

    @property
    def options(self):
        """Gets the options of this OperatorProperty.  # noqa: E501

        Values to select from  # noqa: E501

        :return: The options of this OperatorProperty.  # noqa: E501
        :rtype: list[str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this OperatorProperty.

        Values to select from  # noqa: E501

        :param options: The options of this OperatorProperty.  # noqa: E501
        :type: list[str]
        """

        self._options = options

    @property
    def description(self):
        """Gets the description of this OperatorProperty.  # noqa: E501

        Description of a property  # noqa: E501

        :return: The description of this OperatorProperty.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OperatorProperty.

        Description of a property  # noqa: E501

        :param description: The description of this OperatorProperty.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def default_value(self):
        """Gets the default_value of this OperatorProperty.  # noqa: E501

        Default value for the property  # noqa: E501

        :return: The default_value of this OperatorProperty.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this OperatorProperty.

        Default value for the property  # noqa: E501

        :param default_value: The default_value of this OperatorProperty.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OperatorProperty, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperatorProperty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
