# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainResolutionResponseResolutions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain_name': 'str',
        'ipv4_addresses': 'list[str]',
        'ipv6_addresses': 'list[str]'
    }

    attribute_map = {
        'domain_name': 'domain_name',
        'ipv4_addresses': 'ipv4_addresses',
        'ipv6_addresses': 'ipv6_addresses'
    }

    def __init__(self, domain_name=None, ipv4_addresses=None, ipv6_addresses=None):  # noqa: E501
        """DomainResolutionResponseResolutions - a model defined in Swagger"""  # noqa: E501

        self._domain_name = None
        self._ipv4_addresses = None
        self._ipv6_addresses = None
        self.discriminator = None

        self.domain_name = domain_name
        if ipv4_addresses is not None:
            self.ipv4_addresses = ipv4_addresses
        if ipv6_addresses is not None:
            self.ipv6_addresses = ipv6_addresses

    @property
    def domain_name(self):
        """Gets the domain_name of this DomainResolutionResponseResolutions.  # noqa: E501

        The domain that was resolved  # noqa: E501

        :return: The domain_name of this DomainResolutionResponseResolutions.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this DomainResolutionResponseResolutions.

        The domain that was resolved  # noqa: E501

        :param domain_name: The domain_name of this DomainResolutionResponseResolutions.  # noqa: E501
        :type: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")  # noqa: E501

        self._domain_name = domain_name

    @property
    def ipv4_addresses(self):
        """Gets the ipv4_addresses of this DomainResolutionResponseResolutions.  # noqa: E501

        The IPv4 addresses of the domain, empty if none  # noqa: E501

        :return: The ipv4_addresses of this DomainResolutionResponseResolutions.  # noqa: E501
        :rtype: list[str]
        """
        return self._ipv4_addresses

    @ipv4_addresses.setter
    def ipv4_addresses(self, ipv4_addresses):
        """Sets the ipv4_addresses of this DomainResolutionResponseResolutions.

        The IPv4 addresses of the domain, empty if none  # noqa: E501

        :param ipv4_addresses: The ipv4_addresses of this DomainResolutionResponseResolutions.  # noqa: E501
        :type: list[str]
        """

        self._ipv4_addresses = ipv4_addresses

    @property
    def ipv6_addresses(self):
        """Gets the ipv6_addresses of this DomainResolutionResponseResolutions.  # noqa: E501

        The IPv6 addresses of the domain, empty if none  # noqa: E501

        :return: The ipv6_addresses of this DomainResolutionResponseResolutions.  # noqa: E501
        :rtype: list[str]
        """
        return self._ipv6_addresses

    @ipv6_addresses.setter
    def ipv6_addresses(self, ipv6_addresses):
        """Sets the ipv6_addresses of this DomainResolutionResponseResolutions.

        The IPv6 addresses of the domain, empty if none  # noqa: E501

        :param ipv6_addresses: The ipv6_addresses of this DomainResolutionResponseResolutions.  # noqa: E501
        :type: list[str]
        """

        self._ipv6_addresses = ipv6_addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainResolutionResponseResolutions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainResolutionResponseResolutions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
