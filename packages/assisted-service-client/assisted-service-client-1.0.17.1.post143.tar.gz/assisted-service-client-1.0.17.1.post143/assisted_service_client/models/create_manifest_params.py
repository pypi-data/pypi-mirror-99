# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreateManifestParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'folder': 'str',
        'file_name': 'str',
        'content': 'str'
    }

    attribute_map = {
        'folder': 'folder',
        'file_name': 'file_name',
        'content': 'content'
    }

    def __init__(self, folder='manifests', file_name=None, content=None):  # noqa: E501
        """CreateManifestParams - a model defined in Swagger"""  # noqa: E501

        self._folder = None
        self._file_name = None
        self._content = None
        self.discriminator = None

        if folder is not None:
            self.folder = folder
        self.file_name = file_name
        self.content = content

    @property
    def folder(self):
        """Gets the folder of this CreateManifestParams.  # noqa: E501

        The folder that contains the files. Manifests can be placed in 'manifests' or 'openshift' directories.  # noqa: E501

        :return: The folder of this CreateManifestParams.  # noqa: E501
        :rtype: str
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this CreateManifestParams.

        The folder that contains the files. Manifests can be placed in 'manifests' or 'openshift' directories.  # noqa: E501

        :param folder: The folder of this CreateManifestParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["manifests", "openshift"]  # noqa: E501
        if folder not in allowed_values:
            raise ValueError(
                "Invalid value for `folder` ({0}), must be one of {1}"  # noqa: E501
                .format(folder, allowed_values)
            )

        self._folder = folder

    @property
    def file_name(self):
        """Gets the file_name of this CreateManifestParams.  # noqa: E501

        The name of the manifest to customize the installed OCP cluster.  # noqa: E501

        :return: The file_name of this CreateManifestParams.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this CreateManifestParams.

        The name of the manifest to customize the installed OCP cluster.  # noqa: E501

        :param file_name: The file_name of this CreateManifestParams.  # noqa: E501
        :type: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def content(self):
        """Gets the content of this CreateManifestParams.  # noqa: E501

        base64 encoded manifest content.  # noqa: E501

        :return: The content of this CreateManifestParams.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CreateManifestParams.

        base64 encoded manifest content.  # noqa: E501

        :param content: The content of this CreateManifestParams.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateManifestParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateManifestParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
