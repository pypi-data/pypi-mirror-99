# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OpenshiftVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'release_image': 'str',
        'rhcos_image': 'str',
        'rhcos_version': 'str',
        'support_level': 'str'
    }

    attribute_map = {
        'display_name': 'display_name',
        'release_image': 'release_image',
        'rhcos_image': 'rhcos_image',
        'rhcos_version': 'rhcos_version',
        'support_level': 'support_level'
    }

    def __init__(self, display_name=None, release_image=None, rhcos_image=None, rhcos_version=None, support_level=None):  # noqa: E501
        """OpenshiftVersion - a model defined in Swagger"""  # noqa: E501

        self._display_name = None
        self._release_image = None
        self._rhcos_image = None
        self._rhcos_version = None
        self._support_level = None
        self.discriminator = None

        self.display_name = display_name
        self.release_image = release_image
        self.rhcos_image = rhcos_image
        self.rhcos_version = rhcos_version
        self.support_level = support_level

    @property
    def display_name(self):
        """Gets the display_name of this OpenshiftVersion.  # noqa: E501

        Name of the version to be presented to the user.  # noqa: E501

        :return: The display_name of this OpenshiftVersion.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this OpenshiftVersion.

        Name of the version to be presented to the user.  # noqa: E501

        :param display_name: The display_name of this OpenshiftVersion.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def release_image(self):
        """Gets the release_image of this OpenshiftVersion.  # noqa: E501

        The installation image of the OpenShift cluster.  # noqa: E501

        :return: The release_image of this OpenshiftVersion.  # noqa: E501
        :rtype: str
        """
        return self._release_image

    @release_image.setter
    def release_image(self, release_image):
        """Sets the release_image of this OpenshiftVersion.

        The installation image of the OpenShift cluster.  # noqa: E501

        :param release_image: The release_image of this OpenshiftVersion.  # noqa: E501
        :type: str
        """
        if release_image is None:
            raise ValueError("Invalid value for `release_image`, must not be `None`")  # noqa: E501

        self._release_image = release_image

    @property
    def rhcos_image(self):
        """Gets the rhcos_image of this OpenshiftVersion.  # noqa: E501

        The base RHCOS image used for the discovery iso.  # noqa: E501

        :return: The rhcos_image of this OpenshiftVersion.  # noqa: E501
        :rtype: str
        """
        return self._rhcos_image

    @rhcos_image.setter
    def rhcos_image(self, rhcos_image):
        """Sets the rhcos_image of this OpenshiftVersion.

        The base RHCOS image used for the discovery iso.  # noqa: E501

        :param rhcos_image: The rhcos_image of this OpenshiftVersion.  # noqa: E501
        :type: str
        """
        if rhcos_image is None:
            raise ValueError("Invalid value for `rhcos_image`, must not be `None`")  # noqa: E501

        self._rhcos_image = rhcos_image

    @property
    def rhcos_version(self):
        """Gets the rhcos_version of this OpenshiftVersion.  # noqa: E501

        Build ID of the RHCOS image.  # noqa: E501

        :return: The rhcos_version of this OpenshiftVersion.  # noqa: E501
        :rtype: str
        """
        return self._rhcos_version

    @rhcos_version.setter
    def rhcos_version(self, rhcos_version):
        """Sets the rhcos_version of this OpenshiftVersion.

        Build ID of the RHCOS image.  # noqa: E501

        :param rhcos_version: The rhcos_version of this OpenshiftVersion.  # noqa: E501
        :type: str
        """
        if rhcos_version is None:
            raise ValueError("Invalid value for `rhcos_version`, must not be `None`")  # noqa: E501

        self._rhcos_version = rhcos_version

    @property
    def support_level(self):
        """Gets the support_level of this OpenshiftVersion.  # noqa: E501

        Level of support of the version.  # noqa: E501

        :return: The support_level of this OpenshiftVersion.  # noqa: E501
        :rtype: str
        """
        return self._support_level

    @support_level.setter
    def support_level(self, support_level):
        """Sets the support_level of this OpenshiftVersion.

        Level of support of the version.  # noqa: E501

        :param support_level: The support_level of this OpenshiftVersion.  # noqa: E501
        :type: str
        """
        if support_level is None:
            raise ValueError("Invalid value for `support_level`, must not be `None`")  # noqa: E501
        allowed_values = ["beta", "production"]  # noqa: E501
        if support_level not in allowed_values:
            raise ValueError(
                "Invalid value for `support_level` ({0}), must be one of {1}"  # noqa: E501
                .format(support_level, allowed_values)
            )

        self._support_level = support_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenshiftVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenshiftVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
