# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MonitoredOperator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'name': 'str',
        'namespace': 'str',
        'subscription_name': 'str',
        'operator_type': 'OperatorType',
        'properties': 'str',
        'timeout_seconds': 'int',
        'status': 'OperatorStatus',
        'status_info': 'str',
        'status_updated_at': 'datetime'
    }

    attribute_map = {
        'cluster_id': 'cluster_id',
        'name': 'name',
        'namespace': 'namespace',
        'subscription_name': 'subscription_name',
        'operator_type': 'operator_type',
        'properties': 'properties',
        'timeout_seconds': 'timeout_seconds',
        'status': 'status',
        'status_info': 'status_info',
        'status_updated_at': 'status_updated_at'
    }

    def __init__(self, cluster_id=None, name=None, namespace=None, subscription_name=None, operator_type=None, properties=None, timeout_seconds=None, status=None, status_info=None, status_updated_at=None):  # noqa: E501
        """MonitoredOperator - a model defined in Swagger"""  # noqa: E501

        self._cluster_id = None
        self._name = None
        self._namespace = None
        self._subscription_name = None
        self._operator_type = None
        self._properties = None
        self._timeout_seconds = None
        self._status = None
        self._status_info = None
        self._status_updated_at = None
        self.discriminator = None

        if cluster_id is not None:
            self.cluster_id = cluster_id
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if subscription_name is not None:
            self.subscription_name = subscription_name
        if operator_type is not None:
            self.operator_type = operator_type
        if properties is not None:
            self.properties = properties
        if timeout_seconds is not None:
            self.timeout_seconds = timeout_seconds
        if status is not None:
            self.status = status
        if status_info is not None:
            self.status_info = status_info
        if status_updated_at is not None:
            self.status_updated_at = status_updated_at

    @property
    def cluster_id(self):
        """Gets the cluster_id of this MonitoredOperator.  # noqa: E501

        The cluster that this operator is associated with.  # noqa: E501

        :return: The cluster_id of this MonitoredOperator.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this MonitoredOperator.

        The cluster that this operator is associated with.  # noqa: E501

        :param cluster_id: The cluster_id of this MonitoredOperator.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def name(self):
        """Gets the name of this MonitoredOperator.  # noqa: E501

        Unique name of the operator.  # noqa: E501

        :return: The name of this MonitoredOperator.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MonitoredOperator.

        Unique name of the operator.  # noqa: E501

        :param name: The name of this MonitoredOperator.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this MonitoredOperator.  # noqa: E501

        Namespace where to deploy an operator. Only some operators require a namespace.  # noqa: E501

        :return: The namespace of this MonitoredOperator.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this MonitoredOperator.

        Namespace where to deploy an operator. Only some operators require a namespace.  # noqa: E501

        :param namespace: The namespace of this MonitoredOperator.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def subscription_name(self):
        """Gets the subscription_name of this MonitoredOperator.  # noqa: E501

        The name of the subscription of the operator.  # noqa: E501

        :return: The subscription_name of this MonitoredOperator.  # noqa: E501
        :rtype: str
        """
        return self._subscription_name

    @subscription_name.setter
    def subscription_name(self, subscription_name):
        """Sets the subscription_name of this MonitoredOperator.

        The name of the subscription of the operator.  # noqa: E501

        :param subscription_name: The subscription_name of this MonitoredOperator.  # noqa: E501
        :type: str
        """

        self._subscription_name = subscription_name

    @property
    def operator_type(self):
        """Gets the operator_type of this MonitoredOperator.  # noqa: E501


        :return: The operator_type of this MonitoredOperator.  # noqa: E501
        :rtype: OperatorType
        """
        return self._operator_type

    @operator_type.setter
    def operator_type(self, operator_type):
        """Sets the operator_type of this MonitoredOperator.


        :param operator_type: The operator_type of this MonitoredOperator.  # noqa: E501
        :type: OperatorType
        """

        self._operator_type = operator_type

    @property
    def properties(self):
        """Gets the properties of this MonitoredOperator.  # noqa: E501

        Blob of operator-dependent parameters that are required for installation.  # noqa: E501

        :return: The properties of this MonitoredOperator.  # noqa: E501
        :rtype: str
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this MonitoredOperator.

        Blob of operator-dependent parameters that are required for installation.  # noqa: E501

        :param properties: The properties of this MonitoredOperator.  # noqa: E501
        :type: str
        """

        self._properties = properties

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this MonitoredOperator.  # noqa: E501

        Positive number represents a timeout in seconds for the operator to be available.  # noqa: E501

        :return: The timeout_seconds of this MonitoredOperator.  # noqa: E501
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this MonitoredOperator.

        Positive number represents a timeout in seconds for the operator to be available.  # noqa: E501

        :param timeout_seconds: The timeout_seconds of this MonitoredOperator.  # noqa: E501
        :type: int
        """

        self._timeout_seconds = timeout_seconds

    @property
    def status(self):
        """Gets the status of this MonitoredOperator.  # noqa: E501


        :return: The status of this MonitoredOperator.  # noqa: E501
        :rtype: OperatorStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MonitoredOperator.


        :param status: The status of this MonitoredOperator.  # noqa: E501
        :type: OperatorStatus
        """

        self._status = status

    @property
    def status_info(self):
        """Gets the status_info of this MonitoredOperator.  # noqa: E501

        Detailed information about the operator state.  # noqa: E501

        :return: The status_info of this MonitoredOperator.  # noqa: E501
        :rtype: str
        """
        return self._status_info

    @status_info.setter
    def status_info(self, status_info):
        """Sets the status_info of this MonitoredOperator.

        Detailed information about the operator state.  # noqa: E501

        :param status_info: The status_info of this MonitoredOperator.  # noqa: E501
        :type: str
        """

        self._status_info = status_info

    @property
    def status_updated_at(self):
        """Gets the status_updated_at of this MonitoredOperator.  # noqa: E501

        Time at which the operator was last updated.  # noqa: E501

        :return: The status_updated_at of this MonitoredOperator.  # noqa: E501
        :rtype: datetime
        """
        return self._status_updated_at

    @status_updated_at.setter
    def status_updated_at(self, status_updated_at):
        """Sets the status_updated_at of this MonitoredOperator.

        Time at which the operator was last updated.  # noqa: E501

        :param status_updated_at: The status_updated_at of this MonitoredOperator.  # noqa: E501
        :type: datetime
        """

        self._status_updated_at = status_updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MonitoredOperator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MonitoredOperator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
