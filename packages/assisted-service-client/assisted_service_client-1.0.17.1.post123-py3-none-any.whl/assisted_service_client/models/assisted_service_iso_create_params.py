# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AssistedServiceIsoCreateParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'openshift_version': 'str',
        'ssh_public_key': 'str',
        'pull_secret': 'str'
    }

    attribute_map = {
        'openshift_version': 'openshift_version',
        'ssh_public_key': 'ssh_public_key',
        'pull_secret': 'pull_secret'
    }

    def __init__(self, openshift_version=None, ssh_public_key=None, pull_secret=None):  # noqa: E501
        """AssistedServiceIsoCreateParams - a model defined in Swagger"""  # noqa: E501

        self._openshift_version = None
        self._ssh_public_key = None
        self._pull_secret = None
        self.discriminator = None

        if openshift_version is not None:
            self.openshift_version = openshift_version
        if ssh_public_key is not None:
            self.ssh_public_key = ssh_public_key
        if pull_secret is not None:
            self.pull_secret = pull_secret

    @property
    def openshift_version(self):
        """Gets the openshift_version of this AssistedServiceIsoCreateParams.  # noqa: E501

        Version of the OpenShift cluster.  # noqa: E501

        :return: The openshift_version of this AssistedServiceIsoCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._openshift_version

    @openshift_version.setter
    def openshift_version(self, openshift_version):
        """Sets the openshift_version of this AssistedServiceIsoCreateParams.

        Version of the OpenShift cluster.  # noqa: E501

        :param openshift_version: The openshift_version of this AssistedServiceIsoCreateParams.  # noqa: E501
        :type: str
        """

        self._openshift_version = openshift_version

    @property
    def ssh_public_key(self):
        """Gets the ssh_public_key of this AssistedServiceIsoCreateParams.  # noqa: E501

        SSH public key for debugging the installation.  # noqa: E501

        :return: The ssh_public_key of this AssistedServiceIsoCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._ssh_public_key

    @ssh_public_key.setter
    def ssh_public_key(self, ssh_public_key):
        """Sets the ssh_public_key of this AssistedServiceIsoCreateParams.

        SSH public key for debugging the installation.  # noqa: E501

        :param ssh_public_key: The ssh_public_key of this AssistedServiceIsoCreateParams.  # noqa: E501
        :type: str
        """

        self._ssh_public_key = ssh_public_key

    @property
    def pull_secret(self):
        """Gets the pull_secret of this AssistedServiceIsoCreateParams.  # noqa: E501

        The pull secret obtained from Red Hat OpenShift Cluster Manager at cloud.redhat.com/openshift/install/pull-secret.  # noqa: E501

        :return: The pull_secret of this AssistedServiceIsoCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._pull_secret

    @pull_secret.setter
    def pull_secret(self, pull_secret):
        """Sets the pull_secret of this AssistedServiceIsoCreateParams.

        The pull secret obtained from Red Hat OpenShift Cluster Manager at cloud.redhat.com/openshift/install/pull-secret.  # noqa: E501

        :param pull_secret: The pull_secret of this AssistedServiceIsoCreateParams.  # noqa: E501
        :type: str
        """

        self._pull_secret = pull_secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssistedServiceIsoCreateParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssistedServiceIsoCreateParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
