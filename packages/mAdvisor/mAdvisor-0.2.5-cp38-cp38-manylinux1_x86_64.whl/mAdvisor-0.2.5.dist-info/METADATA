Metadata-Version: 2.1
Name: mAdvisor
Version: 0.2.5
Summary: An automated AI/ML solution from Marlabs
Home-page: https://www.marlabs.com/platforms/cognitive-computing-AI-ML-platform/
Author: Marlabs Inc.
Author-email: mAdvisor_AutoML@marlabs.com
Maintainer: Rahul Sivankutty
Maintainer-email: Rahul.Sivankutty@marlabs.com
License: UNKNOWN
Keywords: machine learning,data science,automated machine learning,regressor,regressors,regression,classification,classifiers,classifier,estimators,predictors,XGBoost,Random Forest,sklearn,scikit-learn,analytics,analysts,feature importancesanalytics,artificial intelligence,ensembling,feature engineering,feature extraction,feature selection,production,pandas,dataframes,deep learning,tensorflow,deeplearning,lightgbm,gradient boosting,gbm,keras,production ready
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: POSIX :: Linux
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: cryptography (==2.8)
Requires-Dist: DateTime (==4.3)
Requires-Dist: future (==0.17.1)
Requires-Dist: humanize (==0.5.1)
Requires-Dist: imbalanced-learn (==0.6.1)
Requires-Dist: imblearn (==0.0)
Requires-Dist: Jinja2 (==2.10)
Requires-Dist: joblib (==0.16.0)
Requires-Dist: lightgbm (==2.3.1)
Requires-Dist: matplotlib (==3.3.4)
Requires-Dist: numpy (==1.19.5)
Requires-Dist: pandas (==1.1.5)
Requires-Dist: Pint (==0.10.1)
Requires-Dist: pyspark (==3.0.2)
Requires-Dist: requests (==2.25.1)
Requires-Dist: sklearn2pmml (==0.65.0)
Requires-Dist: statsmodels (==0.12.1)
Requires-Dist: tensorflow (==2.4.1)
Requires-Dist: uuid (==1.30)
Requires-Dist: validate-email (==1.3)
Requires-Dist: xgboost (==0.82)
Requires-Dist: scipy (==1.4.1)
Requires-Dist: torchvision (==0.9.0)
Requires-Dist: scikit-learn (==0.23.2)
Requires-Dist: pyenchant (==3.2.0)
Requires-Dist: SQLAlchemy (==1.3.17)
Requires-Dist: psycopg2-binary (==2.8.5)

<div align="center">
  <img src="https://www.marlabs.com/wp-content/uploads/2017/09/marlabs_logo.png">
</div>

mAdvisor AutoML by Marlabs
==============
[![Python](https://img.shields.io/pypi/pyversions/madvisor.svg?style=plastic)](https://badge.fury.io/py/madvisor)

mAdvisor AutoML is an automated AI/ML solution from Marlabs that translates data into meaningful insights & predictions without any manual intervention. AutoML gives you the power of cognitive technologies like machine learning, machine reasoning, deep learning, natural language generation, natural language processing and expert rules systems with your limited knowledge of AI/ML, thereby enabling enterprises to identify revenue streams, enhance customer experience and productivity. This solution is designed for application and machine experts, so that machine learning models can be created with no help from a data scientist.  A 30-day trial license for mAdvisor AutoMLÂ® is issued on activation.

The solution includes the following features:
1. Ability to comprehend and monetize Big Data
2. Rapid time to insights
3. No dependency on data scientists & analysts to create briefs
4. Rapid development of predictive apps
5. Expandable and Scalable to the adoption of new use cases

--------------



Installation
--------------
### pip
```sh
$ pip install mAdvisor
```

Usage
--------------
  * A Licence Key is required to use this package
  * Register yourself to activate the 30 days free trial
  * Connect with Marlabs mAdvisor team to purchase a paid licence.

## User Registration and Plan Subscription

###  Sign Up
```sh
import requests
base_url = 'https://madvisor-dbc.marlabsai.com/automl'
url = base_url + '/account/sign-up'
data= {'email': '<email id>',
 'username':'<user name>',
 'password':'<password>'
}
response = requests.post(url, data=data)
if response.status_code != 200:
    print('Failed response code {}'.format(response.status_code))
print('Output result: {}'.format(response.json()))
```
###  Subscribe to the 30 days trial plan
```sh
url = base_url+'/subscription/subscribe-plan'
data= {'username':'<user name>',
 'password':'<password>',
 'subscription_type': 'TRIAL',
 'plan': 'FREE'
 }

response = requests.post(url, data=data)
if response.status_code != 200:
    print('Failed response code {}'.format(response.status_code))
print('Output result: {}'.format(response.json()))
```

###  Check Your Active Subscriptions
```sh
url = base_url+'/subscription/active-plans'
data= {'username':'<user name>',
 'password':'<password>'
 }

response = requests.post(url, data=data)
if response.status_code != 200:
    print('Failed response code {}'.format(response.status_code))
print('Output result: {}'.format(response.json()))
```

## Start Using the Library

### AutoML model training
This calss is used to initiate AutoML training job, user has to use the slug value returned from here while doing prediction.
```sh
from mAdvisor import train
model = train(train_data="<train dataset pass either path to the file or dataframe>",
               target="<Target Variable Name>",
               token = "<Licence Key>")
model_slug = model.fit()
```

### AutoML prediction
Train data prediction can be using this class
```sh
from mAdvisor import score
model = score(test_data="<test dataset pass either path to the file or dataframe>",
               training_slug="<model slug value received from train output>",
               token = "<Licence Key>")
prediction_rules, predicted_data = model.fit()
```
### AutoML model Training and Prediction in a single go
Used to initiate automl job, both model training and scoring can be done using this class.
```sh
from mAdvisor import automl
model = automl(train_data="<train dataset pass either path to the file or dataframe>",
               test_data="<test dataset pass either path to the file or dataframe>",
               target="<Target Variable Name>",
               token = "<Licence Key>")
model_slug, prediction_rules, predicted_data = model.fit()
```

### Automated Data Preprocessing, Feature engineering and Feature Selection for train data
Feature engineering module will return two dataframes, one for linear algorithms & second one for tree based algorithms and a slug value which is to be used while preparing test data. 
```sh
from mAdvisor import AutoFE
preprocess = AutoFE(target="<Target Variable Name>",
                    train_df = "train dataframe to be used",
                    token = "<Licence Key>")
linear_df, tree_df, fe_slug = preprocess.fit()
```

### Automated Data Preprocessing, Feature engineering and Feature Selection for test data
Feature engineering module will return two dataframes, one for linear algorithms and second one for tree based algorithms.
```sh
from mAdvisor import AutoFE_Test
preprocess_test = AutoFE_Test(test_df = "<test dataframe to be used>",
			 fe_slug="<Unique slug value received from train data feature engineering>",
                   	 token = "<Licence Key>")
linear_df_test, tree_df_test = preprocess_test.fit()
```



