Metadata-Version: 2.1
Name: mypy-boto3-cloudformation
Version: 1.17.31.0
Summary: Type annotations for boto3.CloudFormation 1.17.31 service, generated by mypy-boto3-buider 4.4.0
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Description: # mypy-boto3-cloudformation
        
        [![PyPI - mypy-boto3-cloudformation](https://img.shields.io/pypi/v/mypy-boto3-cloudformation.svg?color=blue)](https://pypi.org/project/mypy-boto3-cloudformation)
        [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-cloudformation.svg?color=blue)](https://pypi.org/project/mypy-boto3-cloudformation)
        [![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
        
        ![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/master/logo.png)
        
        Type annotations for
        [boto3.CloudFormation 1.17.31](https://boto3.amazonaws.com/v1/documentation/api/1.17.31/reference/services/cloudformation.html#CloudFormation) service
        compatible with
        [VSCode](https://code.visualstudio.com/),
        [PyCharm](https://www.jetbrains.com/pycharm/),
        [Emacs](https://www.gnu.org/software/emacs/),
        [Sublime Text](https://www.sublimetext.com/),
        [mypy](https://github.com/python/mypy),
        [pyright](https://github.com/microsoft/pyright)
        and other tools.
        
        Generated by [mypy-boto3-buider 4.4.0](https://github.com/vemel/mypy_boto3_builder).
        
        More information can be found on [boto3-stubs](https://pypi.org/project/boto3-stubs/) page.
        
        See how it helps to find and fix potential bugs:
        
        ![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/master/demo.gif)
        
        - [mypy-boto3-cloudformation](#mypy-boto3-cloudformation)
          - [How to install](#how-to-install)
          - [Usage](#usage)
            - [VSCode](#vscode)
            - [PyCharm](#pycharm)
            - [Other IDEs](#other-ides)
            - [mypy](#mypy)
            - [pyright](#pyright)
          - [Explicit type annotations](#explicit-type-annotations)
            - [Client annotations](#client-annotations)
            - [Paginators annotations](#paginators-annotations)
            - [Waiters annotations](#waiters-annotations)
            - [Service Resource annotations](#service-resource-annotations)
            - [Other resources annotations](#other-resources-annotations)
            - [Collections annotations](#collections-annotations)
            - [Typed dictionations](#typed-dictionations)
        
        ## How to install
        
        Install `boto3-stubs` for `CloudFormation` service.
        
        ```bash
        python -m pip install boto3-stubs[cloudformation]
        ```
        
        ## Usage
        
        ### VSCode
        
        - Install [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
        - Install [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
        - Set `Pylance` as your Python Language Server
        - Install `boto-stubs[cloudformation]` in your environment: `python -m pip install 'boto3-stubs[cloudformation]'`
        
        Both type checking and auto-complete should work for `CloudFormation` service.
        No explicit type annotations required, write your `boto3` code as usual.
        
        ### PyCharm
        
        - Install `boto-stubs[cloudformation]` in your environment: `python -m pip install 'boto3-stubs[cloudformation]'`
        
        Both type checking and auto-complete should work for `CloudFormation` service.
        No explicit type annotations required, write your `boto3` code as usual.
        Auto-complete can be slow on big projects or if you have a lot of installed `boto3-stubs` submodules.
        
        ### Other IDEs
        
        Not tested, but as long as your IDE support `mypy` or `pyright`, everything should work.
        
        ### mypy
        
        - Install `mypy`: `python -m pip install mypy`
        - Install `boto-stubs[cloudformation]` in your environment: `python -m pip install 'boto3-stubs[cloudformation]'`
        - Run `mypy` as usual
        
        Type checking should work for `CloudFormation` service.
        No explicit type annotations required, write your `boto3` code as usual.
        
        ### pyright
        
        - Install `pyright`: `yarn global add pyright`
        - Install `boto-stubs[cloudformation]` in your environment: `python -m pip install 'boto3-stubs[cloudformation]'`
        - Optionally, you can install `boto3-stubs` to `typings` folder.
        
        Type checking should work for `CloudFormation` service.
        No explicit type annotations required, write your `boto3` code as usual.
        
        ## Explicit type annotations
        
        ### Client annotations
        
        `CloudFormationClient` provides annotations for `boto3.client("cloudformation")`.
        
        ```python
        import boto3
        
        from mypy_boto3_cloudformation import CloudFormationClient
        
        client: CloudFormationClient = boto3.client("cloudformation")
        
        # now client usage is checked by mypy and IDE should provide code auto-complete
        
        # works for session as well
        session = boto3.session.Session(region="us-west-1")
        session_client: CloudFormationClient = session.client("cloudformation")
        ```
        
        ### Paginators annotations
        
        `mypy_boto3_cloudformation.paginator` module contains type annotations for all paginators.
        
        ```python
        from mypy_boto3_cloudformation import CloudFormationClient
        from mypy_boto3_cloudformation.paginator import (
            DescribeAccountLimitsPaginator,
            DescribeChangeSetPaginator,
            DescribeStackEventsPaginator,
            DescribeStacksPaginator,
            ListChangeSetsPaginator,
            ListExportsPaginator,
            ListImportsPaginator,
            ListStackInstancesPaginator,
            ListStackResourcesPaginator,
            ListStackSetOperationResultsPaginator,
            ListStackSetOperationsPaginator,
            ListStackSetsPaginator,
            ListStacksPaginator,
        )
        
        client: CloudFormationClient = boto3.client("cloudformation")
        
        # Explicit type annotations are optional here
        # Type should be correctly discovered by mypy and IDEs
        # VSCode requires explicit type annotations
        describe_account_limits_paginator: DescribeAccountLimitsPaginator = client.get_paginator("describe_account_limits")
        describe_change_set_paginator: DescribeChangeSetPaginator = client.get_paginator("describe_change_set")
        describe_stack_events_paginator: DescribeStackEventsPaginator = client.get_paginator("describe_stack_events")
        describe_stacks_paginator: DescribeStacksPaginator = client.get_paginator("describe_stacks")
        list_change_sets_paginator: ListChangeSetsPaginator = client.get_paginator("list_change_sets")
        list_exports_paginator: ListExportsPaginator = client.get_paginator("list_exports")
        list_imports_paginator: ListImportsPaginator = client.get_paginator("list_imports")
        list_stack_instances_paginator: ListStackInstancesPaginator = client.get_paginator("list_stack_instances")
        list_stack_resources_paginator: ListStackResourcesPaginator = client.get_paginator("list_stack_resources")
        list_stack_set_operation_results_paginator: ListStackSetOperationResultsPaginator = client.get_paginator("list_stack_set_operation_results")
        list_stack_set_operations_paginator: ListStackSetOperationsPaginator = client.get_paginator("list_stack_set_operations")
        list_stack_sets_paginator: ListStackSetsPaginator = client.get_paginator("list_stack_sets")
        list_stacks_paginator: ListStacksPaginator = client.get_paginator("list_stacks")
        ```
        
        
        ### Waiters annotations
        
        `mypy_boto3_cloudformation.waiter` module contains type annotations for all waiters.
        
        ```python
        from mypy_boto3_cloudformation import CloudFormationClient
        from mypy_boto3_cloudformation.waiter import (
            ChangeSetCreateCompleteWaiter,
            StackCreateCompleteWaiter,
            StackDeleteCompleteWaiter,
            StackExistsWaiter,
            StackImportCompleteWaiter,
            StackRollbackCompleteWaiter,
            StackUpdateCompleteWaiter,
            TypeRegistrationCompleteWaiter,
        )
        
        client: CloudFormationClient = boto3.client("cloudformation")
        
        # Explicit type annotations are optional here
        # Type should be correctly discovered by mypy and IDEs
        # VSCode requires explicit type annotations
        change_set_create_complete_waiter: ChangeSetCreateCompleteWaiter = client.get_waiter("change_set_create_complete")
        stack_create_complete_waiter: StackCreateCompleteWaiter = client.get_waiter("stack_create_complete")
        stack_delete_complete_waiter: StackDeleteCompleteWaiter = client.get_waiter("stack_delete_complete")
        stack_exists_waiter: StackExistsWaiter = client.get_waiter("stack_exists")
        stack_import_complete_waiter: StackImportCompleteWaiter = client.get_waiter("stack_import_complete")
        stack_rollback_complete_waiter: StackRollbackCompleteWaiter = client.get_waiter("stack_rollback_complete")
        stack_update_complete_waiter: StackUpdateCompleteWaiter = client.get_waiter("stack_update_complete")
        type_registration_complete_waiter: TypeRegistrationCompleteWaiter = client.get_waiter("type_registration_complete")
        ```
        
        
        ### Service Resource annotations
        
        `CloudFormationServiceResource` provides annotations for `boto3.resource("cloudformation")`.
        
        ```python
        from mypy_boto3_cloudformation import CloudFormationServiceResource
        
        resource: CloudFormationServiceResource = boto3.resource("cloudformation")
        
        # now resource usage is checked by mypy and IDE should provide code auto-complete
        
        # works for session as well
        session = boto3.session.Session(region="us-west-1")
        session_resource: CloudFormationServiceResource = session.resource("cloudformation")
        ```
        
        
        ### Other resources annotations
        
        `mypy_boto3_cloudformation.service_resource` module contains type annotations for all resources.
        
        ```python
        from mypy_boto3_cloudformation import CloudFormationServiceResource
        from mypy_boto3_cloudformation.service_resource import (
            Event,
            Stack,
            StackResource,
            StackResourceSummary,
        )
        
        resource: CloudFormationServiceResource = boto3.resource("cloudformation")
        
        # Explicit type annotations are optional here
        # Type should be correctly discovered by mypy and IDEs
        my_event: Event = resource.Event(...)
        my_stack: Stack = resource.Stack(...)
        my_stack_resource: StackResource = resource.StackResource(...)
        my_stack_resource_summary: StackResourceSummary = resource.StackResourceSummary(...)
        ```
        
        
        
        ### Collections annotations
        
        `mypy_boto3_cloudformation.service_resource` module contains type annotations
        for all `CloudFormationServiceResource` collections.
        
        ```python
        from mypy_boto3_cloudformation import CloudFormationServiceResource
        from mypy_boto3_cloudformation.service_resource import (
            ServiceResourceStacksCollection,
        )
        
        resource: CloudFormationServiceResource = boto3.resource("cloudformation")
        
        # Explicit type annotations are optional here
        # Type should be correctly discovered by mypy and IDEs
        stacks: cloudformation_resources.ServiceResourceStacksCollection = resource.stacks
        ```
        
        
        
        
        ### Typed dictionations
        
        `mypy_boto3_cloudformation.type_defs` module contains structures and shapes assembled
        to typed dictionaries for additional type checking.
        
        ```python
        from mypy_boto3_cloudformation.type_defs import (
            AccountGateResultTypeDef,
            AccountLimitTypeDef,
            AutoDeploymentTypeDef,
            ChangeSetSummaryTypeDef,
            ChangeTypeDef,
            DeploymentTargetsTypeDef,
            ExportTypeDef,
            LoggingConfigTypeDef,
            ModuleInfoTypeDef,
            OutputTypeDef,
            ParameterConstraintsTypeDef,
            ParameterDeclarationTypeDef,
            ParameterTypeDef,
            PhysicalResourceIdContextKeyValuePairTypeDef,
            PropertyDifferenceTypeDef,
            ResourceChangeDetailTypeDef,
            ResourceChangeTypeDef,
            ResourceIdentifierSummaryTypeDef,
            ResourceTargetDefinitionTypeDef,
            ResponseMetadata,
            RollbackConfigurationTypeDef,
            RollbackTriggerTypeDef,
            StackDriftInformationSummaryTypeDef,
            StackDriftInformationTypeDef,
            StackEventTypeDef,
            StackInstanceComprehensiveStatusTypeDef,
            StackInstanceSummaryTypeDef,
            StackInstanceTypeDef,
            StackResourceDetailTypeDef,
            StackResourceDriftInformationSummaryTypeDef,
            StackResourceDriftInformationTypeDef,
            StackResourceDriftTypeDef,
            StackResourceSummaryTypeDef,
            StackResourceTypeDef,
            StackSetDriftDetectionDetailsTypeDef,
            StackSetOperationPreferencesTypeDef,
            StackSetOperationResultSummaryTypeDef,
            StackSetOperationSummaryTypeDef,
            StackSetOperationTypeDef,
            StackSetSummaryTypeDef,
            StackSetTypeDef,
            StackSummaryTypeDef,
            StackTypeDef,
            TagTypeDef,
            TemplateParameterTypeDef,
            TypeSummaryTypeDef,
            TypeVersionSummaryTypeDef,
            CreateChangeSetOutputTypeDef,
            CreateStackInstancesOutputTypeDef,
            CreateStackOutputTypeDef,
            CreateStackSetOutputTypeDef,
            DeleteStackInstancesOutputTypeDef,
            DescribeAccountLimitsOutputTypeDef,
            DescribeChangeSetOutputTypeDef,
            DescribeStackDriftDetectionStatusOutputTypeDef,
            DescribeStackEventsOutputTypeDef,
            DescribeStackInstanceOutputTypeDef,
            DescribeStackResourceDriftsOutputTypeDef,
            DescribeStackResourceOutputTypeDef,
            DescribeStackResourcesOutputTypeDef,
            DescribeStackSetOperationOutputTypeDef,
            DescribeStackSetOutputTypeDef,
            DescribeStacksOutputTypeDef,
            DescribeTypeOutputTypeDef,
            DescribeTypeRegistrationOutputTypeDef,
            DetectStackDriftOutputTypeDef,
            DetectStackResourceDriftOutputTypeDef,
            DetectStackSetDriftOutputTypeDef,
            EstimateTemplateCostOutputTypeDef,
            GetStackPolicyOutputTypeDef,
            GetTemplateOutputTypeDef,
            GetTemplateSummaryOutputTypeDef,
            ListChangeSetsOutputTypeDef,
            ListExportsOutputTypeDef,
            ListImportsOutputTypeDef,
            ListStackInstancesOutputTypeDef,
            ListStackResourcesOutputTypeDef,
            ListStackSetOperationResultsOutputTypeDef,
            ListStackSetOperationsOutputTypeDef,
            ListStackSetsOutputTypeDef,
            ListStacksOutputTypeDef,
            ListTypeRegistrationsOutputTypeDef,
            ListTypeVersionsOutputTypeDef,
            ListTypesOutputTypeDef,
            PaginatorConfigTypeDef,
            RegisterTypeOutputTypeDef,
            ResourceToImportTypeDef,
            StackInstanceFilterTypeDef,
            UpdateStackInstancesOutputTypeDef,
            UpdateStackOutputTypeDef,
            UpdateStackSetOutputTypeDef,
            UpdateTerminationProtectionOutputTypeDef,
            ValidateTemplateOutputTypeDef,
            WaiterConfigTypeDef,
        )
        
        def get_structure() -> AccountGateResultTypeDef:
            return {
              ...
            }
        ```
        
Keywords: boto3 cloudformation type-annotations boto3-stubs mypy typeshed autocomplete auto-generated
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
