.\" Automatically generated by Pandoc 2.5
.\"
.TH "yt\-dlp" "1" "" "" ""
.hy
.SH NAME
.PP
youtube\-dl \- download videos from youtube.com or other video platforms
.SH SYNOPSIS
.PP
\f[B]yt\-dlp\f[R] [OPTIONS] URL [URL...]
.SH DESCRIPTION
.PP
\f[B]yt\-dlp\f[R] is a command\-line program to download videos from
youtube.com many other video platforms (supportedsites.md).
It requires the Python interpreter, version 2.6, 2.7, or 3.2+, and it is
not platform specific.
It should work on your Unix box, on Windows or on macOS.
It is released to the public domain, which means you can modify it,
redistribute it or use it however you like.
.IP
.nf
\f[C]
yt\-dlp [OPTIONS] [\-\-] URL [URL...]
\f[R]
.fi
.SH OPTIONS
.PP
\f[C]Ctrl+F\f[R] is your friend :D
.SS General Options:
.TP
.B \-h, \-\-help
Print this help text and exit
.TP
.B \-\-version
Print program version and exit
.TP
.B \-U, \-\-update
Update this program to latest version.
Make sure that you have sufficient permissions (run with sudo if needed)
.TP
.B \-i, \-\-ignore\-errors
Continue on download errors, for example to skip unavailable videos in a
playlist (default) (Alias: \-\-no\-abort\-on\-error)
.TP
.B \-\-abort\-on\-error
Abort downloading of further videos if an error occurs (Alias:
\-\-no\-ignore\-errors)
.TP
.B \-\-dump\-user\-agent
Display the current browser identification
.TP
.B \-\-list\-extractors
List all supported extractors
.TP
.B \-\-extractor\-descriptions
Output descriptions of all supported extractors
.TP
.B \-\-force\-generic\-extractor
Force extraction to use the generic extractor
.TP
.B \-\-default\-search \f[I]PREFIX\f[R]
Use this prefix for unqualified URLs.
For example \[dq]gvsearch2:\[dq] downloads two videos from google videos
for youtube\-dl \[dq]large apple\[dq].
Use the value \[dq]auto\[dq] to let youtube\-dl guess
(\[dq]auto_warning\[dq] to emit a warning when guessing).
\[dq]error\[dq] just throws an error.
The default value \[dq]fixup_error\[dq] repairs broken URLs, but emits
an error if this is not possible instead of searching
.TP
.B \-\-ignore\-config
Disable loading any configuration files except the one provided by
\-\-config\- location.
When given inside a configuration file, no further configuration files
are loaded.
Additionally, (for backward compatibility) if this option is found
inside the system configuration file, the user configuration is not
loaded
.TP
.B \-\-config\-location \f[I]PATH\f[R]
Location of the main configuration file; either the path to the config
or its containing directory
.TP
.B \-\-flat\-playlist
Do not extract the videos of a playlist, only list them
.TP
.B \-\-no\-flat\-playlist
Extract the videos of a playlist
.TP
.B \-\-mark\-watched
Mark videos watched (YouTube only)
.TP
.B \-\-no\-mark\-watched
Do not mark videos watched (default)
.TP
.B \-\-no\-colors
Do not emit color codes in output
.SS Network Options:
.TP
.B \-\-proxy \f[I]URL\f[R]
Use the specified HTTP/HTTPS/SOCKS proxy.
To enable SOCKS proxy, specify a proper scheme.
For example socks5://127.0.0.1:1080/.
Pass in an empty string (\-\-proxy \[dq]\[dq]) for direct connection
.TP
.B \-\-socket\-timeout \f[I]SECONDS\f[R]
Time to wait before giving up, in seconds
.TP
.B \-\-source\-address \f[I]IP\f[R]
Client\-side IP address to bind to
.TP
.B \-4, \-\-force\-ipv4
Make all connections via IPv4
.TP
.B \-6, \-\-force\-ipv6
Make all connections via IPv6
.SS Geo Restriction:
.TP
.B \-\-geo\-verification\-proxy \f[I]URL\f[R]
Use this proxy to verify the IP address for some geo\-restricted sites.
The default proxy specified by \-\-proxy (or none, if the option is not
present) is used for the actual downloading
.TP
.B \-\-geo\-bypass
Bypass geographic restriction via faking X\-Forwarded\-For HTTP header
.TP
.B \-\-no\-geo\-bypass
Do not bypass geographic restriction via faking X\-Forwarded\-For HTTP
header
.TP
.B \-\-geo\-bypass\-country \f[I]CODE\f[R]
Force bypass geographic restriction with explicitly provided two\-letter
ISO 3166\-2 country code
.TP
.B \-\-geo\-bypass\-ip\-block \f[I]IP_BLOCK\f[R]
Force bypass geographic restriction with explicitly provided IP block in
CIDR notation
.SS Video Selection:
.TP
.B \-\-playlist\-start \f[I]NUMBER\f[R]
Playlist video to start at (default is 1)
.TP
.B \-\-playlist\-end \f[I]NUMBER\f[R]
Playlist video to end at (default is last)
.TP
.B \-\-playlist\-items \f[I]ITEM_SPEC\f[R]
Playlist video items to download.
Specify indices of the videos in the playlist separated by commas like:
\[dq]\-\-playlist\-items 1,2,5,8\[dq] if you want to download videos
indexed 1, 2, 5, 8 in the playlist.
You can specify range: \[dq]\-\-playlist\-items 1\-3,7,10\-13\[dq], it
will download the videos at index 1, 2, 3, 7, 10, 11, 12 and 13
.TP
.B \-\-match\-title \f[I]REGEX\f[R]
Download only matching titles (regex or caseless sub\-string)
.TP
.B \-\-reject\-title \f[I]REGEX\f[R]
Skip download for matching titles (regex or caseless sub\-string)
.TP
.B \-\-max\-downloads \f[I]NUMBER\f[R]
Abort after downloading NUMBER files
.TP
.B \-\-min\-filesize \f[I]SIZE\f[R]
Do not download any videos smaller than SIZE (e.g.
50k or 44.6m)
.TP
.B \-\-max\-filesize \f[I]SIZE\f[R]
Do not download any videos larger than SIZE (e.g.
50k or 44.6m)
.TP
.B \-\-date \f[I]DATE\f[R]
Download only videos uploaded in this date.
The date can be \[dq]YYYYMMDD\[dq] or in the format
\[dq](now|today)[+\-][0\-9](day|week|month|year)( s)?\[dq]
.TP
.B \-\-datebefore \f[I]DATE\f[R]
Download only videos uploaded on or before this date.
The date formats accepted is the same as \-\-date
.TP
.B \-\-dateafter \f[I]DATE\f[R]
Download only videos uploaded on or after this date.
The date formats accepted is the same as \-\-date
.TP
.B \-\-min\-views \f[I]COUNT\f[R]
Do not download any videos with less than COUNT views
.TP
.B \-\-max\-views \f[I]COUNT\f[R]
Do not download any videos with more than COUNT views
.TP
.B \-\-match\-filter \f[I]FILTER\f[R]
Generic video filter.
Specify any key (see \[dq]OUTPUT TEMPLATE\[dq] for a list of available
keys) to match if the key is present, !key to check if the key is not
present, key>NUMBER (like \[dq]view_count > 12\[dq], also works with >=,
<, <=, !=, =) to compare against a number, key = \[aq]LITERAL\[aq] (like
\[dq]uploader = \[aq]Mike Smith\[aq]\[dq], also works with !=) to match
against a string literal and & to require multiple matches.
Values which are not known are excluded unless you put a question mark
(?) after the operator.
For example, to only match videos that have been liked more than 100
times and disliked less than 50 times (or the dislike functionality is
not available at the given service), but who also have a description,
use \-\-match\-filter \[dq]like_count > 100 & dislike_count <?
50 & description\[dq]
.TP
.B \-\-no\-match\-filter
Do not use generic video filter (default)
.TP
.B \-\-no\-playlist
Download only the video, if the URL refers to a video and a playlist
.TP
.B \-\-yes\-playlist
Download the playlist, if the URL refers to a video and a playlist
.TP
.B \-\-age\-limit \f[I]YEARS\f[R]
Download only videos suitable for the given age
.TP
.B \-\-download\-archive \f[I]FILE\f[R]
Download only videos not listed in the archive file.
Record the IDs of all downloaded videos in it
.TP
.B \-\-break\-on\-existing
Stop the download process when encountering a file that is in the
archive
.TP
.B \-\-break\-on\-reject
Stop the download process when encountering a file that has been
filtered out
.TP
.B \-\-no\-download\-archive
Do not use archive file (default)
.TP
.B \-\-include\-ads
Download advertisements as well (experimental)
.TP
.B \-\-no\-include\-ads
Do not download advertisements (default)
.SS Download Options:
.TP
.B \-N, \-\-concurrent\-fragments \f[I]N\f[R]
Number of fragments to download concurrently (default is 1)
.TP
.B \-r, \-\-limit\-rate \f[I]RATE\f[R]
Maximum download rate in bytes per second (e.g.
50K or 4.2M)
.TP
.B \-R, \-\-retries \f[I]RETRIES\f[R]
Number of retries (default is 10), or \[dq]infinite\[dq]
.TP
.B \-\-fragment\-retries \f[I]RETRIES\f[R]
Number of retries for a fragment (default is 10), or \[dq]infinite\[dq]
(DASH, hlsnative and ISM)
.TP
.B \-\-skip\-unavailable\-fragments
Skip unavailable fragments for DASH, hlsnative and ISM (default) (Alias:
\-\-no\- abort\-on\-unavailable\-fragment)
.TP
.B \-\-abort\-on\-unavailable\-fragment
Abort downloading if a fragment is unavailable (Alias:
\-\-no\-skip\-unavailable\- fragments)
.TP
.B \-\-keep\-fragments
Keep downloaded fragments on disk after downloading is finished
.TP
.B \-\-no\-keep\-fragments
Delete downloaded fragments after downloading is finished (default)
.TP
.B \-\-buffer\-size \f[I]SIZE\f[R]
Size of download buffer (e.g.
1024 or 16K) (default is 1024)
.TP
.B \-\-resize\-buffer
The buffer size is automatically resized from an initial value of
\-\-buffer\-size (default)
.TP
.B \-\-no\-resize\-buffer
Do not automatically adjust the buffer size
.TP
.B \-\-http\-chunk\-size \f[I]SIZE\f[R]
Size of a chunk for chunk\-based HTTP downloading (e.g.
10485760 or 10M) (default is disabled).
May be useful for bypassing bandwidth throttling imposed by a webserver
(experimental)
.TP
.B \-\-playlist\-reverse
Download playlist videos in reverse order
.TP
.B \-\-no\-playlist\-reverse
Download playlist videos in default order (default)
.TP
.B \-\-playlist\-random
Download playlist videos in random order
.TP
.B \-\-xattr\-set\-filesize
Set file xattribute ytdl.filesize with expected file size
.TP
.B \-\-hls\-prefer\-native
Use the native HLS downloader instead of ffmpeg
.TP
.B \-\-hls\-prefer\-ffmpeg
Use ffmpeg instead of the native HLS downloader
.TP
.B \-\-hls\-use\-mpegts
Use the mpegts container for HLS videos; allowing some players to play
the video while downloading, and reducing the chance of file corruption
if download is interrupted.
This is enabled by default for live streams
.TP
.B \-\-no\-hls\-use\-mpegts
Do not use the mpegts container for HLS videos.
This is default when not downloading live streams
.TP
.B \-\-external\-downloader \f[I]NAME\f[R]
Name or path of the external downloader to use.
Currently supports aria2c, avconv, axel, curl, ffmpeg, httpie, wget
(Recommended: aria2c)
.TP
.B \-\-downloader\-args \f[I]NAME:ARGS\f[R]
Give these arguments to the external downloader.
Specify the downloader name and the arguments separated by a colon
\[dq]:\[dq].
You can use this option multiple times (Alias:
\-\-external\-downloader\-args)
.SS Filesystem Options:
.TP
.B \-a, \-\-batch\-file \f[I]FILE\f[R]
File containing URLs to download (\[aq]\-\[aq] for stdin), one URL per
line.
Lines starting with \[aq]#\[aq], \[aq];\[aq] or \[aq]]\[aq] are
considered as comments and ignored
.TP
.B \-P, \-\-paths \f[I]TYPE:PATH\f[R]
The paths where the files should be downloaded.
Specify the type of file and the path separated by a colon \[dq]:\[dq].
All the same types as \-\-output are supported.
Additionally, you can also provide \[dq]home\[dq] and \[dq]temp\[dq]
paths.
All intermediary files are first downloaded to the temp path and then
the final files are moved over to the home path after download is
finished.
This option is ignored if \-\-output is an absolute path
.TP
.B \-o, \-\-output \f[I][TYPE:]TEMPLATE\f[R]
Output filename template, see \[dq]OUTPUT TEMPLATE\[dq] for details
.TP
.B \-\-output\-na\-placeholder \f[I]TEXT\f[R]
Placeholder value for unavailable meta fields in output filename
template (default: \[dq]NA\[dq])
.TP
.B \-\-autonumber\-start \f[I]NUMBER\f[R]
Specify the start value for %(autonumber)s (default is 1)
.TP
.B \-\-restrict\-filenames
Restrict filenames to only ASCII characters, and avoid \[dq]&\[dq] and
spaces in filenames
.TP
.B \-\-no\-restrict\-filenames
Allow Unicode characters, \[dq]&\[dq] and spaces in filenames (default)
.TP
.B \-\-windows\-filenames
Force filenames to be windows compatible
.TP
.B \-\-no\-windows\-filenames
Make filenames windows compatible only if using windows (default)
.TP
.B \-\-trim\-filenames \f[I]LENGTH\f[R]
Limit the filename length (excluding extension) to the specified number
of characters
.TP
.B \-w, \-\-no\-overwrites
Do not overwrite any files
.TP
.B \-\-force\-overwrites
Overwrite all video and metadata files.
This option includes \-\-no\-continue
.TP
.B \-\-no\-force\-overwrites
Do not overwrite the video, but overwrite related files (default)
.TP
.B \-c, \-\-continue
Resume partially downloaded files/fragments (default)
.TP
.B \-\-no\-continue
Do not resume partially downloaded fragments.
If the file is unfragmented, restart download of the entire file
.TP
.B \-\-part
Use .part files instead of writing directly into output file (default)
.TP
.B \-\-no\-part
Do not use .part files \- write directly into output file
.TP
.B \-\-mtime
Use the Last\-modified header to set the file modification time
(default)
.TP
.B \-\-no\-mtime
Do not use the Last\-modified header to set the file modification time
.TP
.B \-\-write\-description
Write video description to a .description file
.TP
.B \-\-no\-write\-description
Do not write video description (default)
.TP
.B \-\-write\-info\-json
Write video metadata to a .info.json file (this may contain personal
information)
.TP
.B \-\-no\-write\-info\-json
Do not write video metadata (default)
.TP
.B \-\-write\-annotations
Write video annotations to a .annotations.xml file
.TP
.B \-\-no\-write\-annotations
Do not write video annotations (default)
.TP
.B \-\-write\-playlist\-metafiles
Write playlist metadata in addition to the video metadata when using
\-\-write\-info\- json, \-\-write\-description etc.
(default)
.TP
.B \-\-no\-write\-playlist\-metafiles
Do not write playlist metadata when using \-\-write\-info\-json,
\-\-write\-description etc.
.TP
.B \-\-clean\-infojson
Remove some private fields such as filenames from the infojson.
Note that it could still contain some personal information (default)
.TP
.B \-\-no\-clean\-infojson
Write all fields to the infojson
.TP
.B \-\-get\-comments
Retrieve video comments to be placed in the .info.json file.
The comments are fetched even without this option if the extraction is
known to be quick
.TP
.B \-\-load\-info\-json \f[I]FILE\f[R]
JSON file containing the video information (created with the
\[dq]\-\-write\-info\-json\[dq] option)
.TP
.B \-\-cookies \f[I]FILE\f[R]
File to read cookies from and dump cookie jar in
.TP
.B \-\-no\-cookies
Do not read/dump cookies (default)
.TP
.B \-\-cache\-dir \f[I]DIR\f[R]
Location in the filesystem where youtube\-dl can store some downloaded
information permanently.
By default $XDG_CACHE_HOME/youtube\-dl or \[ti]/.cache/youtube\-dl .
At the moment, only YouTube player files (for videos with obfuscated
signatures) are cached, but that may change
.TP
.B \-\-no\-cache\-dir
Disable filesystem caching
.TP
.B \-\-rm\-cache\-dir
Delete all filesystem cache files
.SS Thumbnail Images:
.TP
.B \-\-write\-thumbnail
Write thumbnail image to disk
.TP
.B \-\-no\-write\-thumbnail
Do not write thumbnail image to disk (default)
.TP
.B \-\-write\-all\-thumbnails
Write all thumbnail image formats to disk
.TP
.B \-\-list\-thumbnails
Simulate and list all available thumbnail formats
.SS Internet Shortcut Options:
.TP
.B \-\-write\-link
Write an internet shortcut file, depending on the current platform
(.url, .webloc or .desktop).
The URL may be cached by the OS
.TP
.B \-\-write\-url\-link
Write a .url Windows internet shortcut.
The OS caches the URL based on the file path
.TP
.B \-\-write\-webloc\-link
Write a .webloc macOS internet shortcut
.TP
.B \-\-write\-desktop\-link
Write a .desktop Linux internet shortcut
.SS Verbosity and Simulation Options:
.TP
.B \-q, \-\-quiet
Activate quiet mode
.TP
.B \-\-no\-warnings
Ignore warnings
.TP
.B \-s, \-\-simulate
Do not download the video and do not write anything to disk
.TP
.B \-\-skip\-download
Do not download the video but write all related files (Alias:
\-\-no\-download)
.TP
.B \-g, \-\-get\-url
Simulate, quiet but print URL
.TP
.B \-e, \-\-get\-title
Simulate, quiet but print title
.TP
.B \-\-get\-id
Simulate, quiet but print id
.TP
.B \-\-get\-thumbnail
Simulate, quiet but print thumbnail URL
.TP
.B \-\-get\-description
Simulate, quiet but print video description
.TP
.B \-\-get\-duration
Simulate, quiet but print video length
.TP
.B \-\-get\-filename
Simulate, quiet but print output filename
.TP
.B \-\-get\-format
Simulate, quiet but print output format
.TP
.B \-j, \-\-dump\-json
Simulate, quiet but print JSON information.
See \[dq]OUTPUT TEMPLATE\[dq] for a description of available keys
.TP
.B \-J, \-\-dump\-single\-json
Simulate, quiet but print JSON information for each command\-line
argument.
If the URL refers to a playlist, dump the whole playlist information in
a single line
.TP
.B \-\-print\-json
Be quiet and print the video information as JSON (video is still being
downloaded)
.TP
.B \-\-force\-write\-archive
Force download archive entries to be written as far as no errors
occur,even if \-s or another simulation switch is used (Alias:
\-\-force\-download\-archive)
.TP
.B \-\-newline
Output progress bar as new lines
.TP
.B \-\-no\-progress
Do not print progress bar
.TP
.B \-\-console\-title
Display progress in console titlebar
.TP
.B \-v, \-\-verbose
Print various debugging information
.TP
.B \-\-dump\-pages
Print downloaded pages encoded using base64 to debug problems (very
verbose)
.TP
.B \-\-write\-pages
Write downloaded intermediary pages to files in the current directory to
debug problems
.TP
.B \-\-print\-traffic
Display sent and read HTTP traffic
.SS Workarounds:
.TP
.B \-\-encoding \f[I]ENCODING\f[R]
Force the specified encoding (experimental)
.TP
.B \-\-no\-check\-certificate
Suppress HTTPS certificate validation
.TP
.B \-\-prefer\-insecure
Use an unencrypted connection to retrieve information about the video
(Currently supported only for YouTube)
.TP
.B \-\-user\-agent \f[I]UA\f[R]
Specify a custom user agent
.TP
.B \-\-referer \f[I]URL\f[R]
Specify a custom referer, use if the video access is restricted to one
domain
.TP
.B \-\-add\-header \f[I]FIELD:VALUE\f[R]
Specify a custom HTTP header and its value, separated by a colon
\[dq]:\[dq].
You can use this option multiple times
.TP
.B \-\-bidi\-workaround
Work around terminals that lack bidirectional text support.
Requires bidiv or fribidi executable in PATH
.TP
.B \-\-sleep\-requests \f[I]SECONDS\f[R]
Number of seconds to sleep between requests during data extraction
.TP
.B \-\-sleep\-interval \f[I]SECONDS\f[R]
Number of seconds to sleep before each download.
This is the minimum time to sleep when used along with
\-\-max\-sleep\-interval (Alias: \-\-min\-sleep\-interval)
.TP
.B \-\-max\-sleep\-interval \f[I]SECONDS\f[R]
Maximum number of seconds to sleep.
Can only be used along with \-\-min\-sleep\- interval
.TP
.B \-\-sleep\-subtitles \f[I]SECONDS\f[R]
Number of seconds to sleep before each subtitle download
.SS Video Format Options:
.TP
.B \-f, \-\-format \f[I]FORMAT\f[R]
Video format code, see \[dq]FORMAT SELECTION\[dq] for more details
.TP
.B \-S, \-\-format\-sort \f[I]SORTORDER\f[R]
Sort the formats by the fields given, see \[dq]Sorting Formats\[dq] for
more details
.TP
.B \-\-format\-sort\-force
Force user specified sort order to have precedence over all fields, see
\[dq]Sorting Formats\[dq] for more details
.TP
.B \-\-no\-format\-sort\-force
Some fields have precedence over the user specified sort order
(default), see \[dq]Sorting Formats\[dq] for more details
.TP
.B \-\-video\-multistreams
Allow multiple video streams to be merged into a single file
.TP
.B \-\-no\-video\-multistreams
Only one video stream is downloaded for each output file (default)
.TP
.B \-\-audio\-multistreams
Allow multiple audio streams to be merged into a single file
.TP
.B \-\-no\-audio\-multistreams
Only one audio stream is downloaded for each output file (default)
.TP
.B \-\-all\-formats
Download all available video formats
.TP
.B \-\-prefer\-free\-formats
Prefer video formats with free containers over non\-free ones of same
quality.
Use with \[dq]\-S ext\[dq] to strictly prefer free containers
irrespective of quality
.TP
.B \-\-no\-prefer\-free\-formats
Don\[aq]t give any special preference to free containers (default)
.TP
.B \-F, \-\-list\-formats
List all available formats of requested videos
.TP
.B \-\-list\-formats\-as\-table
Present the output of \-F in tabular form (default)
.TP
.B \-\-list\-formats\-old
Present the output of \-F in the old form (Alias:
\-\-no\-list\-formats\-as\-table)
.TP
.B \-\-merge\-output\-format \f[I]FORMAT\f[R]
If a merge is required (e.g.
bestvideo+bestaudio), output to given container format.
One of mkv, mp4, ogg, webm, flv.
Ignored if no merge is required
.TP
.B \-\-allow\-unplayable\-formats
Allow unplayable formats to be listed and downloaded.
All video postprocessing will also be turned off
.TP
.B \-\-no\-allow\-unplayable\-formats
Do not allow unplayable formats to be listed or downloaded (default)
.SS Subtitle Options:
.TP
.B \-\-write\-subs
Write subtitle file
.TP
.B \-\-no\-write\-subs
Do not write subtitle file (default)
.TP
.B \-\-write\-auto\-subs
Write automatically generated subtitle file (Alias:
\-\-write\-automatic\-subs)
.TP
.B \-\-no\-write\-auto\-subs
Do not write auto\-generated subtitles (default) (Alias:
\-\-no\-write\-automatic\- subs)
.TP
.B \-\-all\-subs
Download all the available subtitles of the video
.TP
.B \-\-list\-subs
List all available subtitles for the video
.TP
.B \-\-sub\-format \f[I]FORMAT\f[R]
Subtitle format, accepts formats preference, for example: \[dq]srt\[dq]
or \[dq]ass/srt/best\[dq]
.TP
.B \-\-sub\-langs \f[I]LANGS\f[R]
Languages of the subtitles to download (optional) separated by commas,
use \-\-list\- subs for available language tags
.SS Authentication Options:
.TP
.B \-u, \-\-username \f[I]USERNAME\f[R]
Login with this account ID
.TP
.B \-p, \-\-password \f[I]PASSWORD\f[R]
Account password.
If this option is left out, yt\-dlp will ask interactively
.TP
.B \-2, \-\-twofactor \f[I]TWOFACTOR\f[R]
Two\-factor authentication code
.TP
.B \-n, \-\-netrc
Use .netrc authentication data
.TP
.B \-\-video\-password \f[I]PASSWORD\f[R]
Video password (vimeo, youku)
.SS Adobe Pass Options:
.TP
.B \-\-ap\-mso \f[I]MSO\f[R]
Adobe Pass multiple\-system operator (TV provider) identifier, use
\-\-ap\-list\-mso for a list of available MSOs
.TP
.B \-\-ap\-username \f[I]USERNAME\f[R]
Multiple\-system operator account login
.TP
.B \-\-ap\-password \f[I]PASSWORD\f[R]
Multiple\-system operator account password.
If this option is left out, yt\-dlp will ask interactively
.TP
.B \-\-ap\-list\-mso
List all supported multiple\-system operators
.SS Post\-Processing Options:
.TP
.B \-x, \-\-extract\-audio
Convert video files to audio\-only files (requires ffmpeg and ffprobe)
.TP
.B \-\-audio\-format \f[I]FORMAT\f[R]
Specify audio format: \[dq]best\[dq], \[dq]aac\[dq], \[dq]flac\[dq],
\[dq]mp3\[dq], \[dq]m4a\[dq], \[dq]opus\[dq], \[dq]vorbis\[dq], or
\[dq]wav\[dq]; \[dq]best\[dq] by default; No effect without \-x
.TP
.B \-\-audio\-quality \f[I]QUALITY\f[R]
Specify ffmpeg audio quality, insert a value between 0 (better) and 9
(worse) for VBR or a specific bitrate like 128K (default 5)
.TP
.B \-\-remux\-video \f[I]FORMAT\f[R]
Remux the video into another container if necessary (currently
supported: mp4|mkv|flv |webm|mov|avi|mp3|mka|m4a|ogg|opus).
If target container does not support the video/audio codec, remuxing
will fail.
You can specify multiple rules; eg.
\[dq]aac>m4a/mov>mp4/mkv\[dq] will remux aac to m4a, mov to mp4 and
anything else to mkv.
.TP
.B \-\-recode\-video \f[I]FORMAT\f[R]
Re\-encode the video into another format if re\-encoding is necessary.
The supported formats are the same as \-\-remux\-video
.TP
.B \-\-postprocessor\-args \f[I]NAME:ARGS\f[R]
Give these arguments to the postprocessors.
Specify the postprocessor/executable name and the arguments separated by
a colon \[dq]:\[dq] to give the argument to the specified
postprocessor/executable.
Supported postprocessors are: SponSkrub, ExtractAudio, VideoRemuxer,
VideoConvertor, EmbedSubtitle, Metadata, Merger, FixupStretched,
FixupM4a, FixupM3u8, SubtitlesConvertor, EmbedThumbnail and
SplitChapters.
The supported executables are: SponSkrub, FFmpeg, FFprobe, and
AtomicParsley.
You can also specify \[dq]PP+EXE:ARGS\[dq] to give the arguments to the
specified executable only when being used by the specified
postprocessor.
Additionally, for ffmpeg/ffprobe, \[dq]_i\[dq]/\[dq]_o\[dq] can be
appended to the prefix optionally followed by a number to pass the
argument before the specified input/output file.
Eg: \-\-ppa \[dq]Merger+ffmpeg_i1:\-v quiet\[dq].
You can use this option multiple times to give different arguments to
different postprocessors.
(Alias: \-\-ppa)
.TP
.B \-k, \-\-keep\-video
Keep the intermediate video file on disk after post\-processing
.TP
.B \-\-no\-keep\-video
Delete the intermediate video file after post\-processing (default)
.TP
.B \-\-post\-overwrites
Overwrite post\-processed files (default)
.TP
.B \-\-no\-post\-overwrites
Do not overwrite post\-processed files
.TP
.B \-\-embed\-subs
Embed subtitles in the video (only for mp4, webm and mkv videos)
.TP
.B \-\-no\-embed\-subs
Do not embed subtitles (default)
.TP
.B \-\-embed\-thumbnail
Embed thumbnail in the audio as cover art
.TP
.B \-\-no\-embed\-thumbnail
Do not embed thumbnail (default)
.TP
.B \-\-add\-metadata
Write metadata to the video file
.TP
.B \-\-no\-add\-metadata
Do not write metadata (default)
.TP
.B \-\-parse\-metadata \f[I]FIELD:FORMAT\f[R]
Parse additional metadata like title/artist from other fields.
Give field name to extract data from, and format of the field seperated
by a \[dq]:\[dq].
Either regular expression with named capture groups or a similar syntax
to the output template can also be used.
The parsed parameters replace any existing values and can be use in
output template.
This option can be used multiple times.
Example: \-\-parse\-metadata \[dq]title:%(artist)s \- %(title)s\[dq]
matches a title like \[dq]Coldplay \- Paradise\[dq].
Example (regex): \-\-parse\-metadata \[dq]description:Artist \-
(?P.+?)\[dq]
.TP
.B \-\-xattrs
Write metadata to the video file\[aq]s xattrs (using dublin core and xdg
standards)
.TP
.B \-\-fixup \f[I]POLICY\f[R]
Automatically correct known faults of the file.
One of never (do nothing), warn (only emit a warning), detect_or_warn
(the default; fix file if we can, warn otherwise)
.TP
.B \-\-ffmpeg\-location \f[I]PATH\f[R]
Location of the ffmpeg binary; either the path to the binary or its
containing directory
.TP
.B \-\-exec \f[I]CMD\f[R]
Execute a command on the file after downloading and post\-processing,
similar to find\[aq]s \-exec syntax.
Example: \-\-exec \[aq]adb push {} /sdcard/Music/ && rm {}\[aq]
.TP
.B \-\-convert\-subs \f[I]FORMAT\f[R]
Convert the subtitles to another format (currently supported:
srt|ass|vtt|lrc) (Alias: \-\-convert\-subtitles)
.TP
.B \-\-split\-chapters
Split video into multiple files based on internal chapters.
The \[dq]chapter:\[dq] prefix can be used with \[dq]\-\-paths\[dq] and
\[dq]\-\-output\[dq] to set the output filename for the split files.
See \[dq]OUTPUT TEMPLATE\[dq] for details
.TP
.B \-\-no\-split\-chapters
Do not split video based on chapters (default)
.SS SponSkrub (SponsorBlock) Options:
.PP
SponSkrub (https://github.com/yt\-dlp/SponSkrub) is a utility to
mark/remove sponsor segments from downloaded YouTube videos using
SponsorBlock API (https://sponsor.ajay.app)
.TP
.B \-\-sponskrub
Use sponskrub to mark sponsored sections.
This is enabled by default if the sponskrub binary exists (Youtube only)
.TP
.B \-\-no\-sponskrub
Do not use sponskrub
.TP
.B \-\-sponskrub\-cut
Cut out the sponsor sections instead of simply marking them
.TP
.B \-\-no\-sponskrub\-cut
Simply mark the sponsor sections, not cut them out (default)
.TP
.B \-\-sponskrub\-force
Run sponskrub even if the video was already downloaded
.TP
.B \-\-no\-sponskrub\-force
Do not cut out the sponsor sections if the video was already downloaded
(default)
.TP
.B \-\-sponskrub\-location \f[I]PATH\f[R]
Location of the sponskrub binary; either the path to the binary or its
containing directory
.SS Extractor Options:
.TP
.B \-\-extractor\-retries \f[I]RETRIES\f[R]
Number of retries for known extractor errors (default is 3), or
\[dq]infinite\[dq]
.TP
.B \-\-allow\-dynamic\-mpd
Process dynamic DASH manifests (default) (Alias:
\-\-no\-ignore\-dynamic\-mpd)
.TP
.B \-\-ignore\-dynamic\-mpd
Do not process dynamic DASH manifests (Alias:
\-\-no\-allow\-dynamic\-mpd)
.TP
.B \-\-hls\-split\-discontinuity
Split HLS playlists to different formats at discontinuities such as ad
breaks
.TP
.B \-\-no\-hls\-split\-discontinuity
Do not split HLS playlists to different formats at discontinuities such
as ad breaks (default)
.TP
.B \-\-youtube\-include\-dash\-manifest
Download the DASH manifests and related data on YouTube videos (default)
(Alias: \-\-no\-youtube\-skip\-dash\-manifest)
.TP
.B \-\-youtube\-skip\-dash\-manifest
Do not download the DASH manifests and related data on YouTube videos
(Alias: \-\-no\-youtube\-include\-dash\-manifest)
.TP
.B \-\-youtube\-include\-hls\-manifest
Download the HLS manifests and related data on YouTube videos (default)
(Alias: \-\-no\- youtube\-skip\-hls\-manifest)
.TP
.B \-\-youtube\-skip\-hls\-manifest
Do not download the HLS manifests and related data on YouTube videos
(Alias: \-\-no\-youtube\-include\-hls\-manifest)
.SH CONFIGURATION
.PP
You can configure yt\-dlp by placing any supported command line option
to a configuration file.
The configuration is loaded from the following locations:
.IP "1." 3
\f[B]Main Configuration\f[R]: The file given by
\f[C]\-\-config\-location\f[R]
.IP "2." 3
\f[B]Portable Configuration\f[R]: \f[C]yt\-dlp.conf\f[R] in the same
directory as the bundled binary.
If you are running from source\-code
(\f[C]<root dir>/yt_dlp/__main__.py\f[R]), the root directory is used
instead.
.IP "3." 3
\f[B]Home Configuration\f[R]: \f[C]yt\-dlp.conf\f[R] in the home path
given by \f[C]\-P \[dq]home:<path>\[dq]\f[R], or in the current
directory if no such path is given
.IP "4." 3
\f[B]User Configuration\f[R]:
.RS 4
.IP \[bu] 2
\f[C]%XDG_CONFIG_HOME%/yt\-dlp/config\f[R] (recommended on Linux/macOS)
.IP \[bu] 2
\f[C]%XDG_CONFIG_HOME%/yt\-dlp.conf\f[R]
.IP \[bu] 2
\f[C]%APPDATA%/yt\-dlp/config\f[R] (recommended on Windows)
.IP \[bu] 2
\f[C]%APPDATA%/yt\-dlp/config.txt\f[R]
.IP \[bu] 2
\f[C]\[ti]/yt\-dlp.conf\f[R]
.IP \[bu] 2
\f[C]\[ti]/yt\-dlp.conf.txt\f[R]
Note that \f[C]\[ti]\f[R] points to
\f[C]C:\[rs]Users\[rs]<user name>\f[R] on windows.
Also, \f[C]%XDG_CONFIG_HOME%\f[R] defaults to \f[C]\[ti]/.config\f[R] if
undefined
.RE
.IP "5." 3
\f[B]System Configuration\f[R]: \f[C]/etc/yt\-dlp.conf\f[R] or
\f[C]/etc/yt\-dlp.conf\f[R]
.PP
For example, with the following configuration file yt\-dlp will always
extract the audio, not copy the mtime, use a proxy and save all videos
under \f[C]YouTube\f[R] directory in your home directory:
.IP
.nf
\f[C]
# Lines starting with # are comments

# Always extract audio
\-x

# Do not copy the mtime
\-\-no\-mtime

# Use this proxy
\-\-proxy 127.0.0.1:3128

# Save all videos under YouTube directory in your home directory
\-o \[ti]/YouTube/%(title)s.%(ext)s
\f[R]
.fi
.PP
Note that options in configuration file are just the same options aka
switches used in regular command line calls; thus there \f[B]must be no
whitespace\f[R] after \f[C]\-\f[R] or \f[C]\-\-\f[R], e.g.
\f[C]\-o\f[R] or \f[C]\-\-proxy\f[R] but not \f[C]\- o\f[R] or
\f[C]\-\- proxy\f[R].
.PP
You can use \f[C]\-\-ignore\-config\f[R] if you want to disable all
configuration files for a particular yt\-dlp run.
If \f[C]\-\-ignore\-config\f[R] is found inside any configuration file,
no further configuration will be loaded.
For example, having the option in the portable configuration file
prevents loading of user and system configurations.
Additionally, (for backward compatibility) if
\f[C]\-\-ignore\-config\f[R] is found inside the system configuration
file, the user configuration is not loaded.
.SS Authentication with \f[C].netrc\f[R] file
.PP
You may also want to configure automatic credentials storage for
extractors that support authentication (by providing login and password
with \f[C]\-\-username\f[R] and \f[C]\-\-password\f[R]) in order not to
pass credentials as command line arguments on every yt\-dlp execution
and prevent tracking plain text passwords in the shell command history.
You can achieve this using a \f[C].netrc\f[R]
file (https://stackoverflow.com/tags/.netrc/info) on a per extractor
basis.
For that you will need to create a \f[C].netrc\f[R] file in your
\f[C]$HOME\f[R] and restrict permissions to read/write by only you:
.IP
.nf
\f[C]
touch $HOME/.netrc
chmod a\-rwx,u+rw $HOME/.netrc
\f[R]
.fi
.PP
After that you can add credentials for an extractor in the following
format, where \f[I]extractor\f[R] is the name of the extractor in
lowercase:
.IP
.nf
\f[C]
machine <extractor> login <login> password <password>
\f[R]
.fi
.PP
For example:
.IP
.nf
\f[C]
machine youtube login myaccount\[at]gmail.com password my_youtube_password
machine twitch login my_twitch_account_name password my_twitch_password
\f[R]
.fi
.PP
To activate authentication with the \f[C].netrc\f[R] file you should
pass \f[C]\-\-netrc\f[R] to yt\-dlp or place it in the configuration
file.
.PP
On Windows you may also need to setup the \f[C]%HOME%\f[R] environment
variable manually.
For example:
.IP
.nf
\f[C]
set HOME=%USERPROFILE%
\f[R]
.fi
.SH OUTPUT TEMPLATE
.PP
The \f[C]\-o\f[R] option is used to indicate a template for the output
file names while \f[C]\-P\f[R] option is used to specify the path each
type of file should be saved to.
.PP
\f[B]tl;dr:\f[R] navigate me to examples.
.PP
The basic usage of \f[C]\-o\f[R] is not to set any template arguments
when downloading a single file, like in
\f[C]yt\-dlp \-o funny_video.flv \[dq]https://some/video\[dq]\f[R]
(hard\-coding file extension like this is not recommended).
However, it may contain special sequences that will be replaced when
downloading each video.
The special sequences may be formatted according to python string
formatting
operations (https://docs.python.org/2/library/stdtypes.html#string-formatting).
For example, \f[C]%(NAME)s\f[R] or \f[C]%(NAME)05d\f[R].
To clarify, that is a percent symbol followed by a name in parentheses,
followed by formatting operations.
Date/time fields can also be formatted according to strftime
formatting (https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes)
by specifying it inside the parantheses seperated from the field name
using a \f[C]>\f[R].
For example, \f[C]%(duration>%H\-%M\-%S)s\f[R].
.PP
Additionally, you can set different output templates for the various
metadata files seperately from the general output template by specifying
the type of file followed by the template seperated by a colon
\[dq]:\[dq].
The different filetypes supported are \f[C]subtitle\f[R],
\f[C]thumbnail\f[R], \f[C]description\f[R], \f[C]annotation\f[R],
\f[C]infojson\f[R], \f[C]pl_description\f[R], \f[C]pl_infojson\f[R],
\f[C]chapter\f[R].
For example,
\f[C]\-o \[aq]%(title)s.%(ext)s\[aq] \-o \[aq]thumbnail:%(title)s\[rs]%(title)s.%(ext)s\[aq]\f[R]
will put the thumbnails in a folder with the same name as the video.
.PP
The available fields are:
.IP \[bu] 2
\f[C]id\f[R] (string): Video identifier
.IP \[bu] 2
\f[C]title\f[R] (string): Video title
.IP \[bu] 2
\f[C]url\f[R] (string): Video URL
.IP \[bu] 2
\f[C]ext\f[R] (string): Video filename extension
.IP \[bu] 2
\f[C]alt_title\f[R] (string): A secondary title of the video
.IP \[bu] 2
\f[C]description\f[R] (string): The description of the video
.IP \[bu] 2
\f[C]display_id\f[R] (string): An alternative identifier for the video
.IP \[bu] 2
\f[C]uploader\f[R] (string): Full name of the video uploader
.IP \[bu] 2
\f[C]license\f[R] (string): License name the video is licensed under
.IP \[bu] 2
\f[C]creator\f[R] (string): The creator of the video
.IP \[bu] 2
\f[C]release_date\f[R] (string): The date (YYYYMMDD) when the video was
released
.IP \[bu] 2
\f[C]timestamp\f[R] (numeric): UNIX timestamp of the moment the video
became available
.IP \[bu] 2
\f[C]upload_date\f[R] (string): Video upload date (YYYYMMDD)
.IP \[bu] 2
\f[C]uploader_id\f[R] (string): Nickname or id of the video uploader
.IP \[bu] 2
\f[C]channel\f[R] (string): Full name of the channel the video is
uploaded on
.IP \[bu] 2
\f[C]channel_id\f[R] (string): Id of the channel
.IP \[bu] 2
\f[C]location\f[R] (string): Physical location where the video was
filmed
.IP \[bu] 2
\f[C]duration\f[R] (numeric): Length of the video in seconds
.IP \[bu] 2
\f[C]duration_string\f[R] (string): Length of the video (HH\-mm\-ss)
.IP \[bu] 2
\f[C]view_count\f[R] (numeric): How many users have watched the video on
the platform
.IP \[bu] 2
\f[C]like_count\f[R] (numeric): Number of positive ratings of the video
.IP \[bu] 2
\f[C]dislike_count\f[R] (numeric): Number of negative ratings of the
video
.IP \[bu] 2
\f[C]repost_count\f[R] (numeric): Number of reposts of the video
.IP \[bu] 2
\f[C]average_rating\f[R] (numeric): Average rating give by users, the
scale used depends on the webpage
.IP \[bu] 2
\f[C]comment_count\f[R] (numeric): Number of comments on the video (For
some extractors, comments are only downloaded at the end, and so this
field cannot be used)
.IP \[bu] 2
\f[C]age_limit\f[R] (numeric): Age restriction for the video (years)
.IP \[bu] 2
\f[C]is_live\f[R] (boolean): Whether this video is a live stream or a
fixed\-length video
.IP \[bu] 2
\f[C]was_live\f[R] (boolean): Whether this video was originally a live
stream
.IP \[bu] 2
\f[C]playable_in_embed\f[R] (string): Whether this video is allowed to
play in embedded players on other sites
.IP \[bu] 2
\f[C]availability\f[R] (string): Whether the video is \[aq]private\[aq],
\[aq]premium_only\[aq], \[aq]subscriber_only\[aq], \[aq]needs_auth\[aq],
\[aq]unlisted\[aq] or \[aq]public\[aq]
.IP \[bu] 2
\f[C]start_time\f[R] (numeric): Time in seconds where the reproduction
should start, as specified in the URL
.IP \[bu] 2
\f[C]end_time\f[R] (numeric): Time in seconds where the reproduction
should end, as specified in the URL
.IP \[bu] 2
\f[C]format\f[R] (string): A human\-readable description of the format
.IP \[bu] 2
\f[C]format_id\f[R] (string): Format code specified by
\f[C]\-\-format\f[R]
.IP \[bu] 2
\f[C]format_note\f[R] (string): Additional info about the format
.IP \[bu] 2
\f[C]width\f[R] (numeric): Width of the video
.IP \[bu] 2
\f[C]height\f[R] (numeric): Height of the video
.IP \[bu] 2
\f[C]resolution\f[R] (string): Textual description of width and height
.IP \[bu] 2
\f[C]tbr\f[R] (numeric): Average bitrate of audio and video in KBit/s
.IP \[bu] 2
\f[C]abr\f[R] (numeric): Average audio bitrate in KBit/s
.IP \[bu] 2
\f[C]acodec\f[R] (string): Name of the audio codec in use
.IP \[bu] 2
\f[C]asr\f[R] (numeric): Audio sampling rate in Hertz
.IP \[bu] 2
\f[C]vbr\f[R] (numeric): Average video bitrate in KBit/s
.IP \[bu] 2
\f[C]fps\f[R] (numeric): Frame rate
.IP \[bu] 2
\f[C]vcodec\f[R] (string): Name of the video codec in use
.IP \[bu] 2
\f[C]container\f[R] (string): Name of the container format
.IP \[bu] 2
\f[C]filesize\f[R] (numeric): The number of bytes, if known in advance
.IP \[bu] 2
\f[C]filesize_approx\f[R] (numeric): An estimate for the number of bytes
.IP \[bu] 2
\f[C]protocol\f[R] (string): The protocol that will be used for the
actual download
.IP \[bu] 2
\f[C]extractor\f[R] (string): Name of the extractor
.IP \[bu] 2
\f[C]extractor_key\f[R] (string): Key name of the extractor
.IP \[bu] 2
\f[C]epoch\f[R] (numeric): Unix epoch when creating the file
.IP \[bu] 2
\f[C]autonumber\f[R] (numeric): Number that will be increased with each
download, starting at \f[C]\-\-autonumber\-start\f[R]
.IP \[bu] 2
\f[C]playlist\f[R] (string): Name or id of the playlist that contains
the video
.IP \[bu] 2
\f[C]playlist_index\f[R] (numeric): Index of the video in the playlist
padded with leading zeros according to the total length of the playlist
.IP \[bu] 2
\f[C]playlist_id\f[R] (string): Playlist identifier
.IP \[bu] 2
\f[C]playlist_title\f[R] (string): Playlist title
.IP \[bu] 2
\f[C]playlist_uploader\f[R] (string): Full name of the playlist uploader
.IP \[bu] 2
\f[C]playlist_uploader_id\f[R] (string): Nickname or id of the playlist
uploader
.PP
Available for the video that belongs to some logical chapter or section:
.IP \[bu] 2
\f[C]chapter\f[R] (string): Name or title of the chapter the video
belongs to
.IP \[bu] 2
\f[C]chapter_number\f[R] (numeric): Number of the chapter the video
belongs to
.IP \[bu] 2
\f[C]chapter_id\f[R] (string): Id of the chapter the video belongs to
.PP
Available for the video that is an episode of some series or programme:
.IP \[bu] 2
\f[C]series\f[R] (string): Title of the series or programme the video
episode belongs to
.IP \[bu] 2
\f[C]season\f[R] (string): Title of the season the video episode belongs
to
.IP \[bu] 2
\f[C]season_number\f[R] (numeric): Number of the season the video
episode belongs to
.IP \[bu] 2
\f[C]season_id\f[R] (string): Id of the season the video episode belongs
to
.IP \[bu] 2
\f[C]episode\f[R] (string): Title of the video episode
.IP \[bu] 2
\f[C]episode_number\f[R] (numeric): Number of the video episode within a
season
.IP \[bu] 2
\f[C]episode_id\f[R] (string): Id of the video episode
.PP
Available for the media that is a track or a part of a music album:
.IP \[bu] 2
\f[C]track\f[R] (string): Title of the track
.IP \[bu] 2
\f[C]track_number\f[R] (numeric): Number of the track within an album or
a disc
.IP \[bu] 2
\f[C]track_id\f[R] (string): Id of the track
.IP \[bu] 2
\f[C]artist\f[R] (string): Artist(s) of the track
.IP \[bu] 2
\f[C]genre\f[R] (string): Genre(s) of the track
.IP \[bu] 2
\f[C]album\f[R] (string): Title of the album the track belongs to
.IP \[bu] 2
\f[C]album_type\f[R] (string): Type of the album
.IP \[bu] 2
\f[C]album_artist\f[R] (string): List of all artists appeared on the
album
.IP \[bu] 2
\f[C]disc_number\f[R] (numeric): Number of the disc or other physical
medium the track belongs to
.IP \[bu] 2
\f[C]release_year\f[R] (numeric): Year (YYYY) when the album was
released
.PP
Available when using \f[C]\-\-split\-chapters\f[R] for videos with
internal chapters:
.IP \[bu] 2
\f[C]section_title\f[R] (string): Title of the chapter
.IP \[bu] 2
\f[C]section_number\f[R] (numeric): Number of the chapter within the
file
.IP \[bu] 2
\f[C]section_start\f[R] (numeric): Start time of the chapter in seconds
.IP \[bu] 2
\f[C]section_end\f[R] (numeric): End time of the chapter in seconds
.PP
Each aforementioned sequence when referenced in an output template will
be replaced by the actual value corresponding to the sequence name.
Note that some of the sequences are not guaranteed to be present since
they depend on the metadata obtained by a particular extractor.
Such sequences will be replaced with placeholder value provided with
\f[C]\-\-output\-na\-placeholder\f[R] (\f[C]NA\f[R] by default).
.PP
For example for \f[C]\-o %(title)s\-%(id)s.%(ext)s\f[R] and an mp4 video
with title \f[C]yt\-dlp test video\f[R] and id \f[C]BaW_jenozKcj\f[R],
this will result in a \f[C]yt\-dlp test video\-BaW_jenozKcj.mp4\f[R]
file created in the current directory.
.PP
For numeric sequences you can use numeric related formatting, for
example, \f[C]%(view_count)05d\f[R] will result in a string with view
count padded with zeros up to 5 characters, like in \f[C]00042\f[R].
.PP
Output templates can also contain arbitrary hierarchical path, e.g.
\f[C]\-o \[aq]%(playlist)s/%(playlist_index)s \- %(title)s.%(ext)s\[aq]\f[R]
which will result in downloading each video in a directory corresponding
to this path template.
Any missing directory will be automatically created for you.
.PP
To use percent literals in an output template use \f[C]%%\f[R].
To output to stdout use \f[C]\-o \-\f[R].
.PP
The current default template is \f[C]%(title)s [%(id)s].%(ext)s\f[R].
.PP
In some cases, you don\[aq]t want special characters such as \[u4E2D],
spaces, or &, such as when transferring the downloaded filename to a
Windows system or the filename through an 8bit\-unsafe channel.
In these cases, add the \f[C]\-\-restrict\-filenames\f[R] flag to get a
shorter title:
.SS Output template and Windows batch files
.PP
If you are using an output template inside a Windows batch file then you
must escape plain percent characters (\f[C]%\f[R]) by doubling, so that
\f[C]\-o \[dq]%(title)s\-%(id)s.%(ext)s\[dq]\f[R] should become
\f[C]\-o \[dq]%%(title)s\-%%(id)s.%%(ext)s\[dq]\f[R].
However you should not touch \f[C]%\f[R]\[aq]s that are not plain
characters, e.g.
environment variables for expansion should stay intact:
\f[C]\-o \[dq]C:\[rs]%HOMEPATH%\[rs]Desktop\[rs]%%(title)s.%%(ext)s\[dq]\f[R].
.SS Output template examples
.PP
Note that on Windows you need to use double quotes instead of single.
.IP
.nf
\f[C]
$ yt\-dlp \-\-get\-filename \-o \[aq]%(title)s.%(ext)s\[aq] BaW_jenozKc
youtube\-dl test video \[aq]\[aq]_\[:a]\[u21AD]\[u1D550].mp4    # All kinds of weird characters

$ yt\-dlp \-\-get\-filename \-o \[aq]%(title)s.%(ext)s\[aq] BaW_jenozKc \-\-restrict\-filenames
youtube\-dl_test_video_.mp4          # A simple file name

# Download YouTube playlist videos in separate directory indexed by video order in a playlist
$ yt\-dlp \-o \[aq]%(playlist)s/%(playlist_index)s \- %(title)s.%(ext)s\[aq] https://www.youtube.com/playlist?list=PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re

# Download YouTube playlist videos in seperate directories according to their uploaded year
$ yt\-dlp \-o \[aq]%(upload_date>%Y)s/%(title)s.%(ext)s\[aq] https://www.youtube.com/playlist?list=PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re

# Download all playlists of YouTube channel/user keeping each playlist in separate directory:
$ yt\-dlp \-o \[aq]%(uploader)s/%(playlist)s/%(playlist_index)s \- %(title)s.%(ext)s\[aq] https://www.youtube.com/user/TheLinuxFoundation/playlists

# Download Udemy course keeping each chapter in separate directory under MyVideos directory in your home
$ yt\-dlp \-u user \-p password \-P \[aq]\[ti]/MyVideos\[aq] \-o \[aq]%(playlist)s/%(chapter_number)s \- %(chapter)s/%(title)s.%(ext)s\[aq] https://www.udemy.com/java\-tutorial/

# Download entire series season keeping each series and each season in separate directory under C:/MyVideos
$ yt\-dlp \-P \[dq]C:/MyVideos\[dq] \-o \[dq]%(series)s/%(season_number)s \- %(season)s/%(episode_number)s \- %(episode)s.%(ext)s\[dq] https://videomore.ru/kino_v_detalayah/5_sezon/367617

# Stream the video being downloaded to stdout
$ yt\-dlp \-o \- BaW_jenozKc
\f[R]
.fi
.SH FORMAT SELECTION
.PP
By default, yt\-dlp tries to download the best available quality if you
\f[B]don\[aq]t\f[R] pass any options.
This is generally equivalent to using
\f[C]\-f bestvideo*+bestaudio/best\f[R].
However, if multiple audiostreams is enabled
(\f[C]\-\-audio\-multistreams\f[R]), the default format changes to
\f[C]\-f bestvideo+bestaudio/best\f[R].
Similarly, if ffmpeg is unavailable, or if you use yt\-dlp to stream to
\f[C]stdout\f[R] (\f[C]\-o \-\f[R]), the default becomes
\f[C]\-f best/bestvideo+bestaudio\f[R].
.PP
The general syntax for format selection is \f[C]\-\-f FORMAT\f[R] (or
\f[C]\-\-format FORMAT\f[R]) where \f[C]FORMAT\f[R] is a \f[I]selector
expression\f[R], i.e.
an expression that describes format or formats you would like to
download.
.PP
\f[B]tl;dr:\f[R] navigate me to examples.
.PP
The simplest case is requesting a specific format, for example with
\f[C]\-f 22\f[R] you can download the format with format code equal to
22.
You can get the list of available format codes for particular video
using \f[C]\-\-list\-formats\f[R] or \f[C]\-F\f[R].
Note that these format codes are extractor specific.
.PP
You can also use a file extension (currently \f[C]3gp\f[R],
\f[C]aac\f[R], \f[C]flv\f[R], \f[C]m4a\f[R], \f[C]mp3\f[R],
\f[C]mp4\f[R], \f[C]ogg\f[R], \f[C]wav\f[R], \f[C]webm\f[R] are
supported) to download the best quality format of a particular file
extension served as a single file, e.g.
\f[C]\-f webm\f[R] will download the best quality format with the
\f[C]webm\f[R] extension served as a single file.
.PP
You can also use special names to select particular edge case formats:
.IP \[bu] 2
\f[C]all\f[R]: Select all formats
.IP \[bu] 2
\f[C]b*\f[R], \f[C]best*\f[R]: Select the best quality format
irrespective of whether it contains video or audio.
.IP \[bu] 2
\f[C]w*\f[R], \f[C]worst*\f[R]: Select the worst quality format
irrespective of whether it contains video or audio.
.IP \[bu] 2
\f[C]b\f[R], \f[C]best\f[R]: Select the best quality format that
contains both video and audio.
Equivalent to \f[C]best*[vcodec!=none][acodec!=none]\f[R]
.IP \[bu] 2
\f[C]w\f[R], \f[C]worst\f[R]: Select the worst quality format that
contains both video and audio.
Equivalent to \f[C]worst*[vcodec!=none][acodec!=none]\f[R]
.IP \[bu] 2
\f[C]bv\f[R], \f[C]bestvideo\f[R]: Select the best quality video\-only
format.
Equivalent to \f[C]best*[acodec=none]\f[R]
.IP \[bu] 2
\f[C]wv\f[R], \f[C]worstvideo\f[R]: Select the worst quality video\-only
format.
Equivalent to \f[C]worst*[acodec=none]\f[R]
.IP \[bu] 2
\f[C]bv*\f[R], \f[C]bestvideo*\f[R]: Select the best quality format that
contains video.
It may also contain audio.
Equivalent to \f[C]best*[vcodec!=none]\f[R]
.IP \[bu] 2
\f[C]wv*\f[R], \f[C]worstvideo*\f[R]: Select the worst quality format
that contains video.
It may also contain audio.
Equivalent to \f[C]worst*[vcodec!=none]\f[R]
.IP \[bu] 2
\f[C]ba\f[R], \f[C]bestaudio\f[R]: Select the best quality audio\-only
format.
Equivalent to \f[C]best*[vcodec=none]\f[R]
.IP \[bu] 2
\f[C]wa\f[R], \f[C]worstaudio\f[R]: Select the worst quality audio\-only
format.
Equivalent to \f[C]worst*[vcodec=none]\f[R]
.IP \[bu] 2
\f[C]ba*\f[R], \f[C]bestaudio*\f[R]: Select the best quality format that
contains audio.
It may also contain video.
Equivalent to \f[C]best*[acodec!=none]\f[R]
.IP \[bu] 2
\f[C]wa*\f[R], \f[C]worstaudio*\f[R]: Select the worst quality format
that contains audio.
It may also contain video.
Equivalent to \f[C]worst*[acodec!=none]\f[R]
.PP
For example, to download the worst quality video\-only format you can
use \f[C]\-f worstvideo\f[R].
It is however recomended to never actually use \f[C]worst\f[R] and
related options.
When your format selector is \f[C]worst\f[R], the format which is worst
in all respects is selected.
Most of the time, what you actually want is the video with the smallest
filesize instead.
So it is generally better to use
\f[C]\-f best \-S +size,+br,+res,+fps\f[R] instead of
\f[C]\-f worst\f[R].
See sorting formats for more details.
.PP
If you want to download multiple videos and they don\[aq]t have the same
formats available, you can specify the order of preference using
slashes.
Note that formats on the left hand side are preferred, for example
\f[C]\-f 22/17/18\f[R] will download format 22 if it\[aq]s available,
otherwise it will download format 17 if it\[aq]s available, otherwise it
will download format 18 if it\[aq]s available, otherwise it will
complain that no suitable formats are available for download.
.PP
If you want to download several formats of the same video use a comma as
a separator, e.g.
\f[C]\-f 22,17,18\f[R] will download all these three formats, of course
if they are available.
Or a more sophisticated example combined with the precedence feature:
\f[C]\-f 136/137/mp4/bestvideo,140/m4a/bestaudio\f[R].
.PP
You can merge the video and audio of multiple formats into a single file
using \f[C]\-f <format1>+<format2>+...\f[R] (requires ffmpeg installed),
for example \f[C]\-f bestvideo+bestaudio\f[R] will download the best
video\-only format, the best audio\-only format and mux them together
with ffmpeg.
If \f[C]\-\-no\-video\-multistreams\f[R] is used, all formats with a
video stream except the first one are ignored.
Similarly, if \f[C]\-\-no\-audio\-multistreams\f[R] is used, all formats
with an audio stream except the first one are ignored.
For example, \f[C]\-f bestvideo+best+bestaudio\f[R] will download and
merge all 3 given formats.
The resulting file will have 2 video streams and 2 audio streams.
But \f[C]\-f bestvideo+best+bestaudio \-\-no\-video\-multistreams\f[R]
will download and merge only \f[C]bestvideo\f[R] and
\f[C]bestaudio\f[R].
\f[C]best\f[R] is ignored since another format containing a video stream
(\f[C]bestvideo\f[R]) has already been selected.
The order of the formats is therefore important.
\f[C]\-f best+bestaudio \-\-no\-audio\-multistreams\f[R] will download
and merge both formats while
\f[C]\-f bestaudio+best \-\-no\-audio\-multistreams\f[R] will ignore
\f[C]best\f[R] and download only \f[C]bestaudio\f[R].
.SS Filtering Formats
.PP
You can also filter the video formats by putting a condition in
brackets, as in \f[C]\-f \[dq]best[height=720]\[dq]\f[R] (or
\f[C]\-f \[dq][filesize>10M]\[dq]\f[R]).
.PP
The following numeric meta fields can be used with comparisons
\f[C]<\f[R], \f[C]<=\f[R], \f[C]>\f[R], \f[C]>=\f[R], \f[C]=\f[R]
(equals), \f[C]!=\f[R] (not equals):
.IP \[bu] 2
\f[C]filesize\f[R]: The number of bytes, if known in advance
.IP \[bu] 2
\f[C]width\f[R]: Width of the video, if known
.IP \[bu] 2
\f[C]height\f[R]: Height of the video, if known
.IP \[bu] 2
\f[C]tbr\f[R]: Average bitrate of audio and video in KBit/s
.IP \[bu] 2
\f[C]abr\f[R]: Average audio bitrate in KBit/s
.IP \[bu] 2
\f[C]vbr\f[R]: Average video bitrate in KBit/s
.IP \[bu] 2
\f[C]asr\f[R]: Audio sampling rate in Hertz
.IP \[bu] 2
\f[C]fps\f[R]: Frame rate
.PP
Also filtering work for comparisons \f[C]=\f[R] (equals),
\f[C]\[ha]=\f[R] (starts with), \f[C]$=\f[R] (ends with), \f[C]*=\f[R]
(contains) and following string meta fields:
.IP \[bu] 2
\f[C]ext\f[R]: File extension
.IP \[bu] 2
\f[C]acodec\f[R]: Name of the audio codec in use
.IP \[bu] 2
\f[C]vcodec\f[R]: Name of the video codec in use
.IP \[bu] 2
\f[C]container\f[R]: Name of the container format
.IP \[bu] 2
\f[C]protocol\f[R]: The protocol that will be used for the actual
download, lower\-case (\f[C]http\f[R], \f[C]https\f[R], \f[C]rtsp\f[R],
\f[C]rtmp\f[R], \f[C]rtmpe\f[R], \f[C]mms\f[R], \f[C]f4m\f[R],
\f[C]ism\f[R], \f[C]http_dash_segments\f[R], \f[C]m3u8\f[R], or
\f[C]m3u8_native\f[R])
.IP \[bu] 2
\f[C]format_id\f[R]: A short description of the format
.IP \[bu] 2
\f[C]language\f[R]: Language code
.PP
Any string comparison may be prefixed with negation \f[C]!\f[R] in order
to produce an opposite comparison, e.g.
\f[C]!*=\f[R] (does not contain).
.PP
Note that none of the aforementioned meta fields are guaranteed to be
present since this solely depends on the metadata obtained by particular
extractor, i.e.
the metadata offered by the video hoster.
Any other field made available by the extractor can also be used for
filtering.
.PP
Formats for which the value is not known are excluded unless you put a
question mark (\f[C]?\f[R]) after the operator.
You can combine format filters, so
\f[C]\-f \[dq][height<=?720][tbr>500]\[dq]\f[R] selects up to 720p
videos (or videos where the height is not known) with a bitrate of at
least 500 KBit/s.
You can also use the filters with \f[C]all\f[R] to download all formats
that satisfy the filter.
For example, \f[C]\-f \[dq]all[vcodec=none]\[dq]\f[R] selects all
audio\-only formats.
.PP
Format selectors can also be grouped using parentheses, for example if
you want to download the best mp4 and webm formats with a height lower
than 480 you can use \f[C]\-f \[aq](mp4,webm)[height<480]\[aq]\f[R].
.SS Sorting Formats
.PP
You can change the criteria for being considered the \f[C]best\f[R] by
using \f[C]\-S\f[R] (\f[C]\-\-format\-sort\f[R]).
The general format for this is
\f[C]\-\-format\-sort field1,field2...\f[R].
The available fields are:
.IP \[bu] 2
\f[C]hasvid\f[R]: Gives priority to formats that has a video stream
.IP \[bu] 2
\f[C]hasaud\f[R]: Gives priority to formats that has a audio stream
.IP \[bu] 2
\f[C]ie_pref\f[R]: The format preference as given by the extractor
.IP \[bu] 2
\f[C]lang\f[R]: Language preference as given by the extractor
.IP \[bu] 2
\f[C]quality\f[R]: The quality of the format as given by the extractor
.IP \[bu] 2
\f[C]source\f[R]: Preference of the source as given by the extractor
.IP \[bu] 2
\f[C]proto\f[R]: Protocol used for download
(\f[C]https\f[R]/\f[C]ftps\f[R] > \f[C]http\f[R]/\f[C]ftp\f[R] >
\f[C]m3u8\-native\f[R] > \f[C]m3u8\f[R] > \f[C]http\-dash\-segments\f[R]
> other > \f[C]mms\f[R]/\f[C]rtsp\f[R] > unknown >
\f[C]f4f\f[R]/\f[C]f4m\f[R])
.IP \[bu] 2
\f[C]vcodec\f[R]: Video Codec (\f[C]av01\f[R] > \f[C]vp9.2\f[R] >
\f[C]vp9\f[R] > \f[C]h265\f[R] > \f[C]h264\f[R] > \f[C]vp8\f[R] >
\f[C]h263\f[R] > \f[C]theora\f[R] > other > unknown)
.IP \[bu] 2
\f[C]acodec\f[R]: Audio Codec (\f[C]opus\f[R] > \f[C]vorbis\f[R] >
\f[C]aac\f[R] > \f[C]mp4a\f[R] > \f[C]mp3\f[R] > \f[C]ac3\f[R] >
\f[C]dts\f[R] > other > unknown)
.IP \[bu] 2
\f[C]codec\f[R]: Equivalent to \f[C]vcodec,acodec\f[R]
.IP \[bu] 2
\f[C]vext\f[R]: Video Extension (\f[C]mp4\f[R] > \f[C]webm\f[R] >
\f[C]flv\f[R] > other > unknown).
If \f[C]\-\-prefer\-free\-formats\f[R] is used, \f[C]webm\f[R] is
prefered.
.IP \[bu] 2
\f[C]aext\f[R]: Audio Extension (\f[C]m4a\f[R] > \f[C]aac\f[R] >
\f[C]mp3\f[R] > \f[C]ogg\f[R] > \f[C]opus\f[R] > \f[C]webm\f[R] > other
> unknown).
If \f[C]\-\-prefer\-free\-formats\f[R] is used, the order changes to
\f[C]opus\f[R] > \f[C]ogg\f[R] > \f[C]webm\f[R] > \f[C]m4a\f[R] >
\f[C]mp3\f[R] > \f[C]aac\f[R].
.IP \[bu] 2
\f[C]ext\f[R]: Equivalent to \f[C]vext,aext\f[R]
.IP \[bu] 2
\f[C]filesize\f[R]: Exact filesize, if know in advance.
This will be unavailable for mu38 and DASH formats.
.IP \[bu] 2
\f[C]fs_approx\f[R]: Approximate filesize calculated from the manifests
.IP \[bu] 2
\f[C]size\f[R]: Exact filesize if available, otherwise approximate
filesize
.IP \[bu] 2
\f[C]height\f[R]: Height of video
.IP \[bu] 2
\f[C]width\f[R]: Width of video
.IP \[bu] 2
\f[C]res\f[R]: Video resolution, calculated as the smallest dimension.
.IP \[bu] 2
\f[C]fps\f[R]: Framerate of video
.IP \[bu] 2
\f[C]tbr\f[R]: Total average bitrate in KBit/s
.IP \[bu] 2
\f[C]vbr\f[R]: Average video bitrate in KBit/s
.IP \[bu] 2
\f[C]abr\f[R]: Average audio bitrate in KBit/s
.IP \[bu] 2
\f[C]br\f[R]: Equivalent to using \f[C]tbr,vbr,abr\f[R]
.IP \[bu] 2
\f[C]asr\f[R]: Audio sample rate in Hz
.PP
Note that any other \f[B]numerical\f[R] field made available by the
extractor can also be used.
All fields, unless specified otherwise, are sorted in decending order.
To reverse this, prefix the field with a \f[C]+\f[R].
Eg: \f[C]+res\f[R] prefers format with the smallest resolution.
Additionally, you can suffix a prefered value for the fields, seperated
by a \f[C]:\f[R].
Eg: \f[C]res:720\f[R] prefers larger videos, but no larger than 720p and
the smallest video if there are no videos less than 720p.
For \f[C]codec\f[R] and \f[C]ext\f[R], you can provide two prefered
values, the first for video and the second for audio.
Eg: \f[C]+codec:avc:m4a\f[R] (equivalent to
\f[C]+vcodec:avc,+acodec:m4a\f[R]) sets the video codec preference to
\f[C]h264\f[R] > \f[C]h265\f[R] > \f[C]vp9\f[R] > \f[C]vp9.2\f[R] >
\f[C]av01\f[R] > \f[C]vp8\f[R] > \f[C]h263\f[R] > \f[C]theora\f[R] and
audio codec preference to \f[C]mp4a\f[R] > \f[C]aac\f[R] >
\f[C]vorbis\f[R] > \f[C]opus\f[R] > \f[C]mp3\f[R] > \f[C]ac3\f[R] >
\f[C]dts\f[R].
You can also make the sorting prefer the nearest values to the provided
by using \f[C]\[ti]\f[R] as the delimiter.
Eg: \f[C]filesize\[ti]1G\f[R] prefers the format with filesize closest
to 1 GiB.
.PP
The fields \f[C]hasvid\f[R], \f[C]ie_pref\f[R], \f[C]lang\f[R] are
always given highest priority in sorting, irrespective of the
user\-defined order.
This behaviour can be changed by using
\f[C]\-\-force\-format\-sort\f[R].
Apart from these, the default order used is:
\f[C]quality,res,fps,codec:vp9.2,size,br,asr,proto,ext,hasaud,source,id\f[R].
Note that the extractors may override this default order, but they
cannot override the user\-provided order.
.PP
If your format selector is \f[C]worst\f[R], the last item is selected
after sorting.
This means it will select the format that is worst in all repects.
Most of the time, what you actually want is the video with the smallest
filesize instead.
So it is generally better to use
\f[C]\-f best \-S +size,+br,+res,+fps\f[R].
.PP
\f[B]Tip\f[R]: You can use the \f[C]\-v \-F\f[R] to see how the formats
have been sorted (worst to best).
.SS Format Selection examples
.PP
Note that on Windows you may need to use double quotes instead of
single.
.IP
.nf
\f[C]
# Download and merge the best best video\-only format and the best audio\-only format,
# or download the best combined format if video\-only format is not available
$ yt\-dlp \-f \[aq]bv+ba/b\[aq]

# Download best format that contains video,
# and if it doesn\[aq]t already have an audio stream, merge it with best audio\-only format
$ yt\-dlp \-f \[aq]bv*+ba/b\[aq]

# Same as above
$ yt\-dlp

# Download the best video\-only format and the best audio\-only format without merging them
# For this case, an output template should be used since
# by default, bestvideo and bestaudio will have the same file name.
$ yt\-dlp \-f \[aq]bv,ba\[aq] \-o \[aq]%(title)s.f%(format_id)s.%(ext)s\[aq]



# The following examples show the old method (without \-S) of format selection
# and how to use \-S to achieve a similar but better result

# Download the worst video available (old method)
$ yt\-dlp \-f \[aq]wv*+wa/w\[aq]

# Download the best video available but with the smallest resolution
$ yt\-dlp \-S \[aq]+res\[aq]

# Download the smallest video available
$ yt\-dlp \-S \[aq]+size,+br\[aq]



# Download the best mp4 video available, or the best video if no mp4 available
$ yt\-dlp \-f \[aq]bv*[ext=mp4]+ba[ext=m4a]/b[ext=mp4] / bv*+ba/b\[aq]

# Download the best video with the best extension
# (For video, mp4 > webm > flv. For audio, m4a > aac > mp3 ...)
$ yt\-dlp \-S \[aq]ext\[aq]



# Download the best video available but no better than 480p,
# or the worst video if there is no video under 480p
$ yt\-dlp \-f \[aq]bv*[height<=480]+ba/b[height<=480] / wv*+ba/w\[aq]

# Download the best video available with the largest height but no better than 480p,
# or the best video with the smallest resolution if there is no video under 480p
$ yt\-dlp \-S \[aq]height:480\[aq]

# Download the best video available with the largest resolution but no better than 480p,
# or the best video with the smallest resolution if there is no video under 480p
# Resolution is determined by using the smallest dimension.
# So this works correctly for vertical videos as well
$ yt\-dlp \-S \[aq]res:480\[aq]



# Download the best video (that also has audio) but no bigger than 50 MB,
# or the worst video (that also has audio) if there is no video under 50 MB
$ yt\-dlp \-f \[aq]b[filesize<50M] / w\[aq]

# Download largest video (that also has audio) but no bigger than 50 MB,
# or the smallest video (that also has audio) if there is no video under 50 MB
$ yt\-dlp \-f \[aq]b\[aq] \-S \[aq]filesize:50M\[aq]

# Download best video (that also has audio) that is closest in size to 50 MB
$ yt\-dlp \-f \[aq]b\[aq] \-S \[aq]filesize\[ti]50M\[aq]



# Download best video available via direct link over HTTP/HTTPS protocol,
# or the best video available via any protocol if there is no such video
$ yt\-dlp \-f \[aq](bv*+ba/b)[protocol\[ha]=http][protocol!*=dash] / (bv*+ba/b)\[aq]

# Download best video available via the best protocol
# (https/ftps > http/ftp > m3u8_native > m3u8 > http_dash_segments ...)
$ yt\-dlp \-S \[aq]proto\[aq]



# Download the best video with h264 codec, or the best video if there is no such video
$ yt\-dlp \-f \[aq](bv*+ba/b)[vcodec\[ha]=avc1] / (bv*+ba/b)\[aq]

# Download the best video with best codec no better than h264,
# or the best video with worst codec if there is no such video
$ yt\-dlp \-S \[aq]codec:h264\[aq]

# Download the best video with worst codec no worse than h264,
# or the best video with best codec if there is no such video
$ yt\-dlp \-S \[aq]+codec:h264\[aq]



# More complex examples

# Download the best video no better than 720p prefering framerate greater than 30,
# or the worst video (still prefering framerate greater than 30) if there is no such video
$ yt\-dlp \-f \[aq]((bv*[fps>30]/bv*)[height<=720]/(wv*[fps>30]/wv*)) + ba / (b[fps>30]/b)[height<=720]/(w[fps>30]/w)\[aq]

# Download the video with the largest resolution no better than 720p,
# or the video with the smallest resolution available  if there is no such video,
# prefering larger framerate for formats with the same resolution
$ yt\-dlp \-S \[aq]res:720,fps\[aq]



# Download the video with smallest resolution no worse than 480p,
# or the video with the largest resolution available if there is no such video,
# prefering better codec and then larger total bitrate for the same resolution
$ yt\-dlp \-S \[aq]+res:480,codec,br\[aq]
\f[R]
.fi
.SH PLUGINS
.PP
Plugins are loaded from
\f[C]<root\-dir>/ytdlp_plugins/<type>/__init__.py\f[R].
Currently only \f[C]extractor\f[R] plugins are supported.
Support for \f[C]downloader\f[R] and \f[C]postprocessor\f[R] plugins may
be added in the future.
See <ytdlp_plugins> for example.
.PP
\f[B]Note\f[R]: \f[C]<root\-dir>\f[R] is the directory of the binary
(\f[C]<root\-dir>/yt\-dlp\f[R]), or the root directory of the module if
you are running directly from source\-code
(\f[C]<root dir>/yt_dlp/__main__.py\f[R])
.SH DEPRECATED OPTIONS
.PP
These are all the deprecated options and the current alternative to
achieve the same effect
.IP
.nf
\f[C]
\-\-cn\-verification\-proxy URL      \-\-geo\-verification\-proxy URL
\-\-id                             \-o \[dq]%(id)s.%(ext)s\[dq]
\-A, \-\-auto\-number                \-o \[dq]%(autonumber)s\-%(id)s.%(ext)s\[dq]
\-t, \-\-title                      \-o \[dq]%(title)s\-%(id)s.%(ext)s\[dq]
\-l, \-\-literal                    \-o accepts literal names
\-\-autonumber\-size NUMBER         Use string formatting. Eg: %(autonumber)03d
\-\-metadata\-from\-title FORMAT     \-\-parse\-metadata \[dq]title:FORMAT\[dq]
\-\-prefer\-avconv                  avconv is no longer officially supported (Alias: \-\-no\-prefer\-ffmpeg)
\-\-prefer\-ffmpeg                  Default (Alias: \-\-no\-prefer\-avconv)
\-\-avconv\-location                avconv is no longer officially supported
\-C, \-\-call\-home                  Not implemented
\-\-no\-call\-home                   Default
\-\-write\-srt                      \-\-write\-subs
\-\-no\-write\-srt                   \-\-no\-write\-subs
\-\-srt\-lang LANGS                 \-\-sub\-langs LANGS
\-\-prefer\-unsecure                \-\-prefer\-insecure
\-\-rate\-limit RATE                \-\-limit\-rate RATE
\-\-force\-write\-download\-archive   \-\-force\-write\-archive
\-\-dump\-intermediate\-pages        \-\-dump\-pages
\-\-dump\-headers                   \-\-print\-traffic
\-\-youtube\-print\-sig\-code         No longer supported
\-\-trim\-file\-names LENGTH         \-\-trim\-filenames LENGTH
\-\-yes\-overwrites                 \-\-force\-overwrites
\-\-load\-info                      \-\-load\-info\-json
\-\-split\-tracks                   \-\-split\-chapters
\-\-no\-split\-tracks                \-\-no\-split\-chapters
\-\-sponskrub\-args ARGS            \-\-ppa \[dq]sponskrub:ARGS\[dq]
\-\-test                           Only used for testing extractors
\f[R]
.fi
.SH MORE
.PP
For FAQ, Developer Instructions etc., see the original
README (https://github.com/ytdl-org/youtube-dl#faq)
