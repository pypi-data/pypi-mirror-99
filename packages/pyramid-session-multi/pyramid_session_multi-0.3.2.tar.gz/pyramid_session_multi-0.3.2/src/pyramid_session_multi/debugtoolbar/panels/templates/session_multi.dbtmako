<h5>SessionMulti Configuration</h5>
% if configuration:
	<p>Using `ISessionMultiConfiguration`: <code>${configuration["config"]}</code></p>
	<h6>Namespaces</h6>
	<table class="table table-striped table-condensed">
		<thead>
			<tr>
				<th>Namespace</th>
				<th>Cookiename</th>
				<th>Session Factory</th>
				<th>Discriminator</th>
			</tr>
		</thead>
		<tbody>
			% for ns in configuration["namespaces"]:
				<tr>
					<td><code>${ns}</code></td>
					<td><code>${configuration["cookies"][ns]}</code></td>
					<td>${configuration["namespaces"][ns]}</td>
					<td>${configuration["discriminators"][ns]}</td>
				</tr>
			% endfor
		</tbody>
	</table>
% else:
	<p>No `ISessionMultiConfiguration` Configured</p>
% endif


## Panel Active
% if is_active:
	<p>This panel <span class="label label-success">was active</span> for this
	request, and will always display the "SessionMulti" data -- even if 
	`.session_multi` was not accessed during the request.
	This behavior can be toggled with the Panel Settings.</p>
% else:
	<p>This panel <span class="label label-danger">was not active</span> for this
	request, and will only display the "SessionMulti" data if `.session_multi`
	was accessed during the request.
	This behavior can be toggled with the Panel Settings.</p>
% endif


## <h5>Documentation Links</h5>



% if configuration:
	<h5>Session Accessed</h5>
	<table class="table table-striped table-condensed">
	% for ns in session_accessed:
		<tr>
			<td>
				<code>request.session_multi["${ns}"]</code>
				% if session_accessed[ns]["main"]:
					<span class="label label-success">accessed during the main `Request` handler</span>
				% else:
					<span class="label label-warning">not accessed during the main `Request` handler</span>
				% endif
				% if session_accessed[ns]["discriminator_fail"]:
					<span class="label label-danger">Session Discriminator Fail</span>
				% endif
				
			</td>
		</tr>
	% endfor
	</table>


	<h5>Session Data</h5>
	% for ns in session_data:
		% if session_data[ns]["keys"]:
			<h6>Namespace: <code>${ns}</code></h6>

			<table class="table table-striped table-condensed">
				<thead>
					<tr>
						<th>key</th>
						<th>ingress</th>
						<th>egress</th>
					</tr>
				</thead>
				<tbody>
					<%
						try:
							keys = sorted(session_data[ns]["keys"])
						except TypeError:
							keys = sorted(session_data[ns]["keys"], key=lambda k: str(k))
					%>
					% for k in keys:
						<tr>
							<th>
								% if k in session_data[ns]["changed"]:
									<span class="label label-info">!</span>
								% else:
									<span class="label">&nbsp;</span>
								% endif
								&nbsp;
								${k}
							</th>
							<td>
								<% v = session_data[ns]["ingress"].get(k, NotInSession) %>
								% if v is not NotInSession:
									<code>${v|n}</code>
								% endif
							</td>
							<td>
								<% v = session_data[ns]["egress"].get(k, NotInSession) %>
								% if v is not NotInSession:
									<code>${v|n}</code>
								% endif
							</td>
						</tr>
					% endfor
				</tbody>
			</table>
			<hr/>
		% endif
	% endfor
% endif
