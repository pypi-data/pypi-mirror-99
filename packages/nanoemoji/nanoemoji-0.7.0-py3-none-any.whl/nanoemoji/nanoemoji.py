# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Create an emoji font from a set of SVGs.

UFO handling informed by:
Cosimo's https://gist.github.com/anthrotype/2acbc67c75d6fa5833789ec01366a517
Notes for https://github.com/googlefonts/ufo2ft/pull/359

For COLR:
    Each SVG file represent one base glyph in the COLR font.
    For each glyph, we get a sequence of PaintedLayer.
    To convert to font format we  use the UFO Glyph pen.

Sample usage:
nanoemoji -v 1 $(find ~/oss/noto-emoji/svg -name '*.svg')
nanoemoji $(find ~/oss/twemoji/assets/svg -name '*.svg')
"""
from absl import app
from absl import flags
from absl import logging
import glob
from nanoemoji import codepoints, config, write_font
from nanoemoji.config import AxisPosition, FontConfig, MasterConfig
from nanoemoji.util import fs_root, rel, only
from ninja import ninja_syntax
import os
from pathlib import Path
import subprocess
import sys
from typing import List, NamedTuple, Tuple, Sequence


FLAGS = flags.FLAGS


# internal flags, typically client wouldn't change
flags.DEFINE_string("build_dir", "build/", "Where build runs.")
flags.DEFINE_bool("gen_ninja", True, "Whether to regenerate build.ninja")
flags.DEFINE_bool(
    "gen_svg_font_diffs", False, "Whether to generate svg vs font render diffs."
)
flags.DEFINE_integer("svg_font_diff_resolution", 256, "Render diffs resolution")
flags.DEFINE_bool("exec_ninja", True, "Whether to run ninja.")


def self_dir() -> Path:
    return Path(__file__).parent.resolve()


def build_dir() -> Path:
    return Path(FLAGS.build_dir).resolve()


def rel_self(path: Path) -> Path:
    return rel(self_dir(), path)


def rel_build(path: Path) -> Path:
    return rel(build_dir(), path)


def _get_bool_flag(name: str):
    return getattr(FLAGS, name)


def _bool_flag(name: str, value: bool):
    flag = " --"
    if not value:
        flag += "no"
    flag += name
    return flag


def _ufo_rule(master: MasterConfig) -> str:
    return "write_" + master.style_name.lower() + "_ufo"


def _ufo_config(master: MasterConfig) -> str:
    return master.output_ufo + ".toml"


def write_preamble(nw, font_config: FontConfig):
    def module_rule(
        mod_name, arg_pattern, rspfile=None, rspfile_content=None, rule_name=None
    ):
        if not rule_name:
            rule_name = mod_name
        nw.rule(
            rule_name,
            f"{sys.executable} -m nanoemoji.{mod_name} -v {FLAGS.verbosity} {arg_pattern}",
            rspfile=rspfile,
            rspfile_content=rspfile_content,
        )

    def write_font_rule(rule_name, config):
        module_rule(
            "write_font",
            f" --config {config} @$out.rsp",
            rspfile="$out.rsp",
            rspfile_content="$in",
            rule_name=rule_name,
        )
        nw.newline()

    nw.comment("Generated by nanoemoji")
    nw.newline()

    nw.rule(
        f"picosvg",
        f"picosvg "
        + _bool_flag("clip_to_viewbox", font_config.clip_to_viewbox)
        + " --output_file $out"
        + " $in",
    )
    nw.newline()

    module_rule(
        "write_codepoints",
        "--output_file $out @$out.rsp",
        rspfile="$out.rsp",
        rspfile_content="$in",
    )
    nw.newline()

    module_rule("write_fea", "--output_file $out $in")
    nw.newline()

    if len(font_config.masters) == 1:
        write_font_rule("write_font", "config.toml")
    else:
        for master in font_config.masters:
            write_font_rule(_ufo_rule(master), _ufo_config(master))

    if FLAGS.gen_svg_font_diffs:
        nw.rule(
            "write_svg2png",
            f"resvg -h {FLAGS.svg_font_diff_resolution}  -w {FLAGS.svg_font_diff_resolution} $in $out",
        )
        module_rule(
            "write_font2png",
            f"--height {FLAGS.svg_font_diff_resolution}  --width {FLAGS.svg_font_diff_resolution} --output_file $out $in",
        )
        module_rule("write_pngdiff", f"--output_file $out $in")
        module_rule(
            "write_diffreport",
            f"--lhs_dir resvg_png --rhs_dir skia_png --output_file $out @$out.rsp",
            rspfile="$out.rsp",
            rspfile_content="$in",
        )
        nw.newline()

    module_rule("write_variable_font", f"--config config.toml $in")
    nw.newline()


def picosvg_dir(master_name: str) -> Path:
    return build_dir() / "picosvg" / master_name


def picosvg_dest(master_name: str, input_svg: Path) -> str:
    return str(rel_build(picosvg_dir(master_name) / input_svg.name))


def resvg_png_dest(input_svg: Path) -> str:
    dest_file = input_svg.stem + ".png"
    return os.path.join("resvg_png", dest_file)


def skia_png_dest(input_svg: Path) -> str:
    dest_file = input_svg.stem + ".png"
    return os.path.join("skia_png", dest_file)


def diff_png_dest(input_svg: Path) -> str:
    dest_file = input_svg.stem + ".png"
    return os.path.join("diff_png", dest_file)


def write_picosvg_builds(nw: ninja_syntax.Writer, master: MasterConfig):
    os.makedirs(str(picosvg_dir(master.name)), exist_ok=True)
    for svg_file in master.sources:
        nw.build(
            picosvg_dest(master.name, svg_file), "picosvg", str(rel_build(svg_file))
        )


def write_source_names(source_names: Sequence[str]):
    with open(os.path.join(build_dir(), "source_names.txt"), "w") as f:
        for source_name in source_names:
            f.write(source_name)
            f.write("\n")


def write_codepointmap_build(nw: ninja_syntax.Writer):
    dest_file = "codepointmap.csv"
    nw.build(dest_file, "write_codepoints", ["source_names.txt"])
    nw.newline()


def write_fea_build(nw: ninja_syntax.Writer):
    nw.build("features.fea", "write_fea", "codepointmap.csv")
    nw.newline()


def write_svg_font_diff_build(
    nw: ninja_syntax.Writer, font_dest: str, svg_files: Sequence[Path]
):
    # render each svg => png
    for svg_file in svg_files:
        nw.build(resvg_png_dest(svg_file), "write_svg2png", str(rel_build(svg_file)))
    nw.newline()

    # render each input from the font => png
    for svg_file in svg_files:
        inputs = [
            font_dest,
            str(rel_build(svg_file)),
        ]
        nw.build(skia_png_dest(svg_file), "write_font2png", inputs)
    nw.newline()

    # create comparison images
    for svg_file in svg_files:
        inputs = [
            resvg_png_dest(svg_file),
            skia_png_dest(svg_file),
        ]
        nw.build(diff_png_dest(svg_file), "write_pngdiff", inputs)
    nw.newline()

    # write report and kerplode if there are bad diffs
    nw.build("diffs.html", "write_diffreport", [diff_png_dest(f) for f in svg_files])


def _input_svgs(font_config: FontConfig, master: MasterConfig) -> List[str]:
    if font_config.has_picosvgs:
        svg_files = [picosvg_dest(master.name, f) for f in master.sources]
    else:
        svg_files = [str(f.resolve()) for f in master.sources]
    return svg_files


def _update_sources(font_config: FontConfig) -> FontConfig:
    if not font_config.has_picosvgs:
        return font_config
    return font_config._replace(
        masters=tuple(
            master._replace(
                sources=tuple(
                    Path(picosvg_dest(master.name, s)) for s in master.sources
                )
            )
            for master in font_config.masters
        )
    )


def write_ufo_build(
    nw: ninja_syntax.Writer, font_config: FontConfig, master: MasterConfig
):
    ufo_config = font_config._replace(
        output_file=master.output_ufo, output="ufo", masters=(master,)
    )
    ufo_config = _update_sources(ufo_config)
    config.write(build_dir() / _ufo_config(master), ufo_config)
    nw.build(
        master.output_ufo,
        _ufo_rule(master),
        _input_svgs(font_config, master),
    )
    nw.newline()


def write_static_font_build(nw: ninja_syntax.Writer, font_config: FontConfig):
    assert len(font_config.masters) == 1
    nw.build(
        font_config.output_file,
        "write_font",
        ["config.toml"] + _input_svgs(font_config, font_config.masters[0]),
    )
    nw.newline()


def write_variable_font_build(nw: ninja_syntax.Writer, font_config: FontConfig):
    nw.build(
        font_config.output_file,
        "write_variable_font",
        [m.output_ufo for m in font_config.masters],
    )
    nw.newline()


def _write_config_for_build(font_config: FontConfig):
    # Dump config with defaults, CLI args, etc resolved to build
    # and sources updated to point to build picosvgs
    font_config = _update_sources(font_config)

    config_file = build_dir() / "config.toml"
    config.write(config_file, font_config)
    logging.info(f"Wrote {config_file}")


def _run(argv):
    os.makedirs(build_dir(), exist_ok=True)

    font_config = config.load(
        additional_srcs=tuple(Path(f) for f in argv if f.endswith(".svg"))
    )
    _write_config_for_build(font_config)

    is_vf = len(font_config.masters) > 1
    is_svg = font_config.color_format.endswith(
        "svg"
    ) or font_config.color_format.endswith("svgz")
    if is_vf and is_svg:
        raise ValueError("svg formats cannot have multiple masters")

    if FLAGS.gen_svg_font_diffs:
        os.makedirs(os.path.join(build_dir(), "resvg_png"), exist_ok=True)
        os.makedirs(os.path.join(build_dir(), "skia_png"), exist_ok=True)
        os.makedirs(os.path.join(build_dir(), "diff_png"), exist_ok=True)

    build_file = build_dir() / "build.ninja"

    if FLAGS.gen_ninja:
        logging.info(f"Generating {build_file.relative_to(build_dir())}")
        write_source_names(font_config.source_names)
        with open(build_file, "w") as f:
            nw = ninja_syntax.Writer(f)
            write_preamble(nw, font_config)

            if FLAGS.gen_svg_font_diffs:
                assert not is_vf
                write_svg_font_diff_build(
                    nw, font_config.output_file, font_config.masters[0].sources
                )

            write_codepointmap_build(nw)
            write_fea_build(nw)

            for master in font_config.masters:
                if not font_config.color_format.startswith("untouchedsvg"):
                    write_picosvg_builds(nw, master)
                if is_vf:
                    write_ufo_build(nw, font_config, master)

            if is_vf:
                write_variable_font_build(nw, font_config)
            else:
                write_static_font_build(nw, font_config)

    ninja_cmd = ["ninja", "-C", os.path.dirname(build_file)]
    if FLAGS.exec_ninja:
        logging.info(" ".join(ninja_cmd))
        subprocess.run(ninja_cmd, check=True)
    else:
        logging.info("To run: " + " ".join(ninja_cmd))

    return


def main():
    # We don't seem to be __main__ when run as cli tool installed by setuptools
    app.run(_run)


if __name__ == "__main__":
    app.run(_run)
