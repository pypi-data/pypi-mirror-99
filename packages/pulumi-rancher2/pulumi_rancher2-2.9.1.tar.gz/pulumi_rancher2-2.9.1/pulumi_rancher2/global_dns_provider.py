# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['GlobalDnsProvider']


class GlobalDnsProvider(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alidns_config: Optional[pulumi.Input[pulumi.InputType['GlobalDnsProviderAlidnsConfigArgs']]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 cloudflare_config: Optional[pulumi.Input[pulumi.InputType['GlobalDnsProviderCloudflareConfigArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 root_domain: Optional[pulumi.Input[str]] = None,
                 route53_config: Optional[pulumi.Input[pulumi.InputType['GlobalDnsProviderRoute53ConfigArgs']]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Provides a Rancher V2 Global DNS Provider resource. This can be used to create Global DNS Providers for Rancher V2. Supported Global DNS Providers: `alidns, cloudflare, route53`

        ## Example Usage

        ```python
        import pulumi
        import pulumi_rancher2 as rancher2

        # Create a new rancher2 Global DNS Provider - alidns
        foo = rancher2.GlobalDnsProvider("foo",
            alidns_config=rancher2.GlobalDnsProviderAlidnsConfigArgs(
                access_key="YYYYYYYYYYYYYYYYYYYY",
                secret_key="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
            ),
            root_domain="example.com")
        ```

        ```python
        import pulumi
        import pulumi_rancher2 as rancher2

        # Create a new rancher2 Global DNS Provider - cloudflare
        foo = rancher2.GlobalDnsProvider("foo",
            cloudflare_config=rancher2.GlobalDnsProviderCloudflareConfigArgs(
                api_email="test@test.local",
                api_key="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
                proxy_setting=True,
            ),
            root_domain="example.com")
        ```

        ```python
        import pulumi
        import pulumi_rancher2 as rancher2

        # Create a new rancher2 Global DNS Provider - route53
        foo = rancher2.GlobalDnsProvider("foo",
            root_domain="example.com",
            route53_config=rancher2.GlobalDnsProviderRoute53ConfigArgs(
                access_key="YYYYYYYYYYYYYYYYYYYY",
                region="us-east-1",
                secret_key="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
                zone_type="private",
            ))
        ```

        ## Import

        Global DNS Providers can be imported using the Rancher Global DNS Provider ID

        ```sh
         $ pulumi import rancher2:index/globalDnsProvider:GlobalDnsProvider foo <global_dns_provider_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations for Global DNS Provider (map)
        :param pulumi.Input[Mapping[str, Any]] labels: Labels for Global DNS Provider (map)
        :param pulumi.Input[str] name: The name of the Global DNS Provider (string)
        :param pulumi.Input[str] root_domain: The user ID to assign Global DNS Provider (string)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['alidns_config'] = alidns_config
            __props__['annotations'] = annotations
            __props__['cloudflare_config'] = cloudflare_config
            __props__['labels'] = labels
            __props__['name'] = name
            if root_domain is None and not opts.urn:
                raise TypeError("Missing required property 'root_domain'")
            __props__['root_domain'] = root_domain
            __props__['route53_config'] = route53_config
            __props__['dns_provider'] = None
        super(GlobalDnsProvider, __self__).__init__(
            'rancher2:index/globalDnsProvider:GlobalDnsProvider',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alidns_config: Optional[pulumi.Input[pulumi.InputType['GlobalDnsProviderAlidnsConfigArgs']]] = None,
            annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            cloudflare_config: Optional[pulumi.Input[pulumi.InputType['GlobalDnsProviderCloudflareConfigArgs']]] = None,
            dns_provider: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            root_domain: Optional[pulumi.Input[str]] = None,
            route53_config: Optional[pulumi.Input[pulumi.InputType['GlobalDnsProviderRoute53ConfigArgs']]] = None) -> 'GlobalDnsProvider':
        """
        Get an existing GlobalDnsProvider resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations for Global DNS Provider (map)
        :param pulumi.Input[str] dns_provider: (Computed) The Global DNS Provider `alidns, cloudflare, route53` (string)
        :param pulumi.Input[Mapping[str, Any]] labels: Labels for Global DNS Provider (map)
        :param pulumi.Input[str] name: The name of the Global DNS Provider (string)
        :param pulumi.Input[str] root_domain: The user ID to assign Global DNS Provider (string)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["alidns_config"] = alidns_config
        __props__["annotations"] = annotations
        __props__["cloudflare_config"] = cloudflare_config
        __props__["dns_provider"] = dns_provider
        __props__["labels"] = labels
        __props__["name"] = name
        __props__["root_domain"] = root_domain
        __props__["route53_config"] = route53_config
        return GlobalDnsProvider(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alidnsConfig")
    def alidns_config(self) -> pulumi.Output[Optional['outputs.GlobalDnsProviderAlidnsConfig']]:
        return pulumi.get(self, "alidns_config")

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Annotations for Global DNS Provider (map)
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="cloudflareConfig")
    def cloudflare_config(self) -> pulumi.Output[Optional['outputs.GlobalDnsProviderCloudflareConfig']]:
        return pulumi.get(self, "cloudflare_config")

    @property
    @pulumi.getter(name="dnsProvider")
    def dns_provider(self) -> pulumi.Output[str]:
        """
        (Computed) The Global DNS Provider `alidns, cloudflare, route53` (string)
        """
        return pulumi.get(self, "dns_provider")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Labels for Global DNS Provider (map)
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the Global DNS Provider (string)
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="rootDomain")
    def root_domain(self) -> pulumi.Output[str]:
        """
        The user ID to assign Global DNS Provider (string)
        """
        return pulumi.get(self, "root_domain")

    @property
    @pulumi.getter(name="route53Config")
    def route53_config(self) -> pulumi.Output[Optional['outputs.GlobalDnsProviderRoute53Config']]:
        return pulumi.get(self, "route53_config")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

