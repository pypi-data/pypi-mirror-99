# coding: utf-8

"""
    NCBI Datasets API

    NCBI service to query and download biological sequence data across all domains of life from NCBI databases.  # noqa: E501

    The version of the OpenAPI document: v1alpha
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ncbi.datasets.openapi.configuration import Configuration


class V1alpha1Warning(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'gene_warning_code': 'WarningGeneWarningCode',
        'message': 'str',
        'reason': 'str',
        'replaced_id': 'WarningReplacedId',
        'unrecognized_identifier': 'str'
    }

    attribute_map = {
        'gene_warning_code': 'gene_warning_code',
        'message': 'message',
        'reason': 'reason',
        'replaced_id': 'replaced_id',
        'unrecognized_identifier': 'unrecognized_identifier'
    }

    def __init__(self, gene_warning_code=None, message=None, reason=None, replaced_id=None, unrecognized_identifier=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1Warning - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._gene_warning_code = None
        self._message = None
        self._reason = None
        self._replaced_id = None
        self._unrecognized_identifier = None
        self.discriminator = None

        if gene_warning_code is not None:
            self.gene_warning_code = gene_warning_code
        if message is not None:
            self.message = message
        if reason is not None:
            self.reason = reason
        if replaced_id is not None:
            self.replaced_id = replaced_id
        if unrecognized_identifier is not None:
            self.unrecognized_identifier = unrecognized_identifier

    @property
    def gene_warning_code(self):
        """Gets the gene_warning_code of this V1alpha1Warning.  # noqa: E501


        :return: The gene_warning_code of this V1alpha1Warning.  # noqa: E501
        :rtype: WarningGeneWarningCode
        """
        return self._gene_warning_code

    @gene_warning_code.setter
    def gene_warning_code(self, gene_warning_code):
        """Sets the gene_warning_code of this V1alpha1Warning.


        :param gene_warning_code: The gene_warning_code of this V1alpha1Warning.  # noqa: E501
        :type: WarningGeneWarningCode
        """

        self._gene_warning_code = gene_warning_code

    @property
    def message(self):
        """Gets the message of this V1alpha1Warning.  # noqa: E501


        :return: The message of this V1alpha1Warning.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this V1alpha1Warning.


        :param message: The message of this V1alpha1Warning.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def reason(self):
        """Gets the reason of this V1alpha1Warning.  # noqa: E501


        :return: The reason of this V1alpha1Warning.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this V1alpha1Warning.


        :param reason: The reason of this V1alpha1Warning.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def replaced_id(self):
        """Gets the replaced_id of this V1alpha1Warning.  # noqa: E501


        :return: The replaced_id of this V1alpha1Warning.  # noqa: E501
        :rtype: WarningReplacedId
        """
        return self._replaced_id

    @replaced_id.setter
    def replaced_id(self, replaced_id):
        """Sets the replaced_id of this V1alpha1Warning.


        :param replaced_id: The replaced_id of this V1alpha1Warning.  # noqa: E501
        :type: WarningReplacedId
        """

        self._replaced_id = replaced_id

    @property
    def unrecognized_identifier(self):
        """Gets the unrecognized_identifier of this V1alpha1Warning.  # noqa: E501


        :return: The unrecognized_identifier of this V1alpha1Warning.  # noqa: E501
        :rtype: str
        """
        return self._unrecognized_identifier

    @unrecognized_identifier.setter
    def unrecognized_identifier(self, unrecognized_identifier):
        """Sets the unrecognized_identifier of this V1alpha1Warning.


        :param unrecognized_identifier: The unrecognized_identifier of this V1alpha1Warning.  # noqa: E501
        :type: str
        """

        self._unrecognized_identifier = unrecognized_identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1Warning):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1Warning):
            return True

        return self.to_dict() != other.to_dict()
