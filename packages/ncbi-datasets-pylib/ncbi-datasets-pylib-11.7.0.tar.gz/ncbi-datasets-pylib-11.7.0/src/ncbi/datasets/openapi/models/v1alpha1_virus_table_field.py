# coding: utf-8

"""
    NCBI Datasets API

    NCBI service to query and download biological sequence data across all domains of life from NCBI databases.  # noqa: E501

    The version of the OpenAPI document: v1alpha
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ncbi.datasets.openapi.configuration import Configuration


class V1alpha1VirusTableField(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    UNSPECIFIED = "unspecified"
    NUCLEOTIDE_ACCESSION = "nucleotide_accession"
    SPECIES_TAX_ID = "species_tax_id"
    SPECIES_NAME = "species_name"
    GENUS = "genus"
    FAMILY = "family"
    NUCLEOTIDE_LENGTH = "nucleotide_length"
    ISOLATE_NAME = "isolate_name"
    SEQUENCE_TYPE = "sequence_type"
    NUC_COMPLETENESS = "nuc_completeness"
    GEO_LOCATION = "geo_location"
    US_STATE = "us_state"
    HOST_NAME = "host_name"
    HOST_TAX_ID = "host_tax_id"
    COLLECTION_DATE = "collection_date"
    BIOPROJECT = "bioproject"
    BIOSAMPLE = "biosample"
    POLYPROTEIN_NAME = "polyprotein_name"
    PROTEIN_NAME = "protein_name"
    PROTEIN_ACCESSION = "protein_accession"
    PROTEIN_SYNONYM = "protein_synonym"
    CDS_SPAN = "cds_span"

    allowable_values = [UNSPECIFIED, NUCLEOTIDE_ACCESSION, SPECIES_TAX_ID, SPECIES_NAME, GENUS, FAMILY, NUCLEOTIDE_LENGTH, ISOLATE_NAME, SEQUENCE_TYPE, NUC_COMPLETENESS, GEO_LOCATION, US_STATE, HOST_NAME, HOST_TAX_ID, COLLECTION_DATE, BIOPROJECT, BIOSAMPLE, POLYPROTEIN_NAME, PROTEIN_NAME, PROTEIN_ACCESSION, PROTEIN_SYNONYM, CDS_SPAN]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """V1alpha1VirusTableField - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1VirusTableField):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1VirusTableField):
            return True

        return self.to_dict() != other.to_dict()
