# coding: utf-8

"""
    NCBI Datasets API

    NCBI service to query and download biological sequence data across all domains of life from NCBI databases.  # noqa: E501

    The version of the OpenAPI document: v1alpha
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ncbi.datasets.openapi.configuration import Configuration


class OrganismRankType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    NO_RANK = "NO_RANK"
    SUPERKINGDOM = "SUPERKINGDOM"
    KINGDOM = "KINGDOM"
    SUBKINGDOM = "SUBKINGDOM"
    SUPERPHYLUM = "SUPERPHYLUM"
    SUBPHYLUM = "SUBPHYLUM"
    PHYLUM = "PHYLUM"
    CLADE = "CLADE"
    SUPERCLASS = "SUPERCLASS"
    CLASS = "CLASS"
    SUBCLASS = "SUBCLASS"
    INFRACLASS = "INFRACLASS"
    COHORT = "COHORT"
    SUBCOHORT = "SUBCOHORT"
    SUPERORDER = "SUPERORDER"
    ORDER = "ORDER"
    SUBORDER = "SUBORDER"
    INFRAORDER = "INFRAORDER"
    PARVORDER = "PARVORDER"
    SUPERFAMILY = "SUPERFAMILY"
    FAMILY = "FAMILY"
    SUBFAMILY = "SUBFAMILY"
    GENUS = "GENUS"
    SUBGENUS = "SUBGENUS"
    SPECIES_GROUP = "SPECIES_GROUP"
    SPECIES_SUBGROUP = "SPECIES_SUBGROUP"
    SPECIES = "SPECIES"
    SUBSPECIES = "SUBSPECIES"
    TRIBE = "TRIBE"
    SUBTRIBE = "SUBTRIBE"
    FORMA = "FORMA"
    VARIETAS = "VARIETAS"
    STRAIN = "STRAIN"
    SECTION = "SECTION"
    SUBSECTION = "SUBSECTION"
    PATHOGROUP = "PATHOGROUP"
    SUBVARIETY = "SUBVARIETY"
    GENOTYPE = "GENOTYPE"
    SEROTYPE = "SEROTYPE"
    ISOLATE = "ISOLATE"
    MORPH = "MORPH"
    SERIES = "SERIES"
    FORMA_SPECIALIS = "FORMA_SPECIALIS"
    SEROGROUP = "SEROGROUP"
    BIOTYPE = "BIOTYPE"

    allowable_values = [NO_RANK, SUPERKINGDOM, KINGDOM, SUBKINGDOM, SUPERPHYLUM, SUBPHYLUM, PHYLUM, CLADE, SUPERCLASS, CLASS, SUBCLASS, INFRACLASS, COHORT, SUBCOHORT, SUPERORDER, ORDER, SUBORDER, INFRAORDER, PARVORDER, SUPERFAMILY, FAMILY, SUBFAMILY, GENUS, SUBGENUS, SPECIES_GROUP, SPECIES_SUBGROUP, SPECIES, SUBSPECIES, TRIBE, SUBTRIBE, FORMA, VARIETAS, STRAIN, SECTION, SUBSECTION, PATHOGROUP, SUBVARIETY, GENOTYPE, SEROTYPE, ISOLATE, MORPH, SERIES, FORMA_SPECIALIS, SEROGROUP, BIOTYPE]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """OrganismRankType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganismRankType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganismRankType):
            return True

        return self.to_dict() != other.to_dict()
