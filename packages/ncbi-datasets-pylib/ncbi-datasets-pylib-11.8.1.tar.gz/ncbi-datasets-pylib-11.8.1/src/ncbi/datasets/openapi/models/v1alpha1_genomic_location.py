# coding: utf-8

"""
    NCBI Datasets API

    NCBI service to query and download biological sequence data across all domains of life from NCBI databases.  # noqa: E501

    The version of the OpenAPI document: v1alpha
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ncbi.datasets.openapi.configuration import Configuration


class V1alpha1GenomicLocation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'exons': 'list[V1alpha1Range]',
        'genomic_accession_version': 'str',
        'genomic_range': 'V1alpha1Range',
        'sequence_name': 'str'
    }

    attribute_map = {
        'exons': 'exons',
        'genomic_accession_version': 'genomic_accession_version',
        'genomic_range': 'genomic_range',
        'sequence_name': 'sequence_name'
    }

    def __init__(self, exons=None, genomic_accession_version=None, genomic_range=None, sequence_name=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1GenomicLocation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._exons = None
        self._genomic_accession_version = None
        self._genomic_range = None
        self._sequence_name = None
        self.discriminator = None

        if exons is not None:
            self.exons = exons
        if genomic_accession_version is not None:
            self.genomic_accession_version = genomic_accession_version
        if genomic_range is not None:
            self.genomic_range = genomic_range
        if sequence_name is not None:
            self.sequence_name = sequence_name

    @property
    def exons(self):
        """Gets the exons of this V1alpha1GenomicLocation.  # noqa: E501


        :return: The exons of this V1alpha1GenomicLocation.  # noqa: E501
        :rtype: list[V1alpha1Range]
        """
        return self._exons

    @exons.setter
    def exons(self, exons):
        """Sets the exons of this V1alpha1GenomicLocation.


        :param exons: The exons of this V1alpha1GenomicLocation.  # noqa: E501
        :type: list[V1alpha1Range]
        """

        self._exons = exons

    @property
    def genomic_accession_version(self):
        """Gets the genomic_accession_version of this V1alpha1GenomicLocation.  # noqa: E501


        :return: The genomic_accession_version of this V1alpha1GenomicLocation.  # noqa: E501
        :rtype: str
        """
        return self._genomic_accession_version

    @genomic_accession_version.setter
    def genomic_accession_version(self, genomic_accession_version):
        """Sets the genomic_accession_version of this V1alpha1GenomicLocation.


        :param genomic_accession_version: The genomic_accession_version of this V1alpha1GenomicLocation.  # noqa: E501
        :type: str
        """

        self._genomic_accession_version = genomic_accession_version

    @property
    def genomic_range(self):
        """Gets the genomic_range of this V1alpha1GenomicLocation.  # noqa: E501


        :return: The genomic_range of this V1alpha1GenomicLocation.  # noqa: E501
        :rtype: V1alpha1Range
        """
        return self._genomic_range

    @genomic_range.setter
    def genomic_range(self, genomic_range):
        """Sets the genomic_range of this V1alpha1GenomicLocation.


        :param genomic_range: The genomic_range of this V1alpha1GenomicLocation.  # noqa: E501
        :type: V1alpha1Range
        """

        self._genomic_range = genomic_range

    @property
    def sequence_name(self):
        """Gets the sequence_name of this V1alpha1GenomicLocation.  # noqa: E501


        :return: The sequence_name of this V1alpha1GenomicLocation.  # noqa: E501
        :rtype: str
        """
        return self._sequence_name

    @sequence_name.setter
    def sequence_name(self, sequence_name):
        """Sets the sequence_name of this V1alpha1GenomicLocation.


        :param sequence_name: The sequence_name of this V1alpha1GenomicLocation.  # noqa: E501
        :type: str
        """

        self._sequence_name = sequence_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1GenomicLocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1GenomicLocation):
            return True

        return self.to_dict() != other.to_dict()
