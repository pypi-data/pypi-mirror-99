# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class WorkspacePartialUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'production': 'Production',
        'volume': 'Volume',
        'sharing_nfs_permissions': 'object',
        'name': 'str',
        'description': 'str',
        'long_description': 'str',
        'is_template': 'bool',
        'active': 'bool',
        'mac_protocol': 'str',
        'win_protocol': 'str',
        'win_drive': 'str',
        'linux_protocol': 'str',
        'linux_mountpoint': 'str',
        'share_name': 'str',
        'share_nfs': 'bool',
        'share_afp': 'bool',
        'sharing_hidden': 'bool',
        'sharing_require_login': 'bool',
        'sharing_read_only': 'bool',
        'sharing_allow_execute': 'bool',
        'quota_size_hard': 'int',
        'quota_size_soft': 'int',
        'affinity': 'str',
        'emulate_avid': 'bool',
        'emulate_capture': 'bool',
        'emulate_preopen': 'bool',
        'emulate_ntfs_streams': 'bool',
        'emulate_recycle_bin': 'bool',
        'emulate_fruit': 'bool',
        'smb_extra_config': 'str',
        'afp_extra_config': 'str',
        'recycle_bin_exclude': 'str',
        'is_external': 'bool',
        'external_mac_url': 'str',
        'external_win_url': 'str',
        'external_linux_url': 'str',
        'allow_symlinks': 'bool',
        'rw_permission_priority': 'bool',
        'template': 'int'
    }

    attribute_map = {
        'production': 'production',
        'volume': 'volume',
        'sharing_nfs_permissions': 'sharing_nfs_permissions',
        'name': 'name',
        'description': 'description',
        'long_description': 'long_description',
        'is_template': 'is_template',
        'active': 'active',
        'mac_protocol': 'mac_protocol',
        'win_protocol': 'win_protocol',
        'win_drive': 'win_drive',
        'linux_protocol': 'linux_protocol',
        'linux_mountpoint': 'linux_mountpoint',
        'share_name': 'share_name',
        'share_nfs': 'share_nfs',
        'share_afp': 'share_afp',
        'sharing_hidden': 'sharing_hidden',
        'sharing_require_login': 'sharing_require_login',
        'sharing_read_only': 'sharing_read_only',
        'sharing_allow_execute': 'sharing_allow_execute',
        'quota_size_hard': 'quota_size_hard',
        'quota_size_soft': 'quota_size_soft',
        'affinity': 'affinity',
        'emulate_avid': 'emulate_avid',
        'emulate_capture': 'emulate_capture',
        'emulate_preopen': 'emulate_preopen',
        'emulate_ntfs_streams': 'emulate_ntfs_streams',
        'emulate_recycle_bin': 'emulate_recycle_bin',
        'emulate_fruit': 'emulate_fruit',
        'smb_extra_config': 'smb_extra_config',
        'afp_extra_config': 'afp_extra_config',
        'recycle_bin_exclude': 'recycle_bin_exclude',
        'is_external': 'is_external',
        'external_mac_url': 'external_mac_url',
        'external_win_url': 'external_win_url',
        'external_linux_url': 'external_linux_url',
        'allow_symlinks': 'allow_symlinks',
        'rw_permission_priority': 'rw_permission_priority',
        'template': 'template'
    }

    def __init__(self, production=None, volume=None, sharing_nfs_permissions=None, name=None, description=None, long_description=None, is_template=None, active=None, mac_protocol=None, win_protocol=None, win_drive=None, linux_protocol=None, linux_mountpoint=None, share_name=None, share_nfs=None, share_afp=None, sharing_hidden=None, sharing_require_login=None, sharing_read_only=None, sharing_allow_execute=None, quota_size_hard=None, quota_size_soft=None, affinity=None, emulate_avid=None, emulate_capture=None, emulate_preopen=None, emulate_ntfs_streams=None, emulate_recycle_bin=None, emulate_fruit=None, smb_extra_config=None, afp_extra_config=None, recycle_bin_exclude=None, is_external=None, external_mac_url=None, external_win_url=None, external_linux_url=None, allow_symlinks=None, rw_permission_priority=None, template=None, local_vars_configuration=None):  # noqa: E501
        """WorkspacePartialUpdate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._production = None
        self._volume = None
        self._sharing_nfs_permissions = None
        self._name = None
        self._description = None
        self._long_description = None
        self._is_template = None
        self._active = None
        self._mac_protocol = None
        self._win_protocol = None
        self._win_drive = None
        self._linux_protocol = None
        self._linux_mountpoint = None
        self._share_name = None
        self._share_nfs = None
        self._share_afp = None
        self._sharing_hidden = None
        self._sharing_require_login = None
        self._sharing_read_only = None
        self._sharing_allow_execute = None
        self._quota_size_hard = None
        self._quota_size_soft = None
        self._affinity = None
        self._emulate_avid = None
        self._emulate_capture = None
        self._emulate_preopen = None
        self._emulate_ntfs_streams = None
        self._emulate_recycle_bin = None
        self._emulate_fruit = None
        self._smb_extra_config = None
        self._afp_extra_config = None
        self._recycle_bin_exclude = None
        self._is_external = None
        self._external_mac_url = None
        self._external_win_url = None
        self._external_linux_url = None
        self._allow_symlinks = None
        self._rw_permission_priority = None
        self._template = None
        self.discriminator = None

        if production is not None:
            self.production = production
        if volume is not None:
            self.volume = volume
        if sharing_nfs_permissions is not None:
            self.sharing_nfs_permissions = sharing_nfs_permissions
        if name is not None:
            self.name = name
        self.description = description
        if long_description is not None:
            self.long_description = long_description
        if is_template is not None:
            self.is_template = is_template
        if active is not None:
            self.active = active
        if mac_protocol is not None:
            self.mac_protocol = mac_protocol
        if win_protocol is not None:
            self.win_protocol = win_protocol
        self.win_drive = win_drive
        if linux_protocol is not None:
            self.linux_protocol = linux_protocol
        self.linux_mountpoint = linux_mountpoint
        self.share_name = share_name
        if share_nfs is not None:
            self.share_nfs = share_nfs
        if share_afp is not None:
            self.share_afp = share_afp
        if sharing_hidden is not None:
            self.sharing_hidden = sharing_hidden
        if sharing_require_login is not None:
            self.sharing_require_login = sharing_require_login
        if sharing_read_only is not None:
            self.sharing_read_only = sharing_read_only
        if sharing_allow_execute is not None:
            self.sharing_allow_execute = sharing_allow_execute
        self.quota_size_hard = quota_size_hard
        self.quota_size_soft = quota_size_soft
        self.affinity = affinity
        if emulate_avid is not None:
            self.emulate_avid = emulate_avid
        if emulate_capture is not None:
            self.emulate_capture = emulate_capture
        if emulate_preopen is not None:
            self.emulate_preopen = emulate_preopen
        if emulate_ntfs_streams is not None:
            self.emulate_ntfs_streams = emulate_ntfs_streams
        if emulate_recycle_bin is not None:
            self.emulate_recycle_bin = emulate_recycle_bin
        if emulate_fruit is not None:
            self.emulate_fruit = emulate_fruit
        if smb_extra_config is not None:
            self.smb_extra_config = smb_extra_config
        if afp_extra_config is not None:
            self.afp_extra_config = afp_extra_config
        self.recycle_bin_exclude = recycle_bin_exclude
        if is_external is not None:
            self.is_external = is_external
        self.external_mac_url = external_mac_url
        self.external_win_url = external_win_url
        self.external_linux_url = external_linux_url
        if allow_symlinks is not None:
            self.allow_symlinks = allow_symlinks
        if rw_permission_priority is not None:
            self.rw_permission_priority = rw_permission_priority
        self.template = template

    @property
    def production(self):
        """Gets the production of this WorkspacePartialUpdate.  # noqa: E501


        :return: The production of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: Production
        """
        return self._production

    @production.setter
    def production(self, production):
        """Sets the production of this WorkspacePartialUpdate.


        :param production: The production of this WorkspacePartialUpdate.  # noqa: E501
        :type: Production
        """

        self._production = production

    @property
    def volume(self):
        """Gets the volume of this WorkspacePartialUpdate.  # noqa: E501


        :return: The volume of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: Volume
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this WorkspacePartialUpdate.


        :param volume: The volume of this WorkspacePartialUpdate.  # noqa: E501
        :type: Volume
        """

        self._volume = volume

    @property
    def sharing_nfs_permissions(self):
        """Gets the sharing_nfs_permissions of this WorkspacePartialUpdate.  # noqa: E501


        :return: The sharing_nfs_permissions of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: object
        """
        return self._sharing_nfs_permissions

    @sharing_nfs_permissions.setter
    def sharing_nfs_permissions(self, sharing_nfs_permissions):
        """Sets the sharing_nfs_permissions of this WorkspacePartialUpdate.


        :param sharing_nfs_permissions: The sharing_nfs_permissions of this WorkspacePartialUpdate.  # noqa: E501
        :type: object
        """

        self._sharing_nfs_permissions = sharing_nfs_permissions

    @property
    def name(self):
        """Gets the name of this WorkspacePartialUpdate.  # noqa: E501


        :return: The name of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkspacePartialUpdate.


        :param name: The name of this WorkspacePartialUpdate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this WorkspacePartialUpdate.  # noqa: E501


        :return: The description of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkspacePartialUpdate.


        :param description: The description of this WorkspacePartialUpdate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 255):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501

        self._description = description

    @property
    def long_description(self):
        """Gets the long_description of this WorkspacePartialUpdate.  # noqa: E501


        :return: The long_description of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this WorkspacePartialUpdate.


        :param long_description: The long_description of this WorkspacePartialUpdate.  # noqa: E501
        :type: str
        """

        self._long_description = long_description

    @property
    def is_template(self):
        """Gets the is_template of this WorkspacePartialUpdate.  # noqa: E501


        :return: The is_template of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._is_template

    @is_template.setter
    def is_template(self, is_template):
        """Sets the is_template of this WorkspacePartialUpdate.


        :param is_template: The is_template of this WorkspacePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._is_template = is_template

    @property
    def active(self):
        """Gets the active of this WorkspacePartialUpdate.  # noqa: E501


        :return: The active of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this WorkspacePartialUpdate.


        :param active: The active of this WorkspacePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def mac_protocol(self):
        """Gets the mac_protocol of this WorkspacePartialUpdate.  # noqa: E501


        :return: The mac_protocol of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._mac_protocol

    @mac_protocol.setter
    def mac_protocol(self, mac_protocol):
        """Sets the mac_protocol of this WorkspacePartialUpdate.


        :param mac_protocol: The mac_protocol of this WorkspacePartialUpdate.  # noqa: E501
        :type: str
        """
        allowed_values = ["smb", "afp", "nfs", "omfs"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and mac_protocol not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `mac_protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(mac_protocol, allowed_values)
            )

        self._mac_protocol = mac_protocol

    @property
    def win_protocol(self):
        """Gets the win_protocol of this WorkspacePartialUpdate.  # noqa: E501


        :return: The win_protocol of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._win_protocol

    @win_protocol.setter
    def win_protocol(self, win_protocol):
        """Sets the win_protocol of this WorkspacePartialUpdate.


        :param win_protocol: The win_protocol of this WorkspacePartialUpdate.  # noqa: E501
        :type: str
        """
        allowed_values = ["disk", "unc"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and win_protocol not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `win_protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(win_protocol, allowed_values)
            )

        self._win_protocol = win_protocol

    @property
    def win_drive(self):
        """Gets the win_drive of this WorkspacePartialUpdate.  # noqa: E501


        :return: The win_drive of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._win_drive

    @win_drive.setter
    def win_drive(self, win_drive):
        """Sets the win_drive of this WorkspacePartialUpdate.


        :param win_drive: The win_drive of this WorkspacePartialUpdate.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and win_drive not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `win_drive` ({0}), must be one of {1}"  # noqa: E501
                .format(win_drive, allowed_values)
            )

        self._win_drive = win_drive

    @property
    def linux_protocol(self):
        """Gets the linux_protocol of this WorkspacePartialUpdate.  # noqa: E501


        :return: The linux_protocol of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._linux_protocol

    @linux_protocol.setter
    def linux_protocol(self, linux_protocol):
        """Sets the linux_protocol of this WorkspacePartialUpdate.


        :param linux_protocol: The linux_protocol of this WorkspacePartialUpdate.  # noqa: E501
        :type: str
        """
        allowed_values = ["smb", "nfs"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and linux_protocol not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `linux_protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(linux_protocol, allowed_values)
            )

        self._linux_protocol = linux_protocol

    @property
    def linux_mountpoint(self):
        """Gets the linux_mountpoint of this WorkspacePartialUpdate.  # noqa: E501


        :return: The linux_mountpoint of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._linux_mountpoint

    @linux_mountpoint.setter
    def linux_mountpoint(self, linux_mountpoint):
        """Sets the linux_mountpoint of this WorkspacePartialUpdate.


        :param linux_mountpoint: The linux_mountpoint of this WorkspacePartialUpdate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                linux_mountpoint is not None and len(linux_mountpoint) > 255):
            raise ValueError("Invalid value for `linux_mountpoint`, length must be less than or equal to `255`")  # noqa: E501

        self._linux_mountpoint = linux_mountpoint

    @property
    def share_name(self):
        """Gets the share_name of this WorkspacePartialUpdate.  # noqa: E501


        :return: The share_name of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._share_name

    @share_name.setter
    def share_name(self, share_name):
        """Sets the share_name of this WorkspacePartialUpdate.


        :param share_name: The share_name of this WorkspacePartialUpdate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                share_name is not None and len(share_name) > 255):
            raise ValueError("Invalid value for `share_name`, length must be less than or equal to `255`")  # noqa: E501

        self._share_name = share_name

    @property
    def share_nfs(self):
        """Gets the share_nfs of this WorkspacePartialUpdate.  # noqa: E501


        :return: The share_nfs of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._share_nfs

    @share_nfs.setter
    def share_nfs(self, share_nfs):
        """Sets the share_nfs of this WorkspacePartialUpdate.


        :param share_nfs: The share_nfs of this WorkspacePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._share_nfs = share_nfs

    @property
    def share_afp(self):
        """Gets the share_afp of this WorkspacePartialUpdate.  # noqa: E501


        :return: The share_afp of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._share_afp

    @share_afp.setter
    def share_afp(self, share_afp):
        """Sets the share_afp of this WorkspacePartialUpdate.


        :param share_afp: The share_afp of this WorkspacePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._share_afp = share_afp

    @property
    def sharing_hidden(self):
        """Gets the sharing_hidden of this WorkspacePartialUpdate.  # noqa: E501


        :return: The sharing_hidden of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._sharing_hidden

    @sharing_hidden.setter
    def sharing_hidden(self, sharing_hidden):
        """Sets the sharing_hidden of this WorkspacePartialUpdate.


        :param sharing_hidden: The sharing_hidden of this WorkspacePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._sharing_hidden = sharing_hidden

    @property
    def sharing_require_login(self):
        """Gets the sharing_require_login of this WorkspacePartialUpdate.  # noqa: E501


        :return: The sharing_require_login of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._sharing_require_login

    @sharing_require_login.setter
    def sharing_require_login(self, sharing_require_login):
        """Sets the sharing_require_login of this WorkspacePartialUpdate.


        :param sharing_require_login: The sharing_require_login of this WorkspacePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._sharing_require_login = sharing_require_login

    @property
    def sharing_read_only(self):
        """Gets the sharing_read_only of this WorkspacePartialUpdate.  # noqa: E501


        :return: The sharing_read_only of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._sharing_read_only

    @sharing_read_only.setter
    def sharing_read_only(self, sharing_read_only):
        """Sets the sharing_read_only of this WorkspacePartialUpdate.


        :param sharing_read_only: The sharing_read_only of this WorkspacePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._sharing_read_only = sharing_read_only

    @property
    def sharing_allow_execute(self):
        """Gets the sharing_allow_execute of this WorkspacePartialUpdate.  # noqa: E501


        :return: The sharing_allow_execute of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._sharing_allow_execute

    @sharing_allow_execute.setter
    def sharing_allow_execute(self, sharing_allow_execute):
        """Sets the sharing_allow_execute of this WorkspacePartialUpdate.


        :param sharing_allow_execute: The sharing_allow_execute of this WorkspacePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._sharing_allow_execute = sharing_allow_execute

    @property
    def quota_size_hard(self):
        """Gets the quota_size_hard of this WorkspacePartialUpdate.  # noqa: E501


        :return: The quota_size_hard of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: int
        """
        return self._quota_size_hard

    @quota_size_hard.setter
    def quota_size_hard(self, quota_size_hard):
        """Sets the quota_size_hard of this WorkspacePartialUpdate.


        :param quota_size_hard: The quota_size_hard of this WorkspacePartialUpdate.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                quota_size_hard is not None and quota_size_hard > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `quota_size_hard`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                quota_size_hard is not None and quota_size_hard < -9223372036854775808):  # noqa: E501
            raise ValueError("Invalid value for `quota_size_hard`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._quota_size_hard = quota_size_hard

    @property
    def quota_size_soft(self):
        """Gets the quota_size_soft of this WorkspacePartialUpdate.  # noqa: E501


        :return: The quota_size_soft of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: int
        """
        return self._quota_size_soft

    @quota_size_soft.setter
    def quota_size_soft(self, quota_size_soft):
        """Sets the quota_size_soft of this WorkspacePartialUpdate.


        :param quota_size_soft: The quota_size_soft of this WorkspacePartialUpdate.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                quota_size_soft is not None and quota_size_soft > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `quota_size_soft`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                quota_size_soft is not None and quota_size_soft < -9223372036854775808):  # noqa: E501
            raise ValueError("Invalid value for `quota_size_soft`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._quota_size_soft = quota_size_soft

    @property
    def affinity(self):
        """Gets the affinity of this WorkspacePartialUpdate.  # noqa: E501


        :return: The affinity of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._affinity

    @affinity.setter
    def affinity(self, affinity):
        """Sets the affinity of this WorkspacePartialUpdate.


        :param affinity: The affinity of this WorkspacePartialUpdate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                affinity is not None and len(affinity) > 255):
            raise ValueError("Invalid value for `affinity`, length must be less than or equal to `255`")  # noqa: E501

        self._affinity = affinity

    @property
    def emulate_avid(self):
        """Gets the emulate_avid of this WorkspacePartialUpdate.  # noqa: E501


        :return: The emulate_avid of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._emulate_avid

    @emulate_avid.setter
    def emulate_avid(self, emulate_avid):
        """Sets the emulate_avid of this WorkspacePartialUpdate.


        :param emulate_avid: The emulate_avid of this WorkspacePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._emulate_avid = emulate_avid

    @property
    def emulate_capture(self):
        """Gets the emulate_capture of this WorkspacePartialUpdate.  # noqa: E501


        :return: The emulate_capture of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._emulate_capture

    @emulate_capture.setter
    def emulate_capture(self, emulate_capture):
        """Sets the emulate_capture of this WorkspacePartialUpdate.


        :param emulate_capture: The emulate_capture of this WorkspacePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._emulate_capture = emulate_capture

    @property
    def emulate_preopen(self):
        """Gets the emulate_preopen of this WorkspacePartialUpdate.  # noqa: E501


        :return: The emulate_preopen of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._emulate_preopen

    @emulate_preopen.setter
    def emulate_preopen(self, emulate_preopen):
        """Sets the emulate_preopen of this WorkspacePartialUpdate.


        :param emulate_preopen: The emulate_preopen of this WorkspacePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._emulate_preopen = emulate_preopen

    @property
    def emulate_ntfs_streams(self):
        """Gets the emulate_ntfs_streams of this WorkspacePartialUpdate.  # noqa: E501


        :return: The emulate_ntfs_streams of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._emulate_ntfs_streams

    @emulate_ntfs_streams.setter
    def emulate_ntfs_streams(self, emulate_ntfs_streams):
        """Sets the emulate_ntfs_streams of this WorkspacePartialUpdate.


        :param emulate_ntfs_streams: The emulate_ntfs_streams of this WorkspacePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._emulate_ntfs_streams = emulate_ntfs_streams

    @property
    def emulate_recycle_bin(self):
        """Gets the emulate_recycle_bin of this WorkspacePartialUpdate.  # noqa: E501


        :return: The emulate_recycle_bin of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._emulate_recycle_bin

    @emulate_recycle_bin.setter
    def emulate_recycle_bin(self, emulate_recycle_bin):
        """Sets the emulate_recycle_bin of this WorkspacePartialUpdate.


        :param emulate_recycle_bin: The emulate_recycle_bin of this WorkspacePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._emulate_recycle_bin = emulate_recycle_bin

    @property
    def emulate_fruit(self):
        """Gets the emulate_fruit of this WorkspacePartialUpdate.  # noqa: E501


        :return: The emulate_fruit of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._emulate_fruit

    @emulate_fruit.setter
    def emulate_fruit(self, emulate_fruit):
        """Sets the emulate_fruit of this WorkspacePartialUpdate.


        :param emulate_fruit: The emulate_fruit of this WorkspacePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._emulate_fruit = emulate_fruit

    @property
    def smb_extra_config(self):
        """Gets the smb_extra_config of this WorkspacePartialUpdate.  # noqa: E501


        :return: The smb_extra_config of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._smb_extra_config

    @smb_extra_config.setter
    def smb_extra_config(self, smb_extra_config):
        """Sets the smb_extra_config of this WorkspacePartialUpdate.


        :param smb_extra_config: The smb_extra_config of this WorkspacePartialUpdate.  # noqa: E501
        :type: str
        """

        self._smb_extra_config = smb_extra_config

    @property
    def afp_extra_config(self):
        """Gets the afp_extra_config of this WorkspacePartialUpdate.  # noqa: E501


        :return: The afp_extra_config of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._afp_extra_config

    @afp_extra_config.setter
    def afp_extra_config(self, afp_extra_config):
        """Sets the afp_extra_config of this WorkspacePartialUpdate.


        :param afp_extra_config: The afp_extra_config of this WorkspacePartialUpdate.  # noqa: E501
        :type: str
        """

        self._afp_extra_config = afp_extra_config

    @property
    def recycle_bin_exclude(self):
        """Gets the recycle_bin_exclude of this WorkspacePartialUpdate.  # noqa: E501


        :return: The recycle_bin_exclude of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._recycle_bin_exclude

    @recycle_bin_exclude.setter
    def recycle_bin_exclude(self, recycle_bin_exclude):
        """Sets the recycle_bin_exclude of this WorkspacePartialUpdate.


        :param recycle_bin_exclude: The recycle_bin_exclude of this WorkspacePartialUpdate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                recycle_bin_exclude is not None and len(recycle_bin_exclude) > 1023):
            raise ValueError("Invalid value for `recycle_bin_exclude`, length must be less than or equal to `1023`")  # noqa: E501

        self._recycle_bin_exclude = recycle_bin_exclude

    @property
    def is_external(self):
        """Gets the is_external of this WorkspacePartialUpdate.  # noqa: E501


        :return: The is_external of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._is_external

    @is_external.setter
    def is_external(self, is_external):
        """Sets the is_external of this WorkspacePartialUpdate.


        :param is_external: The is_external of this WorkspacePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._is_external = is_external

    @property
    def external_mac_url(self):
        """Gets the external_mac_url of this WorkspacePartialUpdate.  # noqa: E501


        :return: The external_mac_url of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._external_mac_url

    @external_mac_url.setter
    def external_mac_url(self, external_mac_url):
        """Sets the external_mac_url of this WorkspacePartialUpdate.


        :param external_mac_url: The external_mac_url of this WorkspacePartialUpdate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                external_mac_url is not None and len(external_mac_url) > 1023):
            raise ValueError("Invalid value for `external_mac_url`, length must be less than or equal to `1023`")  # noqa: E501

        self._external_mac_url = external_mac_url

    @property
    def external_win_url(self):
        """Gets the external_win_url of this WorkspacePartialUpdate.  # noqa: E501


        :return: The external_win_url of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._external_win_url

    @external_win_url.setter
    def external_win_url(self, external_win_url):
        """Sets the external_win_url of this WorkspacePartialUpdate.


        :param external_win_url: The external_win_url of this WorkspacePartialUpdate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                external_win_url is not None and len(external_win_url) > 1023):
            raise ValueError("Invalid value for `external_win_url`, length must be less than or equal to `1023`")  # noqa: E501

        self._external_win_url = external_win_url

    @property
    def external_linux_url(self):
        """Gets the external_linux_url of this WorkspacePartialUpdate.  # noqa: E501


        :return: The external_linux_url of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._external_linux_url

    @external_linux_url.setter
    def external_linux_url(self, external_linux_url):
        """Sets the external_linux_url of this WorkspacePartialUpdate.


        :param external_linux_url: The external_linux_url of this WorkspacePartialUpdate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                external_linux_url is not None and len(external_linux_url) > 1023):
            raise ValueError("Invalid value for `external_linux_url`, length must be less than or equal to `1023`")  # noqa: E501

        self._external_linux_url = external_linux_url

    @property
    def allow_symlinks(self):
        """Gets the allow_symlinks of this WorkspacePartialUpdate.  # noqa: E501


        :return: The allow_symlinks of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._allow_symlinks

    @allow_symlinks.setter
    def allow_symlinks(self, allow_symlinks):
        """Sets the allow_symlinks of this WorkspacePartialUpdate.


        :param allow_symlinks: The allow_symlinks of this WorkspacePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._allow_symlinks = allow_symlinks

    @property
    def rw_permission_priority(self):
        """Gets the rw_permission_priority of this WorkspacePartialUpdate.  # noqa: E501


        :return: The rw_permission_priority of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._rw_permission_priority

    @rw_permission_priority.setter
    def rw_permission_priority(self, rw_permission_priority):
        """Sets the rw_permission_priority of this WorkspacePartialUpdate.


        :param rw_permission_priority: The rw_permission_priority of this WorkspacePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._rw_permission_priority = rw_permission_priority

    @property
    def template(self):
        """Gets the template of this WorkspacePartialUpdate.  # noqa: E501


        :return: The template of this WorkspacePartialUpdate.  # noqa: E501
        :rtype: int
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this WorkspacePartialUpdate.


        :param template: The template of this WorkspacePartialUpdate.  # noqa: E501
        :type: int
        """

        self._template = template

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkspacePartialUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkspacePartialUpdate):
            return True

        return self.to_dict() != other.to_dict()
