# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class StorageNodeStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'online': 'bool',
        'report': 'dict(str, str)',
        'ha_online': 'bool',
        'ha_status': 'str',
        'ha_ips': 'list[str]'
    }

    attribute_map = {
        'online': 'online',
        'report': 'report',
        'ha_online': 'ha_online',
        'ha_status': 'ha_status',
        'ha_ips': 'ha_ips'
    }

    def __init__(self, online=None, report=None, ha_online=None, ha_status=None, ha_ips=None, local_vars_configuration=None):  # noqa: E501
        """StorageNodeStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._online = None
        self._report = None
        self._ha_online = None
        self._ha_status = None
        self._ha_ips = None
        self.discriminator = None

        self.online = online
        self.report = report
        self.ha_online = ha_online
        self.ha_status = ha_status
        self.ha_ips = ha_ips

    @property
    def online(self):
        """Gets the online of this StorageNodeStatus.  # noqa: E501


        :return: The online of this StorageNodeStatus.  # noqa: E501
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this StorageNodeStatus.


        :param online: The online of this StorageNodeStatus.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and online is None:  # noqa: E501
            raise ValueError("Invalid value for `online`, must not be `None`")  # noqa: E501

        self._online = online

    @property
    def report(self):
        """Gets the report of this StorageNodeStatus.  # noqa: E501


        :return: The report of this StorageNodeStatus.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this StorageNodeStatus.


        :param report: The report of this StorageNodeStatus.  # noqa: E501
        :type: dict(str, str)
        """

        self._report = report

    @property
    def ha_online(self):
        """Gets the ha_online of this StorageNodeStatus.  # noqa: E501


        :return: The ha_online of this StorageNodeStatus.  # noqa: E501
        :rtype: bool
        """
        return self._ha_online

    @ha_online.setter
    def ha_online(self, ha_online):
        """Sets the ha_online of this StorageNodeStatus.


        :param ha_online: The ha_online of this StorageNodeStatus.  # noqa: E501
        :type: bool
        """

        self._ha_online = ha_online

    @property
    def ha_status(self):
        """Gets the ha_status of this StorageNodeStatus.  # noqa: E501


        :return: The ha_status of this StorageNodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._ha_status

    @ha_status.setter
    def ha_status(self, ha_status):
        """Sets the ha_status of this StorageNodeStatus.


        :param ha_status: The ha_status of this StorageNodeStatus.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                ha_status is not None and len(ha_status) < 1):
            raise ValueError("Invalid value for `ha_status`, length must be greater than or equal to `1`")  # noqa: E501

        self._ha_status = ha_status

    @property
    def ha_ips(self):
        """Gets the ha_ips of this StorageNodeStatus.  # noqa: E501


        :return: The ha_ips of this StorageNodeStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._ha_ips

    @ha_ips.setter
    def ha_ips(self, ha_ips):
        """Sets the ha_ips of this StorageNodeStatus.


        :param ha_ips: The ha_ips of this StorageNodeStatus.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and ha_ips is None:  # noqa: E501
            raise ValueError("Invalid value for `ha_ips`, must not be `None`")  # noqa: E501

        self._ha_ips = ha_ips

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageNodeStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageNodeStatus):
            return True

        return self.to_dict() != other.to_dict()
