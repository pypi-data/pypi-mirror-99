# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class BackendProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'supports_sharing_rw_permissions_priority': 'bool',
        'supports_sharing_afp': 'bool',
        'supports_sharing_smb_require_logon': 'bool',
        'supports_sharing_smb_recycle_bin': 'bool',
        'supports_sharing_smb_xattrs': 'bool',
        'supports_sharing_smb_symlinks': 'bool',
        'supports_sharing_smb_custom_options': 'bool',
        'supports_sharing_nfs_permissions': 'bool'
    }

    attribute_map = {
        'supports_sharing_rw_permissions_priority': 'supports_sharing_rw_permissions_priority',
        'supports_sharing_afp': 'supports_sharing_afp',
        'supports_sharing_smb_require_logon': 'supports_sharing_smb_require_logon',
        'supports_sharing_smb_recycle_bin': 'supports_sharing_smb_recycle_bin',
        'supports_sharing_smb_xattrs': 'supports_sharing_smb_xattrs',
        'supports_sharing_smb_symlinks': 'supports_sharing_smb_symlinks',
        'supports_sharing_smb_custom_options': 'supports_sharing_smb_custom_options',
        'supports_sharing_nfs_permissions': 'supports_sharing_nfs_permissions'
    }

    def __init__(self, supports_sharing_rw_permissions_priority=None, supports_sharing_afp=None, supports_sharing_smb_require_logon=None, supports_sharing_smb_recycle_bin=None, supports_sharing_smb_xattrs=None, supports_sharing_smb_symlinks=None, supports_sharing_smb_custom_options=None, supports_sharing_nfs_permissions=None, local_vars_configuration=None):  # noqa: E501
        """BackendProperties - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._supports_sharing_rw_permissions_priority = None
        self._supports_sharing_afp = None
        self._supports_sharing_smb_require_logon = None
        self._supports_sharing_smb_recycle_bin = None
        self._supports_sharing_smb_xattrs = None
        self._supports_sharing_smb_symlinks = None
        self._supports_sharing_smb_custom_options = None
        self._supports_sharing_nfs_permissions = None
        self.discriminator = None

        self.supports_sharing_rw_permissions_priority = supports_sharing_rw_permissions_priority
        self.supports_sharing_afp = supports_sharing_afp
        self.supports_sharing_smb_require_logon = supports_sharing_smb_require_logon
        self.supports_sharing_smb_recycle_bin = supports_sharing_smb_recycle_bin
        self.supports_sharing_smb_xattrs = supports_sharing_smb_xattrs
        self.supports_sharing_smb_symlinks = supports_sharing_smb_symlinks
        self.supports_sharing_smb_custom_options = supports_sharing_smb_custom_options
        self.supports_sharing_nfs_permissions = supports_sharing_nfs_permissions

    @property
    def supports_sharing_rw_permissions_priority(self):
        """Gets the supports_sharing_rw_permissions_priority of this BackendProperties.  # noqa: E501


        :return: The supports_sharing_rw_permissions_priority of this BackendProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_sharing_rw_permissions_priority

    @supports_sharing_rw_permissions_priority.setter
    def supports_sharing_rw_permissions_priority(self, supports_sharing_rw_permissions_priority):
        """Sets the supports_sharing_rw_permissions_priority of this BackendProperties.


        :param supports_sharing_rw_permissions_priority: The supports_sharing_rw_permissions_priority of this BackendProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_sharing_rw_permissions_priority is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_sharing_rw_permissions_priority`, must not be `None`")  # noqa: E501

        self._supports_sharing_rw_permissions_priority = supports_sharing_rw_permissions_priority

    @property
    def supports_sharing_afp(self):
        """Gets the supports_sharing_afp of this BackendProperties.  # noqa: E501


        :return: The supports_sharing_afp of this BackendProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_sharing_afp

    @supports_sharing_afp.setter
    def supports_sharing_afp(self, supports_sharing_afp):
        """Sets the supports_sharing_afp of this BackendProperties.


        :param supports_sharing_afp: The supports_sharing_afp of this BackendProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_sharing_afp is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_sharing_afp`, must not be `None`")  # noqa: E501

        self._supports_sharing_afp = supports_sharing_afp

    @property
    def supports_sharing_smb_require_logon(self):
        """Gets the supports_sharing_smb_require_logon of this BackendProperties.  # noqa: E501


        :return: The supports_sharing_smb_require_logon of this BackendProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_sharing_smb_require_logon

    @supports_sharing_smb_require_logon.setter
    def supports_sharing_smb_require_logon(self, supports_sharing_smb_require_logon):
        """Sets the supports_sharing_smb_require_logon of this BackendProperties.


        :param supports_sharing_smb_require_logon: The supports_sharing_smb_require_logon of this BackendProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_sharing_smb_require_logon is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_sharing_smb_require_logon`, must not be `None`")  # noqa: E501

        self._supports_sharing_smb_require_logon = supports_sharing_smb_require_logon

    @property
    def supports_sharing_smb_recycle_bin(self):
        """Gets the supports_sharing_smb_recycle_bin of this BackendProperties.  # noqa: E501


        :return: The supports_sharing_smb_recycle_bin of this BackendProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_sharing_smb_recycle_bin

    @supports_sharing_smb_recycle_bin.setter
    def supports_sharing_smb_recycle_bin(self, supports_sharing_smb_recycle_bin):
        """Sets the supports_sharing_smb_recycle_bin of this BackendProperties.


        :param supports_sharing_smb_recycle_bin: The supports_sharing_smb_recycle_bin of this BackendProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_sharing_smb_recycle_bin is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_sharing_smb_recycle_bin`, must not be `None`")  # noqa: E501

        self._supports_sharing_smb_recycle_bin = supports_sharing_smb_recycle_bin

    @property
    def supports_sharing_smb_xattrs(self):
        """Gets the supports_sharing_smb_xattrs of this BackendProperties.  # noqa: E501


        :return: The supports_sharing_smb_xattrs of this BackendProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_sharing_smb_xattrs

    @supports_sharing_smb_xattrs.setter
    def supports_sharing_smb_xattrs(self, supports_sharing_smb_xattrs):
        """Sets the supports_sharing_smb_xattrs of this BackendProperties.


        :param supports_sharing_smb_xattrs: The supports_sharing_smb_xattrs of this BackendProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_sharing_smb_xattrs is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_sharing_smb_xattrs`, must not be `None`")  # noqa: E501

        self._supports_sharing_smb_xattrs = supports_sharing_smb_xattrs

    @property
    def supports_sharing_smb_symlinks(self):
        """Gets the supports_sharing_smb_symlinks of this BackendProperties.  # noqa: E501


        :return: The supports_sharing_smb_symlinks of this BackendProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_sharing_smb_symlinks

    @supports_sharing_smb_symlinks.setter
    def supports_sharing_smb_symlinks(self, supports_sharing_smb_symlinks):
        """Sets the supports_sharing_smb_symlinks of this BackendProperties.


        :param supports_sharing_smb_symlinks: The supports_sharing_smb_symlinks of this BackendProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_sharing_smb_symlinks is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_sharing_smb_symlinks`, must not be `None`")  # noqa: E501

        self._supports_sharing_smb_symlinks = supports_sharing_smb_symlinks

    @property
    def supports_sharing_smb_custom_options(self):
        """Gets the supports_sharing_smb_custom_options of this BackendProperties.  # noqa: E501


        :return: The supports_sharing_smb_custom_options of this BackendProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_sharing_smb_custom_options

    @supports_sharing_smb_custom_options.setter
    def supports_sharing_smb_custom_options(self, supports_sharing_smb_custom_options):
        """Sets the supports_sharing_smb_custom_options of this BackendProperties.


        :param supports_sharing_smb_custom_options: The supports_sharing_smb_custom_options of this BackendProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_sharing_smb_custom_options is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_sharing_smb_custom_options`, must not be `None`")  # noqa: E501

        self._supports_sharing_smb_custom_options = supports_sharing_smb_custom_options

    @property
    def supports_sharing_nfs_permissions(self):
        """Gets the supports_sharing_nfs_permissions of this BackendProperties.  # noqa: E501


        :return: The supports_sharing_nfs_permissions of this BackendProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_sharing_nfs_permissions

    @supports_sharing_nfs_permissions.setter
    def supports_sharing_nfs_permissions(self, supports_sharing_nfs_permissions):
        """Sets the supports_sharing_nfs_permissions of this BackendProperties.


        :param supports_sharing_nfs_permissions: The supports_sharing_nfs_permissions of this BackendProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_sharing_nfs_permissions is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_sharing_nfs_permissions`, must not be `None`")  # noqa: E501

        self._supports_sharing_nfs_permissions = supports_sharing_nfs_permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackendProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BackendProperties):
            return True

        return self.to_dict() != other.to_dict()
