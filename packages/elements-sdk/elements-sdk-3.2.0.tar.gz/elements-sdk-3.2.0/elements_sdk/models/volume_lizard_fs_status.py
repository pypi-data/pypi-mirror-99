# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class VolumeLizardFSStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'master': 'StorageNodeMini',
        'nodes': 'list[LizardFSNode]',
        'disks': 'list[LizardFSDisk]'
    }

    attribute_map = {
        'master': 'master',
        'nodes': 'nodes',
        'disks': 'disks'
    }

    def __init__(self, master=None, nodes=None, disks=None, local_vars_configuration=None):  # noqa: E501
        """VolumeLizardFSStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._master = None
        self._nodes = None
        self._disks = None
        self.discriminator = None

        self.master = master
        self.nodes = nodes
        self.disks = disks

    @property
    def master(self):
        """Gets the master of this VolumeLizardFSStatus.  # noqa: E501


        :return: The master of this VolumeLizardFSStatus.  # noqa: E501
        :rtype: StorageNodeMini
        """
        return self._master

    @master.setter
    def master(self, master):
        """Sets the master of this VolumeLizardFSStatus.


        :param master: The master of this VolumeLizardFSStatus.  # noqa: E501
        :type: StorageNodeMini
        """
        if self.local_vars_configuration.client_side_validation and master is None:  # noqa: E501
            raise ValueError("Invalid value for `master`, must not be `None`")  # noqa: E501

        self._master = master

    @property
    def nodes(self):
        """Gets the nodes of this VolumeLizardFSStatus.  # noqa: E501


        :return: The nodes of this VolumeLizardFSStatus.  # noqa: E501
        :rtype: list[LizardFSNode]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this VolumeLizardFSStatus.


        :param nodes: The nodes of this VolumeLizardFSStatus.  # noqa: E501
        :type: list[LizardFSNode]
        """
        if self.local_vars_configuration.client_side_validation and nodes is None:  # noqa: E501
            raise ValueError("Invalid value for `nodes`, must not be `None`")  # noqa: E501

        self._nodes = nodes

    @property
    def disks(self):
        """Gets the disks of this VolumeLizardFSStatus.  # noqa: E501


        :return: The disks of this VolumeLizardFSStatus.  # noqa: E501
        :rtype: list[LizardFSDisk]
        """
        return self._disks

    @disks.setter
    def disks(self, disks):
        """Sets the disks of this VolumeLizardFSStatus.


        :param disks: The disks of this VolumeLizardFSStatus.  # noqa: E501
        :type: list[LizardFSDisk]
        """
        if self.local_vars_configuration.client_side_validation and disks is None:  # noqa: E501
            raise ValueError("Invalid value for `disks`, must not be `None`")  # noqa: E501

        self._disks = disks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeLizardFSStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VolumeLizardFSStatus):
            return True

        return self.to_dict() != other.to_dict()
