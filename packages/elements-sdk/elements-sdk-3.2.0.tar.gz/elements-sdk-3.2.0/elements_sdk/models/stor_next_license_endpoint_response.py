# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class StorNextLicenseEndpointResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'str',
        'expiry': 'str',
        'capacity': 'str'
    }

    attribute_map = {
        'status': 'status',
        'expiry': 'expiry',
        'capacity': 'capacity'
    }

    def __init__(self, status=None, expiry=None, capacity=None, local_vars_configuration=None):  # noqa: E501
        """StorNextLicenseEndpointResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._status = None
        self._expiry = None
        self._capacity = None
        self.discriminator = None

        self.status = status
        self.expiry = expiry
        self.capacity = capacity

    @property
    def status(self):
        """Gets the status of this StorNextLicenseEndpointResponse.  # noqa: E501


        :return: The status of this StorNextLicenseEndpointResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StorNextLicenseEndpointResponse.


        :param status: The status of this StorNextLicenseEndpointResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                status is not None and len(status) < 1):
            raise ValueError("Invalid value for `status`, length must be greater than or equal to `1`")  # noqa: E501

        self._status = status

    @property
    def expiry(self):
        """Gets the expiry of this StorNextLicenseEndpointResponse.  # noqa: E501


        :return: The expiry of this StorNextLicenseEndpointResponse.  # noqa: E501
        :rtype: str
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this StorNextLicenseEndpointResponse.


        :param expiry: The expiry of this StorNextLicenseEndpointResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and expiry is None:  # noqa: E501
            raise ValueError("Invalid value for `expiry`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                expiry is not None and len(expiry) < 1):
            raise ValueError("Invalid value for `expiry`, length must be greater than or equal to `1`")  # noqa: E501

        self._expiry = expiry

    @property
    def capacity(self):
        """Gets the capacity of this StorNextLicenseEndpointResponse.  # noqa: E501


        :return: The capacity of this StorNextLicenseEndpointResponse.  # noqa: E501
        :rtype: str
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this StorNextLicenseEndpointResponse.


        :param capacity: The capacity of this StorNextLicenseEndpointResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and capacity is None:  # noqa: E501
            raise ValueError("Invalid value for `capacity`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                capacity is not None and len(capacity) < 1):
            raise ValueError("Invalid value for `capacity`, length must be greater than or equal to `1`")  # noqa: E501

        self._capacity = capacity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorNextLicenseEndpointResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorNextLicenseEndpointResponse):
            return True

        return self.to_dict() != other.to_dict()
