# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class MountedWorkspace(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'workspace': 'WorkspaceMini',
        'mountpoint': 'str',
        'address': 'str',
        'protocol': 'str',
        'last_updated': 'datetime',
        'user': 'int',
        'client_session': 'int'
    }

    attribute_map = {
        'id': 'id',
        'workspace': 'workspace',
        'mountpoint': 'mountpoint',
        'address': 'address',
        'protocol': 'protocol',
        'last_updated': 'last_updated',
        'user': 'user',
        'client_session': 'client_session'
    }

    def __init__(self, id=None, workspace=None, mountpoint=None, address=None, protocol=None, last_updated=None, user=None, client_session=None, local_vars_configuration=None):  # noqa: E501
        """MountedWorkspace - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._workspace = None
        self._mountpoint = None
        self._address = None
        self._protocol = None
        self._last_updated = None
        self._user = None
        self._client_session = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.workspace = workspace
        self.mountpoint = mountpoint
        self.address = address
        self.protocol = protocol
        if last_updated is not None:
            self.last_updated = last_updated
        self.user = user
        self.client_session = client_session

    @property
    def id(self):
        """Gets the id of this MountedWorkspace.  # noqa: E501


        :return: The id of this MountedWorkspace.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MountedWorkspace.


        :param id: The id of this MountedWorkspace.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def workspace(self):
        """Gets the workspace of this MountedWorkspace.  # noqa: E501


        :return: The workspace of this MountedWorkspace.  # noqa: E501
        :rtype: WorkspaceMini
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this MountedWorkspace.


        :param workspace: The workspace of this MountedWorkspace.  # noqa: E501
        :type: WorkspaceMini
        """
        if self.local_vars_configuration.client_side_validation and workspace is None:  # noqa: E501
            raise ValueError("Invalid value for `workspace`, must not be `None`")  # noqa: E501

        self._workspace = workspace

    @property
    def mountpoint(self):
        """Gets the mountpoint of this MountedWorkspace.  # noqa: E501


        :return: The mountpoint of this MountedWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._mountpoint

    @mountpoint.setter
    def mountpoint(self, mountpoint):
        """Sets the mountpoint of this MountedWorkspace.


        :param mountpoint: The mountpoint of this MountedWorkspace.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                mountpoint is not None and len(mountpoint) > 255):
            raise ValueError("Invalid value for `mountpoint`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                mountpoint is not None and len(mountpoint) < 1):
            raise ValueError("Invalid value for `mountpoint`, length must be greater than or equal to `1`")  # noqa: E501

        self._mountpoint = mountpoint

    @property
    def address(self):
        """Gets the address of this MountedWorkspace.  # noqa: E501


        :return: The address of this MountedWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this MountedWorkspace.


        :param address: The address of this MountedWorkspace.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and address is None:  # noqa: E501
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                address is not None and len(address) > 255):
            raise ValueError("Invalid value for `address`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                address is not None and len(address) < 1):
            raise ValueError("Invalid value for `address`, length must be greater than or equal to `1`")  # noqa: E501

        self._address = address

    @property
    def protocol(self):
        """Gets the protocol of this MountedWorkspace.  # noqa: E501


        :return: The protocol of this MountedWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this MountedWorkspace.


        :param protocol: The protocol of this MountedWorkspace.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                protocol is not None and len(protocol) > 255):
            raise ValueError("Invalid value for `protocol`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                protocol is not None and len(protocol) < 1):
            raise ValueError("Invalid value for `protocol`, length must be greater than or equal to `1`")  # noqa: E501

        self._protocol = protocol

    @property
    def last_updated(self):
        """Gets the last_updated of this MountedWorkspace.  # noqa: E501


        :return: The last_updated of this MountedWorkspace.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this MountedWorkspace.


        :param last_updated: The last_updated of this MountedWorkspace.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def user(self):
        """Gets the user of this MountedWorkspace.  # noqa: E501


        :return: The user of this MountedWorkspace.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this MountedWorkspace.


        :param user: The user of this MountedWorkspace.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and user is None:  # noqa: E501
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def client_session(self):
        """Gets the client_session of this MountedWorkspace.  # noqa: E501


        :return: The client_session of this MountedWorkspace.  # noqa: E501
        :rtype: int
        """
        return self._client_session

    @client_session.setter
    def client_session(self, client_session):
        """Sets the client_session of this MountedWorkspace.


        :param client_session: The client_session of this MountedWorkspace.  # noqa: E501
        :type: int
        """

        self._client_session = client_session

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MountedWorkspace):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MountedWorkspace):
            return True

        return self.to_dict() != other.to_dict()
