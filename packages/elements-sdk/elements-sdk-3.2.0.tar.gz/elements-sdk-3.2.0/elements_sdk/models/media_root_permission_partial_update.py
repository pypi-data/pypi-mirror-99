# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class MediaRootPermissionPartialUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user': 'ElementsUserMini',
        'group': 'ElementsGroup',
        'path': 'str',
        'allow_create': 'bool',
        'allow_write_fs': 'bool',
        'allow_write_db': 'bool',
        'allow_proxy_download': 'bool',
        'allow_original_download': 'bool',
        'allow_upload': 'bool',
        'allow_sharing': 'bool',
        'allow_delete_fs': 'bool',
        'allow_delete_db': 'bool',
        'show_tags': 'bool',
        'show_comments': 'bool',
        'show_locations': 'bool',
        'show_custom_fields': 'bool',
        'show_ratings': 'bool',
        'show_subclips': 'bool',
        'show_ai_metadata': 'bool',
        'show_markers': 'bool',
        'root': 'int',
        'is_temporary_for_token': 'int'
    }

    attribute_map = {
        'user': 'user',
        'group': 'group',
        'path': 'path',
        'allow_create': 'allow_create',
        'allow_write_fs': 'allow_write_fs',
        'allow_write_db': 'allow_write_db',
        'allow_proxy_download': 'allow_proxy_download',
        'allow_original_download': 'allow_original_download',
        'allow_upload': 'allow_upload',
        'allow_sharing': 'allow_sharing',
        'allow_delete_fs': 'allow_delete_fs',
        'allow_delete_db': 'allow_delete_db',
        'show_tags': 'show_tags',
        'show_comments': 'show_comments',
        'show_locations': 'show_locations',
        'show_custom_fields': 'show_custom_fields',
        'show_ratings': 'show_ratings',
        'show_subclips': 'show_subclips',
        'show_ai_metadata': 'show_ai_metadata',
        'show_markers': 'show_markers',
        'root': 'root',
        'is_temporary_for_token': 'is_temporary_for_token'
    }

    def __init__(self, user=None, group=None, path=None, allow_create=None, allow_write_fs=None, allow_write_db=None, allow_proxy_download=None, allow_original_download=None, allow_upload=None, allow_sharing=None, allow_delete_fs=None, allow_delete_db=None, show_tags=None, show_comments=None, show_locations=None, show_custom_fields=None, show_ratings=None, show_subclips=None, show_ai_metadata=None, show_markers=None, root=None, is_temporary_for_token=None, local_vars_configuration=None):  # noqa: E501
        """MediaRootPermissionPartialUpdate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._user = None
        self._group = None
        self._path = None
        self._allow_create = None
        self._allow_write_fs = None
        self._allow_write_db = None
        self._allow_proxy_download = None
        self._allow_original_download = None
        self._allow_upload = None
        self._allow_sharing = None
        self._allow_delete_fs = None
        self._allow_delete_db = None
        self._show_tags = None
        self._show_comments = None
        self._show_locations = None
        self._show_custom_fields = None
        self._show_ratings = None
        self._show_subclips = None
        self._show_ai_metadata = None
        self._show_markers = None
        self._root = None
        self._is_temporary_for_token = None
        self.discriminator = None

        if user is not None:
            self.user = user
        if group is not None:
            self.group = group
        if path is not None:
            self.path = path
        if allow_create is not None:
            self.allow_create = allow_create
        if allow_write_fs is not None:
            self.allow_write_fs = allow_write_fs
        if allow_write_db is not None:
            self.allow_write_db = allow_write_db
        if allow_proxy_download is not None:
            self.allow_proxy_download = allow_proxy_download
        if allow_original_download is not None:
            self.allow_original_download = allow_original_download
        if allow_upload is not None:
            self.allow_upload = allow_upload
        if allow_sharing is not None:
            self.allow_sharing = allow_sharing
        if allow_delete_fs is not None:
            self.allow_delete_fs = allow_delete_fs
        if allow_delete_db is not None:
            self.allow_delete_db = allow_delete_db
        if show_tags is not None:
            self.show_tags = show_tags
        if show_comments is not None:
            self.show_comments = show_comments
        if show_locations is not None:
            self.show_locations = show_locations
        if show_custom_fields is not None:
            self.show_custom_fields = show_custom_fields
        if show_ratings is not None:
            self.show_ratings = show_ratings
        if show_subclips is not None:
            self.show_subclips = show_subclips
        if show_ai_metadata is not None:
            self.show_ai_metadata = show_ai_metadata
        if show_markers is not None:
            self.show_markers = show_markers
        if root is not None:
            self.root = root
        self.is_temporary_for_token = is_temporary_for_token

    @property
    def user(self):
        """Gets the user of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The user of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: ElementsUserMini
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this MediaRootPermissionPartialUpdate.


        :param user: The user of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: ElementsUserMini
        """

        self._user = user

    @property
    def group(self):
        """Gets the group of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The group of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: ElementsGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this MediaRootPermissionPartialUpdate.


        :param group: The group of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: ElementsGroup
        """

        self._group = group

    @property
    def path(self):
        """Gets the path of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The path of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this MediaRootPermissionPartialUpdate.


        :param path: The path of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                path is not None and len(path) > 1023):
            raise ValueError("Invalid value for `path`, length must be less than or equal to `1023`")  # noqa: E501

        self._path = path

    @property
    def allow_create(self):
        """Gets the allow_create of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The allow_create of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._allow_create

    @allow_create.setter
    def allow_create(self, allow_create):
        """Sets the allow_create of this MediaRootPermissionPartialUpdate.


        :param allow_create: The allow_create of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: bool
        """

        self._allow_create = allow_create

    @property
    def allow_write_fs(self):
        """Gets the allow_write_fs of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The allow_write_fs of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._allow_write_fs

    @allow_write_fs.setter
    def allow_write_fs(self, allow_write_fs):
        """Sets the allow_write_fs of this MediaRootPermissionPartialUpdate.


        :param allow_write_fs: The allow_write_fs of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: bool
        """

        self._allow_write_fs = allow_write_fs

    @property
    def allow_write_db(self):
        """Gets the allow_write_db of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The allow_write_db of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._allow_write_db

    @allow_write_db.setter
    def allow_write_db(self, allow_write_db):
        """Sets the allow_write_db of this MediaRootPermissionPartialUpdate.


        :param allow_write_db: The allow_write_db of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: bool
        """

        self._allow_write_db = allow_write_db

    @property
    def allow_proxy_download(self):
        """Gets the allow_proxy_download of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The allow_proxy_download of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._allow_proxy_download

    @allow_proxy_download.setter
    def allow_proxy_download(self, allow_proxy_download):
        """Sets the allow_proxy_download of this MediaRootPermissionPartialUpdate.


        :param allow_proxy_download: The allow_proxy_download of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: bool
        """

        self._allow_proxy_download = allow_proxy_download

    @property
    def allow_original_download(self):
        """Gets the allow_original_download of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The allow_original_download of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._allow_original_download

    @allow_original_download.setter
    def allow_original_download(self, allow_original_download):
        """Sets the allow_original_download of this MediaRootPermissionPartialUpdate.


        :param allow_original_download: The allow_original_download of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: bool
        """

        self._allow_original_download = allow_original_download

    @property
    def allow_upload(self):
        """Gets the allow_upload of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The allow_upload of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._allow_upload

    @allow_upload.setter
    def allow_upload(self, allow_upload):
        """Sets the allow_upload of this MediaRootPermissionPartialUpdate.


        :param allow_upload: The allow_upload of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: bool
        """

        self._allow_upload = allow_upload

    @property
    def allow_sharing(self):
        """Gets the allow_sharing of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The allow_sharing of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._allow_sharing

    @allow_sharing.setter
    def allow_sharing(self, allow_sharing):
        """Sets the allow_sharing of this MediaRootPermissionPartialUpdate.


        :param allow_sharing: The allow_sharing of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: bool
        """

        self._allow_sharing = allow_sharing

    @property
    def allow_delete_fs(self):
        """Gets the allow_delete_fs of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The allow_delete_fs of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._allow_delete_fs

    @allow_delete_fs.setter
    def allow_delete_fs(self, allow_delete_fs):
        """Sets the allow_delete_fs of this MediaRootPermissionPartialUpdate.


        :param allow_delete_fs: The allow_delete_fs of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: bool
        """

        self._allow_delete_fs = allow_delete_fs

    @property
    def allow_delete_db(self):
        """Gets the allow_delete_db of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The allow_delete_db of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._allow_delete_db

    @allow_delete_db.setter
    def allow_delete_db(self, allow_delete_db):
        """Sets the allow_delete_db of this MediaRootPermissionPartialUpdate.


        :param allow_delete_db: The allow_delete_db of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: bool
        """

        self._allow_delete_db = allow_delete_db

    @property
    def show_tags(self):
        """Gets the show_tags of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The show_tags of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._show_tags

    @show_tags.setter
    def show_tags(self, show_tags):
        """Sets the show_tags of this MediaRootPermissionPartialUpdate.


        :param show_tags: The show_tags of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: bool
        """

        self._show_tags = show_tags

    @property
    def show_comments(self):
        """Gets the show_comments of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The show_comments of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._show_comments

    @show_comments.setter
    def show_comments(self, show_comments):
        """Sets the show_comments of this MediaRootPermissionPartialUpdate.


        :param show_comments: The show_comments of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: bool
        """

        self._show_comments = show_comments

    @property
    def show_locations(self):
        """Gets the show_locations of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The show_locations of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._show_locations

    @show_locations.setter
    def show_locations(self, show_locations):
        """Sets the show_locations of this MediaRootPermissionPartialUpdate.


        :param show_locations: The show_locations of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: bool
        """

        self._show_locations = show_locations

    @property
    def show_custom_fields(self):
        """Gets the show_custom_fields of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The show_custom_fields of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._show_custom_fields

    @show_custom_fields.setter
    def show_custom_fields(self, show_custom_fields):
        """Sets the show_custom_fields of this MediaRootPermissionPartialUpdate.


        :param show_custom_fields: The show_custom_fields of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: bool
        """

        self._show_custom_fields = show_custom_fields

    @property
    def show_ratings(self):
        """Gets the show_ratings of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The show_ratings of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._show_ratings

    @show_ratings.setter
    def show_ratings(self, show_ratings):
        """Sets the show_ratings of this MediaRootPermissionPartialUpdate.


        :param show_ratings: The show_ratings of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: bool
        """

        self._show_ratings = show_ratings

    @property
    def show_subclips(self):
        """Gets the show_subclips of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The show_subclips of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._show_subclips

    @show_subclips.setter
    def show_subclips(self, show_subclips):
        """Sets the show_subclips of this MediaRootPermissionPartialUpdate.


        :param show_subclips: The show_subclips of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: bool
        """

        self._show_subclips = show_subclips

    @property
    def show_ai_metadata(self):
        """Gets the show_ai_metadata of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The show_ai_metadata of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._show_ai_metadata

    @show_ai_metadata.setter
    def show_ai_metadata(self, show_ai_metadata):
        """Sets the show_ai_metadata of this MediaRootPermissionPartialUpdate.


        :param show_ai_metadata: The show_ai_metadata of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: bool
        """

        self._show_ai_metadata = show_ai_metadata

    @property
    def show_markers(self):
        """Gets the show_markers of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The show_markers of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._show_markers

    @show_markers.setter
    def show_markers(self, show_markers):
        """Sets the show_markers of this MediaRootPermissionPartialUpdate.


        :param show_markers: The show_markers of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: bool
        """

        self._show_markers = show_markers

    @property
    def root(self):
        """Gets the root of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The root of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: int
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this MediaRootPermissionPartialUpdate.


        :param root: The root of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: int
        """

        self._root = root

    @property
    def is_temporary_for_token(self):
        """Gets the is_temporary_for_token of this MediaRootPermissionPartialUpdate.  # noqa: E501


        :return: The is_temporary_for_token of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :rtype: int
        """
        return self._is_temporary_for_token

    @is_temporary_for_token.setter
    def is_temporary_for_token(self, is_temporary_for_token):
        """Sets the is_temporary_for_token of this MediaRootPermissionPartialUpdate.


        :param is_temporary_for_token: The is_temporary_for_token of this MediaRootPermissionPartialUpdate.  # noqa: E501
        :type: int
        """

        self._is_temporary_for_token = is_temporary_for_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MediaRootPermissionPartialUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MediaRootPermissionPartialUpdate):
            return True

        return self.to_dict() != other.to_dict()
