# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class MediaFilePartialUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'info': 'object',
        'custom_fields': 'object',
        'total_files': 'int',
        'needs_rescan': 'bool'
    }

    attribute_map = {
        'info': 'info',
        'custom_fields': 'custom_fields',
        'total_files': 'total_files',
        'needs_rescan': 'needs_rescan'
    }

    def __init__(self, info=None, custom_fields=None, total_files=None, needs_rescan=None, local_vars_configuration=None):  # noqa: E501
        """MediaFilePartialUpdate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._info = None
        self._custom_fields = None
        self._total_files = None
        self._needs_rescan = None
        self.discriminator = None

        if info is not None:
            self.info = info
        if custom_fields is not None:
            self.custom_fields = custom_fields
        self.total_files = total_files
        if needs_rescan is not None:
            self.needs_rescan = needs_rescan

    @property
    def info(self):
        """Gets the info of this MediaFilePartialUpdate.  # noqa: E501


        :return: The info of this MediaFilePartialUpdate.  # noqa: E501
        :rtype: object
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this MediaFilePartialUpdate.


        :param info: The info of this MediaFilePartialUpdate.  # noqa: E501
        :type: object
        """

        self._info = info

    @property
    def custom_fields(self):
        """Gets the custom_fields of this MediaFilePartialUpdate.  # noqa: E501


        :return: The custom_fields of this MediaFilePartialUpdate.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this MediaFilePartialUpdate.


        :param custom_fields: The custom_fields of this MediaFilePartialUpdate.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    @property
    def total_files(self):
        """Gets the total_files of this MediaFilePartialUpdate.  # noqa: E501


        :return: The total_files of this MediaFilePartialUpdate.  # noqa: E501
        :rtype: int
        """
        return self._total_files

    @total_files.setter
    def total_files(self, total_files):
        """Sets the total_files of this MediaFilePartialUpdate.


        :param total_files: The total_files of this MediaFilePartialUpdate.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                total_files is not None and total_files > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `total_files`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                total_files is not None and total_files < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `total_files`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._total_files = total_files

    @property
    def needs_rescan(self):
        """Gets the needs_rescan of this MediaFilePartialUpdate.  # noqa: E501


        :return: The needs_rescan of this MediaFilePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._needs_rescan

    @needs_rescan.setter
    def needs_rescan(self, needs_rescan):
        """Sets the needs_rescan of this MediaFilePartialUpdate.


        :param needs_rescan: The needs_rescan of this MediaFilePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._needs_rescan = needs_rescan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MediaFilePartialUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MediaFilePartialUpdate):
            return True

        return self.to_dict() != other.to_dict()
