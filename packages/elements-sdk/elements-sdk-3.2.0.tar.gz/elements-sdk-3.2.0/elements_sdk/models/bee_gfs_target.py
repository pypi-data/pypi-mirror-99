# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class BeeGFSTarget(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'node': 'StorageNodeMini',
        'id': 'int',
        'host': 'str',
        'storage_pool': 'int',
        'size_total': 'int',
        'size_used': 'int',
        'size_free': 'int',
        'online': 'bool',
        'consistent': 'bool',
        'errors': 'list[str]'
    }

    attribute_map = {
        'node': 'node',
        'id': 'id',
        'host': 'host',
        'storage_pool': 'storage_pool',
        'size_total': 'size_total',
        'size_used': 'size_used',
        'size_free': 'size_free',
        'online': 'online',
        'consistent': 'consistent',
        'errors': 'errors'
    }

    def __init__(self, node=None, id=None, host=None, storage_pool=None, size_total=None, size_used=None, size_free=None, online=None, consistent=None, errors=None, local_vars_configuration=None):  # noqa: E501
        """BeeGFSTarget - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._node = None
        self._id = None
        self._host = None
        self._storage_pool = None
        self._size_total = None
        self._size_used = None
        self._size_free = None
        self._online = None
        self._consistent = None
        self._errors = None
        self.discriminator = None

        if node is not None:
            self.node = node
        self.id = id
        self.host = host
        self.storage_pool = storage_pool
        self.size_total = size_total
        self.size_used = size_used
        self.size_free = size_free
        self.online = online
        self.consistent = consistent
        self.errors = errors

    @property
    def node(self):
        """Gets the node of this BeeGFSTarget.  # noqa: E501


        :return: The node of this BeeGFSTarget.  # noqa: E501
        :rtype: StorageNodeMini
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this BeeGFSTarget.


        :param node: The node of this BeeGFSTarget.  # noqa: E501
        :type: StorageNodeMini
        """

        self._node = node

    @property
    def id(self):
        """Gets the id of this BeeGFSTarget.  # noqa: E501


        :return: The id of this BeeGFSTarget.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BeeGFSTarget.


        :param id: The id of this BeeGFSTarget.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def host(self):
        """Gets the host of this BeeGFSTarget.  # noqa: E501


        :return: The host of this BeeGFSTarget.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this BeeGFSTarget.


        :param host: The host of this BeeGFSTarget.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and host is None:  # noqa: E501
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                host is not None and len(host) < 1):
            raise ValueError("Invalid value for `host`, length must be greater than or equal to `1`")  # noqa: E501

        self._host = host

    @property
    def storage_pool(self):
        """Gets the storage_pool of this BeeGFSTarget.  # noqa: E501


        :return: The storage_pool of this BeeGFSTarget.  # noqa: E501
        :rtype: int
        """
        return self._storage_pool

    @storage_pool.setter
    def storage_pool(self, storage_pool):
        """Sets the storage_pool of this BeeGFSTarget.


        :param storage_pool: The storage_pool of this BeeGFSTarget.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and storage_pool is None:  # noqa: E501
            raise ValueError("Invalid value for `storage_pool`, must not be `None`")  # noqa: E501

        self._storage_pool = storage_pool

    @property
    def size_total(self):
        """Gets the size_total of this BeeGFSTarget.  # noqa: E501


        :return: The size_total of this BeeGFSTarget.  # noqa: E501
        :rtype: int
        """
        return self._size_total

    @size_total.setter
    def size_total(self, size_total):
        """Sets the size_total of this BeeGFSTarget.


        :param size_total: The size_total of this BeeGFSTarget.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and size_total is None:  # noqa: E501
            raise ValueError("Invalid value for `size_total`, must not be `None`")  # noqa: E501

        self._size_total = size_total

    @property
    def size_used(self):
        """Gets the size_used of this BeeGFSTarget.  # noqa: E501


        :return: The size_used of this BeeGFSTarget.  # noqa: E501
        :rtype: int
        """
        return self._size_used

    @size_used.setter
    def size_used(self, size_used):
        """Sets the size_used of this BeeGFSTarget.


        :param size_used: The size_used of this BeeGFSTarget.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and size_used is None:  # noqa: E501
            raise ValueError("Invalid value for `size_used`, must not be `None`")  # noqa: E501

        self._size_used = size_used

    @property
    def size_free(self):
        """Gets the size_free of this BeeGFSTarget.  # noqa: E501


        :return: The size_free of this BeeGFSTarget.  # noqa: E501
        :rtype: int
        """
        return self._size_free

    @size_free.setter
    def size_free(self, size_free):
        """Sets the size_free of this BeeGFSTarget.


        :param size_free: The size_free of this BeeGFSTarget.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and size_free is None:  # noqa: E501
            raise ValueError("Invalid value for `size_free`, must not be `None`")  # noqa: E501

        self._size_free = size_free

    @property
    def online(self):
        """Gets the online of this BeeGFSTarget.  # noqa: E501


        :return: The online of this BeeGFSTarget.  # noqa: E501
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this BeeGFSTarget.


        :param online: The online of this BeeGFSTarget.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and online is None:  # noqa: E501
            raise ValueError("Invalid value for `online`, must not be `None`")  # noqa: E501

        self._online = online

    @property
    def consistent(self):
        """Gets the consistent of this BeeGFSTarget.  # noqa: E501


        :return: The consistent of this BeeGFSTarget.  # noqa: E501
        :rtype: bool
        """
        return self._consistent

    @consistent.setter
    def consistent(self, consistent):
        """Sets the consistent of this BeeGFSTarget.


        :param consistent: The consistent of this BeeGFSTarget.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and consistent is None:  # noqa: E501
            raise ValueError("Invalid value for `consistent`, must not be `None`")  # noqa: E501

        self._consistent = consistent

    @property
    def errors(self):
        """Gets the errors of this BeeGFSTarget.  # noqa: E501


        :return: The errors of this BeeGFSTarget.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this BeeGFSTarget.


        :param errors: The errors of this BeeGFSTarget.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and errors is None:  # noqa: E501
            raise ValueError("Invalid value for `errors`, must not be `None`")  # noqa: E501

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BeeGFSTarget):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BeeGFSTarget):
            return True

        return self.to_dict() != other.to_dict()
