# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class TapeFile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'tape': 'Tape',
        'path': 'str',
        'uid': 'int',
        'name': 'str',
        'is_dir': 'bool',
        'read_only': 'bool',
        'length': 'int',
        'checksum': 'str',
        'fullpath': 'str',
        'parent': 'int'
    }

    attribute_map = {
        'id': 'id',
        'tape': 'tape',
        'path': 'path',
        'uid': 'uid',
        'name': 'name',
        'is_dir': 'is_dir',
        'read_only': 'read_only',
        'length': 'length',
        'checksum': 'checksum',
        'fullpath': 'fullpath',
        'parent': 'parent'
    }

    def __init__(self, id=None, tape=None, path=None, uid=None, name=None, is_dir=None, read_only=None, length=None, checksum=None, fullpath=None, parent=None, local_vars_configuration=None):  # noqa: E501
        """TapeFile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._tape = None
        self._path = None
        self._uid = None
        self._name = None
        self._is_dir = None
        self._read_only = None
        self._length = None
        self._checksum = None
        self._fullpath = None
        self._parent = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if tape is not None:
            self.tape = tape
        self.path = path
        self.uid = uid
        self.name = name
        if is_dir is not None:
            self.is_dir = is_dir
        if read_only is not None:
            self.read_only = read_only
        if length is not None:
            self.length = length
        self.checksum = checksum
        self.fullpath = fullpath
        self.parent = parent

    @property
    def id(self):
        """Gets the id of this TapeFile.  # noqa: E501


        :return: The id of this TapeFile.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TapeFile.


        :param id: The id of this TapeFile.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tape(self):
        """Gets the tape of this TapeFile.  # noqa: E501


        :return: The tape of this TapeFile.  # noqa: E501
        :rtype: Tape
        """
        return self._tape

    @tape.setter
    def tape(self, tape):
        """Sets the tape of this TapeFile.


        :param tape: The tape of this TapeFile.  # noqa: E501
        :type: Tape
        """

        self._tape = tape

    @property
    def path(self):
        """Gets the path of this TapeFile.  # noqa: E501


        :return: The path of this TapeFile.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this TapeFile.


        :param path: The path of this TapeFile.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and path is None:  # noqa: E501
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                path is not None and len(path) < 1):
            raise ValueError("Invalid value for `path`, length must be greater than or equal to `1`")  # noqa: E501

        self._path = path

    @property
    def uid(self):
        """Gets the uid of this TapeFile.  # noqa: E501


        :return: The uid of this TapeFile.  # noqa: E501
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this TapeFile.


        :param uid: The uid of this TapeFile.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and uid is None:  # noqa: E501
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                uid is not None and uid > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `uid`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                uid is not None and uid < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `uid`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._uid = uid

    @property
    def name(self):
        """Gets the name of this TapeFile.  # noqa: E501


        :return: The name of this TapeFile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TapeFile.


        :param name: The name of this TapeFile.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def is_dir(self):
        """Gets the is_dir of this TapeFile.  # noqa: E501


        :return: The is_dir of this TapeFile.  # noqa: E501
        :rtype: bool
        """
        return self._is_dir

    @is_dir.setter
    def is_dir(self, is_dir):
        """Sets the is_dir of this TapeFile.


        :param is_dir: The is_dir of this TapeFile.  # noqa: E501
        :type: bool
        """

        self._is_dir = is_dir

    @property
    def read_only(self):
        """Gets the read_only of this TapeFile.  # noqa: E501


        :return: The read_only of this TapeFile.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this TapeFile.


        :param read_only: The read_only of this TapeFile.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def length(self):
        """Gets the length of this TapeFile.  # noqa: E501


        :return: The length of this TapeFile.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this TapeFile.


        :param length: The length of this TapeFile.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                length is not None and length > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `length`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                length is not None and length < -9223372036854775808):  # noqa: E501
            raise ValueError("Invalid value for `length`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._length = length

    @property
    def checksum(self):
        """Gets the checksum of this TapeFile.  # noqa: E501


        :return: The checksum of this TapeFile.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this TapeFile.


        :param checksum: The checksum of this TapeFile.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                checksum is not None and len(checksum) > 255):
            raise ValueError("Invalid value for `checksum`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                checksum is not None and len(checksum) < 1):
            raise ValueError("Invalid value for `checksum`, length must be greater than or equal to `1`")  # noqa: E501

        self._checksum = checksum

    @property
    def fullpath(self):
        """Gets the fullpath of this TapeFile.  # noqa: E501


        :return: The fullpath of this TapeFile.  # noqa: E501
        :rtype: str
        """
        return self._fullpath

    @fullpath.setter
    def fullpath(self, fullpath):
        """Sets the fullpath of this TapeFile.


        :param fullpath: The fullpath of this TapeFile.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                fullpath is not None and len(fullpath) > 4095):
            raise ValueError("Invalid value for `fullpath`, length must be less than or equal to `4095`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                fullpath is not None and len(fullpath) < 1):
            raise ValueError("Invalid value for `fullpath`, length must be greater than or equal to `1`")  # noqa: E501

        self._fullpath = fullpath

    @property
    def parent(self):
        """Gets the parent of this TapeFile.  # noqa: E501


        :return: The parent of this TapeFile.  # noqa: E501
        :rtype: int
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this TapeFile.


        :param parent: The parent of this TapeFile.  # noqa: E501
        :type: int
        """

        self._parent = parent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TapeFile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TapeFile):
            return True

        return self.to_dict() != other.to_dict()
