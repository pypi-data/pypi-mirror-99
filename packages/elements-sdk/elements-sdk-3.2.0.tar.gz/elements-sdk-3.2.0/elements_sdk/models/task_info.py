# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class TaskInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'display_name': 'str',
        'kwargs': 'dict(str, str)',
        'subtask': 'Subtask',
        'worker': 'StorageNodeMini',
        'user': 'ElementsUserMini',
        'workstation': 'Workstation',
        'progress': 'TaskProgress',
        'name': 'str',
        'task_name': 'str',
        'worker_name': 'str',
        'queue': 'str',
        'state': 'int',
        'state_text': 'str',
        'job_instance': 'str',
        'started': 'datetime',
        'finished': 'datetime',
        'exception': 'str',
        'traceback': 'str',
        'schedule': 'int'
    }

    attribute_map = {
        'id': 'id',
        'display_name': 'display_name',
        'kwargs': 'kwargs',
        'subtask': 'subtask',
        'worker': 'worker',
        'user': 'user',
        'workstation': 'workstation',
        'progress': 'progress',
        'name': 'name',
        'task_name': 'task_name',
        'worker_name': 'worker_name',
        'queue': 'queue',
        'state': 'state',
        'state_text': 'state_text',
        'job_instance': 'job_instance',
        'started': 'started',
        'finished': 'finished',
        'exception': 'exception',
        'traceback': 'traceback',
        'schedule': 'schedule'
    }

    def __init__(self, id=None, display_name=None, kwargs=None, subtask=None, worker=None, user=None, workstation=None, progress=None, name=None, task_name=None, worker_name=None, queue=None, state=None, state_text=None, job_instance=None, started=None, finished=None, exception=None, traceback=None, schedule=None, local_vars_configuration=None):  # noqa: E501
        """TaskInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._display_name = None
        self._kwargs = None
        self._subtask = None
        self._worker = None
        self._user = None
        self._workstation = None
        self._progress = None
        self._name = None
        self._task_name = None
        self._worker_name = None
        self._queue = None
        self._state = None
        self._state_text = None
        self._job_instance = None
        self._started = None
        self._finished = None
        self._exception = None
        self._traceback = None
        self._schedule = None
        self.discriminator = None

        self.id = id
        if display_name is not None:
            self.display_name = display_name
        self.kwargs = kwargs
        self.subtask = subtask
        if worker is not None:
            self.worker = worker
        if user is not None:
            self.user = user
        if workstation is not None:
            self.workstation = workstation
        if progress is not None:
            self.progress = progress
        self.name = name
        self.task_name = task_name
        self.worker_name = worker_name
        self.queue = queue
        if state is not None:
            self.state = state
        self.state_text = state_text
        self.job_instance = job_instance
        if started is not None:
            self.started = started
        if finished is not None:
            self.finished = finished
        self.exception = exception
        self.traceback = traceback
        self.schedule = schedule

    @property
    def id(self):
        """Gets the id of this TaskInfo.  # noqa: E501


        :return: The id of this TaskInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskInfo.


        :param id: The id of this TaskInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) > 255):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) < 1):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this TaskInfo.  # noqa: E501


        :return: The display_name of this TaskInfo.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this TaskInfo.


        :param display_name: The display_name of this TaskInfo.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def kwargs(self):
        """Gets the kwargs of this TaskInfo.  # noqa: E501


        :return: The kwargs of this TaskInfo.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._kwargs

    @kwargs.setter
    def kwargs(self, kwargs):
        """Sets the kwargs of this TaskInfo.


        :param kwargs: The kwargs of this TaskInfo.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and kwargs is None:  # noqa: E501
            raise ValueError("Invalid value for `kwargs`, must not be `None`")  # noqa: E501

        self._kwargs = kwargs

    @property
    def subtask(self):
        """Gets the subtask of this TaskInfo.  # noqa: E501


        :return: The subtask of this TaskInfo.  # noqa: E501
        :rtype: Subtask
        """
        return self._subtask

    @subtask.setter
    def subtask(self, subtask):
        """Sets the subtask of this TaskInfo.


        :param subtask: The subtask of this TaskInfo.  # noqa: E501
        :type: Subtask
        """

        self._subtask = subtask

    @property
    def worker(self):
        """Gets the worker of this TaskInfo.  # noqa: E501


        :return: The worker of this TaskInfo.  # noqa: E501
        :rtype: StorageNodeMini
        """
        return self._worker

    @worker.setter
    def worker(self, worker):
        """Sets the worker of this TaskInfo.


        :param worker: The worker of this TaskInfo.  # noqa: E501
        :type: StorageNodeMini
        """

        self._worker = worker

    @property
    def user(self):
        """Gets the user of this TaskInfo.  # noqa: E501


        :return: The user of this TaskInfo.  # noqa: E501
        :rtype: ElementsUserMini
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this TaskInfo.


        :param user: The user of this TaskInfo.  # noqa: E501
        :type: ElementsUserMini
        """

        self._user = user

    @property
    def workstation(self):
        """Gets the workstation of this TaskInfo.  # noqa: E501


        :return: The workstation of this TaskInfo.  # noqa: E501
        :rtype: Workstation
        """
        return self._workstation

    @workstation.setter
    def workstation(self, workstation):
        """Sets the workstation of this TaskInfo.


        :param workstation: The workstation of this TaskInfo.  # noqa: E501
        :type: Workstation
        """

        self._workstation = workstation

    @property
    def progress(self):
        """Gets the progress of this TaskInfo.  # noqa: E501


        :return: The progress of this TaskInfo.  # noqa: E501
        :rtype: TaskProgress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this TaskInfo.


        :param progress: The progress of this TaskInfo.  # noqa: E501
        :type: TaskProgress
        """

        self._progress = progress

    @property
    def name(self):
        """Gets the name of this TaskInfo.  # noqa: E501


        :return: The name of this TaskInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskInfo.


        :param name: The name of this TaskInfo.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 1023):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `1023`")  # noqa: E501

        self._name = name

    @property
    def task_name(self):
        """Gets the task_name of this TaskInfo.  # noqa: E501


        :return: The task_name of this TaskInfo.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this TaskInfo.


        :param task_name: The task_name of this TaskInfo.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                task_name is not None and len(task_name) > 255):
            raise ValueError("Invalid value for `task_name`, length must be less than or equal to `255`")  # noqa: E501

        self._task_name = task_name

    @property
    def worker_name(self):
        """Gets the worker_name of this TaskInfo.  # noqa: E501


        :return: The worker_name of this TaskInfo.  # noqa: E501
        :rtype: str
        """
        return self._worker_name

    @worker_name.setter
    def worker_name(self, worker_name):
        """Sets the worker_name of this TaskInfo.


        :param worker_name: The worker_name of this TaskInfo.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                worker_name is not None and len(worker_name) > 255):
            raise ValueError("Invalid value for `worker_name`, length must be less than or equal to `255`")  # noqa: E501

        self._worker_name = worker_name

    @property
    def queue(self):
        """Gets the queue of this TaskInfo.  # noqa: E501


        :return: The queue of this TaskInfo.  # noqa: E501
        :rtype: str
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this TaskInfo.


        :param queue: The queue of this TaskInfo.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                queue is not None and len(queue) > 255):
            raise ValueError("Invalid value for `queue`, length must be less than or equal to `255`")  # noqa: E501

        self._queue = queue

    @property
    def state(self):
        """Gets the state of this TaskInfo.  # noqa: E501


        :return: The state of this TaskInfo.  # noqa: E501
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TaskInfo.


        :param state: The state of this TaskInfo.  # noqa: E501
        :type: int
        """

        self._state = state

    @property
    def state_text(self):
        """Gets the state_text of this TaskInfo.  # noqa: E501


        :return: The state_text of this TaskInfo.  # noqa: E501
        :rtype: str
        """
        return self._state_text

    @state_text.setter
    def state_text(self, state_text):
        """Sets the state_text of this TaskInfo.


        :param state_text: The state_text of this TaskInfo.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                state_text is not None and len(state_text) > 1023):
            raise ValueError("Invalid value for `state_text`, length must be less than or equal to `1023`")  # noqa: E501

        self._state_text = state_text

    @property
    def job_instance(self):
        """Gets the job_instance of this TaskInfo.  # noqa: E501


        :return: The job_instance of this TaskInfo.  # noqa: E501
        :rtype: str
        """
        return self._job_instance

    @job_instance.setter
    def job_instance(self, job_instance):
        """Sets the job_instance of this TaskInfo.


        :param job_instance: The job_instance of this TaskInfo.  # noqa: E501
        :type: str
        """

        self._job_instance = job_instance

    @property
    def started(self):
        """Gets the started of this TaskInfo.  # noqa: E501


        :return: The started of this TaskInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this TaskInfo.


        :param started: The started of this TaskInfo.  # noqa: E501
        :type: datetime
        """

        self._started = started

    @property
    def finished(self):
        """Gets the finished of this TaskInfo.  # noqa: E501


        :return: The finished of this TaskInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this TaskInfo.


        :param finished: The finished of this TaskInfo.  # noqa: E501
        :type: datetime
        """

        self._finished = finished

    @property
    def exception(self):
        """Gets the exception of this TaskInfo.  # noqa: E501


        :return: The exception of this TaskInfo.  # noqa: E501
        :rtype: str
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """Sets the exception of this TaskInfo.


        :param exception: The exception of this TaskInfo.  # noqa: E501
        :type: str
        """

        self._exception = exception

    @property
    def traceback(self):
        """Gets the traceback of this TaskInfo.  # noqa: E501


        :return: The traceback of this TaskInfo.  # noqa: E501
        :rtype: str
        """
        return self._traceback

    @traceback.setter
    def traceback(self, traceback):
        """Sets the traceback of this TaskInfo.


        :param traceback: The traceback of this TaskInfo.  # noqa: E501
        :type: str
        """

        self._traceback = traceback

    @property
    def schedule(self):
        """Gets the schedule of this TaskInfo.  # noqa: E501


        :return: The schedule of this TaskInfo.  # noqa: E501
        :rtype: int
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this TaskInfo.


        :param schedule: The schedule of this TaskInfo.  # noqa: E501
        :type: int
        """

        self._schedule = schedule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskInfo):
            return True

        return self.to_dict() != other.to_dict()
