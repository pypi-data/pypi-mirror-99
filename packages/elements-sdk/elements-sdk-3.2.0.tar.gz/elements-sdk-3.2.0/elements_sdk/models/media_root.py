# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class MediaRoot(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'custom_fields': 'list[CustomField]',
        'workflow': 'dict(str, str)',
        'ai_config': 'dict(str, str)',
        'veritone_config': 'dict(str, str)',
        'volume': 'VolumeMini',
        'full_path': 'str',
        'resolved_permissions': 'list[MediaRootPermission]',
        'jobs': 'list[Job]',
        'name': 'str',
        'path': 'str',
        'needs_rescan': 'bool',
        'view_mode': 'str',
        'view_style': 'str',
        'view_default_tab': 'str',
        'show_tags': 'bool',
        'show_comments': 'bool',
        'show_locations': 'bool',
        'show_custom_fields': 'bool',
        'show_ratings': 'bool',
        'show_subclips': 'bool',
        'show_markers': 'bool',
        'show_ai_metadata': 'bool',
        'prefetch_thumbnail_strips': 'bool',
        'cover': 'str',
        'name_field': 'str',
        'share_comments': 'bool',
        'share_link_duration': 'int',
        'default_proxy_profile': 'int',
        'cloud_proxy_profile': 'int',
        'veritone_connection': 'int',
        'veritone_proxy_profile': 'int',
        'ai_connection': 'int',
        'ai_proxy_profile': 'int',
        'custom_field_definitions': 'list[int]',
        'proxy_profiles': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'custom_fields': 'custom_fields',
        'workflow': 'workflow',
        'ai_config': 'ai_config',
        'veritone_config': 'veritone_config',
        'volume': 'volume',
        'full_path': 'full_path',
        'resolved_permissions': 'resolved_permissions',
        'jobs': 'jobs',
        'name': 'name',
        'path': 'path',
        'needs_rescan': 'needs_rescan',
        'view_mode': 'view_mode',
        'view_style': 'view_style',
        'view_default_tab': 'view_default_tab',
        'show_tags': 'show_tags',
        'show_comments': 'show_comments',
        'show_locations': 'show_locations',
        'show_custom_fields': 'show_custom_fields',
        'show_ratings': 'show_ratings',
        'show_subclips': 'show_subclips',
        'show_markers': 'show_markers',
        'show_ai_metadata': 'show_ai_metadata',
        'prefetch_thumbnail_strips': 'prefetch_thumbnail_strips',
        'cover': 'cover',
        'name_field': 'name_field',
        'share_comments': 'share_comments',
        'share_link_duration': 'share_link_duration',
        'default_proxy_profile': 'default_proxy_profile',
        'cloud_proxy_profile': 'cloud_proxy_profile',
        'veritone_connection': 'veritone_connection',
        'veritone_proxy_profile': 'veritone_proxy_profile',
        'ai_connection': 'ai_connection',
        'ai_proxy_profile': 'ai_proxy_profile',
        'custom_field_definitions': 'custom_field_definitions',
        'proxy_profiles': 'proxy_profiles'
    }

    def __init__(self, id=None, custom_fields=None, workflow=None, ai_config=None, veritone_config=None, volume=None, full_path=None, resolved_permissions=None, jobs=None, name=None, path=None, needs_rescan=None, view_mode=None, view_style=None, view_default_tab=None, show_tags=None, show_comments=None, show_locations=None, show_custom_fields=None, show_ratings=None, show_subclips=None, show_markers=None, show_ai_metadata=None, prefetch_thumbnail_strips=None, cover=None, name_field=None, share_comments=None, share_link_duration=None, default_proxy_profile=None, cloud_proxy_profile=None, veritone_connection=None, veritone_proxy_profile=None, ai_connection=None, ai_proxy_profile=None, custom_field_definitions=None, proxy_profiles=None, local_vars_configuration=None):  # noqa: E501
        """MediaRoot - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._custom_fields = None
        self._workflow = None
        self._ai_config = None
        self._veritone_config = None
        self._volume = None
        self._full_path = None
        self._resolved_permissions = None
        self._jobs = None
        self._name = None
        self._path = None
        self._needs_rescan = None
        self._view_mode = None
        self._view_style = None
        self._view_default_tab = None
        self._show_tags = None
        self._show_comments = None
        self._show_locations = None
        self._show_custom_fields = None
        self._show_ratings = None
        self._show_subclips = None
        self._show_markers = None
        self._show_ai_metadata = None
        self._prefetch_thumbnail_strips = None
        self._cover = None
        self._name_field = None
        self._share_comments = None
        self._share_link_duration = None
        self._default_proxy_profile = None
        self._cloud_proxy_profile = None
        self._veritone_connection = None
        self._veritone_proxy_profile = None
        self._ai_connection = None
        self._ai_proxy_profile = None
        self._custom_field_definitions = None
        self._proxy_profiles = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if custom_fields is not None:
            self.custom_fields = custom_fields
        self.workflow = workflow
        self.ai_config = ai_config
        self.veritone_config = veritone_config
        self.volume = volume
        if full_path is not None:
            self.full_path = full_path
        if resolved_permissions is not None:
            self.resolved_permissions = resolved_permissions
        if jobs is not None:
            self.jobs = jobs
        self.name = name
        if path is not None:
            self.path = path
        if needs_rescan is not None:
            self.needs_rescan = needs_rescan
        if view_mode is not None:
            self.view_mode = view_mode
        if view_style is not None:
            self.view_style = view_style
        if view_default_tab is not None:
            self.view_default_tab = view_default_tab
        if show_tags is not None:
            self.show_tags = show_tags
        if show_comments is not None:
            self.show_comments = show_comments
        if show_locations is not None:
            self.show_locations = show_locations
        if show_custom_fields is not None:
            self.show_custom_fields = show_custom_fields
        if show_ratings is not None:
            self.show_ratings = show_ratings
        if show_subclips is not None:
            self.show_subclips = show_subclips
        if show_markers is not None:
            self.show_markers = show_markers
        if show_ai_metadata is not None:
            self.show_ai_metadata = show_ai_metadata
        if prefetch_thumbnail_strips is not None:
            self.prefetch_thumbnail_strips = prefetch_thumbnail_strips
        self.cover = cover
        self.name_field = name_field
        if share_comments is not None:
            self.share_comments = share_comments
        if share_link_duration is not None:
            self.share_link_duration = share_link_duration
        self.default_proxy_profile = default_proxy_profile
        self.cloud_proxy_profile = cloud_proxy_profile
        self.veritone_connection = veritone_connection
        self.veritone_proxy_profile = veritone_proxy_profile
        self.ai_connection = ai_connection
        self.ai_proxy_profile = ai_proxy_profile
        if custom_field_definitions is not None:
            self.custom_field_definitions = custom_field_definitions
        if proxy_profiles is not None:
            self.proxy_profiles = proxy_profiles

    @property
    def id(self):
        """Gets the id of this MediaRoot.  # noqa: E501


        :return: The id of this MediaRoot.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MediaRoot.


        :param id: The id of this MediaRoot.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def custom_fields(self):
        """Gets the custom_fields of this MediaRoot.  # noqa: E501


        :return: The custom_fields of this MediaRoot.  # noqa: E501
        :rtype: list[CustomField]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this MediaRoot.


        :param custom_fields: The custom_fields of this MediaRoot.  # noqa: E501
        :type: list[CustomField]
        """

        self._custom_fields = custom_fields

    @property
    def workflow(self):
        """Gets the workflow of this MediaRoot.  # noqa: E501


        :return: The workflow of this MediaRoot.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this MediaRoot.


        :param workflow: The workflow of this MediaRoot.  # noqa: E501
        :type: dict(str, str)
        """

        self._workflow = workflow

    @property
    def ai_config(self):
        """Gets the ai_config of this MediaRoot.  # noqa: E501


        :return: The ai_config of this MediaRoot.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._ai_config

    @ai_config.setter
    def ai_config(self, ai_config):
        """Sets the ai_config of this MediaRoot.


        :param ai_config: The ai_config of this MediaRoot.  # noqa: E501
        :type: dict(str, str)
        """

        self._ai_config = ai_config

    @property
    def veritone_config(self):
        """Gets the veritone_config of this MediaRoot.  # noqa: E501


        :return: The veritone_config of this MediaRoot.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._veritone_config

    @veritone_config.setter
    def veritone_config(self, veritone_config):
        """Sets the veritone_config of this MediaRoot.


        :param veritone_config: The veritone_config of this MediaRoot.  # noqa: E501
        :type: dict(str, str)
        """

        self._veritone_config = veritone_config

    @property
    def volume(self):
        """Gets the volume of this MediaRoot.  # noqa: E501


        :return: The volume of this MediaRoot.  # noqa: E501
        :rtype: VolumeMini
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this MediaRoot.


        :param volume: The volume of this MediaRoot.  # noqa: E501
        :type: VolumeMini
        """
        if self.local_vars_configuration.client_side_validation and volume is None:  # noqa: E501
            raise ValueError("Invalid value for `volume`, must not be `None`")  # noqa: E501

        self._volume = volume

    @property
    def full_path(self):
        """Gets the full_path of this MediaRoot.  # noqa: E501


        :return: The full_path of this MediaRoot.  # noqa: E501
        :rtype: str
        """
        return self._full_path

    @full_path.setter
    def full_path(self, full_path):
        """Sets the full_path of this MediaRoot.


        :param full_path: The full_path of this MediaRoot.  # noqa: E501
        :type: str
        """

        self._full_path = full_path

    @property
    def resolved_permissions(self):
        """Gets the resolved_permissions of this MediaRoot.  # noqa: E501


        :return: The resolved_permissions of this MediaRoot.  # noqa: E501
        :rtype: list[MediaRootPermission]
        """
        return self._resolved_permissions

    @resolved_permissions.setter
    def resolved_permissions(self, resolved_permissions):
        """Sets the resolved_permissions of this MediaRoot.


        :param resolved_permissions: The resolved_permissions of this MediaRoot.  # noqa: E501
        :type: list[MediaRootPermission]
        """

        self._resolved_permissions = resolved_permissions

    @property
    def jobs(self):
        """Gets the jobs of this MediaRoot.  # noqa: E501


        :return: The jobs of this MediaRoot.  # noqa: E501
        :rtype: list[Job]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this MediaRoot.


        :param jobs: The jobs of this MediaRoot.  # noqa: E501
        :type: list[Job]
        """

        self._jobs = jobs

    @property
    def name(self):
        """Gets the name of this MediaRoot.  # noqa: E501


        :return: The name of this MediaRoot.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MediaRoot.


        :param name: The name of this MediaRoot.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def path(self):
        """Gets the path of this MediaRoot.  # noqa: E501


        :return: The path of this MediaRoot.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this MediaRoot.


        :param path: The path of this MediaRoot.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                path is not None and len(path) > 255):
            raise ValueError("Invalid value for `path`, length must be less than or equal to `255`")  # noqa: E501

        self._path = path

    @property
    def needs_rescan(self):
        """Gets the needs_rescan of this MediaRoot.  # noqa: E501


        :return: The needs_rescan of this MediaRoot.  # noqa: E501
        :rtype: bool
        """
        return self._needs_rescan

    @needs_rescan.setter
    def needs_rescan(self, needs_rescan):
        """Sets the needs_rescan of this MediaRoot.


        :param needs_rescan: The needs_rescan of this MediaRoot.  # noqa: E501
        :type: bool
        """

        self._needs_rescan = needs_rescan

    @property
    def view_mode(self):
        """Gets the view_mode of this MediaRoot.  # noqa: E501


        :return: The view_mode of this MediaRoot.  # noqa: E501
        :rtype: str
        """
        return self._view_mode

    @view_mode.setter
    def view_mode(self, view_mode):
        """Sets the view_mode of this MediaRoot.


        :param view_mode: The view_mode of this MediaRoot.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                view_mode is not None and len(view_mode) > 63):
            raise ValueError("Invalid value for `view_mode`, length must be less than or equal to `63`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                view_mode is not None and len(view_mode) < 1):
            raise ValueError("Invalid value for `view_mode`, length must be greater than or equal to `1`")  # noqa: E501

        self._view_mode = view_mode

    @property
    def view_style(self):
        """Gets the view_style of this MediaRoot.  # noqa: E501


        :return: The view_style of this MediaRoot.  # noqa: E501
        :rtype: str
        """
        return self._view_style

    @view_style.setter
    def view_style(self, view_style):
        """Sets the view_style of this MediaRoot.


        :param view_style: The view_style of this MediaRoot.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                view_style is not None and len(view_style) > 63):
            raise ValueError("Invalid value for `view_style`, length must be less than or equal to `63`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                view_style is not None and len(view_style) < 1):
            raise ValueError("Invalid value for `view_style`, length must be greater than or equal to `1`")  # noqa: E501

        self._view_style = view_style

    @property
    def view_default_tab(self):
        """Gets the view_default_tab of this MediaRoot.  # noqa: E501


        :return: The view_default_tab of this MediaRoot.  # noqa: E501
        :rtype: str
        """
        return self._view_default_tab

    @view_default_tab.setter
    def view_default_tab(self, view_default_tab):
        """Sets the view_default_tab of this MediaRoot.


        :param view_default_tab: The view_default_tab of this MediaRoot.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                view_default_tab is not None and len(view_default_tab) > 63):
            raise ValueError("Invalid value for `view_default_tab`, length must be less than or equal to `63`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                view_default_tab is not None and len(view_default_tab) < 1):
            raise ValueError("Invalid value for `view_default_tab`, length must be greater than or equal to `1`")  # noqa: E501

        self._view_default_tab = view_default_tab

    @property
    def show_tags(self):
        """Gets the show_tags of this MediaRoot.  # noqa: E501


        :return: The show_tags of this MediaRoot.  # noqa: E501
        :rtype: bool
        """
        return self._show_tags

    @show_tags.setter
    def show_tags(self, show_tags):
        """Sets the show_tags of this MediaRoot.


        :param show_tags: The show_tags of this MediaRoot.  # noqa: E501
        :type: bool
        """

        self._show_tags = show_tags

    @property
    def show_comments(self):
        """Gets the show_comments of this MediaRoot.  # noqa: E501


        :return: The show_comments of this MediaRoot.  # noqa: E501
        :rtype: bool
        """
        return self._show_comments

    @show_comments.setter
    def show_comments(self, show_comments):
        """Sets the show_comments of this MediaRoot.


        :param show_comments: The show_comments of this MediaRoot.  # noqa: E501
        :type: bool
        """

        self._show_comments = show_comments

    @property
    def show_locations(self):
        """Gets the show_locations of this MediaRoot.  # noqa: E501


        :return: The show_locations of this MediaRoot.  # noqa: E501
        :rtype: bool
        """
        return self._show_locations

    @show_locations.setter
    def show_locations(self, show_locations):
        """Sets the show_locations of this MediaRoot.


        :param show_locations: The show_locations of this MediaRoot.  # noqa: E501
        :type: bool
        """

        self._show_locations = show_locations

    @property
    def show_custom_fields(self):
        """Gets the show_custom_fields of this MediaRoot.  # noqa: E501


        :return: The show_custom_fields of this MediaRoot.  # noqa: E501
        :rtype: bool
        """
        return self._show_custom_fields

    @show_custom_fields.setter
    def show_custom_fields(self, show_custom_fields):
        """Sets the show_custom_fields of this MediaRoot.


        :param show_custom_fields: The show_custom_fields of this MediaRoot.  # noqa: E501
        :type: bool
        """

        self._show_custom_fields = show_custom_fields

    @property
    def show_ratings(self):
        """Gets the show_ratings of this MediaRoot.  # noqa: E501


        :return: The show_ratings of this MediaRoot.  # noqa: E501
        :rtype: bool
        """
        return self._show_ratings

    @show_ratings.setter
    def show_ratings(self, show_ratings):
        """Sets the show_ratings of this MediaRoot.


        :param show_ratings: The show_ratings of this MediaRoot.  # noqa: E501
        :type: bool
        """

        self._show_ratings = show_ratings

    @property
    def show_subclips(self):
        """Gets the show_subclips of this MediaRoot.  # noqa: E501


        :return: The show_subclips of this MediaRoot.  # noqa: E501
        :rtype: bool
        """
        return self._show_subclips

    @show_subclips.setter
    def show_subclips(self, show_subclips):
        """Sets the show_subclips of this MediaRoot.


        :param show_subclips: The show_subclips of this MediaRoot.  # noqa: E501
        :type: bool
        """

        self._show_subclips = show_subclips

    @property
    def show_markers(self):
        """Gets the show_markers of this MediaRoot.  # noqa: E501


        :return: The show_markers of this MediaRoot.  # noqa: E501
        :rtype: bool
        """
        return self._show_markers

    @show_markers.setter
    def show_markers(self, show_markers):
        """Sets the show_markers of this MediaRoot.


        :param show_markers: The show_markers of this MediaRoot.  # noqa: E501
        :type: bool
        """

        self._show_markers = show_markers

    @property
    def show_ai_metadata(self):
        """Gets the show_ai_metadata of this MediaRoot.  # noqa: E501


        :return: The show_ai_metadata of this MediaRoot.  # noqa: E501
        :rtype: bool
        """
        return self._show_ai_metadata

    @show_ai_metadata.setter
    def show_ai_metadata(self, show_ai_metadata):
        """Sets the show_ai_metadata of this MediaRoot.


        :param show_ai_metadata: The show_ai_metadata of this MediaRoot.  # noqa: E501
        :type: bool
        """

        self._show_ai_metadata = show_ai_metadata

    @property
    def prefetch_thumbnail_strips(self):
        """Gets the prefetch_thumbnail_strips of this MediaRoot.  # noqa: E501


        :return: The prefetch_thumbnail_strips of this MediaRoot.  # noqa: E501
        :rtype: bool
        """
        return self._prefetch_thumbnail_strips

    @prefetch_thumbnail_strips.setter
    def prefetch_thumbnail_strips(self, prefetch_thumbnail_strips):
        """Sets the prefetch_thumbnail_strips of this MediaRoot.


        :param prefetch_thumbnail_strips: The prefetch_thumbnail_strips of this MediaRoot.  # noqa: E501
        :type: bool
        """

        self._prefetch_thumbnail_strips = prefetch_thumbnail_strips

    @property
    def cover(self):
        """Gets the cover of this MediaRoot.  # noqa: E501


        :return: The cover of this MediaRoot.  # noqa: E501
        :rtype: str
        """
        return self._cover

    @cover.setter
    def cover(self, cover):
        """Sets the cover of this MediaRoot.


        :param cover: The cover of this MediaRoot.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                cover is not None and len(cover) > 255):
            raise ValueError("Invalid value for `cover`, length must be less than or equal to `255`")  # noqa: E501

        self._cover = cover

    @property
    def name_field(self):
        """Gets the name_field of this MediaRoot.  # noqa: E501


        :return: The name_field of this MediaRoot.  # noqa: E501
        :rtype: str
        """
        return self._name_field

    @name_field.setter
    def name_field(self, name_field):
        """Sets the name_field of this MediaRoot.


        :param name_field: The name_field of this MediaRoot.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name_field is not None and len(name_field) > 255):
            raise ValueError("Invalid value for `name_field`, length must be less than or equal to `255`")  # noqa: E501

        self._name_field = name_field

    @property
    def share_comments(self):
        """Gets the share_comments of this MediaRoot.  # noqa: E501


        :return: The share_comments of this MediaRoot.  # noqa: E501
        :rtype: bool
        """
        return self._share_comments

    @share_comments.setter
    def share_comments(self, share_comments):
        """Sets the share_comments of this MediaRoot.


        :param share_comments: The share_comments of this MediaRoot.  # noqa: E501
        :type: bool
        """

        self._share_comments = share_comments

    @property
    def share_link_duration(self):
        """Gets the share_link_duration of this MediaRoot.  # noqa: E501


        :return: The share_link_duration of this MediaRoot.  # noqa: E501
        :rtype: int
        """
        return self._share_link_duration

    @share_link_duration.setter
    def share_link_duration(self, share_link_duration):
        """Sets the share_link_duration of this MediaRoot.


        :param share_link_duration: The share_link_duration of this MediaRoot.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                share_link_duration is not None and share_link_duration > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `share_link_duration`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                share_link_duration is not None and share_link_duration < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `share_link_duration`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._share_link_duration = share_link_duration

    @property
    def default_proxy_profile(self):
        """Gets the default_proxy_profile of this MediaRoot.  # noqa: E501


        :return: The default_proxy_profile of this MediaRoot.  # noqa: E501
        :rtype: int
        """
        return self._default_proxy_profile

    @default_proxy_profile.setter
    def default_proxy_profile(self, default_proxy_profile):
        """Sets the default_proxy_profile of this MediaRoot.


        :param default_proxy_profile: The default_proxy_profile of this MediaRoot.  # noqa: E501
        :type: int
        """

        self._default_proxy_profile = default_proxy_profile

    @property
    def cloud_proxy_profile(self):
        """Gets the cloud_proxy_profile of this MediaRoot.  # noqa: E501


        :return: The cloud_proxy_profile of this MediaRoot.  # noqa: E501
        :rtype: int
        """
        return self._cloud_proxy_profile

    @cloud_proxy_profile.setter
    def cloud_proxy_profile(self, cloud_proxy_profile):
        """Sets the cloud_proxy_profile of this MediaRoot.


        :param cloud_proxy_profile: The cloud_proxy_profile of this MediaRoot.  # noqa: E501
        :type: int
        """

        self._cloud_proxy_profile = cloud_proxy_profile

    @property
    def veritone_connection(self):
        """Gets the veritone_connection of this MediaRoot.  # noqa: E501


        :return: The veritone_connection of this MediaRoot.  # noqa: E501
        :rtype: int
        """
        return self._veritone_connection

    @veritone_connection.setter
    def veritone_connection(self, veritone_connection):
        """Sets the veritone_connection of this MediaRoot.


        :param veritone_connection: The veritone_connection of this MediaRoot.  # noqa: E501
        :type: int
        """

        self._veritone_connection = veritone_connection

    @property
    def veritone_proxy_profile(self):
        """Gets the veritone_proxy_profile of this MediaRoot.  # noqa: E501


        :return: The veritone_proxy_profile of this MediaRoot.  # noqa: E501
        :rtype: int
        """
        return self._veritone_proxy_profile

    @veritone_proxy_profile.setter
    def veritone_proxy_profile(self, veritone_proxy_profile):
        """Sets the veritone_proxy_profile of this MediaRoot.


        :param veritone_proxy_profile: The veritone_proxy_profile of this MediaRoot.  # noqa: E501
        :type: int
        """

        self._veritone_proxy_profile = veritone_proxy_profile

    @property
    def ai_connection(self):
        """Gets the ai_connection of this MediaRoot.  # noqa: E501


        :return: The ai_connection of this MediaRoot.  # noqa: E501
        :rtype: int
        """
        return self._ai_connection

    @ai_connection.setter
    def ai_connection(self, ai_connection):
        """Sets the ai_connection of this MediaRoot.


        :param ai_connection: The ai_connection of this MediaRoot.  # noqa: E501
        :type: int
        """

        self._ai_connection = ai_connection

    @property
    def ai_proxy_profile(self):
        """Gets the ai_proxy_profile of this MediaRoot.  # noqa: E501


        :return: The ai_proxy_profile of this MediaRoot.  # noqa: E501
        :rtype: int
        """
        return self._ai_proxy_profile

    @ai_proxy_profile.setter
    def ai_proxy_profile(self, ai_proxy_profile):
        """Sets the ai_proxy_profile of this MediaRoot.


        :param ai_proxy_profile: The ai_proxy_profile of this MediaRoot.  # noqa: E501
        :type: int
        """

        self._ai_proxy_profile = ai_proxy_profile

    @property
    def custom_field_definitions(self):
        """Gets the custom_field_definitions of this MediaRoot.  # noqa: E501


        :return: The custom_field_definitions of this MediaRoot.  # noqa: E501
        :rtype: list[int]
        """
        return self._custom_field_definitions

    @custom_field_definitions.setter
    def custom_field_definitions(self, custom_field_definitions):
        """Sets the custom_field_definitions of this MediaRoot.


        :param custom_field_definitions: The custom_field_definitions of this MediaRoot.  # noqa: E501
        :type: list[int]
        """

        self._custom_field_definitions = custom_field_definitions

    @property
    def proxy_profiles(self):
        """Gets the proxy_profiles of this MediaRoot.  # noqa: E501


        :return: The proxy_profiles of this MediaRoot.  # noqa: E501
        :rtype: list[int]
        """
        return self._proxy_profiles

    @proxy_profiles.setter
    def proxy_profiles(self, proxy_profiles):
        """Sets the proxy_profiles of this MediaRoot.


        :param proxy_profiles: The proxy_profiles of this MediaRoot.  # noqa: E501
        :type: list[int]
        """

        self._proxy_profiles = proxy_profiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MediaRoot):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MediaRoot):
            return True

        return self.to_dict() != other.to_dict()
