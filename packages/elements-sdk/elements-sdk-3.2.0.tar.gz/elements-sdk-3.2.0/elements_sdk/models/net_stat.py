# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class NetStat(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'time': 'float',
        'c_rx': 'float',
        'c_tx': 'float',
        'c_rx_err': 'float',
        'c_tx_err': 'float'
    }

    attribute_map = {
        'time': 'time',
        'c_rx': 'c_rx',
        'c_tx': 'c_tx',
        'c_rx_err': 'c_rx_err',
        'c_tx_err': 'c_tx_err'
    }

    def __init__(self, time=None, c_rx=None, c_tx=None, c_rx_err=None, c_tx_err=None, local_vars_configuration=None):  # noqa: E501
        """NetStat - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._time = None
        self._c_rx = None
        self._c_tx = None
        self._c_rx_err = None
        self._c_tx_err = None
        self.discriminator = None

        self.time = time
        self.c_rx = c_rx
        self.c_tx = c_tx
        self.c_rx_err = c_rx_err
        self.c_tx_err = c_tx_err

    @property
    def time(self):
        """Gets the time of this NetStat.  # noqa: E501


        :return: The time of this NetStat.  # noqa: E501
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this NetStat.


        :param time: The time of this NetStat.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and time is None:  # noqa: E501
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def c_rx(self):
        """Gets the c_rx of this NetStat.  # noqa: E501


        :return: The c_rx of this NetStat.  # noqa: E501
        :rtype: float
        """
        return self._c_rx

    @c_rx.setter
    def c_rx(self, c_rx):
        """Sets the c_rx of this NetStat.


        :param c_rx: The c_rx of this NetStat.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and c_rx is None:  # noqa: E501
            raise ValueError("Invalid value for `c_rx`, must not be `None`")  # noqa: E501

        self._c_rx = c_rx

    @property
    def c_tx(self):
        """Gets the c_tx of this NetStat.  # noqa: E501


        :return: The c_tx of this NetStat.  # noqa: E501
        :rtype: float
        """
        return self._c_tx

    @c_tx.setter
    def c_tx(self, c_tx):
        """Sets the c_tx of this NetStat.


        :param c_tx: The c_tx of this NetStat.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and c_tx is None:  # noqa: E501
            raise ValueError("Invalid value for `c_tx`, must not be `None`")  # noqa: E501

        self._c_tx = c_tx

    @property
    def c_rx_err(self):
        """Gets the c_rx_err of this NetStat.  # noqa: E501


        :return: The c_rx_err of this NetStat.  # noqa: E501
        :rtype: float
        """
        return self._c_rx_err

    @c_rx_err.setter
    def c_rx_err(self, c_rx_err):
        """Sets the c_rx_err of this NetStat.


        :param c_rx_err: The c_rx_err of this NetStat.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and c_rx_err is None:  # noqa: E501
            raise ValueError("Invalid value for `c_rx_err`, must not be `None`")  # noqa: E501

        self._c_rx_err = c_rx_err

    @property
    def c_tx_err(self):
        """Gets the c_tx_err of this NetStat.  # noqa: E501


        :return: The c_tx_err of this NetStat.  # noqa: E501
        :rtype: float
        """
        return self._c_tx_err

    @c_tx_err.setter
    def c_tx_err(self, c_tx_err):
        """Sets the c_tx_err of this NetStat.


        :param c_tx_err: The c_tx_err of this NetStat.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and c_tx_err is None:  # noqa: E501
            raise ValueError("Invalid value for `c_tx_err`, must not be `None`")  # noqa: E501

        self._c_tx_err = c_tx_err

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetStat):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetStat):
            return True

        return self.to_dict() != other.to_dict()
