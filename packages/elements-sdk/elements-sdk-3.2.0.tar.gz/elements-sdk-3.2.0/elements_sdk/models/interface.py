# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class Interface(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'device': 'str',
        'addresses': 'list[Address]',
        'speed': 'int',
        'mtu': 'int',
        'use_for_mounts': 'bool',
        'priority': 'int',
        'port': 'str'
    }

    attribute_map = {
        'id': 'id',
        'device': 'device',
        'addresses': 'addresses',
        'speed': 'speed',
        'mtu': 'mtu',
        'use_for_mounts': 'use_for_mounts',
        'priority': 'priority',
        'port': 'port'
    }

    def __init__(self, id=None, device=None, addresses=None, speed=None, mtu=None, use_for_mounts=None, priority=None, port=None, local_vars_configuration=None):  # noqa: E501
        """Interface - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._device = None
        self._addresses = None
        self._speed = None
        self._mtu = None
        self._use_for_mounts = None
        self._priority = None
        self._port = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.device = device
        if addresses is not None:
            self.addresses = addresses
        self.speed = speed
        if mtu is not None:
            self.mtu = mtu
        if use_for_mounts is not None:
            self.use_for_mounts = use_for_mounts
        if priority is not None:
            self.priority = priority
        self.port = port

    @property
    def id(self):
        """Gets the id of this Interface.  # noqa: E501


        :return: The id of this Interface.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Interface.


        :param id: The id of this Interface.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def device(self):
        """Gets the device of this Interface.  # noqa: E501


        :return: The device of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this Interface.


        :param device: The device of this Interface.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and device is None:  # noqa: E501
            raise ValueError("Invalid value for `device`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                device is not None and len(device) > 255):
            raise ValueError("Invalid value for `device`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                device is not None and len(device) < 1):
            raise ValueError("Invalid value for `device`, length must be greater than or equal to `1`")  # noqa: E501

        self._device = device

    @property
    def addresses(self):
        """Gets the addresses of this Interface.  # noqa: E501


        :return: The addresses of this Interface.  # noqa: E501
        :rtype: list[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Interface.


        :param addresses: The addresses of this Interface.  # noqa: E501
        :type: list[Address]
        """

        self._addresses = addresses

    @property
    def speed(self):
        """Gets the speed of this Interface.  # noqa: E501


        :return: The speed of this Interface.  # noqa: E501
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this Interface.


        :param speed: The speed of this Interface.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                speed is not None and speed > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `speed`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                speed is not None and speed < -9223372036854775808):  # noqa: E501
            raise ValueError("Invalid value for `speed`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._speed = speed

    @property
    def mtu(self):
        """Gets the mtu of this Interface.  # noqa: E501


        :return: The mtu of this Interface.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this Interface.


        :param mtu: The mtu of this Interface.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                mtu is not None and mtu > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `mtu`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                mtu is not None and mtu < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `mtu`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._mtu = mtu

    @property
    def use_for_mounts(self):
        """Gets the use_for_mounts of this Interface.  # noqa: E501


        :return: The use_for_mounts of this Interface.  # noqa: E501
        :rtype: bool
        """
        return self._use_for_mounts

    @use_for_mounts.setter
    def use_for_mounts(self, use_for_mounts):
        """Sets the use_for_mounts of this Interface.


        :param use_for_mounts: The use_for_mounts of this Interface.  # noqa: E501
        :type: bool
        """

        self._use_for_mounts = use_for_mounts

    @property
    def priority(self):
        """Gets the priority of this Interface.  # noqa: E501


        :return: The priority of this Interface.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Interface.


        :param priority: The priority of this Interface.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                priority is not None and priority > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                priority is not None and priority < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._priority = priority

    @property
    def port(self):
        """Gets the port of this Interface.  # noqa: E501


        :return: The port of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Interface.


        :param port: The port of this Interface.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                port is not None and len(port) > 255):
            raise ValueError("Invalid value for `port`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                port is not None and len(port) < 1):
            raise ValueError("Invalid value for `port`, length must be greater than or equal to `1`")  # noqa: E501

        self._port = port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Interface):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Interface):
            return True

        return self.to_dict() != other.to_dict()
