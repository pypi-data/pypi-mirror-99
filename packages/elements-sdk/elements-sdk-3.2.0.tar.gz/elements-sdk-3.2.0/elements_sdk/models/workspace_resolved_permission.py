# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class WorkspaceResolvedPermission(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'read_only': 'bool',
        'workspace': 'int',
        'user': 'int',
        'group': 'int'
    }

    attribute_map = {
        'id': 'id',
        'read_only': 'read_only',
        'workspace': 'workspace',
        'user': 'user',
        'group': 'group'
    }

    def __init__(self, id=None, read_only=None, workspace=None, user=None, group=None, local_vars_configuration=None):  # noqa: E501
        """WorkspaceResolvedPermission - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._read_only = None
        self._workspace = None
        self._user = None
        self._group = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if read_only is not None:
            self.read_only = read_only
        self.workspace = workspace
        self.user = user
        self.group = group

    @property
    def id(self):
        """Gets the id of this WorkspaceResolvedPermission.  # noqa: E501


        :return: The id of this WorkspaceResolvedPermission.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkspaceResolvedPermission.


        :param id: The id of this WorkspaceResolvedPermission.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def read_only(self):
        """Gets the read_only of this WorkspaceResolvedPermission.  # noqa: E501


        :return: The read_only of this WorkspaceResolvedPermission.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this WorkspaceResolvedPermission.


        :param read_only: The read_only of this WorkspaceResolvedPermission.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def workspace(self):
        """Gets the workspace of this WorkspaceResolvedPermission.  # noqa: E501


        :return: The workspace of this WorkspaceResolvedPermission.  # noqa: E501
        :rtype: int
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this WorkspaceResolvedPermission.


        :param workspace: The workspace of this WorkspaceResolvedPermission.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and workspace is None:  # noqa: E501
            raise ValueError("Invalid value for `workspace`, must not be `None`")  # noqa: E501

        self._workspace = workspace

    @property
    def user(self):
        """Gets the user of this WorkspaceResolvedPermission.  # noqa: E501


        :return: The user of this WorkspaceResolvedPermission.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this WorkspaceResolvedPermission.


        :param user: The user of this WorkspaceResolvedPermission.  # noqa: E501
        :type: int
        """

        self._user = user

    @property
    def group(self):
        """Gets the group of this WorkspaceResolvedPermission.  # noqa: E501


        :return: The group of this WorkspaceResolvedPermission.  # noqa: E501
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this WorkspaceResolvedPermission.


        :param group: The group of this WorkspaceResolvedPermission.  # noqa: E501
        :type: int
        """

        self._group = group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkspaceResolvedPermission):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkspaceResolvedPermission):
            return True

        return self.to_dict() != other.to_dict()
