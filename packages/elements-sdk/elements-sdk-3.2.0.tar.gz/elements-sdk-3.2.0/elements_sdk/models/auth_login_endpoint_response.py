# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class AuthLoginEndpointResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'reason': 'str',
        'detail': 'str',
        'redirect': 'str',
        'user': 'ElementsUserDetail'
    }

    attribute_map = {
        'reason': 'reason',
        'detail': 'detail',
        'redirect': 'redirect',
        'user': 'user'
    }

    def __init__(self, reason=None, detail=None, redirect=None, user=None, local_vars_configuration=None):  # noqa: E501
        """AuthLoginEndpointResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._reason = None
        self._detail = None
        self._redirect = None
        self._user = None
        self.discriminator = None

        if reason is not None:
            self.reason = reason
        if detail is not None:
            self.detail = detail
        if redirect is not None:
            self.redirect = redirect
        if user is not None:
            self.user = user

    @property
    def reason(self):
        """Gets the reason of this AuthLoginEndpointResponse.  # noqa: E501


        :return: The reason of this AuthLoginEndpointResponse.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this AuthLoginEndpointResponse.


        :param reason: The reason of this AuthLoginEndpointResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                reason is not None and len(reason) < 1):
            raise ValueError("Invalid value for `reason`, length must be greater than or equal to `1`")  # noqa: E501

        self._reason = reason

    @property
    def detail(self):
        """Gets the detail of this AuthLoginEndpointResponse.  # noqa: E501


        :return: The detail of this AuthLoginEndpointResponse.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this AuthLoginEndpointResponse.


        :param detail: The detail of this AuthLoginEndpointResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                detail is not None and len(detail) < 1):
            raise ValueError("Invalid value for `detail`, length must be greater than or equal to `1`")  # noqa: E501

        self._detail = detail

    @property
    def redirect(self):
        """Gets the redirect of this AuthLoginEndpointResponse.  # noqa: E501


        :return: The redirect of this AuthLoginEndpointResponse.  # noqa: E501
        :rtype: str
        """
        return self._redirect

    @redirect.setter
    def redirect(self, redirect):
        """Sets the redirect of this AuthLoginEndpointResponse.


        :param redirect: The redirect of this AuthLoginEndpointResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                redirect is not None and len(redirect) < 1):
            raise ValueError("Invalid value for `redirect`, length must be greater than or equal to `1`")  # noqa: E501

        self._redirect = redirect

    @property
    def user(self):
        """Gets the user of this AuthLoginEndpointResponse.  # noqa: E501


        :return: The user of this AuthLoginEndpointResponse.  # noqa: E501
        :rtype: ElementsUserDetail
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AuthLoginEndpointResponse.


        :param user: The user of this AuthLoginEndpointResponse.  # noqa: E501
        :type: ElementsUserDetail
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthLoginEndpointResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthLoginEndpointResponse):
            return True

        return self.to_dict() != other.to_dict()
