# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class Subclip(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'asset': 'AssetMini',
        'rendered': 'AssetMini',
        'shared': 'bool',
        'date': 'datetime',
        'name': 'str',
        't_in': 'float',
        't_out': 'float',
        'user': 'int',
        'root': 'MediaRootMini'
    }

    attribute_map = {
        'id': 'id',
        'asset': 'asset',
        'rendered': 'rendered',
        'shared': 'shared',
        'date': 'date',
        'name': 'name',
        't_in': 't_in',
        't_out': 't_out',
        'user': 'user',
        'root': 'root'
    }

    def __init__(self, id=None, asset=None, rendered=None, shared=None, date=None, name=None, t_in=None, t_out=None, user=None, root=None, local_vars_configuration=None):  # noqa: E501
        """Subclip - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._asset = None
        self._rendered = None
        self._shared = None
        self._date = None
        self._name = None
        self._t_in = None
        self._t_out = None
        self._user = None
        self._root = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.asset = asset
        if rendered is not None:
            self.rendered = rendered
        if shared is not None:
            self.shared = shared
        if date is not None:
            self.date = date
        if name is not None:
            self.name = name
        self.t_in = t_in
        self.t_out = t_out
        if user is not None:
            self.user = user
        self.root = root

    @property
    def id(self):
        """Gets the id of this Subclip.  # noqa: E501


        :return: The id of this Subclip.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subclip.


        :param id: The id of this Subclip.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def asset(self):
        """Gets the asset of this Subclip.  # noqa: E501


        :return: The asset of this Subclip.  # noqa: E501
        :rtype: AssetMini
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this Subclip.


        :param asset: The asset of this Subclip.  # noqa: E501
        :type: AssetMini
        """
        if self.local_vars_configuration.client_side_validation and asset is None:  # noqa: E501
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def rendered(self):
        """Gets the rendered of this Subclip.  # noqa: E501


        :return: The rendered of this Subclip.  # noqa: E501
        :rtype: AssetMini
        """
        return self._rendered

    @rendered.setter
    def rendered(self, rendered):
        """Sets the rendered of this Subclip.


        :param rendered: The rendered of this Subclip.  # noqa: E501
        :type: AssetMini
        """

        self._rendered = rendered

    @property
    def shared(self):
        """Gets the shared of this Subclip.  # noqa: E501


        :return: The shared of this Subclip.  # noqa: E501
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this Subclip.


        :param shared: The shared of this Subclip.  # noqa: E501
        :type: bool
        """

        self._shared = shared

    @property
    def date(self):
        """Gets the date of this Subclip.  # noqa: E501


        :return: The date of this Subclip.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Subclip.


        :param date: The date of this Subclip.  # noqa: E501
        :type: datetime
        """

        self._date = date

    @property
    def name(self):
        """Gets the name of this Subclip.  # noqa: E501


        :return: The name of this Subclip.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Subclip.


        :param name: The name of this Subclip.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def t_in(self):
        """Gets the t_in of this Subclip.  # noqa: E501


        :return: The t_in of this Subclip.  # noqa: E501
        :rtype: float
        """
        return self._t_in

    @t_in.setter
    def t_in(self, t_in):
        """Sets the t_in of this Subclip.


        :param t_in: The t_in of this Subclip.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and t_in is None:  # noqa: E501
            raise ValueError("Invalid value for `t_in`, must not be `None`")  # noqa: E501

        self._t_in = t_in

    @property
    def t_out(self):
        """Gets the t_out of this Subclip.  # noqa: E501


        :return: The t_out of this Subclip.  # noqa: E501
        :rtype: float
        """
        return self._t_out

    @t_out.setter
    def t_out(self, t_out):
        """Sets the t_out of this Subclip.


        :param t_out: The t_out of this Subclip.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and t_out is None:  # noqa: E501
            raise ValueError("Invalid value for `t_out`, must not be `None`")  # noqa: E501

        self._t_out = t_out

    @property
    def user(self):
        """Gets the user of this Subclip.  # noqa: E501


        :return: The user of this Subclip.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Subclip.


        :param user: The user of this Subclip.  # noqa: E501
        :type: int
        """

        self._user = user

    @property
    def root(self):
        """Gets the root of this Subclip.  # noqa: E501


        :return: The root of this Subclip.  # noqa: E501
        :rtype: MediaRootMini
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this Subclip.


        :param root: The root of this Subclip.  # noqa: E501
        :type: MediaRootMini
        """
        if self.local_vars_configuration.client_side_validation and root is None:  # noqa: E501
            raise ValueError("Invalid value for `root`, must not be `None`")  # noqa: E501

        self._root = root

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Subclip):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Subclip):
            return True

        return self.to_dict() != other.to_dict()
