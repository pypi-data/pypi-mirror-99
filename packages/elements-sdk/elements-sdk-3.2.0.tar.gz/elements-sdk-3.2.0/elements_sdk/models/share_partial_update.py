# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class SharePartialUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sharing_nfs_permissions': 'object',
        'volume': 'Volume',
        'name': 'str',
        'path': 'str',
        'share_smb': 'bool',
        'share_nfs': 'bool',
        'share_afp': 'bool',
        'sharing_read_only': 'bool',
        'sharing_hidden': 'bool',
        'sharing_require_login': 'bool',
        'smb_extra_config': 'str',
        'afp_extra_config': 'str',
        'rw_access_group': 'int',
        'ro_access_group': 'int'
    }

    attribute_map = {
        'sharing_nfs_permissions': 'sharing_nfs_permissions',
        'volume': 'volume',
        'name': 'name',
        'path': 'path',
        'share_smb': 'share_smb',
        'share_nfs': 'share_nfs',
        'share_afp': 'share_afp',
        'sharing_read_only': 'sharing_read_only',
        'sharing_hidden': 'sharing_hidden',
        'sharing_require_login': 'sharing_require_login',
        'smb_extra_config': 'smb_extra_config',
        'afp_extra_config': 'afp_extra_config',
        'rw_access_group': 'rw_access_group',
        'ro_access_group': 'ro_access_group'
    }

    def __init__(self, sharing_nfs_permissions=None, volume=None, name=None, path=None, share_smb=None, share_nfs=None, share_afp=None, sharing_read_only=None, sharing_hidden=None, sharing_require_login=None, smb_extra_config=None, afp_extra_config=None, rw_access_group=None, ro_access_group=None, local_vars_configuration=None):  # noqa: E501
        """SharePartialUpdate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._sharing_nfs_permissions = None
        self._volume = None
        self._name = None
        self._path = None
        self._share_smb = None
        self._share_nfs = None
        self._share_afp = None
        self._sharing_read_only = None
        self._sharing_hidden = None
        self._sharing_require_login = None
        self._smb_extra_config = None
        self._afp_extra_config = None
        self._rw_access_group = None
        self._ro_access_group = None
        self.discriminator = None

        if sharing_nfs_permissions is not None:
            self.sharing_nfs_permissions = sharing_nfs_permissions
        if volume is not None:
            self.volume = volume
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if share_smb is not None:
            self.share_smb = share_smb
        if share_nfs is not None:
            self.share_nfs = share_nfs
        if share_afp is not None:
            self.share_afp = share_afp
        if sharing_read_only is not None:
            self.sharing_read_only = sharing_read_only
        if sharing_hidden is not None:
            self.sharing_hidden = sharing_hidden
        if sharing_require_login is not None:
            self.sharing_require_login = sharing_require_login
        if smb_extra_config is not None:
            self.smb_extra_config = smb_extra_config
        if afp_extra_config is not None:
            self.afp_extra_config = afp_extra_config
        self.rw_access_group = rw_access_group
        self.ro_access_group = ro_access_group

    @property
    def sharing_nfs_permissions(self):
        """Gets the sharing_nfs_permissions of this SharePartialUpdate.  # noqa: E501


        :return: The sharing_nfs_permissions of this SharePartialUpdate.  # noqa: E501
        :rtype: object
        """
        return self._sharing_nfs_permissions

    @sharing_nfs_permissions.setter
    def sharing_nfs_permissions(self, sharing_nfs_permissions):
        """Sets the sharing_nfs_permissions of this SharePartialUpdate.


        :param sharing_nfs_permissions: The sharing_nfs_permissions of this SharePartialUpdate.  # noqa: E501
        :type: object
        """

        self._sharing_nfs_permissions = sharing_nfs_permissions

    @property
    def volume(self):
        """Gets the volume of this SharePartialUpdate.  # noqa: E501


        :return: The volume of this SharePartialUpdate.  # noqa: E501
        :rtype: Volume
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this SharePartialUpdate.


        :param volume: The volume of this SharePartialUpdate.  # noqa: E501
        :type: Volume
        """

        self._volume = volume

    @property
    def name(self):
        """Gets the name of this SharePartialUpdate.  # noqa: E501


        :return: The name of this SharePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SharePartialUpdate.


        :param name: The name of this SharePartialUpdate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def path(self):
        """Gets the path of this SharePartialUpdate.  # noqa: E501


        :return: The path of this SharePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SharePartialUpdate.


        :param path: The path of this SharePartialUpdate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                path is not None and len(path) > 255):
            raise ValueError("Invalid value for `path`, length must be less than or equal to `255`")  # noqa: E501

        self._path = path

    @property
    def share_smb(self):
        """Gets the share_smb of this SharePartialUpdate.  # noqa: E501


        :return: The share_smb of this SharePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._share_smb

    @share_smb.setter
    def share_smb(self, share_smb):
        """Sets the share_smb of this SharePartialUpdate.


        :param share_smb: The share_smb of this SharePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._share_smb = share_smb

    @property
    def share_nfs(self):
        """Gets the share_nfs of this SharePartialUpdate.  # noqa: E501


        :return: The share_nfs of this SharePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._share_nfs

    @share_nfs.setter
    def share_nfs(self, share_nfs):
        """Sets the share_nfs of this SharePartialUpdate.


        :param share_nfs: The share_nfs of this SharePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._share_nfs = share_nfs

    @property
    def share_afp(self):
        """Gets the share_afp of this SharePartialUpdate.  # noqa: E501


        :return: The share_afp of this SharePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._share_afp

    @share_afp.setter
    def share_afp(self, share_afp):
        """Sets the share_afp of this SharePartialUpdate.


        :param share_afp: The share_afp of this SharePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._share_afp = share_afp

    @property
    def sharing_read_only(self):
        """Gets the sharing_read_only of this SharePartialUpdate.  # noqa: E501


        :return: The sharing_read_only of this SharePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._sharing_read_only

    @sharing_read_only.setter
    def sharing_read_only(self, sharing_read_only):
        """Sets the sharing_read_only of this SharePartialUpdate.


        :param sharing_read_only: The sharing_read_only of this SharePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._sharing_read_only = sharing_read_only

    @property
    def sharing_hidden(self):
        """Gets the sharing_hidden of this SharePartialUpdate.  # noqa: E501


        :return: The sharing_hidden of this SharePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._sharing_hidden

    @sharing_hidden.setter
    def sharing_hidden(self, sharing_hidden):
        """Sets the sharing_hidden of this SharePartialUpdate.


        :param sharing_hidden: The sharing_hidden of this SharePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._sharing_hidden = sharing_hidden

    @property
    def sharing_require_login(self):
        """Gets the sharing_require_login of this SharePartialUpdate.  # noqa: E501


        :return: The sharing_require_login of this SharePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._sharing_require_login

    @sharing_require_login.setter
    def sharing_require_login(self, sharing_require_login):
        """Sets the sharing_require_login of this SharePartialUpdate.


        :param sharing_require_login: The sharing_require_login of this SharePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._sharing_require_login = sharing_require_login

    @property
    def smb_extra_config(self):
        """Gets the smb_extra_config of this SharePartialUpdate.  # noqa: E501


        :return: The smb_extra_config of this SharePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._smb_extra_config

    @smb_extra_config.setter
    def smb_extra_config(self, smb_extra_config):
        """Sets the smb_extra_config of this SharePartialUpdate.


        :param smb_extra_config: The smb_extra_config of this SharePartialUpdate.  # noqa: E501
        :type: str
        """

        self._smb_extra_config = smb_extra_config

    @property
    def afp_extra_config(self):
        """Gets the afp_extra_config of this SharePartialUpdate.  # noqa: E501


        :return: The afp_extra_config of this SharePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._afp_extra_config

    @afp_extra_config.setter
    def afp_extra_config(self, afp_extra_config):
        """Sets the afp_extra_config of this SharePartialUpdate.


        :param afp_extra_config: The afp_extra_config of this SharePartialUpdate.  # noqa: E501
        :type: str
        """

        self._afp_extra_config = afp_extra_config

    @property
    def rw_access_group(self):
        """Gets the rw_access_group of this SharePartialUpdate.  # noqa: E501


        :return: The rw_access_group of this SharePartialUpdate.  # noqa: E501
        :rtype: int
        """
        return self._rw_access_group

    @rw_access_group.setter
    def rw_access_group(self, rw_access_group):
        """Sets the rw_access_group of this SharePartialUpdate.


        :param rw_access_group: The rw_access_group of this SharePartialUpdate.  # noqa: E501
        :type: int
        """

        self._rw_access_group = rw_access_group

    @property
    def ro_access_group(self):
        """Gets the ro_access_group of this SharePartialUpdate.  # noqa: E501


        :return: The ro_access_group of this SharePartialUpdate.  # noqa: E501
        :rtype: int
        """
        return self._ro_access_group

    @ro_access_group.setter
    def ro_access_group(self, ro_access_group):
        """Sets the ro_access_group of this SharePartialUpdate.


        :param ro_access_group: The ro_access_group of this SharePartialUpdate.  # noqa: E501
        :type: int
        """

        self._ro_access_group = ro_access_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharePartialUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharePartialUpdate):
            return True

        return self.to_dict() != other.to_dict()
