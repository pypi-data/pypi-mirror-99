# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class Tape(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'root_entry': 'int',
        'name': 'str',
        'uuid': 'str',
        'generation': 'int',
        'custom_a': 'str',
        'custom_b': 'str',
        'custom_c': 'str',
        'custom_d': 'str',
        'free_space': 'int',
        'load_counter': 'int',
        'error_counter': 'int',
        'error_reason': 'str',
        'active': 'bool',
        'lto': 'str',
        'group': 'int'
    }

    attribute_map = {
        'id': 'id',
        'root_entry': 'root_entry',
        'name': 'name',
        'uuid': 'uuid',
        'generation': 'generation',
        'custom_a': 'custom_a',
        'custom_b': 'custom_b',
        'custom_c': 'custom_c',
        'custom_d': 'custom_d',
        'free_space': 'free_space',
        'load_counter': 'load_counter',
        'error_counter': 'error_counter',
        'error_reason': 'error_reason',
        'active': 'active',
        'lto': 'lto',
        'group': 'group'
    }

    def __init__(self, id=None, root_entry=None, name=None, uuid=None, generation=None, custom_a=None, custom_b=None, custom_c=None, custom_d=None, free_space=None, load_counter=None, error_counter=None, error_reason=None, active=None, lto=None, group=None, local_vars_configuration=None):  # noqa: E501
        """Tape - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._root_entry = None
        self._name = None
        self._uuid = None
        self._generation = None
        self._custom_a = None
        self._custom_b = None
        self._custom_c = None
        self._custom_d = None
        self._free_space = None
        self._load_counter = None
        self._error_counter = None
        self._error_reason = None
        self._active = None
        self._lto = None
        self._group = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if root_entry is not None:
            self.root_entry = root_entry
        self.name = name
        if uuid is not None:
            self.uuid = uuid
        if generation is not None:
            self.generation = generation
        if custom_a is not None:
            self.custom_a = custom_a
        if custom_b is not None:
            self.custom_b = custom_b
        if custom_c is not None:
            self.custom_c = custom_c
        if custom_d is not None:
            self.custom_d = custom_d
        self.free_space = free_space
        if load_counter is not None:
            self.load_counter = load_counter
        if error_counter is not None:
            self.error_counter = error_counter
        self.error_reason = error_reason
        if active is not None:
            self.active = active
        self.lto = lto
        self.group = group

    @property
    def id(self):
        """Gets the id of this Tape.  # noqa: E501


        :return: The id of this Tape.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tape.


        :param id: The id of this Tape.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def root_entry(self):
        """Gets the root_entry of this Tape.  # noqa: E501


        :return: The root_entry of this Tape.  # noqa: E501
        :rtype: int
        """
        return self._root_entry

    @root_entry.setter
    def root_entry(self, root_entry):
        """Sets the root_entry of this Tape.


        :param root_entry: The root_entry of this Tape.  # noqa: E501
        :type: int
        """

        self._root_entry = root_entry

    @property
    def name(self):
        """Gets the name of this Tape.  # noqa: E501


        :return: The name of this Tape.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tape.


        :param name: The name of this Tape.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def uuid(self):
        """Gets the uuid of this Tape.  # noqa: E501


        :return: The uuid of this Tape.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Tape.


        :param uuid: The uuid of this Tape.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                uuid is not None and len(uuid) > 255):
            raise ValueError("Invalid value for `uuid`, length must be less than or equal to `255`")  # noqa: E501

        self._uuid = uuid

    @property
    def generation(self):
        """Gets the generation of this Tape.  # noqa: E501


        :return: The generation of this Tape.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this Tape.


        :param generation: The generation of this Tape.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                generation is not None and generation > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `generation`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                generation is not None and generation < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `generation`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._generation = generation

    @property
    def custom_a(self):
        """Gets the custom_a of this Tape.  # noqa: E501


        :return: The custom_a of this Tape.  # noqa: E501
        :rtype: str
        """
        return self._custom_a

    @custom_a.setter
    def custom_a(self, custom_a):
        """Sets the custom_a of this Tape.


        :param custom_a: The custom_a of this Tape.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                custom_a is not None and len(custom_a) > 255):
            raise ValueError("Invalid value for `custom_a`, length must be less than or equal to `255`")  # noqa: E501

        self._custom_a = custom_a

    @property
    def custom_b(self):
        """Gets the custom_b of this Tape.  # noqa: E501


        :return: The custom_b of this Tape.  # noqa: E501
        :rtype: str
        """
        return self._custom_b

    @custom_b.setter
    def custom_b(self, custom_b):
        """Sets the custom_b of this Tape.


        :param custom_b: The custom_b of this Tape.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                custom_b is not None and len(custom_b) > 255):
            raise ValueError("Invalid value for `custom_b`, length must be less than or equal to `255`")  # noqa: E501

        self._custom_b = custom_b

    @property
    def custom_c(self):
        """Gets the custom_c of this Tape.  # noqa: E501


        :return: The custom_c of this Tape.  # noqa: E501
        :rtype: str
        """
        return self._custom_c

    @custom_c.setter
    def custom_c(self, custom_c):
        """Sets the custom_c of this Tape.


        :param custom_c: The custom_c of this Tape.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                custom_c is not None and len(custom_c) > 255):
            raise ValueError("Invalid value for `custom_c`, length must be less than or equal to `255`")  # noqa: E501

        self._custom_c = custom_c

    @property
    def custom_d(self):
        """Gets the custom_d of this Tape.  # noqa: E501


        :return: The custom_d of this Tape.  # noqa: E501
        :rtype: str
        """
        return self._custom_d

    @custom_d.setter
    def custom_d(self, custom_d):
        """Sets the custom_d of this Tape.


        :param custom_d: The custom_d of this Tape.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                custom_d is not None and len(custom_d) > 255):
            raise ValueError("Invalid value for `custom_d`, length must be less than or equal to `255`")  # noqa: E501

        self._custom_d = custom_d

    @property
    def free_space(self):
        """Gets the free_space of this Tape.  # noqa: E501


        :return: The free_space of this Tape.  # noqa: E501
        :rtype: int
        """
        return self._free_space

    @free_space.setter
    def free_space(self, free_space):
        """Sets the free_space of this Tape.


        :param free_space: The free_space of this Tape.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                free_space is not None and free_space > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `free_space`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                free_space is not None and free_space < -9223372036854775808):  # noqa: E501
            raise ValueError("Invalid value for `free_space`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._free_space = free_space

    @property
    def load_counter(self):
        """Gets the load_counter of this Tape.  # noqa: E501


        :return: The load_counter of this Tape.  # noqa: E501
        :rtype: int
        """
        return self._load_counter

    @load_counter.setter
    def load_counter(self, load_counter):
        """Sets the load_counter of this Tape.


        :param load_counter: The load_counter of this Tape.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                load_counter is not None and load_counter > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `load_counter`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                load_counter is not None and load_counter < -9223372036854775808):  # noqa: E501
            raise ValueError("Invalid value for `load_counter`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._load_counter = load_counter

    @property
    def error_counter(self):
        """Gets the error_counter of this Tape.  # noqa: E501


        :return: The error_counter of this Tape.  # noqa: E501
        :rtype: int
        """
        return self._error_counter

    @error_counter.setter
    def error_counter(self, error_counter):
        """Sets the error_counter of this Tape.


        :param error_counter: The error_counter of this Tape.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                error_counter is not None and error_counter > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `error_counter`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                error_counter is not None and error_counter < -9223372036854775808):  # noqa: E501
            raise ValueError("Invalid value for `error_counter`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._error_counter = error_counter

    @property
    def error_reason(self):
        """Gets the error_reason of this Tape.  # noqa: E501


        :return: The error_reason of this Tape.  # noqa: E501
        :rtype: str
        """
        return self._error_reason

    @error_reason.setter
    def error_reason(self, error_reason):
        """Sets the error_reason of this Tape.


        :param error_reason: The error_reason of this Tape.  # noqa: E501
        :type: str
        """

        self._error_reason = error_reason

    @property
    def active(self):
        """Gets the active of this Tape.  # noqa: E501


        :return: The active of this Tape.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Tape.


        :param active: The active of this Tape.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def lto(self):
        """Gets the lto of this Tape.  # noqa: E501


        :return: The lto of this Tape.  # noqa: E501
        :rtype: str
        """
        return self._lto

    @lto.setter
    def lto(self, lto):
        """Sets the lto of this Tape.


        :param lto: The lto of this Tape.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"5", "6", "7"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and lto not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `lto` ({0}), must be one of {1}"  # noqa: E501
                .format(lto, allowed_values)
            )

        self._lto = lto

    @property
    def group(self):
        """Gets the group of this Tape.  # noqa: E501


        :return: The group of this Tape.  # noqa: E501
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Tape.


        :param group: The group of this Tape.  # noqa: E501
        :type: int
        """

        self._group = group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tape):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Tape):
            return True

        return self.to_dict() != other.to_dict()
