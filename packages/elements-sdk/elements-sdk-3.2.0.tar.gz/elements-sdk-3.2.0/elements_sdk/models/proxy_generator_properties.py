# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class ProxyGeneratorProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'supports_video_bitrate': 'bool',
        'supports_video_crf': 'bool',
        'supports_video_vbr': 'bool',
        'supports_audio_bitrate': 'bool',
        'supports_lut': 'bool',
        'supports_resolution': 'bool',
        'supports_watermark': 'bool',
        'supports_timecode_burn_in': 'bool',
        'supports_audio_channels': 'bool',
        'supports_realtime_read': 'bool',
        'supports_staging_path': 'bool'
    }

    attribute_map = {
        'supports_video_bitrate': 'supports_video_bitrate',
        'supports_video_crf': 'supports_video_crf',
        'supports_video_vbr': 'supports_video_vbr',
        'supports_audio_bitrate': 'supports_audio_bitrate',
        'supports_lut': 'supports_lut',
        'supports_resolution': 'supports_resolution',
        'supports_watermark': 'supports_watermark',
        'supports_timecode_burn_in': 'supports_timecode_burn_in',
        'supports_audio_channels': 'supports_audio_channels',
        'supports_realtime_read': 'supports_realtime_read',
        'supports_staging_path': 'supports_staging_path'
    }

    def __init__(self, supports_video_bitrate=None, supports_video_crf=None, supports_video_vbr=None, supports_audio_bitrate=None, supports_lut=None, supports_resolution=None, supports_watermark=None, supports_timecode_burn_in=None, supports_audio_channels=None, supports_realtime_read=None, supports_staging_path=None, local_vars_configuration=None):  # noqa: E501
        """ProxyGeneratorProperties - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._supports_video_bitrate = None
        self._supports_video_crf = None
        self._supports_video_vbr = None
        self._supports_audio_bitrate = None
        self._supports_lut = None
        self._supports_resolution = None
        self._supports_watermark = None
        self._supports_timecode_burn_in = None
        self._supports_audio_channels = None
        self._supports_realtime_read = None
        self._supports_staging_path = None
        self.discriminator = None

        self.supports_video_bitrate = supports_video_bitrate
        self.supports_video_crf = supports_video_crf
        self.supports_video_vbr = supports_video_vbr
        self.supports_audio_bitrate = supports_audio_bitrate
        self.supports_lut = supports_lut
        self.supports_resolution = supports_resolution
        self.supports_watermark = supports_watermark
        self.supports_timecode_burn_in = supports_timecode_burn_in
        self.supports_audio_channels = supports_audio_channels
        self.supports_realtime_read = supports_realtime_read
        self.supports_staging_path = supports_staging_path

    @property
    def supports_video_bitrate(self):
        """Gets the supports_video_bitrate of this ProxyGeneratorProperties.  # noqa: E501


        :return: The supports_video_bitrate of this ProxyGeneratorProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_video_bitrate

    @supports_video_bitrate.setter
    def supports_video_bitrate(self, supports_video_bitrate):
        """Sets the supports_video_bitrate of this ProxyGeneratorProperties.


        :param supports_video_bitrate: The supports_video_bitrate of this ProxyGeneratorProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_video_bitrate is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_video_bitrate`, must not be `None`")  # noqa: E501

        self._supports_video_bitrate = supports_video_bitrate

    @property
    def supports_video_crf(self):
        """Gets the supports_video_crf of this ProxyGeneratorProperties.  # noqa: E501


        :return: The supports_video_crf of this ProxyGeneratorProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_video_crf

    @supports_video_crf.setter
    def supports_video_crf(self, supports_video_crf):
        """Sets the supports_video_crf of this ProxyGeneratorProperties.


        :param supports_video_crf: The supports_video_crf of this ProxyGeneratorProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_video_crf is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_video_crf`, must not be `None`")  # noqa: E501

        self._supports_video_crf = supports_video_crf

    @property
    def supports_video_vbr(self):
        """Gets the supports_video_vbr of this ProxyGeneratorProperties.  # noqa: E501


        :return: The supports_video_vbr of this ProxyGeneratorProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_video_vbr

    @supports_video_vbr.setter
    def supports_video_vbr(self, supports_video_vbr):
        """Sets the supports_video_vbr of this ProxyGeneratorProperties.


        :param supports_video_vbr: The supports_video_vbr of this ProxyGeneratorProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_video_vbr is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_video_vbr`, must not be `None`")  # noqa: E501

        self._supports_video_vbr = supports_video_vbr

    @property
    def supports_audio_bitrate(self):
        """Gets the supports_audio_bitrate of this ProxyGeneratorProperties.  # noqa: E501


        :return: The supports_audio_bitrate of this ProxyGeneratorProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_audio_bitrate

    @supports_audio_bitrate.setter
    def supports_audio_bitrate(self, supports_audio_bitrate):
        """Sets the supports_audio_bitrate of this ProxyGeneratorProperties.


        :param supports_audio_bitrate: The supports_audio_bitrate of this ProxyGeneratorProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_audio_bitrate is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_audio_bitrate`, must not be `None`")  # noqa: E501

        self._supports_audio_bitrate = supports_audio_bitrate

    @property
    def supports_lut(self):
        """Gets the supports_lut of this ProxyGeneratorProperties.  # noqa: E501


        :return: The supports_lut of this ProxyGeneratorProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_lut

    @supports_lut.setter
    def supports_lut(self, supports_lut):
        """Sets the supports_lut of this ProxyGeneratorProperties.


        :param supports_lut: The supports_lut of this ProxyGeneratorProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_lut is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_lut`, must not be `None`")  # noqa: E501

        self._supports_lut = supports_lut

    @property
    def supports_resolution(self):
        """Gets the supports_resolution of this ProxyGeneratorProperties.  # noqa: E501


        :return: The supports_resolution of this ProxyGeneratorProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_resolution

    @supports_resolution.setter
    def supports_resolution(self, supports_resolution):
        """Sets the supports_resolution of this ProxyGeneratorProperties.


        :param supports_resolution: The supports_resolution of this ProxyGeneratorProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_resolution is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_resolution`, must not be `None`")  # noqa: E501

        self._supports_resolution = supports_resolution

    @property
    def supports_watermark(self):
        """Gets the supports_watermark of this ProxyGeneratorProperties.  # noqa: E501


        :return: The supports_watermark of this ProxyGeneratorProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_watermark

    @supports_watermark.setter
    def supports_watermark(self, supports_watermark):
        """Sets the supports_watermark of this ProxyGeneratorProperties.


        :param supports_watermark: The supports_watermark of this ProxyGeneratorProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_watermark is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_watermark`, must not be `None`")  # noqa: E501

        self._supports_watermark = supports_watermark

    @property
    def supports_timecode_burn_in(self):
        """Gets the supports_timecode_burn_in of this ProxyGeneratorProperties.  # noqa: E501


        :return: The supports_timecode_burn_in of this ProxyGeneratorProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_timecode_burn_in

    @supports_timecode_burn_in.setter
    def supports_timecode_burn_in(self, supports_timecode_burn_in):
        """Sets the supports_timecode_burn_in of this ProxyGeneratorProperties.


        :param supports_timecode_burn_in: The supports_timecode_burn_in of this ProxyGeneratorProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_timecode_burn_in is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_timecode_burn_in`, must not be `None`")  # noqa: E501

        self._supports_timecode_burn_in = supports_timecode_burn_in

    @property
    def supports_audio_channels(self):
        """Gets the supports_audio_channels of this ProxyGeneratorProperties.  # noqa: E501


        :return: The supports_audio_channels of this ProxyGeneratorProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_audio_channels

    @supports_audio_channels.setter
    def supports_audio_channels(self, supports_audio_channels):
        """Sets the supports_audio_channels of this ProxyGeneratorProperties.


        :param supports_audio_channels: The supports_audio_channels of this ProxyGeneratorProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_audio_channels is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_audio_channels`, must not be `None`")  # noqa: E501

        self._supports_audio_channels = supports_audio_channels

    @property
    def supports_realtime_read(self):
        """Gets the supports_realtime_read of this ProxyGeneratorProperties.  # noqa: E501


        :return: The supports_realtime_read of this ProxyGeneratorProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_realtime_read

    @supports_realtime_read.setter
    def supports_realtime_read(self, supports_realtime_read):
        """Sets the supports_realtime_read of this ProxyGeneratorProperties.


        :param supports_realtime_read: The supports_realtime_read of this ProxyGeneratorProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_realtime_read is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_realtime_read`, must not be `None`")  # noqa: E501

        self._supports_realtime_read = supports_realtime_read

    @property
    def supports_staging_path(self):
        """Gets the supports_staging_path of this ProxyGeneratorProperties.  # noqa: E501


        :return: The supports_staging_path of this ProxyGeneratorProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_staging_path

    @supports_staging_path.setter
    def supports_staging_path(self, supports_staging_path):
        """Sets the supports_staging_path of this ProxyGeneratorProperties.


        :param supports_staging_path: The supports_staging_path of this ProxyGeneratorProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_staging_path is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_staging_path`, must not be `None`")  # noqa: E501

        self._supports_staging_path = supports_staging_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyGeneratorProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProxyGeneratorProperties):
            return True

        return self.to_dict() != other.to_dict()
