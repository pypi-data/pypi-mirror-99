# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class AssetMini(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'sync_id': 'str',
        'default_proxy': 'Proxy',
        'urls': 'Proxy',
        'type': 'str',
        'display_name': 'str',
        'info': 'str',
        'thumbnail_generated': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'sync_id': 'sync_id',
        'default_proxy': 'default_proxy',
        'urls': 'urls',
        'type': 'type',
        'display_name': 'display_name',
        'info': 'info',
        'thumbnail_generated': 'thumbnail_generated'
    }

    def __init__(self, id=None, sync_id=None, default_proxy=None, urls=None, type=None, display_name=None, info=None, thumbnail_generated=None, local_vars_configuration=None):  # noqa: E501
        """AssetMini - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._sync_id = None
        self._default_proxy = None
        self._urls = None
        self._type = None
        self._display_name = None
        self._info = None
        self._thumbnail_generated = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if sync_id is not None:
            self.sync_id = sync_id
        if default_proxy is not None:
            self.default_proxy = default_proxy
        if urls is not None:
            self.urls = urls
        if type is not None:
            self.type = type
        if display_name is not None:
            self.display_name = display_name
        if info is not None:
            self.info = info
        if thumbnail_generated is not None:
            self.thumbnail_generated = thumbnail_generated

    @property
    def id(self):
        """Gets the id of this AssetMini.  # noqa: E501


        :return: The id of this AssetMini.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssetMini.


        :param id: The id of this AssetMini.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def sync_id(self):
        """Gets the sync_id of this AssetMini.  # noqa: E501


        :return: The sync_id of this AssetMini.  # noqa: E501
        :rtype: str
        """
        return self._sync_id

    @sync_id.setter
    def sync_id(self, sync_id):
        """Sets the sync_id of this AssetMini.


        :param sync_id: The sync_id of this AssetMini.  # noqa: E501
        :type: str
        """

        self._sync_id = sync_id

    @property
    def default_proxy(self):
        """Gets the default_proxy of this AssetMini.  # noqa: E501


        :return: The default_proxy of this AssetMini.  # noqa: E501
        :rtype: Proxy
        """
        return self._default_proxy

    @default_proxy.setter
    def default_proxy(self, default_proxy):
        """Sets the default_proxy of this AssetMini.


        :param default_proxy: The default_proxy of this AssetMini.  # noqa: E501
        :type: Proxy
        """

        self._default_proxy = default_proxy

    @property
    def urls(self):
        """Gets the urls of this AssetMini.  # noqa: E501


        :return: The urls of this AssetMini.  # noqa: E501
        :rtype: Proxy
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this AssetMini.


        :param urls: The urls of this AssetMini.  # noqa: E501
        :type: Proxy
        """

        self._urls = urls

    @property
    def type(self):
        """Gets the type of this AssetMini.  # noqa: E501


        :return: The type of this AssetMini.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AssetMini.


        :param type: The type of this AssetMini.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                type is not None and len(type) < 1):
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")  # noqa: E501

        self._type = type

    @property
    def display_name(self):
        """Gets the display_name of this AssetMini.  # noqa: E501


        :return: The display_name of this AssetMini.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AssetMini.


        :param display_name: The display_name of this AssetMini.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                display_name is not None and len(display_name) < 1):
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._display_name = display_name

    @property
    def info(self):
        """Gets the info of this AssetMini.  # noqa: E501


        :return: The info of this AssetMini.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this AssetMini.


        :param info: The info of this AssetMini.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def thumbnail_generated(self):
        """Gets the thumbnail_generated of this AssetMini.  # noqa: E501


        :return: The thumbnail_generated of this AssetMini.  # noqa: E501
        :rtype: bool
        """
        return self._thumbnail_generated

    @thumbnail_generated.setter
    def thumbnail_generated(self, thumbnail_generated):
        """Sets the thumbnail_generated of this AssetMini.


        :param thumbnail_generated: The thumbnail_generated of this AssetMini.  # noqa: E501
        :type: bool
        """

        self._thumbnail_generated = thumbnail_generated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetMini):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetMini):
            return True

        return self.to_dict() != other.to_dict()
