# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class Marker(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'veritone_metadata_parser': 'str',
        'title': 'str',
        'text': 'str',
        't_in': 'float',
        't_out': 'float',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'user': 'int',
        'asset': 'int',
        'comment': 'int',
        'veritone_metadata': 'int'
    }

    attribute_map = {
        'id': 'id',
        'veritone_metadata_parser': 'veritone_metadata_parser',
        'title': 'title',
        'text': 'text',
        't_in': 't_in',
        't_out': 't_out',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'user': 'user',
        'asset': 'asset',
        'comment': 'comment',
        'veritone_metadata': 'veritone_metadata'
    }

    def __init__(self, id=None, veritone_metadata_parser=None, title=None, text=None, t_in=None, t_out=None, created_at=None, modified_at=None, user=None, asset=None, comment=None, veritone_metadata=None, local_vars_configuration=None):  # noqa: E501
        """Marker - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._veritone_metadata_parser = None
        self._title = None
        self._text = None
        self._t_in = None
        self._t_out = None
        self._created_at = None
        self._modified_at = None
        self._user = None
        self._asset = None
        self._comment = None
        self._veritone_metadata = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if veritone_metadata_parser is not None:
            self.veritone_metadata_parser = veritone_metadata_parser
        if title is not None:
            self.title = title
        if text is not None:
            self.text = text
        self.t_in = t_in
        self.t_out = t_out
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if user is not None:
            self.user = user
        self.asset = asset
        if comment is not None:
            self.comment = comment
        if veritone_metadata is not None:
            self.veritone_metadata = veritone_metadata

    @property
    def id(self):
        """Gets the id of this Marker.  # noqa: E501


        :return: The id of this Marker.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Marker.


        :param id: The id of this Marker.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def veritone_metadata_parser(self):
        """Gets the veritone_metadata_parser of this Marker.  # noqa: E501


        :return: The veritone_metadata_parser of this Marker.  # noqa: E501
        :rtype: str
        """
        return self._veritone_metadata_parser

    @veritone_metadata_parser.setter
    def veritone_metadata_parser(self, veritone_metadata_parser):
        """Sets the veritone_metadata_parser of this Marker.


        :param veritone_metadata_parser: The veritone_metadata_parser of this Marker.  # noqa: E501
        :type: str
        """

        self._veritone_metadata_parser = veritone_metadata_parser

    @property
    def title(self):
        """Gets the title of this Marker.  # noqa: E501


        :return: The title of this Marker.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Marker.


        :param title: The title of this Marker.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def text(self):
        """Gets the text of this Marker.  # noqa: E501


        :return: The text of this Marker.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Marker.


        :param text: The text of this Marker.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def t_in(self):
        """Gets the t_in of this Marker.  # noqa: E501


        :return: The t_in of this Marker.  # noqa: E501
        :rtype: float
        """
        return self._t_in

    @t_in.setter
    def t_in(self, t_in):
        """Sets the t_in of this Marker.


        :param t_in: The t_in of this Marker.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and t_in is None:  # noqa: E501
            raise ValueError("Invalid value for `t_in`, must not be `None`")  # noqa: E501

        self._t_in = t_in

    @property
    def t_out(self):
        """Gets the t_out of this Marker.  # noqa: E501


        :return: The t_out of this Marker.  # noqa: E501
        :rtype: float
        """
        return self._t_out

    @t_out.setter
    def t_out(self, t_out):
        """Sets the t_out of this Marker.


        :param t_out: The t_out of this Marker.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and t_out is None:  # noqa: E501
            raise ValueError("Invalid value for `t_out`, must not be `None`")  # noqa: E501

        self._t_out = t_out

    @property
    def created_at(self):
        """Gets the created_at of this Marker.  # noqa: E501


        :return: The created_at of this Marker.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Marker.


        :param created_at: The created_at of this Marker.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Marker.  # noqa: E501


        :return: The modified_at of this Marker.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Marker.


        :param modified_at: The modified_at of this Marker.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def user(self):
        """Gets the user of this Marker.  # noqa: E501


        :return: The user of this Marker.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Marker.


        :param user: The user of this Marker.  # noqa: E501
        :type: int
        """

        self._user = user

    @property
    def asset(self):
        """Gets the asset of this Marker.  # noqa: E501


        :return: The asset of this Marker.  # noqa: E501
        :rtype: int
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this Marker.


        :param asset: The asset of this Marker.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and asset is None:  # noqa: E501
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def comment(self):
        """Gets the comment of this Marker.  # noqa: E501


        :return: The comment of this Marker.  # noqa: E501
        :rtype: int
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Marker.


        :param comment: The comment of this Marker.  # noqa: E501
        :type: int
        """

        self._comment = comment

    @property
    def veritone_metadata(self):
        """Gets the veritone_metadata of this Marker.  # noqa: E501


        :return: The veritone_metadata of this Marker.  # noqa: E501
        :rtype: int
        """
        return self._veritone_metadata

    @veritone_metadata.setter
    def veritone_metadata(self, veritone_metadata):
        """Sets the veritone_metadata of this Marker.


        :param veritone_metadata: The veritone_metadata of this Marker.  # noqa: E501
        :type: int
        """

        self._veritone_metadata = veritone_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Marker):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Marker):
            return True

        return self.to_dict() != other.to_dict()
