# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class FSProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'supports_directory_quotas': 'bool',
        'supports_soft_quotas': 'bool',
        'supports_user_quotas': 'bool',
        'supports_group_quotas': 'bool',
        'supports_xattrs': 'bool',
        'supports_snapshots': 'bool',
        'creating_directory_quota_destroys_content': 'bool',
        'removing_directory_quota_destroys_content': 'bool'
    }

    attribute_map = {
        'supports_directory_quotas': 'supports_directory_quotas',
        'supports_soft_quotas': 'supports_soft_quotas',
        'supports_user_quotas': 'supports_user_quotas',
        'supports_group_quotas': 'supports_group_quotas',
        'supports_xattrs': 'supports_xattrs',
        'supports_snapshots': 'supports_snapshots',
        'creating_directory_quota_destroys_content': 'creating_directory_quota_destroys_content',
        'removing_directory_quota_destroys_content': 'removing_directory_quota_destroys_content'
    }

    def __init__(self, supports_directory_quotas=None, supports_soft_quotas=None, supports_user_quotas=None, supports_group_quotas=None, supports_xattrs=None, supports_snapshots=None, creating_directory_quota_destroys_content=None, removing_directory_quota_destroys_content=None, local_vars_configuration=None):  # noqa: E501
        """FSProperties - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._supports_directory_quotas = None
        self._supports_soft_quotas = None
        self._supports_user_quotas = None
        self._supports_group_quotas = None
        self._supports_xattrs = None
        self._supports_snapshots = None
        self._creating_directory_quota_destroys_content = None
        self._removing_directory_quota_destroys_content = None
        self.discriminator = None

        self.supports_directory_quotas = supports_directory_quotas
        self.supports_soft_quotas = supports_soft_quotas
        self.supports_user_quotas = supports_user_quotas
        self.supports_group_quotas = supports_group_quotas
        self.supports_xattrs = supports_xattrs
        self.supports_snapshots = supports_snapshots
        self.creating_directory_quota_destroys_content = creating_directory_quota_destroys_content
        self.removing_directory_quota_destroys_content = removing_directory_quota_destroys_content

    @property
    def supports_directory_quotas(self):
        """Gets the supports_directory_quotas of this FSProperties.  # noqa: E501


        :return: The supports_directory_quotas of this FSProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_directory_quotas

    @supports_directory_quotas.setter
    def supports_directory_quotas(self, supports_directory_quotas):
        """Sets the supports_directory_quotas of this FSProperties.


        :param supports_directory_quotas: The supports_directory_quotas of this FSProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_directory_quotas is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_directory_quotas`, must not be `None`")  # noqa: E501

        self._supports_directory_quotas = supports_directory_quotas

    @property
    def supports_soft_quotas(self):
        """Gets the supports_soft_quotas of this FSProperties.  # noqa: E501


        :return: The supports_soft_quotas of this FSProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_soft_quotas

    @supports_soft_quotas.setter
    def supports_soft_quotas(self, supports_soft_quotas):
        """Sets the supports_soft_quotas of this FSProperties.


        :param supports_soft_quotas: The supports_soft_quotas of this FSProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_soft_quotas is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_soft_quotas`, must not be `None`")  # noqa: E501

        self._supports_soft_quotas = supports_soft_quotas

    @property
    def supports_user_quotas(self):
        """Gets the supports_user_quotas of this FSProperties.  # noqa: E501


        :return: The supports_user_quotas of this FSProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_user_quotas

    @supports_user_quotas.setter
    def supports_user_quotas(self, supports_user_quotas):
        """Sets the supports_user_quotas of this FSProperties.


        :param supports_user_quotas: The supports_user_quotas of this FSProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_user_quotas is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_user_quotas`, must not be `None`")  # noqa: E501

        self._supports_user_quotas = supports_user_quotas

    @property
    def supports_group_quotas(self):
        """Gets the supports_group_quotas of this FSProperties.  # noqa: E501


        :return: The supports_group_quotas of this FSProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_group_quotas

    @supports_group_quotas.setter
    def supports_group_quotas(self, supports_group_quotas):
        """Sets the supports_group_quotas of this FSProperties.


        :param supports_group_quotas: The supports_group_quotas of this FSProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_group_quotas is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_group_quotas`, must not be `None`")  # noqa: E501

        self._supports_group_quotas = supports_group_quotas

    @property
    def supports_xattrs(self):
        """Gets the supports_xattrs of this FSProperties.  # noqa: E501


        :return: The supports_xattrs of this FSProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_xattrs

    @supports_xattrs.setter
    def supports_xattrs(self, supports_xattrs):
        """Sets the supports_xattrs of this FSProperties.


        :param supports_xattrs: The supports_xattrs of this FSProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_xattrs is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_xattrs`, must not be `None`")  # noqa: E501

        self._supports_xattrs = supports_xattrs

    @property
    def supports_snapshots(self):
        """Gets the supports_snapshots of this FSProperties.  # noqa: E501


        :return: The supports_snapshots of this FSProperties.  # noqa: E501
        :rtype: bool
        """
        return self._supports_snapshots

    @supports_snapshots.setter
    def supports_snapshots(self, supports_snapshots):
        """Sets the supports_snapshots of this FSProperties.


        :param supports_snapshots: The supports_snapshots of this FSProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and supports_snapshots is None:  # noqa: E501
            raise ValueError("Invalid value for `supports_snapshots`, must not be `None`")  # noqa: E501

        self._supports_snapshots = supports_snapshots

    @property
    def creating_directory_quota_destroys_content(self):
        """Gets the creating_directory_quota_destroys_content of this FSProperties.  # noqa: E501


        :return: The creating_directory_quota_destroys_content of this FSProperties.  # noqa: E501
        :rtype: bool
        """
        return self._creating_directory_quota_destroys_content

    @creating_directory_quota_destroys_content.setter
    def creating_directory_quota_destroys_content(self, creating_directory_quota_destroys_content):
        """Sets the creating_directory_quota_destroys_content of this FSProperties.


        :param creating_directory_quota_destroys_content: The creating_directory_quota_destroys_content of this FSProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and creating_directory_quota_destroys_content is None:  # noqa: E501
            raise ValueError("Invalid value for `creating_directory_quota_destroys_content`, must not be `None`")  # noqa: E501

        self._creating_directory_quota_destroys_content = creating_directory_quota_destroys_content

    @property
    def removing_directory_quota_destroys_content(self):
        """Gets the removing_directory_quota_destroys_content of this FSProperties.  # noqa: E501


        :return: The removing_directory_quota_destroys_content of this FSProperties.  # noqa: E501
        :rtype: bool
        """
        return self._removing_directory_quota_destroys_content

    @removing_directory_quota_destroys_content.setter
    def removing_directory_quota_destroys_content(self, removing_directory_quota_destroys_content):
        """Sets the removing_directory_quota_destroys_content of this FSProperties.


        :param removing_directory_quota_destroys_content: The removing_directory_quota_destroys_content of this FSProperties.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and removing_directory_quota_destroys_content is None:  # noqa: E501
            raise ValueError("Invalid value for `removing_directory_quota_destroys_content`, must not be `None`")  # noqa: E501

        self._removing_directory_quota_destroys_content = removing_directory_quota_destroys_content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FSProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FSProperties):
            return True

        return self.to_dict() != other.to_dict()
