# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class Event(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'group': 'str',
        'icon_class': 'str',
        'license_component': 'str',
        'arg_types': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'group': 'group',
        'icon_class': 'icon_class',
        'license_component': 'license_component',
        'arg_types': 'arg_types'
    }

    def __init__(self, id=None, name=None, group=None, icon_class=None, license_component=None, arg_types=None, local_vars_configuration=None):  # noqa: E501
        """Event - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._group = None
        self._icon_class = None
        self._license_component = None
        self._arg_types = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.group = group
        self.icon_class = icon_class
        self.license_component = license_component
        if arg_types is not None:
            self.arg_types = arg_types

    @property
    def id(self):
        """Gets the id of this Event.  # noqa: E501


        :return: The id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) < 1):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Event.  # noqa: E501


        :return: The name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Event.


        :param name: The name of this Event.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def group(self):
        """Gets the group of this Event.  # noqa: E501


        :return: The group of this Event.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Event.


        :param group: The group of this Event.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and group is None:  # noqa: E501
            raise ValueError("Invalid value for `group`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                group is not None and len(group) < 1):
            raise ValueError("Invalid value for `group`, length must be greater than or equal to `1`")  # noqa: E501

        self._group = group

    @property
    def icon_class(self):
        """Gets the icon_class of this Event.  # noqa: E501


        :return: The icon_class of this Event.  # noqa: E501
        :rtype: str
        """
        return self._icon_class

    @icon_class.setter
    def icon_class(self, icon_class):
        """Sets the icon_class of this Event.


        :param icon_class: The icon_class of this Event.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and icon_class is None:  # noqa: E501
            raise ValueError("Invalid value for `icon_class`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                icon_class is not None and len(icon_class) < 1):
            raise ValueError("Invalid value for `icon_class`, length must be greater than or equal to `1`")  # noqa: E501

        self._icon_class = icon_class

    @property
    def license_component(self):
        """Gets the license_component of this Event.  # noqa: E501


        :return: The license_component of this Event.  # noqa: E501
        :rtype: str
        """
        return self._license_component

    @license_component.setter
    def license_component(self, license_component):
        """Sets the license_component of this Event.


        :param license_component: The license_component of this Event.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and license_component is None:  # noqa: E501
            raise ValueError("Invalid value for `license_component`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                license_component is not None and len(license_component) < 1):
            raise ValueError("Invalid value for `license_component`, length must be greater than or equal to `1`")  # noqa: E501

        self._license_component = license_component

    @property
    def arg_types(self):
        """Gets the arg_types of this Event.  # noqa: E501


        :return: The arg_types of this Event.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._arg_types

    @arg_types.setter
    def arg_types(self, arg_types):
        """Sets the arg_types of this Event.


        :param arg_types: The arg_types of this Event.  # noqa: E501
        :type: dict(str, str)
        """

        self._arg_types = arg_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Event):
            return True

        return self.to_dict() != other.to_dict()
