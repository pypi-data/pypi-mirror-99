# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class MediaFileBundle(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'asset': 'Asset',
        'mainfile': 'MediaFileMini',
        'snm_attributes': 'StornextManagerAttributes',
        'search_highlight': 'str',
        'is_shared': 'bool',
        'name': 'str',
        'location': 'int',
        'shared_via_tokens': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'asset': 'asset',
        'mainfile': 'mainfile',
        'snm_attributes': 'snm_attributes',
        'search_highlight': 'search_highlight',
        'is_shared': 'is_shared',
        'name': 'name',
        'location': 'location',
        'shared_via_tokens': 'shared_via_tokens'
    }

    def __init__(self, id=None, asset=None, mainfile=None, snm_attributes=None, search_highlight=None, is_shared=None, name=None, location=None, shared_via_tokens=None, local_vars_configuration=None):  # noqa: E501
        """MediaFileBundle - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._asset = None
        self._mainfile = None
        self._snm_attributes = None
        self._search_highlight = None
        self._is_shared = None
        self._name = None
        self._location = None
        self._shared_via_tokens = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if asset is not None:
            self.asset = asset
        if mainfile is not None:
            self.mainfile = mainfile
        if snm_attributes is not None:
            self.snm_attributes = snm_attributes
        if search_highlight is not None:
            self.search_highlight = search_highlight
        if is_shared is not None:
            self.is_shared = is_shared
        self.name = name
        self.location = location
        if shared_via_tokens is not None:
            self.shared_via_tokens = shared_via_tokens

    @property
    def id(self):
        """Gets the id of this MediaFileBundle.  # noqa: E501


        :return: The id of this MediaFileBundle.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MediaFileBundle.


        :param id: The id of this MediaFileBundle.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def asset(self):
        """Gets the asset of this MediaFileBundle.  # noqa: E501


        :return: The asset of this MediaFileBundle.  # noqa: E501
        :rtype: Asset
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this MediaFileBundle.


        :param asset: The asset of this MediaFileBundle.  # noqa: E501
        :type: Asset
        """

        self._asset = asset

    @property
    def mainfile(self):
        """Gets the mainfile of this MediaFileBundle.  # noqa: E501


        :return: The mainfile of this MediaFileBundle.  # noqa: E501
        :rtype: MediaFileMini
        """
        return self._mainfile

    @mainfile.setter
    def mainfile(self, mainfile):
        """Sets the mainfile of this MediaFileBundle.


        :param mainfile: The mainfile of this MediaFileBundle.  # noqa: E501
        :type: MediaFileMini
        """

        self._mainfile = mainfile

    @property
    def snm_attributes(self):
        """Gets the snm_attributes of this MediaFileBundle.  # noqa: E501


        :return: The snm_attributes of this MediaFileBundle.  # noqa: E501
        :rtype: StornextManagerAttributes
        """
        return self._snm_attributes

    @snm_attributes.setter
    def snm_attributes(self, snm_attributes):
        """Sets the snm_attributes of this MediaFileBundle.


        :param snm_attributes: The snm_attributes of this MediaFileBundle.  # noqa: E501
        :type: StornextManagerAttributes
        """

        self._snm_attributes = snm_attributes

    @property
    def search_highlight(self):
        """Gets the search_highlight of this MediaFileBundle.  # noqa: E501


        :return: The search_highlight of this MediaFileBundle.  # noqa: E501
        :rtype: str
        """
        return self._search_highlight

    @search_highlight.setter
    def search_highlight(self, search_highlight):
        """Sets the search_highlight of this MediaFileBundle.


        :param search_highlight: The search_highlight of this MediaFileBundle.  # noqa: E501
        :type: str
        """

        self._search_highlight = search_highlight

    @property
    def is_shared(self):
        """Gets the is_shared of this MediaFileBundle.  # noqa: E501


        :return: The is_shared of this MediaFileBundle.  # noqa: E501
        :rtype: bool
        """
        return self._is_shared

    @is_shared.setter
    def is_shared(self, is_shared):
        """Sets the is_shared of this MediaFileBundle.


        :param is_shared: The is_shared of this MediaFileBundle.  # noqa: E501
        :type: bool
        """

        self._is_shared = is_shared

    @property
    def name(self):
        """Gets the name of this MediaFileBundle.  # noqa: E501


        :return: The name of this MediaFileBundle.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MediaFileBundle.


        :param name: The name of this MediaFileBundle.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 1023):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `1023`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def location(self):
        """Gets the location of this MediaFileBundle.  # noqa: E501


        :return: The location of this MediaFileBundle.  # noqa: E501
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MediaFileBundle.


        :param location: The location of this MediaFileBundle.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and location is None:  # noqa: E501
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def shared_via_tokens(self):
        """Gets the shared_via_tokens of this MediaFileBundle.  # noqa: E501


        :return: The shared_via_tokens of this MediaFileBundle.  # noqa: E501
        :rtype: list[int]
        """
        return self._shared_via_tokens

    @shared_via_tokens.setter
    def shared_via_tokens(self, shared_via_tokens):
        """Sets the shared_via_tokens of this MediaFileBundle.


        :param shared_via_tokens: The shared_via_tokens of this MediaFileBundle.  # noqa: E501
        :type: list[int]
        """

        self._shared_via_tokens = shared_via_tokens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MediaFileBundle):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MediaFileBundle):
            return True

        return self.to_dict() != other.to_dict()
