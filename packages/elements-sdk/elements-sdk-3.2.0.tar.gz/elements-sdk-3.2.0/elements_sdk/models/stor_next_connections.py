# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class StorNextConnections(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'list': 'list[StorNextConnection]',
        'normal': 'dict(str, str)',
        'proxy': 'dict(str, str)',
        'gateway': 'dict(str, str)'
    }

    attribute_map = {
        'list': 'list',
        'normal': 'normal',
        'proxy': 'proxy',
        'gateway': 'gateway'
    }

    def __init__(self, list=None, normal=None, proxy=None, gateway=None, local_vars_configuration=None):  # noqa: E501
        """StorNextConnections - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._list = None
        self._normal = None
        self._proxy = None
        self._gateway = None
        self.discriminator = None

        self.list = list
        self.normal = normal
        self.proxy = proxy
        self.gateway = gateway

    @property
    def list(self):
        """Gets the list of this StorNextConnections.  # noqa: E501


        :return: The list of this StorNextConnections.  # noqa: E501
        :rtype: list[StorNextConnection]
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this StorNextConnections.


        :param list: The list of this StorNextConnections.  # noqa: E501
        :type: list[StorNextConnection]
        """
        if self.local_vars_configuration.client_side_validation and list is None:  # noqa: E501
            raise ValueError("Invalid value for `list`, must not be `None`")  # noqa: E501

        self._list = list

    @property
    def normal(self):
        """Gets the normal of this StorNextConnections.  # noqa: E501


        :return: The normal of this StorNextConnections.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._normal

    @normal.setter
    def normal(self, normal):
        """Sets the normal of this StorNextConnections.


        :param normal: The normal of this StorNextConnections.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and normal is None:  # noqa: E501
            raise ValueError("Invalid value for `normal`, must not be `None`")  # noqa: E501

        self._normal = normal

    @property
    def proxy(self):
        """Gets the proxy of this StorNextConnections.  # noqa: E501


        :return: The proxy of this StorNextConnections.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this StorNextConnections.


        :param proxy: The proxy of this StorNextConnections.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and proxy is None:  # noqa: E501
            raise ValueError("Invalid value for `proxy`, must not be `None`")  # noqa: E501

        self._proxy = proxy

    @property
    def gateway(self):
        """Gets the gateway of this StorNextConnections.  # noqa: E501


        :return: The gateway of this StorNextConnections.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this StorNextConnections.


        :param gateway: The gateway of this StorNextConnections.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and gateway is None:  # noqa: E501
            raise ValueError("Invalid value for `gateway`, must not be `None`")  # noqa: E501

        self._gateway = gateway

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorNextConnections):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorNextConnections):
            return True

        return self.to_dict() != other.to_dict()
