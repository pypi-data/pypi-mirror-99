# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class ElementsGroupDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'permissions': 'list[str]',
        'members_preview': 'list[MemberPreview]',
        'effective_permissions': 'list[str]',
        'members': 'list[ElementsUser]',
        'ldap': 'LDAPServer',
        'name': 'str',
        'ldap_dn': 'str',
        'unix_groupname': 'str',
        'gid': 'int',
        'ancillary_path': 'str',
        'ancillary_path_read_only': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'permissions': 'permissions',
        'members_preview': 'members_preview',
        'effective_permissions': 'effective_permissions',
        'members': 'members',
        'ldap': 'ldap',
        'name': 'name',
        'ldap_dn': 'ldap_dn',
        'unix_groupname': 'unix_groupname',
        'gid': 'gid',
        'ancillary_path': 'ancillary_path',
        'ancillary_path_read_only': 'ancillary_path_read_only'
    }

    def __init__(self, id=None, permissions=None, members_preview=None, effective_permissions=None, members=None, ldap=None, name=None, ldap_dn=None, unix_groupname=None, gid=None, ancillary_path=None, ancillary_path_read_only=None, local_vars_configuration=None):  # noqa: E501
        """ElementsGroupDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._permissions = None
        self._members_preview = None
        self._effective_permissions = None
        self._members = None
        self._ldap = None
        self._name = None
        self._ldap_dn = None
        self._unix_groupname = None
        self._gid = None
        self._ancillary_path = None
        self._ancillary_path_read_only = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if permissions is not None:
            self.permissions = permissions
        if members_preview is not None:
            self.members_preview = members_preview
        if effective_permissions is not None:
            self.effective_permissions = effective_permissions
        if members is not None:
            self.members = members
        if ldap is not None:
            self.ldap = ldap
        self.name = name
        self.ldap_dn = ldap_dn
        self.unix_groupname = unix_groupname
        self.gid = gid
        if ancillary_path is not None:
            self.ancillary_path = ancillary_path
        if ancillary_path_read_only is not None:
            self.ancillary_path_read_only = ancillary_path_read_only

    @property
    def id(self):
        """Gets the id of this ElementsGroupDetail.  # noqa: E501


        :return: The id of this ElementsGroupDetail.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ElementsGroupDetail.


        :param id: The id of this ElementsGroupDetail.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def permissions(self):
        """Gets the permissions of this ElementsGroupDetail.  # noqa: E501


        :return: The permissions of this ElementsGroupDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this ElementsGroupDetail.


        :param permissions: The permissions of this ElementsGroupDetail.  # noqa: E501
        :type: list[str]
        """

        self._permissions = permissions

    @property
    def members_preview(self):
        """Gets the members_preview of this ElementsGroupDetail.  # noqa: E501


        :return: The members_preview of this ElementsGroupDetail.  # noqa: E501
        :rtype: list[MemberPreview]
        """
        return self._members_preview

    @members_preview.setter
    def members_preview(self, members_preview):
        """Sets the members_preview of this ElementsGroupDetail.


        :param members_preview: The members_preview of this ElementsGroupDetail.  # noqa: E501
        :type: list[MemberPreview]
        """

        self._members_preview = members_preview

    @property
    def effective_permissions(self):
        """Gets the effective_permissions of this ElementsGroupDetail.  # noqa: E501


        :return: The effective_permissions of this ElementsGroupDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._effective_permissions

    @effective_permissions.setter
    def effective_permissions(self, effective_permissions):
        """Sets the effective_permissions of this ElementsGroupDetail.


        :param effective_permissions: The effective_permissions of this ElementsGroupDetail.  # noqa: E501
        :type: list[str]
        """

        self._effective_permissions = effective_permissions

    @property
    def members(self):
        """Gets the members of this ElementsGroupDetail.  # noqa: E501


        :return: The members of this ElementsGroupDetail.  # noqa: E501
        :rtype: list[ElementsUser]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this ElementsGroupDetail.


        :param members: The members of this ElementsGroupDetail.  # noqa: E501
        :type: list[ElementsUser]
        """

        self._members = members

    @property
    def ldap(self):
        """Gets the ldap of this ElementsGroupDetail.  # noqa: E501


        :return: The ldap of this ElementsGroupDetail.  # noqa: E501
        :rtype: LDAPServer
        """
        return self._ldap

    @ldap.setter
    def ldap(self, ldap):
        """Sets the ldap of this ElementsGroupDetail.


        :param ldap: The ldap of this ElementsGroupDetail.  # noqa: E501
        :type: LDAPServer
        """

        self._ldap = ldap

    @property
    def name(self):
        """Gets the name of this ElementsGroupDetail.  # noqa: E501


        :return: The name of this ElementsGroupDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ElementsGroupDetail.


        :param name: The name of this ElementsGroupDetail.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def ldap_dn(self):
        """Gets the ldap_dn of this ElementsGroupDetail.  # noqa: E501


        :return: The ldap_dn of this ElementsGroupDetail.  # noqa: E501
        :rtype: str
        """
        return self._ldap_dn

    @ldap_dn.setter
    def ldap_dn(self, ldap_dn):
        """Sets the ldap_dn of this ElementsGroupDetail.


        :param ldap_dn: The ldap_dn of this ElementsGroupDetail.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                ldap_dn is not None and len(ldap_dn) > 255):
            raise ValueError("Invalid value for `ldap_dn`, length must be less than or equal to `255`")  # noqa: E501

        self._ldap_dn = ldap_dn

    @property
    def unix_groupname(self):
        """Gets the unix_groupname of this ElementsGroupDetail.  # noqa: E501


        :return: The unix_groupname of this ElementsGroupDetail.  # noqa: E501
        :rtype: str
        """
        return self._unix_groupname

    @unix_groupname.setter
    def unix_groupname(self, unix_groupname):
        """Sets the unix_groupname of this ElementsGroupDetail.


        :param unix_groupname: The unix_groupname of this ElementsGroupDetail.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                unix_groupname is not None and len(unix_groupname) > 255):
            raise ValueError("Invalid value for `unix_groupname`, length must be less than or equal to `255`")  # noqa: E501

        self._unix_groupname = unix_groupname

    @property
    def gid(self):
        """Gets the gid of this ElementsGroupDetail.  # noqa: E501


        :return: The gid of this ElementsGroupDetail.  # noqa: E501
        :rtype: int
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this ElementsGroupDetail.


        :param gid: The gid of this ElementsGroupDetail.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                gid is not None and gid > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `gid`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                gid is not None and gid < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `gid`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._gid = gid

    @property
    def ancillary_path(self):
        """Gets the ancillary_path of this ElementsGroupDetail.  # noqa: E501


        :return: The ancillary_path of this ElementsGroupDetail.  # noqa: E501
        :rtype: str
        """
        return self._ancillary_path

    @ancillary_path.setter
    def ancillary_path(self, ancillary_path):
        """Sets the ancillary_path of this ElementsGroupDetail.


        :param ancillary_path: The ancillary_path of this ElementsGroupDetail.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                ancillary_path is not None and len(ancillary_path) > 255):
            raise ValueError("Invalid value for `ancillary_path`, length must be less than or equal to `255`")  # noqa: E501

        self._ancillary_path = ancillary_path

    @property
    def ancillary_path_read_only(self):
        """Gets the ancillary_path_read_only of this ElementsGroupDetail.  # noqa: E501


        :return: The ancillary_path_read_only of this ElementsGroupDetail.  # noqa: E501
        :rtype: bool
        """
        return self._ancillary_path_read_only

    @ancillary_path_read_only.setter
    def ancillary_path_read_only(self, ancillary_path_read_only):
        """Sets the ancillary_path_read_only of this ElementsGroupDetail.


        :param ancillary_path_read_only: The ancillary_path_read_only of this ElementsGroupDetail.  # noqa: E501
        :type: bool
        """

        self._ancillary_path_read_only = ancillary_path_read_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ElementsGroupDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ElementsGroupDetail):
            return True

        return self.to_dict() != other.to_dict()
