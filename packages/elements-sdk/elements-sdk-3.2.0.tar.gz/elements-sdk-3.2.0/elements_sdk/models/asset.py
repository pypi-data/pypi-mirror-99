# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class Asset(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'urls': 'Proxy',
        'proxies': 'list[Proxy]',
        'default_proxy': 'Proxy',
        'info': 'dict(str, str)',
        'proxy_info': 'dict(str, str)',
        'custom_fields': 'dict(str, str)',
        'tags': 'list[Tag]',
        'resolved_permission': 'MediaRootPermission',
        'bundles': 'str',
        'backups': 'str',
        'proxies_generated': 'bool',
        'proxies_failed': 'bool',
        'modified_by': 'ElementsUserMini',
        'sync_id': 'str',
        'display_name': 'str',
        'has_files': 'bool',
        'has_backups': 'bool',
        'has_cloud_links': 'bool',
        'checksum': 'str',
        'type': 'str',
        'thumbnail_generated': 'bool',
        'matched_scanner': 'str',
        'rating': 'float',
        'workflow_state': 'int',
        'is_temporary': 'bool',
        'created': 'datetime',
        'modified': 'datetime',
        'set': 'int'
    }

    attribute_map = {
        'id': 'id',
        'urls': 'urls',
        'proxies': 'proxies',
        'default_proxy': 'default_proxy',
        'info': 'info',
        'proxy_info': 'proxy_info',
        'custom_fields': 'custom_fields',
        'tags': 'tags',
        'resolved_permission': 'resolved_permission',
        'bundles': 'bundles',
        'backups': 'backups',
        'proxies_generated': 'proxies_generated',
        'proxies_failed': 'proxies_failed',
        'modified_by': 'modified_by',
        'sync_id': 'sync_id',
        'display_name': 'display_name',
        'has_files': 'has_files',
        'has_backups': 'has_backups',
        'has_cloud_links': 'has_cloud_links',
        'checksum': 'checksum',
        'type': 'type',
        'thumbnail_generated': 'thumbnail_generated',
        'matched_scanner': 'matched_scanner',
        'rating': 'rating',
        'workflow_state': 'workflow_state',
        'is_temporary': 'is_temporary',
        'created': 'created',
        'modified': 'modified',
        'set': 'set'
    }

    def __init__(self, id=None, urls=None, proxies=None, default_proxy=None, info=None, proxy_info=None, custom_fields=None, tags=None, resolved_permission=None, bundles=None, backups=None, proxies_generated=None, proxies_failed=None, modified_by=None, sync_id=None, display_name=None, has_files=None, has_backups=None, has_cloud_links=None, checksum=None, type=None, thumbnail_generated=None, matched_scanner=None, rating=None, workflow_state=None, is_temporary=None, created=None, modified=None, set=None, local_vars_configuration=None):  # noqa: E501
        """Asset - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._urls = None
        self._proxies = None
        self._default_proxy = None
        self._info = None
        self._proxy_info = None
        self._custom_fields = None
        self._tags = None
        self._resolved_permission = None
        self._bundles = None
        self._backups = None
        self._proxies_generated = None
        self._proxies_failed = None
        self._modified_by = None
        self._sync_id = None
        self._display_name = None
        self._has_files = None
        self._has_backups = None
        self._has_cloud_links = None
        self._checksum = None
        self._type = None
        self._thumbnail_generated = None
        self._matched_scanner = None
        self._rating = None
        self._workflow_state = None
        self._is_temporary = None
        self._created = None
        self._modified = None
        self._set = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if urls is not None:
            self.urls = urls
        if proxies is not None:
            self.proxies = proxies
        if default_proxy is not None:
            self.default_proxy = default_proxy
        if info is not None:
            self.info = info
        if proxy_info is not None:
            self.proxy_info = proxy_info
        self.custom_fields = custom_fields
        self.tags = tags
        if resolved_permission is not None:
            self.resolved_permission = resolved_permission
        if bundles is not None:
            self.bundles = bundles
        if backups is not None:
            self.backups = backups
        if proxies_generated is not None:
            self.proxies_generated = proxies_generated
        if proxies_failed is not None:
            self.proxies_failed = proxies_failed
        if modified_by is not None:
            self.modified_by = modified_by
        if sync_id is not None:
            self.sync_id = sync_id
        if display_name is not None:
            self.display_name = display_name
        if has_files is not None:
            self.has_files = has_files
        if has_backups is not None:
            self.has_backups = has_backups
        if has_cloud_links is not None:
            self.has_cloud_links = has_cloud_links
        if checksum is not None:
            self.checksum = checksum
        if type is not None:
            self.type = type
        if thumbnail_generated is not None:
            self.thumbnail_generated = thumbnail_generated
        if matched_scanner is not None:
            self.matched_scanner = matched_scanner
        if rating is not None:
            self.rating = rating
        if workflow_state is not None:
            self.workflow_state = workflow_state
        if is_temporary is not None:
            self.is_temporary = is_temporary
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        self.set = set

    @property
    def id(self):
        """Gets the id of this Asset.  # noqa: E501


        :return: The id of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Asset.


        :param id: The id of this Asset.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def urls(self):
        """Gets the urls of this Asset.  # noqa: E501


        :return: The urls of this Asset.  # noqa: E501
        :rtype: Proxy
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this Asset.


        :param urls: The urls of this Asset.  # noqa: E501
        :type: Proxy
        """

        self._urls = urls

    @property
    def proxies(self):
        """Gets the proxies of this Asset.  # noqa: E501


        :return: The proxies of this Asset.  # noqa: E501
        :rtype: list[Proxy]
        """
        return self._proxies

    @proxies.setter
    def proxies(self, proxies):
        """Sets the proxies of this Asset.


        :param proxies: The proxies of this Asset.  # noqa: E501
        :type: list[Proxy]
        """

        self._proxies = proxies

    @property
    def default_proxy(self):
        """Gets the default_proxy of this Asset.  # noqa: E501


        :return: The default_proxy of this Asset.  # noqa: E501
        :rtype: Proxy
        """
        return self._default_proxy

    @default_proxy.setter
    def default_proxy(self, default_proxy):
        """Sets the default_proxy of this Asset.


        :param default_proxy: The default_proxy of this Asset.  # noqa: E501
        :type: Proxy
        """

        self._default_proxy = default_proxy

    @property
    def info(self):
        """Gets the info of this Asset.  # noqa: E501


        :return: The info of this Asset.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this Asset.


        :param info: The info of this Asset.  # noqa: E501
        :type: dict(str, str)
        """

        self._info = info

    @property
    def proxy_info(self):
        """Gets the proxy_info of this Asset.  # noqa: E501


        :return: The proxy_info of this Asset.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._proxy_info

    @proxy_info.setter
    def proxy_info(self, proxy_info):
        """Sets the proxy_info of this Asset.


        :param proxy_info: The proxy_info of this Asset.  # noqa: E501
        :type: dict(str, str)
        """

        self._proxy_info = proxy_info

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Asset.  # noqa: E501


        :return: The custom_fields of this Asset.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Asset.


        :param custom_fields: The custom_fields of this Asset.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and custom_fields is None:  # noqa: E501
            raise ValueError("Invalid value for `custom_fields`, must not be `None`")  # noqa: E501

        self._custom_fields = custom_fields

    @property
    def tags(self):
        """Gets the tags of this Asset.  # noqa: E501


        :return: The tags of this Asset.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Asset.


        :param tags: The tags of this Asset.  # noqa: E501
        :type: list[Tag]
        """
        if self.local_vars_configuration.client_side_validation and tags is None:  # noqa: E501
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def resolved_permission(self):
        """Gets the resolved_permission of this Asset.  # noqa: E501


        :return: The resolved_permission of this Asset.  # noqa: E501
        :rtype: MediaRootPermission
        """
        return self._resolved_permission

    @resolved_permission.setter
    def resolved_permission(self, resolved_permission):
        """Sets the resolved_permission of this Asset.


        :param resolved_permission: The resolved_permission of this Asset.  # noqa: E501
        :type: MediaRootPermission
        """

        self._resolved_permission = resolved_permission

    @property
    def bundles(self):
        """Gets the bundles of this Asset.  # noqa: E501


        :return: The bundles of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._bundles

    @bundles.setter
    def bundles(self, bundles):
        """Sets the bundles of this Asset.


        :param bundles: The bundles of this Asset.  # noqa: E501
        :type: str
        """

        self._bundles = bundles

    @property
    def backups(self):
        """Gets the backups of this Asset.  # noqa: E501


        :return: The backups of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._backups

    @backups.setter
    def backups(self, backups):
        """Sets the backups of this Asset.


        :param backups: The backups of this Asset.  # noqa: E501
        :type: str
        """

        self._backups = backups

    @property
    def proxies_generated(self):
        """Gets the proxies_generated of this Asset.  # noqa: E501


        :return: The proxies_generated of this Asset.  # noqa: E501
        :rtype: bool
        """
        return self._proxies_generated

    @proxies_generated.setter
    def proxies_generated(self, proxies_generated):
        """Sets the proxies_generated of this Asset.


        :param proxies_generated: The proxies_generated of this Asset.  # noqa: E501
        :type: bool
        """

        self._proxies_generated = proxies_generated

    @property
    def proxies_failed(self):
        """Gets the proxies_failed of this Asset.  # noqa: E501


        :return: The proxies_failed of this Asset.  # noqa: E501
        :rtype: bool
        """
        return self._proxies_failed

    @proxies_failed.setter
    def proxies_failed(self, proxies_failed):
        """Sets the proxies_failed of this Asset.


        :param proxies_failed: The proxies_failed of this Asset.  # noqa: E501
        :type: bool
        """

        self._proxies_failed = proxies_failed

    @property
    def modified_by(self):
        """Gets the modified_by of this Asset.  # noqa: E501


        :return: The modified_by of this Asset.  # noqa: E501
        :rtype: ElementsUserMini
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this Asset.


        :param modified_by: The modified_by of this Asset.  # noqa: E501
        :type: ElementsUserMini
        """

        self._modified_by = modified_by

    @property
    def sync_id(self):
        """Gets the sync_id of this Asset.  # noqa: E501


        :return: The sync_id of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._sync_id

    @sync_id.setter
    def sync_id(self, sync_id):
        """Sets the sync_id of this Asset.


        :param sync_id: The sync_id of this Asset.  # noqa: E501
        :type: str
        """

        self._sync_id = sync_id

    @property
    def display_name(self):
        """Gets the display_name of this Asset.  # noqa: E501


        :return: The display_name of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Asset.


        :param display_name: The display_name of this Asset.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                display_name is not None and len(display_name) < 1):
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._display_name = display_name

    @property
    def has_files(self):
        """Gets the has_files of this Asset.  # noqa: E501


        :return: The has_files of this Asset.  # noqa: E501
        :rtype: bool
        """
        return self._has_files

    @has_files.setter
    def has_files(self, has_files):
        """Sets the has_files of this Asset.


        :param has_files: The has_files of this Asset.  # noqa: E501
        :type: bool
        """

        self._has_files = has_files

    @property
    def has_backups(self):
        """Gets the has_backups of this Asset.  # noqa: E501


        :return: The has_backups of this Asset.  # noqa: E501
        :rtype: bool
        """
        return self._has_backups

    @has_backups.setter
    def has_backups(self, has_backups):
        """Sets the has_backups of this Asset.


        :param has_backups: The has_backups of this Asset.  # noqa: E501
        :type: bool
        """

        self._has_backups = has_backups

    @property
    def has_cloud_links(self):
        """Gets the has_cloud_links of this Asset.  # noqa: E501


        :return: The has_cloud_links of this Asset.  # noqa: E501
        :rtype: bool
        """
        return self._has_cloud_links

    @has_cloud_links.setter
    def has_cloud_links(self, has_cloud_links):
        """Sets the has_cloud_links of this Asset.


        :param has_cloud_links: The has_cloud_links of this Asset.  # noqa: E501
        :type: bool
        """

        self._has_cloud_links = has_cloud_links

    @property
    def checksum(self):
        """Gets the checksum of this Asset.  # noqa: E501


        :return: The checksum of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this Asset.


        :param checksum: The checksum of this Asset.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                checksum is not None and len(checksum) < 1):
            raise ValueError("Invalid value for `checksum`, length must be greater than or equal to `1`")  # noqa: E501

        self._checksum = checksum

    @property
    def type(self):
        """Gets the type of this Asset.  # noqa: E501


        :return: The type of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Asset.


        :param type: The type of this Asset.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                type is not None and len(type) < 1):
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")  # noqa: E501

        self._type = type

    @property
    def thumbnail_generated(self):
        """Gets the thumbnail_generated of this Asset.  # noqa: E501


        :return: The thumbnail_generated of this Asset.  # noqa: E501
        :rtype: bool
        """
        return self._thumbnail_generated

    @thumbnail_generated.setter
    def thumbnail_generated(self, thumbnail_generated):
        """Sets the thumbnail_generated of this Asset.


        :param thumbnail_generated: The thumbnail_generated of this Asset.  # noqa: E501
        :type: bool
        """

        self._thumbnail_generated = thumbnail_generated

    @property
    def matched_scanner(self):
        """Gets the matched_scanner of this Asset.  # noqa: E501


        :return: The matched_scanner of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._matched_scanner

    @matched_scanner.setter
    def matched_scanner(self, matched_scanner):
        """Sets the matched_scanner of this Asset.


        :param matched_scanner: The matched_scanner of this Asset.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                matched_scanner is not None and len(matched_scanner) < 1):
            raise ValueError("Invalid value for `matched_scanner`, length must be greater than or equal to `1`")  # noqa: E501

        self._matched_scanner = matched_scanner

    @property
    def rating(self):
        """Gets the rating of this Asset.  # noqa: E501


        :return: The rating of this Asset.  # noqa: E501
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this Asset.


        :param rating: The rating of this Asset.  # noqa: E501
        :type: float
        """

        self._rating = rating

    @property
    def workflow_state(self):
        """Gets the workflow_state of this Asset.  # noqa: E501


        :return: The workflow_state of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this Asset.


        :param workflow_state: The workflow_state of this Asset.  # noqa: E501
        :type: int
        """

        self._workflow_state = workflow_state

    @property
    def is_temporary(self):
        """Gets the is_temporary of this Asset.  # noqa: E501


        :return: The is_temporary of this Asset.  # noqa: E501
        :rtype: bool
        """
        return self._is_temporary

    @is_temporary.setter
    def is_temporary(self, is_temporary):
        """Sets the is_temporary of this Asset.


        :param is_temporary: The is_temporary of this Asset.  # noqa: E501
        :type: bool
        """

        self._is_temporary = is_temporary

    @property
    def created(self):
        """Gets the created of this Asset.  # noqa: E501


        :return: The created of this Asset.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Asset.


        :param created: The created of this Asset.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this Asset.  # noqa: E501


        :return: The modified of this Asset.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Asset.


        :param modified: The modified of this Asset.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def set(self):
        """Gets the set of this Asset.  # noqa: E501


        :return: The set of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._set

    @set.setter
    def set(self, set):
        """Sets the set of this Asset.


        :param set: The set of this Asset.  # noqa: E501
        :type: int
        """

        self._set = set

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Asset):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Asset):
            return True

        return self.to_dict() != other.to_dict()
