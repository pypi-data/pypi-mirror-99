# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class BasicFile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'path': 'str',
        'name': 'str',
        'size': 'int',
        'total_size': 'int',
        'is_dir': 'bool',
        'files': 'list[object]'
    }

    attribute_map = {
        'path': 'path',
        'name': 'name',
        'size': 'size',
        'total_size': 'total_size',
        'is_dir': 'is_dir',
        'files': 'files'
    }

    def __init__(self, path=None, name=None, size=None, total_size=None, is_dir=None, files=None, local_vars_configuration=None):  # noqa: E501
        """BasicFile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._path = None
        self._name = None
        self._size = None
        self._total_size = None
        self._is_dir = None
        self._files = None
        self.discriminator = None

        if path is not None:
            self.path = path
        self.name = name
        if size is not None:
            self.size = size
        if total_size is not None:
            self.total_size = total_size
        if is_dir is not None:
            self.is_dir = is_dir
        self.files = files

    @property
    def path(self):
        """Gets the path of this BasicFile.  # noqa: E501


        :return: The path of this BasicFile.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this BasicFile.


        :param path: The path of this BasicFile.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                path is not None and len(path) < 1):
            raise ValueError("Invalid value for `path`, length must be greater than or equal to `1`")  # noqa: E501

        self._path = path

    @property
    def name(self):
        """Gets the name of this BasicFile.  # noqa: E501


        :return: The name of this BasicFile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BasicFile.


        :param name: The name of this BasicFile.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def size(self):
        """Gets the size of this BasicFile.  # noqa: E501


        :return: The size of this BasicFile.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this BasicFile.


        :param size: The size of this BasicFile.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def total_size(self):
        """Gets the total_size of this BasicFile.  # noqa: E501


        :return: The total_size of this BasicFile.  # noqa: E501
        :rtype: int
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this BasicFile.


        :param total_size: The total_size of this BasicFile.  # noqa: E501
        :type: int
        """

        self._total_size = total_size

    @property
    def is_dir(self):
        """Gets the is_dir of this BasicFile.  # noqa: E501


        :return: The is_dir of this BasicFile.  # noqa: E501
        :rtype: bool
        """
        return self._is_dir

    @is_dir.setter
    def is_dir(self, is_dir):
        """Sets the is_dir of this BasicFile.


        :param is_dir: The is_dir of this BasicFile.  # noqa: E501
        :type: bool
        """

        self._is_dir = is_dir

    @property
    def files(self):
        """Gets the files of this BasicFile.  # noqa: E501


        :return: The files of this BasicFile.  # noqa: E501
        :rtype: list[object]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this BasicFile.


        :param files: The files of this BasicFile.  # noqa: E501
        :type: list[object]
        """

        self._files = files

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasicFile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BasicFile):
            return True

        return self.to_dict() != other.to_dict()
