# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class TranscoderProfile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'options': 'str',
        'binary': 'str',
        'command': 'str',
        'output_extension': 'str',
        'accepts_bitrate': 'bool',
        'accepts_fps': 'bool',
        'accepts_resolution': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'options': 'options',
        'binary': 'binary',
        'command': 'command',
        'output_extension': 'output_extension',
        'accepts_bitrate': 'accepts_bitrate',
        'accepts_fps': 'accepts_fps',
        'accepts_resolution': 'accepts_resolution'
    }

    def __init__(self, id=None, name=None, options=None, binary=None, command=None, output_extension=None, accepts_bitrate=None, accepts_fps=None, accepts_resolution=None, local_vars_configuration=None):  # noqa: E501
        """TranscoderProfile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._options = None
        self._binary = None
        self._command = None
        self._output_extension = None
        self._accepts_bitrate = None
        self._accepts_fps = None
        self._accepts_resolution = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if options is not None:
            self.options = options
        if binary is not None:
            self.binary = binary
        if command is not None:
            self.command = command
        if output_extension is not None:
            self.output_extension = output_extension
        if accepts_bitrate is not None:
            self.accepts_bitrate = accepts_bitrate
        if accepts_fps is not None:
            self.accepts_fps = accepts_fps
        if accepts_resolution is not None:
            self.accepts_resolution = accepts_resolution

    @property
    def id(self):
        """Gets the id of this TranscoderProfile.  # noqa: E501


        :return: The id of this TranscoderProfile.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TranscoderProfile.


        :param id: The id of this TranscoderProfile.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TranscoderProfile.  # noqa: E501


        :return: The name of this TranscoderProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TranscoderProfile.


        :param name: The name of this TranscoderProfile.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def options(self):
        """Gets the options of this TranscoderProfile.  # noqa: E501


        :return: The options of this TranscoderProfile.  # noqa: E501
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this TranscoderProfile.


        :param options: The options of this TranscoderProfile.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                options is not None and len(options) < 1):
            raise ValueError("Invalid value for `options`, length must be greater than or equal to `1`")  # noqa: E501

        self._options = options

    @property
    def binary(self):
        """Gets the binary of this TranscoderProfile.  # noqa: E501


        :return: The binary of this TranscoderProfile.  # noqa: E501
        :rtype: str
        """
        return self._binary

    @binary.setter
    def binary(self, binary):
        """Sets the binary of this TranscoderProfile.


        :param binary: The binary of this TranscoderProfile.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                binary is not None and len(binary) > 255):
            raise ValueError("Invalid value for `binary`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                binary is not None and len(binary) < 1):
            raise ValueError("Invalid value for `binary`, length must be greater than or equal to `1`")  # noqa: E501

        self._binary = binary

    @property
    def command(self):
        """Gets the command of this TranscoderProfile.  # noqa: E501


        :return: The command of this TranscoderProfile.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this TranscoderProfile.


        :param command: The command of this TranscoderProfile.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                command is not None and len(command) < 1):
            raise ValueError("Invalid value for `command`, length must be greater than or equal to `1`")  # noqa: E501

        self._command = command

    @property
    def output_extension(self):
        """Gets the output_extension of this TranscoderProfile.  # noqa: E501


        :return: The output_extension of this TranscoderProfile.  # noqa: E501
        :rtype: str
        """
        return self._output_extension

    @output_extension.setter
    def output_extension(self, output_extension):
        """Sets the output_extension of this TranscoderProfile.


        :param output_extension: The output_extension of this TranscoderProfile.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                output_extension is not None and len(output_extension) > 63):
            raise ValueError("Invalid value for `output_extension`, length must be less than or equal to `63`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                output_extension is not None and len(output_extension) < 1):
            raise ValueError("Invalid value for `output_extension`, length must be greater than or equal to `1`")  # noqa: E501

        self._output_extension = output_extension

    @property
    def accepts_bitrate(self):
        """Gets the accepts_bitrate of this TranscoderProfile.  # noqa: E501


        :return: The accepts_bitrate of this TranscoderProfile.  # noqa: E501
        :rtype: bool
        """
        return self._accepts_bitrate

    @accepts_bitrate.setter
    def accepts_bitrate(self, accepts_bitrate):
        """Sets the accepts_bitrate of this TranscoderProfile.


        :param accepts_bitrate: The accepts_bitrate of this TranscoderProfile.  # noqa: E501
        :type: bool
        """

        self._accepts_bitrate = accepts_bitrate

    @property
    def accepts_fps(self):
        """Gets the accepts_fps of this TranscoderProfile.  # noqa: E501


        :return: The accepts_fps of this TranscoderProfile.  # noqa: E501
        :rtype: bool
        """
        return self._accepts_fps

    @accepts_fps.setter
    def accepts_fps(self, accepts_fps):
        """Sets the accepts_fps of this TranscoderProfile.


        :param accepts_fps: The accepts_fps of this TranscoderProfile.  # noqa: E501
        :type: bool
        """

        self._accepts_fps = accepts_fps

    @property
    def accepts_resolution(self):
        """Gets the accepts_resolution of this TranscoderProfile.  # noqa: E501


        :return: The accepts_resolution of this TranscoderProfile.  # noqa: E501
        :rtype: bool
        """
        return self._accepts_resolution

    @accepts_resolution.setter
    def accepts_resolution(self, accepts_resolution):
        """Sets the accepts_resolution of this TranscoderProfile.


        :param accepts_resolution: The accepts_resolution of this TranscoderProfile.  # noqa: E501
        :type: bool
        """

        self._accepts_resolution = accepts_resolution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TranscoderProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TranscoderProfile):
            return True

        return self.to_dict() != other.to_dict()
