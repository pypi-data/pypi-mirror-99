# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class Proxy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'urls': 'dict(str, str)',
        'profile': 'ProxyProfileMini',
        'failed_reason': 'str',
        'generated': 'bool',
        'failed': 'bool',
        'name': 'str',
        'variant_id': 'str',
        'variant_config': 'str',
        'asset': 'int'
    }

    attribute_map = {
        'id': 'id',
        'urls': 'urls',
        'profile': 'profile',
        'failed_reason': 'failed_reason',
        'generated': 'generated',
        'failed': 'failed',
        'name': 'name',
        'variant_id': 'variant_id',
        'variant_config': 'variant_config',
        'asset': 'asset'
    }

    def __init__(self, id=None, urls=None, profile=None, failed_reason=None, generated=None, failed=None, name=None, variant_id='default', variant_config=None, asset=None, local_vars_configuration=None):  # noqa: E501
        """Proxy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._urls = None
        self._profile = None
        self._failed_reason = None
        self._generated = None
        self._failed = None
        self._name = None
        self._variant_id = None
        self._variant_config = None
        self._asset = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if urls is not None:
            self.urls = urls
        if profile is not None:
            self.profile = profile
        if failed_reason is not None:
            self.failed_reason = failed_reason
        if generated is not None:
            self.generated = generated
        if failed is not None:
            self.failed = failed
        if name is not None:
            self.name = name
        if variant_id is not None:
            self.variant_id = variant_id
        if variant_config is not None:
            self.variant_config = variant_config
        self.asset = asset

    @property
    def id(self):
        """Gets the id of this Proxy.  # noqa: E501


        :return: The id of this Proxy.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Proxy.


        :param id: The id of this Proxy.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def urls(self):
        """Gets the urls of this Proxy.  # noqa: E501


        :return: The urls of this Proxy.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this Proxy.


        :param urls: The urls of this Proxy.  # noqa: E501
        :type: dict(str, str)
        """

        self._urls = urls

    @property
    def profile(self):
        """Gets the profile of this Proxy.  # noqa: E501


        :return: The profile of this Proxy.  # noqa: E501
        :rtype: ProxyProfileMini
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this Proxy.


        :param profile: The profile of this Proxy.  # noqa: E501
        :type: ProxyProfileMini
        """

        self._profile = profile

    @property
    def failed_reason(self):
        """Gets the failed_reason of this Proxy.  # noqa: E501


        :return: The failed_reason of this Proxy.  # noqa: E501
        :rtype: str
        """
        return self._failed_reason

    @failed_reason.setter
    def failed_reason(self, failed_reason):
        """Sets the failed_reason of this Proxy.


        :param failed_reason: The failed_reason of this Proxy.  # noqa: E501
        :type: str
        """

        self._failed_reason = failed_reason

    @property
    def generated(self):
        """Gets the generated of this Proxy.  # noqa: E501


        :return: The generated of this Proxy.  # noqa: E501
        :rtype: bool
        """
        return self._generated

    @generated.setter
    def generated(self, generated):
        """Sets the generated of this Proxy.


        :param generated: The generated of this Proxy.  # noqa: E501
        :type: bool
        """

        self._generated = generated

    @property
    def failed(self):
        """Gets the failed of this Proxy.  # noqa: E501


        :return: The failed of this Proxy.  # noqa: E501
        :rtype: bool
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this Proxy.


        :param failed: The failed of this Proxy.  # noqa: E501
        :type: bool
        """

        self._failed = failed

    @property
    def name(self):
        """Gets the name of this Proxy.  # noqa: E501


        :return: The name of this Proxy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Proxy.


        :param name: The name of this Proxy.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def variant_id(self):
        """Gets the variant_id of this Proxy.  # noqa: E501


        :return: The variant_id of this Proxy.  # noqa: E501
        :rtype: str
        """
        return self._variant_id

    @variant_id.setter
    def variant_id(self, variant_id):
        """Sets the variant_id of this Proxy.


        :param variant_id: The variant_id of this Proxy.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                variant_id is not None and len(variant_id) > 255):
            raise ValueError("Invalid value for `variant_id`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                variant_id is not None and len(variant_id) < 1):
            raise ValueError("Invalid value for `variant_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._variant_id = variant_id

    @property
    def variant_config(self):
        """Gets the variant_config of this Proxy.  # noqa: E501


        :return: The variant_config of this Proxy.  # noqa: E501
        :rtype: str
        """
        return self._variant_config

    @variant_config.setter
    def variant_config(self, variant_config):
        """Sets the variant_config of this Proxy.


        :param variant_config: The variant_config of this Proxy.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                variant_config is not None and len(variant_config) < 1):
            raise ValueError("Invalid value for `variant_config`, length must be greater than or equal to `1`")  # noqa: E501

        self._variant_config = variant_config

    @property
    def asset(self):
        """Gets the asset of this Proxy.  # noqa: E501


        :return: The asset of this Proxy.  # noqa: E501
        :rtype: int
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this Proxy.


        :param asset: The asset of this Proxy.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and asset is None:  # noqa: E501
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Proxy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Proxy):
            return True

        return self.to_dict() != other.to_dict()
