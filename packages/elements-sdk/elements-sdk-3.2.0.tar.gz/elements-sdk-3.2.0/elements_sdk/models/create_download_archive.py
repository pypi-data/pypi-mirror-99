# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class CreateDownloadArchive(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'paths': 'list[str]',
        'file_ids': 'list[int]',
        'bundle_ids': 'list[int]',
        'proxy': 'bool',
        'for_root': 'int'
    }

    attribute_map = {
        'paths': 'paths',
        'file_ids': 'file_ids',
        'bundle_ids': 'bundle_ids',
        'proxy': 'proxy',
        'for_root': 'for_root'
    }

    def __init__(self, paths=None, file_ids=None, bundle_ids=None, proxy=None, for_root=None, local_vars_configuration=None):  # noqa: E501
        """CreateDownloadArchive - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._paths = None
        self._file_ids = None
        self._bundle_ids = None
        self._proxy = None
        self._for_root = None
        self.discriminator = None

        self.paths = paths
        if file_ids is not None:
            self.file_ids = file_ids
        if bundle_ids is not None:
            self.bundle_ids = bundle_ids
        if proxy is not None:
            self.proxy = proxy
        if for_root is not None:
            self.for_root = for_root

    @property
    def paths(self):
        """Gets the paths of this CreateDownloadArchive.  # noqa: E501


        :return: The paths of this CreateDownloadArchive.  # noqa: E501
        :rtype: list[str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this CreateDownloadArchive.


        :param paths: The paths of this CreateDownloadArchive.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and paths is None:  # noqa: E501
            raise ValueError("Invalid value for `paths`, must not be `None`")  # noqa: E501

        self._paths = paths

    @property
    def file_ids(self):
        """Gets the file_ids of this CreateDownloadArchive.  # noqa: E501


        :return: The file_ids of this CreateDownloadArchive.  # noqa: E501
        :rtype: list[int]
        """
        return self._file_ids

    @file_ids.setter
    def file_ids(self, file_ids):
        """Sets the file_ids of this CreateDownloadArchive.


        :param file_ids: The file_ids of this CreateDownloadArchive.  # noqa: E501
        :type: list[int]
        """

        self._file_ids = file_ids

    @property
    def bundle_ids(self):
        """Gets the bundle_ids of this CreateDownloadArchive.  # noqa: E501


        :return: The bundle_ids of this CreateDownloadArchive.  # noqa: E501
        :rtype: list[int]
        """
        return self._bundle_ids

    @bundle_ids.setter
    def bundle_ids(self, bundle_ids):
        """Sets the bundle_ids of this CreateDownloadArchive.


        :param bundle_ids: The bundle_ids of this CreateDownloadArchive.  # noqa: E501
        :type: list[int]
        """

        self._bundle_ids = bundle_ids

    @property
    def proxy(self):
        """Gets the proxy of this CreateDownloadArchive.  # noqa: E501


        :return: The proxy of this CreateDownloadArchive.  # noqa: E501
        :rtype: bool
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this CreateDownloadArchive.


        :param proxy: The proxy of this CreateDownloadArchive.  # noqa: E501
        :type: bool
        """

        self._proxy = proxy

    @property
    def for_root(self):
        """Gets the for_root of this CreateDownloadArchive.  # noqa: E501


        :return: The for_root of this CreateDownloadArchive.  # noqa: E501
        :rtype: int
        """
        return self._for_root

    @for_root.setter
    def for_root(self, for_root):
        """Sets the for_root of this CreateDownloadArchive.


        :param for_root: The for_root of this CreateDownloadArchive.  # noqa: E501
        :type: int
        """

        self._for_root = for_root

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateDownloadArchive):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateDownloadArchive):
            return True

        return self.to_dict() != other.to_dict()
