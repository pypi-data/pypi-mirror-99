# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class ElementsUserMini(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'avatar': 'str',
        'display_name': 'str',
        'email': 'str',
        'full_name': 'str',
        'is_anonymous': 'str',
        'is_cloud': 'bool',
        'username': 'str'
    }

    attribute_map = {
        'id': 'id',
        'avatar': 'avatar',
        'display_name': 'display_name',
        'email': 'email',
        'full_name': 'full_name',
        'is_anonymous': 'is_anonymous',
        'is_cloud': 'is_cloud',
        'username': 'username'
    }

    def __init__(self, id=None, avatar=None, display_name=None, email=None, full_name=None, is_anonymous=None, is_cloud=None, username=None, local_vars_configuration=None):  # noqa: E501
        """ElementsUserMini - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._avatar = None
        self._display_name = None
        self._email = None
        self._full_name = None
        self._is_anonymous = None
        self._is_cloud = None
        self._username = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.avatar = avatar
        if display_name is not None:
            self.display_name = display_name
        self.email = email
        self.full_name = full_name
        if is_anonymous is not None:
            self.is_anonymous = is_anonymous
        if is_cloud is not None:
            self.is_cloud = is_cloud
        self.username = username

    @property
    def id(self):
        """Gets the id of this ElementsUserMini.  # noqa: E501


        :return: The id of this ElementsUserMini.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ElementsUserMini.


        :param id: The id of this ElementsUserMini.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def avatar(self):
        """Gets the avatar of this ElementsUserMini.  # noqa: E501


        :return: The avatar of this ElementsUserMini.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this ElementsUserMini.


        :param avatar: The avatar of this ElementsUserMini.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def display_name(self):
        """Gets the display_name of this ElementsUserMini.  # noqa: E501


        :return: The display_name of this ElementsUserMini.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ElementsUserMini.


        :param display_name: The display_name of this ElementsUserMini.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this ElementsUserMini.  # noqa: E501


        :return: The email of this ElementsUserMini.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ElementsUserMini.


        :param email: The email of this ElementsUserMini.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) > 255):
            raise ValueError("Invalid value for `email`, length must be less than or equal to `255`")  # noqa: E501

        self._email = email

    @property
    def full_name(self):
        """Gets the full_name of this ElementsUserMini.  # noqa: E501


        :return: The full_name of this ElementsUserMini.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this ElementsUserMini.


        :param full_name: The full_name of this ElementsUserMini.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                full_name is not None and len(full_name) > 255):
            raise ValueError("Invalid value for `full_name`, length must be less than or equal to `255`")  # noqa: E501

        self._full_name = full_name

    @property
    def is_anonymous(self):
        """Gets the is_anonymous of this ElementsUserMini.  # noqa: E501


        :return: The is_anonymous of this ElementsUserMini.  # noqa: E501
        :rtype: str
        """
        return self._is_anonymous

    @is_anonymous.setter
    def is_anonymous(self, is_anonymous):
        """Sets the is_anonymous of this ElementsUserMini.


        :param is_anonymous: The is_anonymous of this ElementsUserMini.  # noqa: E501
        :type: str
        """

        self._is_anonymous = is_anonymous

    @property
    def is_cloud(self):
        """Gets the is_cloud of this ElementsUserMini.  # noqa: E501


        :return: The is_cloud of this ElementsUserMini.  # noqa: E501
        :rtype: bool
        """
        return self._is_cloud

    @is_cloud.setter
    def is_cloud(self, is_cloud):
        """Sets the is_cloud of this ElementsUserMini.


        :param is_cloud: The is_cloud of this ElementsUserMini.  # noqa: E501
        :type: bool
        """

        self._is_cloud = is_cloud

    @property
    def username(self):
        """Gets the username of this ElementsUserMini.  # noqa: E501


        :return: The username of this ElementsUserMini.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ElementsUserMini.


        :param username: The username of this ElementsUserMini.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                username is not None and len(username) > 255):
            raise ValueError("Invalid value for `username`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                username is not None and len(username) < 1):
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")  # noqa: E501

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ElementsUserMini):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ElementsUserMini):
            return True

        return self.to_dict() != other.to_dict()
