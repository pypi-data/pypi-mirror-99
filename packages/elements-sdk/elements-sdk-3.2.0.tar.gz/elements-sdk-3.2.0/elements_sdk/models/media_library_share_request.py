# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class MediaLibraryShareRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bundles': 'list[int]',
        'directories': 'list[int]',
        'expires': 'datetime',
        'view_limit': 'int',
        'permissions': 'MediaRootPermissionAccessOptions',
        'user': 'int',
        'email': 'str',
        'link_type': 'str',
        'password': 'str'
    }

    attribute_map = {
        'bundles': 'bundles',
        'directories': 'directories',
        'expires': 'expires',
        'view_limit': 'view_limit',
        'permissions': 'permissions',
        'user': 'user',
        'email': 'email',
        'link_type': 'link_type',
        'password': 'password'
    }

    def __init__(self, bundles=None, directories=None, expires=None, view_limit=None, permissions=None, user=None, email=None, link_type=None, password=None, local_vars_configuration=None):  # noqa: E501
        """MediaLibraryShareRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bundles = None
        self._directories = None
        self._expires = None
        self._view_limit = None
        self._permissions = None
        self._user = None
        self._email = None
        self._link_type = None
        self._password = None
        self.discriminator = None

        if bundles is not None:
            self.bundles = bundles
        if directories is not None:
            self.directories = directories
        self.expires = expires
        self.view_limit = view_limit
        self.permissions = permissions
        if user is not None:
            self.user = user
        if email is not None:
            self.email = email
        if link_type is not None:
            self.link_type = link_type
        if password is not None:
            self.password = password

    @property
    def bundles(self):
        """Gets the bundles of this MediaLibraryShareRequest.  # noqa: E501


        :return: The bundles of this MediaLibraryShareRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._bundles

    @bundles.setter
    def bundles(self, bundles):
        """Sets the bundles of this MediaLibraryShareRequest.


        :param bundles: The bundles of this MediaLibraryShareRequest.  # noqa: E501
        :type: list[int]
        """

        self._bundles = bundles

    @property
    def directories(self):
        """Gets the directories of this MediaLibraryShareRequest.  # noqa: E501


        :return: The directories of this MediaLibraryShareRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._directories

    @directories.setter
    def directories(self, directories):
        """Sets the directories of this MediaLibraryShareRequest.


        :param directories: The directories of this MediaLibraryShareRequest.  # noqa: E501
        :type: list[int]
        """

        self._directories = directories

    @property
    def expires(self):
        """Gets the expires of this MediaLibraryShareRequest.  # noqa: E501


        :return: The expires of this MediaLibraryShareRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this MediaLibraryShareRequest.


        :param expires: The expires of this MediaLibraryShareRequest.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and expires is None:  # noqa: E501
            raise ValueError("Invalid value for `expires`, must not be `None`")  # noqa: E501

        self._expires = expires

    @property
    def view_limit(self):
        """Gets the view_limit of this MediaLibraryShareRequest.  # noqa: E501


        :return: The view_limit of this MediaLibraryShareRequest.  # noqa: E501
        :rtype: int
        """
        return self._view_limit

    @view_limit.setter
    def view_limit(self, view_limit):
        """Sets the view_limit of this MediaLibraryShareRequest.


        :param view_limit: The view_limit of this MediaLibraryShareRequest.  # noqa: E501
        :type: int
        """

        self._view_limit = view_limit

    @property
    def permissions(self):
        """Gets the permissions of this MediaLibraryShareRequest.  # noqa: E501


        :return: The permissions of this MediaLibraryShareRequest.  # noqa: E501
        :rtype: MediaRootPermissionAccessOptions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this MediaLibraryShareRequest.


        :param permissions: The permissions of this MediaLibraryShareRequest.  # noqa: E501
        :type: MediaRootPermissionAccessOptions
        """
        if self.local_vars_configuration.client_side_validation and permissions is None:  # noqa: E501
            raise ValueError("Invalid value for `permissions`, must not be `None`")  # noqa: E501

        self._permissions = permissions

    @property
    def user(self):
        """Gets the user of this MediaLibraryShareRequest.  # noqa: E501


        :return: The user of this MediaLibraryShareRequest.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this MediaLibraryShareRequest.


        :param user: The user of this MediaLibraryShareRequest.  # noqa: E501
        :type: int
        """

        self._user = user

    @property
    def email(self):
        """Gets the email of this MediaLibraryShareRequest.  # noqa: E501


        :return: The email of this MediaLibraryShareRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this MediaLibraryShareRequest.


        :param email: The email of this MediaLibraryShareRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) < 1):
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")  # noqa: E501

        self._email = email

    @property
    def link_type(self):
        """Gets the link_type of this MediaLibraryShareRequest.  # noqa: E501


        :return: The link_type of this MediaLibraryShareRequest.  # noqa: E501
        :rtype: str
        """
        return self._link_type

    @link_type.setter
    def link_type(self, link_type):
        """Sets the link_type of this MediaLibraryShareRequest.


        :param link_type: The link_type of this MediaLibraryShareRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                link_type is not None and len(link_type) < 1):
            raise ValueError("Invalid value for `link_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._link_type = link_type

    @property
    def password(self):
        """Gets the password of this MediaLibraryShareRequest.  # noqa: E501


        :return: The password of this MediaLibraryShareRequest.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this MediaLibraryShareRequest.


        :param password: The password of this MediaLibraryShareRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                password is not None and len(password) < 1):
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `1`")  # noqa: E501

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MediaLibraryShareRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MediaLibraryShareRequest):
            return True

        return self.to_dict() != other.to_dict()
