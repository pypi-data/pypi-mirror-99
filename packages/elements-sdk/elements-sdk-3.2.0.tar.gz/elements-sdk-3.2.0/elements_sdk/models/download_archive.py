# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class DownloadArchive(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'task_info': 'TaskInfo',
        'uncompressed_size': 'int',
        'size': 'int',
        'expires': 'str',
        'files': 'list[str]',
        'name': 'str',
        'path': 'str',
        'created_at': 'datetime',
        'progress_unit': 'int',
        'user': 'int'
    }

    attribute_map = {
        'id': 'id',
        'task_info': 'task_info',
        'uncompressed_size': 'uncompressed_size',
        'size': 'size',
        'expires': 'expires',
        'files': 'files',
        'name': 'name',
        'path': 'path',
        'created_at': 'created_at',
        'progress_unit': 'progress_unit',
        'user': 'user'
    }

    def __init__(self, id=None, task_info=None, uncompressed_size=None, size=None, expires=None, files=None, name=None, path=None, created_at=None, progress_unit=None, user=None, local_vars_configuration=None):  # noqa: E501
        """DownloadArchive - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._task_info = None
        self._uncompressed_size = None
        self._size = None
        self._expires = None
        self._files = None
        self._name = None
        self._path = None
        self._created_at = None
        self._progress_unit = None
        self._user = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.task_info = task_info
        if uncompressed_size is not None:
            self.uncompressed_size = uncompressed_size
        if size is not None:
            self.size = size
        if expires is not None:
            self.expires = expires
        if files is not None:
            self.files = files
        self.name = name
        self.path = path
        if created_at is not None:
            self.created_at = created_at
        if progress_unit is not None:
            self.progress_unit = progress_unit
        self.user = user

    @property
    def id(self):
        """Gets the id of this DownloadArchive.  # noqa: E501


        :return: The id of this DownloadArchive.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DownloadArchive.


        :param id: The id of this DownloadArchive.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def task_info(self):
        """Gets the task_info of this DownloadArchive.  # noqa: E501


        :return: The task_info of this DownloadArchive.  # noqa: E501
        :rtype: TaskInfo
        """
        return self._task_info

    @task_info.setter
    def task_info(self, task_info):
        """Sets the task_info of this DownloadArchive.


        :param task_info: The task_info of this DownloadArchive.  # noqa: E501
        :type: TaskInfo
        """
        if self.local_vars_configuration.client_side_validation and task_info is None:  # noqa: E501
            raise ValueError("Invalid value for `task_info`, must not be `None`")  # noqa: E501

        self._task_info = task_info

    @property
    def uncompressed_size(self):
        """Gets the uncompressed_size of this DownloadArchive.  # noqa: E501


        :return: The uncompressed_size of this DownloadArchive.  # noqa: E501
        :rtype: int
        """
        return self._uncompressed_size

    @uncompressed_size.setter
    def uncompressed_size(self, uncompressed_size):
        """Sets the uncompressed_size of this DownloadArchive.


        :param uncompressed_size: The uncompressed_size of this DownloadArchive.  # noqa: E501
        :type: int
        """

        self._uncompressed_size = uncompressed_size

    @property
    def size(self):
        """Gets the size of this DownloadArchive.  # noqa: E501


        :return: The size of this DownloadArchive.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this DownloadArchive.


        :param size: The size of this DownloadArchive.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def expires(self):
        """Gets the expires of this DownloadArchive.  # noqa: E501


        :return: The expires of this DownloadArchive.  # noqa: E501
        :rtype: str
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this DownloadArchive.


        :param expires: The expires of this DownloadArchive.  # noqa: E501
        :type: str
        """

        self._expires = expires

    @property
    def files(self):
        """Gets the files of this DownloadArchive.  # noqa: E501


        :return: The files of this DownloadArchive.  # noqa: E501
        :rtype: list[str]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this DownloadArchive.


        :param files: The files of this DownloadArchive.  # noqa: E501
        :type: list[str]
        """

        self._files = files

    @property
    def name(self):
        """Gets the name of this DownloadArchive.  # noqa: E501


        :return: The name of this DownloadArchive.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DownloadArchive.


        :param name: The name of this DownloadArchive.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def path(self):
        """Gets the path of this DownloadArchive.  # noqa: E501


        :return: The path of this DownloadArchive.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this DownloadArchive.


        :param path: The path of this DownloadArchive.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and path is None:  # noqa: E501
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                path is not None and len(path) > 255):
            raise ValueError("Invalid value for `path`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                path is not None and len(path) < 1):
            raise ValueError("Invalid value for `path`, length must be greater than or equal to `1`")  # noqa: E501

        self._path = path

    @property
    def created_at(self):
        """Gets the created_at of this DownloadArchive.  # noqa: E501


        :return: The created_at of this DownloadArchive.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DownloadArchive.


        :param created_at: The created_at of this DownloadArchive.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def progress_unit(self):
        """Gets the progress_unit of this DownloadArchive.  # noqa: E501


        :return: The progress_unit of this DownloadArchive.  # noqa: E501
        :rtype: int
        """
        return self._progress_unit

    @progress_unit.setter
    def progress_unit(self, progress_unit):
        """Sets the progress_unit of this DownloadArchive.


        :param progress_unit: The progress_unit of this DownloadArchive.  # noqa: E501
        :type: int
        """

        self._progress_unit = progress_unit

    @property
    def user(self):
        """Gets the user of this DownloadArchive.  # noqa: E501


        :return: The user of this DownloadArchive.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DownloadArchive.


        :param user: The user of this DownloadArchive.  # noqa: E501
        :type: int
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DownloadArchive):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DownloadArchive):
            return True

        return self.to_dict() != other.to_dict()
