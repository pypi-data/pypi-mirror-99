# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class LizardFSNode(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'node': 'StorageNodeMini',
        'host': 'str',
        'online': 'bool',
        'version': 'str',
        'chunks': 'int',
        'size_total': 'int',
        'size_used': 'int',
        'size_free': 'int',
        'chunks_for_removal': 'int',
        'label': 'str'
    }

    attribute_map = {
        'node': 'node',
        'host': 'host',
        'online': 'online',
        'version': 'version',
        'chunks': 'chunks',
        'size_total': 'size_total',
        'size_used': 'size_used',
        'size_free': 'size_free',
        'chunks_for_removal': 'chunks_for_removal',
        'label': 'label'
    }

    def __init__(self, node=None, host=None, online=None, version=None, chunks=None, size_total=None, size_used=None, size_free=None, chunks_for_removal=None, label=None, local_vars_configuration=None):  # noqa: E501
        """LizardFSNode - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._node = None
        self._host = None
        self._online = None
        self._version = None
        self._chunks = None
        self._size_total = None
        self._size_used = None
        self._size_free = None
        self._chunks_for_removal = None
        self._label = None
        self.discriminator = None

        if node is not None:
            self.node = node
        self.host = host
        self.online = online
        self.version = version
        self.chunks = chunks
        self.size_total = size_total
        self.size_used = size_used
        self.size_free = size_free
        self.chunks_for_removal = chunks_for_removal
        self.label = label

    @property
    def node(self):
        """Gets the node of this LizardFSNode.  # noqa: E501


        :return: The node of this LizardFSNode.  # noqa: E501
        :rtype: StorageNodeMini
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this LizardFSNode.


        :param node: The node of this LizardFSNode.  # noqa: E501
        :type: StorageNodeMini
        """

        self._node = node

    @property
    def host(self):
        """Gets the host of this LizardFSNode.  # noqa: E501


        :return: The host of this LizardFSNode.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this LizardFSNode.


        :param host: The host of this LizardFSNode.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and host is None:  # noqa: E501
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                host is not None and len(host) < 1):
            raise ValueError("Invalid value for `host`, length must be greater than or equal to `1`")  # noqa: E501

        self._host = host

    @property
    def online(self):
        """Gets the online of this LizardFSNode.  # noqa: E501


        :return: The online of this LizardFSNode.  # noqa: E501
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this LizardFSNode.


        :param online: The online of this LizardFSNode.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and online is None:  # noqa: E501
            raise ValueError("Invalid value for `online`, must not be `None`")  # noqa: E501

        self._online = online

    @property
    def version(self):
        """Gets the version of this LizardFSNode.  # noqa: E501


        :return: The version of this LizardFSNode.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this LizardFSNode.


        :param version: The version of this LizardFSNode.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                version is not None and len(version) < 1):
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `1`")  # noqa: E501

        self._version = version

    @property
    def chunks(self):
        """Gets the chunks of this LizardFSNode.  # noqa: E501


        :return: The chunks of this LizardFSNode.  # noqa: E501
        :rtype: int
        """
        return self._chunks

    @chunks.setter
    def chunks(self, chunks):
        """Sets the chunks of this LizardFSNode.


        :param chunks: The chunks of this LizardFSNode.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and chunks is None:  # noqa: E501
            raise ValueError("Invalid value for `chunks`, must not be `None`")  # noqa: E501

        self._chunks = chunks

    @property
    def size_total(self):
        """Gets the size_total of this LizardFSNode.  # noqa: E501


        :return: The size_total of this LizardFSNode.  # noqa: E501
        :rtype: int
        """
        return self._size_total

    @size_total.setter
    def size_total(self, size_total):
        """Sets the size_total of this LizardFSNode.


        :param size_total: The size_total of this LizardFSNode.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and size_total is None:  # noqa: E501
            raise ValueError("Invalid value for `size_total`, must not be `None`")  # noqa: E501

        self._size_total = size_total

    @property
    def size_used(self):
        """Gets the size_used of this LizardFSNode.  # noqa: E501


        :return: The size_used of this LizardFSNode.  # noqa: E501
        :rtype: int
        """
        return self._size_used

    @size_used.setter
    def size_used(self, size_used):
        """Sets the size_used of this LizardFSNode.


        :param size_used: The size_used of this LizardFSNode.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and size_used is None:  # noqa: E501
            raise ValueError("Invalid value for `size_used`, must not be `None`")  # noqa: E501

        self._size_used = size_used

    @property
    def size_free(self):
        """Gets the size_free of this LizardFSNode.  # noqa: E501


        :return: The size_free of this LizardFSNode.  # noqa: E501
        :rtype: int
        """
        return self._size_free

    @size_free.setter
    def size_free(self, size_free):
        """Sets the size_free of this LizardFSNode.


        :param size_free: The size_free of this LizardFSNode.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and size_free is None:  # noqa: E501
            raise ValueError("Invalid value for `size_free`, must not be `None`")  # noqa: E501

        self._size_free = size_free

    @property
    def chunks_for_removal(self):
        """Gets the chunks_for_removal of this LizardFSNode.  # noqa: E501


        :return: The chunks_for_removal of this LizardFSNode.  # noqa: E501
        :rtype: int
        """
        return self._chunks_for_removal

    @chunks_for_removal.setter
    def chunks_for_removal(self, chunks_for_removal):
        """Sets the chunks_for_removal of this LizardFSNode.


        :param chunks_for_removal: The chunks_for_removal of this LizardFSNode.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and chunks_for_removal is None:  # noqa: E501
            raise ValueError("Invalid value for `chunks_for_removal`, must not be `None`")  # noqa: E501

        self._chunks_for_removal = chunks_for_removal

    @property
    def label(self):
        """Gets the label of this LizardFSNode.  # noqa: E501


        :return: The label of this LizardFSNode.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this LizardFSNode.


        :param label: The label of this LizardFSNode.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and label is None:  # noqa: E501
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                label is not None and len(label) < 1):
            raise ValueError("Invalid value for `label`, length must be greater than or equal to `1`")  # noqa: E501

        self._label = label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LizardFSNode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LizardFSNode):
            return True

        return self.to_dict() != other.to_dict()
