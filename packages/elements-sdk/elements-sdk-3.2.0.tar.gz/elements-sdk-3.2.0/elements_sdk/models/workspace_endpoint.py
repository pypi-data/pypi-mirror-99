# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class WorkspaceEndpoint(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'protocol': 'str',
        'address': 'str',
        'path': 'str',
        'priority': 'int',
        'platform': 'str',
        'username': 'str',
        'password': 'str'
    }

    attribute_map = {
        'protocol': 'protocol',
        'address': 'address',
        'path': 'path',
        'priority': 'priority',
        'platform': 'platform',
        'username': 'username',
        'password': 'password'
    }

    def __init__(self, protocol=None, address=None, path=None, priority=None, platform=None, username=None, password=None, local_vars_configuration=None):  # noqa: E501
        """WorkspaceEndpoint - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._protocol = None
        self._address = None
        self._path = None
        self._priority = None
        self._platform = None
        self._username = None
        self._password = None
        self.discriminator = None

        self.protocol = protocol
        self.address = address
        self.path = path
        self.priority = priority
        self.platform = platform
        self.username = username
        self.password = password

    @property
    def protocol(self):
        """Gets the protocol of this WorkspaceEndpoint.  # noqa: E501


        :return: The protocol of this WorkspaceEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this WorkspaceEndpoint.


        :param protocol: The protocol of this WorkspaceEndpoint.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and protocol is None:  # noqa: E501
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                protocol is not None and len(protocol) < 1):
            raise ValueError("Invalid value for `protocol`, length must be greater than or equal to `1`")  # noqa: E501

        self._protocol = protocol

    @property
    def address(self):
        """Gets the address of this WorkspaceEndpoint.  # noqa: E501


        :return: The address of this WorkspaceEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this WorkspaceEndpoint.


        :param address: The address of this WorkspaceEndpoint.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and address is None:  # noqa: E501
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                address is not None and len(address) < 1):
            raise ValueError("Invalid value for `address`, length must be greater than or equal to `1`")  # noqa: E501

        self._address = address

    @property
    def path(self):
        """Gets the path of this WorkspaceEndpoint.  # noqa: E501


        :return: The path of this WorkspaceEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this WorkspaceEndpoint.


        :param path: The path of this WorkspaceEndpoint.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and path is None:  # noqa: E501
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                path is not None and len(path) < 1):
            raise ValueError("Invalid value for `path`, length must be greater than or equal to `1`")  # noqa: E501

        self._path = path

    @property
    def priority(self):
        """Gets the priority of this WorkspaceEndpoint.  # noqa: E501


        :return: The priority of this WorkspaceEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this WorkspaceEndpoint.


        :param priority: The priority of this WorkspaceEndpoint.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and priority is None:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501

        self._priority = priority

    @property
    def platform(self):
        """Gets the platform of this WorkspaceEndpoint.  # noqa: E501


        :return: The platform of this WorkspaceEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this WorkspaceEndpoint.


        :param platform: The platform of this WorkspaceEndpoint.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and platform is None:  # noqa: E501
            raise ValueError("Invalid value for `platform`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                platform is not None and len(platform) < 1):
            raise ValueError("Invalid value for `platform`, length must be greater than or equal to `1`")  # noqa: E501

        self._platform = platform

    @property
    def username(self):
        """Gets the username of this WorkspaceEndpoint.  # noqa: E501


        :return: The username of this WorkspaceEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this WorkspaceEndpoint.


        :param username: The username of this WorkspaceEndpoint.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                username is not None and len(username) < 1):
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this WorkspaceEndpoint.  # noqa: E501


        :return: The password of this WorkspaceEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this WorkspaceEndpoint.


        :param password: The password of this WorkspaceEndpoint.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and password is None:  # noqa: E501
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                password is not None and len(password) < 1):
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `1`")  # noqa: E501

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkspaceEndpoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkspaceEndpoint):
            return True

        return self.to_dict() != other.to_dict()
