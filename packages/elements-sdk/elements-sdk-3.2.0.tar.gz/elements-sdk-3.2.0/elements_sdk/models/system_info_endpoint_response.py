# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class SystemInfoEndpointResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'license': 'License',
        'client_api_version': 'int',
        'nt_hostname': 'str',
        'offers_ntp_sync': 'bool',
        'language': 'str',
        'saml_providers': 'list[SAMLProviderMini]'
    }

    attribute_map = {
        'license': 'license',
        'client_api_version': 'client_api_version',
        'nt_hostname': 'nt_hostname',
        'offers_ntp_sync': 'offers_ntp_sync',
        'language': 'language',
        'saml_providers': 'saml_providers'
    }

    def __init__(self, license=None, client_api_version=None, nt_hostname=None, offers_ntp_sync=None, language=None, saml_providers=None, local_vars_configuration=None):  # noqa: E501
        """SystemInfoEndpointResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._license = None
        self._client_api_version = None
        self._nt_hostname = None
        self._offers_ntp_sync = None
        self._language = None
        self._saml_providers = None
        self.discriminator = None

        self.license = license
        self.client_api_version = client_api_version
        self.nt_hostname = nt_hostname
        self.offers_ntp_sync = offers_ntp_sync
        self.language = language
        if saml_providers is not None:
            self.saml_providers = saml_providers

    @property
    def license(self):
        """Gets the license of this SystemInfoEndpointResponse.  # noqa: E501


        :return: The license of this SystemInfoEndpointResponse.  # noqa: E501
        :rtype: License
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this SystemInfoEndpointResponse.


        :param license: The license of this SystemInfoEndpointResponse.  # noqa: E501
        :type: License
        """
        if self.local_vars_configuration.client_side_validation and license is None:  # noqa: E501
            raise ValueError("Invalid value for `license`, must not be `None`")  # noqa: E501

        self._license = license

    @property
    def client_api_version(self):
        """Gets the client_api_version of this SystemInfoEndpointResponse.  # noqa: E501


        :return: The client_api_version of this SystemInfoEndpointResponse.  # noqa: E501
        :rtype: int
        """
        return self._client_api_version

    @client_api_version.setter
    def client_api_version(self, client_api_version):
        """Sets the client_api_version of this SystemInfoEndpointResponse.


        :param client_api_version: The client_api_version of this SystemInfoEndpointResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and client_api_version is None:  # noqa: E501
            raise ValueError("Invalid value for `client_api_version`, must not be `None`")  # noqa: E501

        self._client_api_version = client_api_version

    @property
    def nt_hostname(self):
        """Gets the nt_hostname of this SystemInfoEndpointResponse.  # noqa: E501


        :return: The nt_hostname of this SystemInfoEndpointResponse.  # noqa: E501
        :rtype: str
        """
        return self._nt_hostname

    @nt_hostname.setter
    def nt_hostname(self, nt_hostname):
        """Sets the nt_hostname of this SystemInfoEndpointResponse.


        :param nt_hostname: The nt_hostname of this SystemInfoEndpointResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and nt_hostname is None:  # noqa: E501
            raise ValueError("Invalid value for `nt_hostname`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                nt_hostname is not None and len(nt_hostname) < 1):
            raise ValueError("Invalid value for `nt_hostname`, length must be greater than or equal to `1`")  # noqa: E501

        self._nt_hostname = nt_hostname

    @property
    def offers_ntp_sync(self):
        """Gets the offers_ntp_sync of this SystemInfoEndpointResponse.  # noqa: E501


        :return: The offers_ntp_sync of this SystemInfoEndpointResponse.  # noqa: E501
        :rtype: bool
        """
        return self._offers_ntp_sync

    @offers_ntp_sync.setter
    def offers_ntp_sync(self, offers_ntp_sync):
        """Sets the offers_ntp_sync of this SystemInfoEndpointResponse.


        :param offers_ntp_sync: The offers_ntp_sync of this SystemInfoEndpointResponse.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and offers_ntp_sync is None:  # noqa: E501
            raise ValueError("Invalid value for `offers_ntp_sync`, must not be `None`")  # noqa: E501

        self._offers_ntp_sync = offers_ntp_sync

    @property
    def language(self):
        """Gets the language of this SystemInfoEndpointResponse.  # noqa: E501


        :return: The language of this SystemInfoEndpointResponse.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this SystemInfoEndpointResponse.


        :param language: The language of this SystemInfoEndpointResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and language is None:  # noqa: E501
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                language is not None and len(language) < 1):
            raise ValueError("Invalid value for `language`, length must be greater than or equal to `1`")  # noqa: E501

        self._language = language

    @property
    def saml_providers(self):
        """Gets the saml_providers of this SystemInfoEndpointResponse.  # noqa: E501


        :return: The saml_providers of this SystemInfoEndpointResponse.  # noqa: E501
        :rtype: list[SAMLProviderMini]
        """
        return self._saml_providers

    @saml_providers.setter
    def saml_providers(self, saml_providers):
        """Sets the saml_providers of this SystemInfoEndpointResponse.


        :param saml_providers: The saml_providers of this SystemInfoEndpointResponse.  # noqa: E501
        :type: list[SAMLProviderMini]
        """

        self._saml_providers = saml_providers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInfoEndpointResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SystemInfoEndpointResponse):
            return True

        return self.to_dict() != other.to_dict()
