# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class StornextManagerAttributes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'location': 'str',
        'policy_class': 'str',
        'existing_copies': 'int',
        'target_copies': 'int'
    }

    attribute_map = {
        'location': 'location',
        'policy_class': 'policy_class',
        'existing_copies': 'existing_copies',
        'target_copies': 'target_copies'
    }

    def __init__(self, location=None, policy_class=None, existing_copies=None, target_copies=None, local_vars_configuration=None):  # noqa: E501
        """StornextManagerAttributes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._location = None
        self._policy_class = None
        self._existing_copies = None
        self._target_copies = None
        self.discriminator = None

        self.location = location
        self.policy_class = policy_class
        self.existing_copies = existing_copies
        self.target_copies = target_copies

    @property
    def location(self):
        """Gets the location of this StornextManagerAttributes.  # noqa: E501


        :return: The location of this StornextManagerAttributes.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this StornextManagerAttributes.


        :param location: The location of this StornextManagerAttributes.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and location is None:  # noqa: E501
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                location is not None and len(location) < 1):
            raise ValueError("Invalid value for `location`, length must be greater than or equal to `1`")  # noqa: E501

        self._location = location

    @property
    def policy_class(self):
        """Gets the policy_class of this StornextManagerAttributes.  # noqa: E501


        :return: The policy_class of this StornextManagerAttributes.  # noqa: E501
        :rtype: str
        """
        return self._policy_class

    @policy_class.setter
    def policy_class(self, policy_class):
        """Sets the policy_class of this StornextManagerAttributes.


        :param policy_class: The policy_class of this StornextManagerAttributes.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and policy_class is None:  # noqa: E501
            raise ValueError("Invalid value for `policy_class`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                policy_class is not None and len(policy_class) < 1):
            raise ValueError("Invalid value for `policy_class`, length must be greater than or equal to `1`")  # noqa: E501

        self._policy_class = policy_class

    @property
    def existing_copies(self):
        """Gets the existing_copies of this StornextManagerAttributes.  # noqa: E501


        :return: The existing_copies of this StornextManagerAttributes.  # noqa: E501
        :rtype: int
        """
        return self._existing_copies

    @existing_copies.setter
    def existing_copies(self, existing_copies):
        """Sets the existing_copies of this StornextManagerAttributes.


        :param existing_copies: The existing_copies of this StornextManagerAttributes.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and existing_copies is None:  # noqa: E501
            raise ValueError("Invalid value for `existing_copies`, must not be `None`")  # noqa: E501

        self._existing_copies = existing_copies

    @property
    def target_copies(self):
        """Gets the target_copies of this StornextManagerAttributes.  # noqa: E501


        :return: The target_copies of this StornextManagerAttributes.  # noqa: E501
        :rtype: int
        """
        return self._target_copies

    @target_copies.setter
    def target_copies(self, target_copies):
        """Sets the target_copies of this StornextManagerAttributes.


        :param target_copies: The target_copies of this StornextManagerAttributes.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and target_copies is None:  # noqa: E501
            raise ValueError("Invalid value for `target_copies`, must not be `None`")  # noqa: E501

        self._target_copies = target_copies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StornextManagerAttributes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StornextManagerAttributes):
            return True

        return self.to_dict() != other.to_dict()
