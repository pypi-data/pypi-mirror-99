# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class FilePartialUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'files': 'list[BasicFile]',
        'parent': 'str',
        'mode': 'str',
        'uid': 'int',
        'gid': 'int',
        'user': 'str',
        'group': 'str',
        'recursive': 'bool',
        'affinity': 'str',
        'mode_setuid': 'bool',
        'mode_setgid': 'bool',
        'mode_setvfx': 'bool',
        'mode_user_read': 'bool',
        'mode_user_write': 'bool',
        'mode_user_execute': 'bool',
        'mode_group_read': 'bool',
        'mode_group_write': 'bool',
        'mode_group_execute': 'bool',
        'mode_others_read': 'bool',
        'mode_others_write': 'bool',
        'mode_others_execute': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'files': 'files',
        'parent': 'parent',
        'mode': 'mode',
        'uid': 'uid',
        'gid': 'gid',
        'user': 'user',
        'group': 'group',
        'recursive': 'recursive',
        'affinity': 'affinity',
        'mode_setuid': 'mode_setuid',
        'mode_setgid': 'mode_setgid',
        'mode_setvfx': 'mode_setvfx',
        'mode_user_read': 'mode_user_read',
        'mode_user_write': 'mode_user_write',
        'mode_user_execute': 'mode_user_execute',
        'mode_group_read': 'mode_group_read',
        'mode_group_write': 'mode_group_write',
        'mode_group_execute': 'mode_group_execute',
        'mode_others_read': 'mode_others_read',
        'mode_others_write': 'mode_others_write',
        'mode_others_execute': 'mode_others_execute'
    }

    def __init__(self, name=None, files=None, parent=None, mode=None, uid=None, gid=None, user=None, group=None, recursive=None, affinity=None, mode_setuid=None, mode_setgid=None, mode_setvfx=None, mode_user_read=None, mode_user_write=None, mode_user_execute=None, mode_group_read=None, mode_group_write=None, mode_group_execute=None, mode_others_read=None, mode_others_write=None, mode_others_execute=None, local_vars_configuration=None):  # noqa: E501
        """FilePartialUpdate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._files = None
        self._parent = None
        self._mode = None
        self._uid = None
        self._gid = None
        self._user = None
        self._group = None
        self._recursive = None
        self._affinity = None
        self._mode_setuid = None
        self._mode_setgid = None
        self._mode_setvfx = None
        self._mode_user_read = None
        self._mode_user_write = None
        self._mode_user_execute = None
        self._mode_group_read = None
        self._mode_group_write = None
        self._mode_group_execute = None
        self._mode_others_read = None
        self._mode_others_write = None
        self._mode_others_execute = None
        self.discriminator = None

        if name is not None:
            self.name = name
        self.files = files
        if parent is not None:
            self.parent = parent
        if mode is not None:
            self.mode = mode
        if uid is not None:
            self.uid = uid
        if gid is not None:
            self.gid = gid
        if user is not None:
            self.user = user
        if group is not None:
            self.group = group
        if recursive is not None:
            self.recursive = recursive
        self.affinity = affinity
        if mode_setuid is not None:
            self.mode_setuid = mode_setuid
        if mode_setgid is not None:
            self.mode_setgid = mode_setgid
        if mode_setvfx is not None:
            self.mode_setvfx = mode_setvfx
        if mode_user_read is not None:
            self.mode_user_read = mode_user_read
        if mode_user_write is not None:
            self.mode_user_write = mode_user_write
        if mode_user_execute is not None:
            self.mode_user_execute = mode_user_execute
        if mode_group_read is not None:
            self.mode_group_read = mode_group_read
        if mode_group_write is not None:
            self.mode_group_write = mode_group_write
        if mode_group_execute is not None:
            self.mode_group_execute = mode_group_execute
        if mode_others_read is not None:
            self.mode_others_read = mode_others_read
        if mode_others_write is not None:
            self.mode_others_write = mode_others_write
        if mode_others_execute is not None:
            self.mode_others_execute = mode_others_execute

    @property
    def name(self):
        """Gets the name of this FilePartialUpdate.  # noqa: E501


        :return: The name of this FilePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FilePartialUpdate.


        :param name: The name of this FilePartialUpdate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def files(self):
        """Gets the files of this FilePartialUpdate.  # noqa: E501


        :return: The files of this FilePartialUpdate.  # noqa: E501
        :rtype: list[BasicFile]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this FilePartialUpdate.


        :param files: The files of this FilePartialUpdate.  # noqa: E501
        :type: list[BasicFile]
        """

        self._files = files

    @property
    def parent(self):
        """Gets the parent of this FilePartialUpdate.  # noqa: E501


        :return: The parent of this FilePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this FilePartialUpdate.


        :param parent: The parent of this FilePartialUpdate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                parent is not None and len(parent) < 1):
            raise ValueError("Invalid value for `parent`, length must be greater than or equal to `1`")  # noqa: E501

        self._parent = parent

    @property
    def mode(self):
        """Gets the mode of this FilePartialUpdate.  # noqa: E501


        :return: The mode of this FilePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this FilePartialUpdate.


        :param mode: The mode of this FilePartialUpdate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                mode is not None and len(mode) < 1):
            raise ValueError("Invalid value for `mode`, length must be greater than or equal to `1`")  # noqa: E501

        self._mode = mode

    @property
    def uid(self):
        """Gets the uid of this FilePartialUpdate.  # noqa: E501


        :return: The uid of this FilePartialUpdate.  # noqa: E501
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this FilePartialUpdate.


        :param uid: The uid of this FilePartialUpdate.  # noqa: E501
        :type: int
        """

        self._uid = uid

    @property
    def gid(self):
        """Gets the gid of this FilePartialUpdate.  # noqa: E501


        :return: The gid of this FilePartialUpdate.  # noqa: E501
        :rtype: int
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this FilePartialUpdate.


        :param gid: The gid of this FilePartialUpdate.  # noqa: E501
        :type: int
        """

        self._gid = gid

    @property
    def user(self):
        """Gets the user of this FilePartialUpdate.  # noqa: E501


        :return: The user of this FilePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this FilePartialUpdate.


        :param user: The user of this FilePartialUpdate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                user is not None and len(user) < 1):
            raise ValueError("Invalid value for `user`, length must be greater than or equal to `1`")  # noqa: E501

        self._user = user

    @property
    def group(self):
        """Gets the group of this FilePartialUpdate.  # noqa: E501


        :return: The group of this FilePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this FilePartialUpdate.


        :param group: The group of this FilePartialUpdate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                group is not None and len(group) < 1):
            raise ValueError("Invalid value for `group`, length must be greater than or equal to `1`")  # noqa: E501

        self._group = group

    @property
    def recursive(self):
        """Gets the recursive of this FilePartialUpdate.  # noqa: E501


        :return: The recursive of this FilePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._recursive

    @recursive.setter
    def recursive(self, recursive):
        """Sets the recursive of this FilePartialUpdate.


        :param recursive: The recursive of this FilePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._recursive = recursive

    @property
    def affinity(self):
        """Gets the affinity of this FilePartialUpdate.  # noqa: E501


        :return: The affinity of this FilePartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._affinity

    @affinity.setter
    def affinity(self, affinity):
        """Sets the affinity of this FilePartialUpdate.


        :param affinity: The affinity of this FilePartialUpdate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                affinity is not None and len(affinity) < 1):
            raise ValueError("Invalid value for `affinity`, length must be greater than or equal to `1`")  # noqa: E501

        self._affinity = affinity

    @property
    def mode_setuid(self):
        """Gets the mode_setuid of this FilePartialUpdate.  # noqa: E501


        :return: The mode_setuid of this FilePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._mode_setuid

    @mode_setuid.setter
    def mode_setuid(self, mode_setuid):
        """Sets the mode_setuid of this FilePartialUpdate.


        :param mode_setuid: The mode_setuid of this FilePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._mode_setuid = mode_setuid

    @property
    def mode_setgid(self):
        """Gets the mode_setgid of this FilePartialUpdate.  # noqa: E501


        :return: The mode_setgid of this FilePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._mode_setgid

    @mode_setgid.setter
    def mode_setgid(self, mode_setgid):
        """Sets the mode_setgid of this FilePartialUpdate.


        :param mode_setgid: The mode_setgid of this FilePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._mode_setgid = mode_setgid

    @property
    def mode_setvfx(self):
        """Gets the mode_setvfx of this FilePartialUpdate.  # noqa: E501


        :return: The mode_setvfx of this FilePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._mode_setvfx

    @mode_setvfx.setter
    def mode_setvfx(self, mode_setvfx):
        """Sets the mode_setvfx of this FilePartialUpdate.


        :param mode_setvfx: The mode_setvfx of this FilePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._mode_setvfx = mode_setvfx

    @property
    def mode_user_read(self):
        """Gets the mode_user_read of this FilePartialUpdate.  # noqa: E501


        :return: The mode_user_read of this FilePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._mode_user_read

    @mode_user_read.setter
    def mode_user_read(self, mode_user_read):
        """Sets the mode_user_read of this FilePartialUpdate.


        :param mode_user_read: The mode_user_read of this FilePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._mode_user_read = mode_user_read

    @property
    def mode_user_write(self):
        """Gets the mode_user_write of this FilePartialUpdate.  # noqa: E501


        :return: The mode_user_write of this FilePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._mode_user_write

    @mode_user_write.setter
    def mode_user_write(self, mode_user_write):
        """Sets the mode_user_write of this FilePartialUpdate.


        :param mode_user_write: The mode_user_write of this FilePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._mode_user_write = mode_user_write

    @property
    def mode_user_execute(self):
        """Gets the mode_user_execute of this FilePartialUpdate.  # noqa: E501


        :return: The mode_user_execute of this FilePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._mode_user_execute

    @mode_user_execute.setter
    def mode_user_execute(self, mode_user_execute):
        """Sets the mode_user_execute of this FilePartialUpdate.


        :param mode_user_execute: The mode_user_execute of this FilePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._mode_user_execute = mode_user_execute

    @property
    def mode_group_read(self):
        """Gets the mode_group_read of this FilePartialUpdate.  # noqa: E501


        :return: The mode_group_read of this FilePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._mode_group_read

    @mode_group_read.setter
    def mode_group_read(self, mode_group_read):
        """Sets the mode_group_read of this FilePartialUpdate.


        :param mode_group_read: The mode_group_read of this FilePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._mode_group_read = mode_group_read

    @property
    def mode_group_write(self):
        """Gets the mode_group_write of this FilePartialUpdate.  # noqa: E501


        :return: The mode_group_write of this FilePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._mode_group_write

    @mode_group_write.setter
    def mode_group_write(self, mode_group_write):
        """Sets the mode_group_write of this FilePartialUpdate.


        :param mode_group_write: The mode_group_write of this FilePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._mode_group_write = mode_group_write

    @property
    def mode_group_execute(self):
        """Gets the mode_group_execute of this FilePartialUpdate.  # noqa: E501


        :return: The mode_group_execute of this FilePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._mode_group_execute

    @mode_group_execute.setter
    def mode_group_execute(self, mode_group_execute):
        """Sets the mode_group_execute of this FilePartialUpdate.


        :param mode_group_execute: The mode_group_execute of this FilePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._mode_group_execute = mode_group_execute

    @property
    def mode_others_read(self):
        """Gets the mode_others_read of this FilePartialUpdate.  # noqa: E501


        :return: The mode_others_read of this FilePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._mode_others_read

    @mode_others_read.setter
    def mode_others_read(self, mode_others_read):
        """Sets the mode_others_read of this FilePartialUpdate.


        :param mode_others_read: The mode_others_read of this FilePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._mode_others_read = mode_others_read

    @property
    def mode_others_write(self):
        """Gets the mode_others_write of this FilePartialUpdate.  # noqa: E501


        :return: The mode_others_write of this FilePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._mode_others_write

    @mode_others_write.setter
    def mode_others_write(self, mode_others_write):
        """Sets the mode_others_write of this FilePartialUpdate.


        :param mode_others_write: The mode_others_write of this FilePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._mode_others_write = mode_others_write

    @property
    def mode_others_execute(self):
        """Gets the mode_others_execute of this FilePartialUpdate.  # noqa: E501


        :return: The mode_others_execute of this FilePartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._mode_others_execute

    @mode_others_execute.setter
    def mode_others_execute(self, mode_others_execute):
        """Sets the mode_others_execute of this FilePartialUpdate.


        :param mode_others_execute: The mode_others_execute of this FilePartialUpdate.  # noqa: E501
        :type: bool
        """

        self._mode_others_execute = mode_others_execute

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilePartialUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FilePartialUpdate):
            return True

        return self.to_dict() != other.to_dict()
