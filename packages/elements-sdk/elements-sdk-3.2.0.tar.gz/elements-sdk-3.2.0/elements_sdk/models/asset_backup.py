# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class AssetBackup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'tape_file': 'TapeFile',
        'asset': 'Asset',
        'search_highlight': 'str',
        'custom_fields_snapshot': 'str'
    }

    attribute_map = {
        'id': 'id',
        'tape_file': 'tape_file',
        'asset': 'asset',
        'search_highlight': 'search_highlight',
        'custom_fields_snapshot': 'custom_fields_snapshot'
    }

    def __init__(self, id=None, tape_file=None, asset=None, search_highlight=None, custom_fields_snapshot=None, local_vars_configuration=None):  # noqa: E501
        """AssetBackup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._tape_file = None
        self._asset = None
        self._search_highlight = None
        self._custom_fields_snapshot = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if tape_file is not None:
            self.tape_file = tape_file
        if asset is not None:
            self.asset = asset
        if search_highlight is not None:
            self.search_highlight = search_highlight
        self.custom_fields_snapshot = custom_fields_snapshot

    @property
    def id(self):
        """Gets the id of this AssetBackup.  # noqa: E501


        :return: The id of this AssetBackup.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssetBackup.


        :param id: The id of this AssetBackup.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tape_file(self):
        """Gets the tape_file of this AssetBackup.  # noqa: E501


        :return: The tape_file of this AssetBackup.  # noqa: E501
        :rtype: TapeFile
        """
        return self._tape_file

    @tape_file.setter
    def tape_file(self, tape_file):
        """Sets the tape_file of this AssetBackup.


        :param tape_file: The tape_file of this AssetBackup.  # noqa: E501
        :type: TapeFile
        """

        self._tape_file = tape_file

    @property
    def asset(self):
        """Gets the asset of this AssetBackup.  # noqa: E501


        :return: The asset of this AssetBackup.  # noqa: E501
        :rtype: Asset
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this AssetBackup.


        :param asset: The asset of this AssetBackup.  # noqa: E501
        :type: Asset
        """

        self._asset = asset

    @property
    def search_highlight(self):
        """Gets the search_highlight of this AssetBackup.  # noqa: E501


        :return: The search_highlight of this AssetBackup.  # noqa: E501
        :rtype: str
        """
        return self._search_highlight

    @search_highlight.setter
    def search_highlight(self, search_highlight):
        """Sets the search_highlight of this AssetBackup.


        :param search_highlight: The search_highlight of this AssetBackup.  # noqa: E501
        :type: str
        """

        self._search_highlight = search_highlight

    @property
    def custom_fields_snapshot(self):
        """Gets the custom_fields_snapshot of this AssetBackup.  # noqa: E501


        :return: The custom_fields_snapshot of this AssetBackup.  # noqa: E501
        :rtype: str
        """
        return self._custom_fields_snapshot

    @custom_fields_snapshot.setter
    def custom_fields_snapshot(self, custom_fields_snapshot):
        """Sets the custom_fields_snapshot of this AssetBackup.


        :param custom_fields_snapshot: The custom_fields_snapshot of this AssetBackup.  # noqa: E501
        :type: str
        """

        self._custom_fields_snapshot = custom_fields_snapshot

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetBackup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetBackup):
            return True

        return self.to_dict() != other.to_dict()
