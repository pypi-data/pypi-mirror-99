# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class Volume(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'path': 'str',
        'nodes': 'list[int]',
        'display_name': 'str',
        'visual_tag': 'str',
        'is_default': 'bool',
        'use_for_homes': 'bool',
        'use_for_workspaces': 'bool',
        'type': 'str',
        'snm_enabled': 'bool',
        'snfs_name': 'str',
        'simulated_quotas': 'bool',
        'fs_properties': 'FSProperties',
        'backend': 'Backend',
        'status': 'VolumeStatus'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'path': 'path',
        'nodes': 'nodes',
        'display_name': 'display_name',
        'visual_tag': 'visual_tag',
        'is_default': 'is_default',
        'use_for_homes': 'use_for_homes',
        'use_for_workspaces': 'use_for_workspaces',
        'type': 'type',
        'snm_enabled': 'snm_enabled',
        'snfs_name': 'snfs_name',
        'simulated_quotas': 'simulated_quotas',
        'fs_properties': 'fs_properties',
        'backend': 'backend',
        'status': 'status'
    }

    def __init__(self, id=None, name=None, path=None, nodes=None, display_name=None, visual_tag=None, is_default=None, use_for_homes=None, use_for_workspaces=None, type=None, snm_enabled=None, snfs_name=None, simulated_quotas=None, fs_properties=None, backend=None, status=None, local_vars_configuration=None):  # noqa: E501
        """Volume - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._path = None
        self._nodes = None
        self._display_name = None
        self._visual_tag = None
        self._is_default = None
        self._use_for_homes = None
        self._use_for_workspaces = None
        self._type = None
        self._snm_enabled = None
        self._snfs_name = None
        self._simulated_quotas = None
        self._fs_properties = None
        self._backend = None
        self._status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        self.nodes = nodes
        if display_name is not None:
            self.display_name = display_name
        self.visual_tag = visual_tag
        if is_default is not None:
            self.is_default = is_default
        if use_for_homes is not None:
            self.use_for_homes = use_for_homes
        if use_for_workspaces is not None:
            self.use_for_workspaces = use_for_workspaces
        if type is not None:
            self.type = type
        if snm_enabled is not None:
            self.snm_enabled = snm_enabled
        self.snfs_name = snfs_name
        if simulated_quotas is not None:
            self.simulated_quotas = simulated_quotas
        if fs_properties is not None:
            self.fs_properties = fs_properties
        if backend is not None:
            self.backend = backend
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this Volume.  # noqa: E501


        :return: The id of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Volume.


        :param id: The id of this Volume.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Volume.  # noqa: E501


        :return: The name of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Volume.


        :param name: The name of this Volume.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def path(self):
        """Gets the path of this Volume.  # noqa: E501


        :return: The path of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Volume.


        :param path: The path of this Volume.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def nodes(self):
        """Gets the nodes of this Volume.  # noqa: E501


        :return: The nodes of this Volume.  # noqa: E501
        :rtype: list[int]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this Volume.


        :param nodes: The nodes of this Volume.  # noqa: E501
        :type: list[int]
        """
        if self.local_vars_configuration.client_side_validation and nodes is None:  # noqa: E501
            raise ValueError("Invalid value for `nodes`, must not be `None`")  # noqa: E501

        self._nodes = nodes

    @property
    def display_name(self):
        """Gets the display_name of this Volume.  # noqa: E501


        :return: The display_name of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Volume.


        :param display_name: The display_name of this Volume.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                display_name is not None and len(display_name) > 255):
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                display_name is not None and len(display_name) < 1):
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._display_name = display_name

    @property
    def visual_tag(self):
        """Gets the visual_tag of this Volume.  # noqa: E501


        :return: The visual_tag of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._visual_tag

    @visual_tag.setter
    def visual_tag(self, visual_tag):
        """Sets the visual_tag of this Volume.


        :param visual_tag: The visual_tag of this Volume.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                visual_tag is not None and len(visual_tag) > 255):
            raise ValueError("Invalid value for `visual_tag`, length must be less than or equal to `255`")  # noqa: E501

        self._visual_tag = visual_tag

    @property
    def is_default(self):
        """Gets the is_default of this Volume.  # noqa: E501


        :return: The is_default of this Volume.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this Volume.


        :param is_default: The is_default of this Volume.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def use_for_homes(self):
        """Gets the use_for_homes of this Volume.  # noqa: E501


        :return: The use_for_homes of this Volume.  # noqa: E501
        :rtype: bool
        """
        return self._use_for_homes

    @use_for_homes.setter
    def use_for_homes(self, use_for_homes):
        """Sets the use_for_homes of this Volume.


        :param use_for_homes: The use_for_homes of this Volume.  # noqa: E501
        :type: bool
        """

        self._use_for_homes = use_for_homes

    @property
    def use_for_workspaces(self):
        """Gets the use_for_workspaces of this Volume.  # noqa: E501


        :return: The use_for_workspaces of this Volume.  # noqa: E501
        :rtype: bool
        """
        return self._use_for_workspaces

    @use_for_workspaces.setter
    def use_for_workspaces(self, use_for_workspaces):
        """Sets the use_for_workspaces of this Volume.


        :param use_for_workspaces: The use_for_workspaces of this Volume.  # noqa: E501
        :type: bool
        """

        self._use_for_workspaces = use_for_workspaces

    @property
    def type(self):
        """Gets the type of this Volume.  # noqa: E501


        :return: The type of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Volume.


        :param type: The type of this Volume.  # noqa: E501
        :type: str
        """
        allowed_values = ["generic", "generic-mount", "snfs", "btrfs", "s3fs", "lizardfs", "bcachefs", "isilon", "beegfs"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def snm_enabled(self):
        """Gets the snm_enabled of this Volume.  # noqa: E501


        :return: The snm_enabled of this Volume.  # noqa: E501
        :rtype: bool
        """
        return self._snm_enabled

    @snm_enabled.setter
    def snm_enabled(self, snm_enabled):
        """Sets the snm_enabled of this Volume.


        :param snm_enabled: The snm_enabled of this Volume.  # noqa: E501
        :type: bool
        """

        self._snm_enabled = snm_enabled

    @property
    def snfs_name(self):
        """Gets the snfs_name of this Volume.  # noqa: E501


        :return: The snfs_name of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._snfs_name

    @snfs_name.setter
    def snfs_name(self, snfs_name):
        """Sets the snfs_name of this Volume.


        :param snfs_name: The snfs_name of this Volume.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                snfs_name is not None and len(snfs_name) > 255):
            raise ValueError("Invalid value for `snfs_name`, length must be less than or equal to `255`")  # noqa: E501

        self._snfs_name = snfs_name

    @property
    def simulated_quotas(self):
        """Gets the simulated_quotas of this Volume.  # noqa: E501


        :return: The simulated_quotas of this Volume.  # noqa: E501
        :rtype: bool
        """
        return self._simulated_quotas

    @simulated_quotas.setter
    def simulated_quotas(self, simulated_quotas):
        """Sets the simulated_quotas of this Volume.


        :param simulated_quotas: The simulated_quotas of this Volume.  # noqa: E501
        :type: bool
        """

        self._simulated_quotas = simulated_quotas

    @property
    def fs_properties(self):
        """Gets the fs_properties of this Volume.  # noqa: E501


        :return: The fs_properties of this Volume.  # noqa: E501
        :rtype: FSProperties
        """
        return self._fs_properties

    @fs_properties.setter
    def fs_properties(self, fs_properties):
        """Sets the fs_properties of this Volume.


        :param fs_properties: The fs_properties of this Volume.  # noqa: E501
        :type: FSProperties
        """

        self._fs_properties = fs_properties

    @property
    def backend(self):
        """Gets the backend of this Volume.  # noqa: E501


        :return: The backend of this Volume.  # noqa: E501
        :rtype: Backend
        """
        return self._backend

    @backend.setter
    def backend(self, backend):
        """Sets the backend of this Volume.


        :param backend: The backend of this Volume.  # noqa: E501
        :type: Backend
        """

        self._backend = backend

    @property
    def status(self):
        """Gets the status of this Volume.  # noqa: E501


        :return: The status of this Volume.  # noqa: E501
        :rtype: VolumeStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Volume.


        :param status: The status of this Volume.  # noqa: E501
        :type: VolumeStatus
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Volume):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Volume):
            return True

        return self.to_dict() != other.to_dict()
