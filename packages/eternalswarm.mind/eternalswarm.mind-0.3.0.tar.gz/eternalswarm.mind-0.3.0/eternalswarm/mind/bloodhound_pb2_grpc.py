# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import bloodhound_pb2 as bloodhound__pb2
from . import models_pb2 as models__pb2
from . import scanner_pb2 as scanner__pb2


class BloodHoundStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunBloodHound = channel.unary_unary(
                '/BloodHound/RunBloodHound',
                request_serializer=bloodhound__pb2.BloodHoundRequest.SerializeToString,
                response_deserializer=bloodhound__pb2.BloodHoundRun.FromString,
                )
        self.ListBloodHoundRuns = channel.unary_unary(
                '/BloodHound/ListBloodHoundRuns',
                request_serializer=models__pb2.Pagination.SerializeToString,
                response_deserializer=bloodhound__pb2.BloodHoundRunList.FromString,
                )
        self.GetBloodHoundRun = channel.unary_unary(
                '/BloodHound/GetBloodHoundRun',
                request_serializer=scanner__pb2.GetRequest.SerializeToString,
                response_deserializer=bloodhound__pb2.BloodHoundRun.FromString,
                )
        self.ListBloodHoundCollectionMethods = channel.unary_unary(
                '/BloodHound/ListBloodHoundCollectionMethods',
                request_serializer=models__pb2.EmptyRequest.SerializeToString,
                response_deserializer=bloodhound__pb2.CollectionMethods.FromString,
                )
        self.LocalAdminsForUser = channel.unary_unary(
                '/BloodHound/LocalAdminsForUser',
                request_serializer=bloodhound__pb2.BloodHoundRequest.SerializeToString,
                response_deserializer=models__pb2.HostList.FromString,
                )
        self.LocalAdminsForGroup = channel.unary_unary(
                '/BloodHound/LocalAdminsForGroup',
                request_serializer=bloodhound__pb2.BloodHoundRequest.SerializeToString,
                response_deserializer=models__pb2.HostList.FromString,
                )


class BloodHoundServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RunBloodHound(self, request, context):
        """New BloodHound functions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBloodHoundRuns(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBloodHoundRun(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBloodHoundCollectionMethods(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LocalAdminsForUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LocalAdminsForGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BloodHoundServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RunBloodHound': grpc.unary_unary_rpc_method_handler(
                    servicer.RunBloodHound,
                    request_deserializer=bloodhound__pb2.BloodHoundRequest.FromString,
                    response_serializer=bloodhound__pb2.BloodHoundRun.SerializeToString,
            ),
            'ListBloodHoundRuns': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBloodHoundRuns,
                    request_deserializer=models__pb2.Pagination.FromString,
                    response_serializer=bloodhound__pb2.BloodHoundRunList.SerializeToString,
            ),
            'GetBloodHoundRun': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBloodHoundRun,
                    request_deserializer=scanner__pb2.GetRequest.FromString,
                    response_serializer=bloodhound__pb2.BloodHoundRun.SerializeToString,
            ),
            'ListBloodHoundCollectionMethods': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBloodHoundCollectionMethods,
                    request_deserializer=models__pb2.EmptyRequest.FromString,
                    response_serializer=bloodhound__pb2.CollectionMethods.SerializeToString,
            ),
            'LocalAdminsForUser': grpc.unary_unary_rpc_method_handler(
                    servicer.LocalAdminsForUser,
                    request_deserializer=bloodhound__pb2.BloodHoundRequest.FromString,
                    response_serializer=models__pb2.HostList.SerializeToString,
            ),
            'LocalAdminsForGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.LocalAdminsForGroup,
                    request_deserializer=bloodhound__pb2.BloodHoundRequest.FromString,
                    response_serializer=models__pb2.HostList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BloodHound', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BloodHound(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RunBloodHound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BloodHound/RunBloodHound',
            bloodhound__pb2.BloodHoundRequest.SerializeToString,
            bloodhound__pb2.BloodHoundRun.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBloodHoundRuns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BloodHound/ListBloodHoundRuns',
            models__pb2.Pagination.SerializeToString,
            bloodhound__pb2.BloodHoundRunList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBloodHoundRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BloodHound/GetBloodHoundRun',
            scanner__pb2.GetRequest.SerializeToString,
            bloodhound__pb2.BloodHoundRun.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBloodHoundCollectionMethods(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BloodHound/ListBloodHoundCollectionMethods',
            models__pb2.EmptyRequest.SerializeToString,
            bloodhound__pb2.CollectionMethods.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LocalAdminsForUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BloodHound/LocalAdminsForUser',
            bloodhound__pb2.BloodHoundRequest.SerializeToString,
            models__pb2.HostList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LocalAdminsForGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BloodHound/LocalAdminsForGroup',
            bloodhound__pb2.BloodHoundRequest.SerializeToString,
            models__pb2.HostList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
