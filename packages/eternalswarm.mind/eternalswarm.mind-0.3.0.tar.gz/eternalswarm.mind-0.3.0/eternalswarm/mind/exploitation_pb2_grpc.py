# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import exploitation_pb2 as exploitation__pb2
from . import models_pb2 as models__pb2


class ExploitServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PerformExploit = channel.unary_unary(
                '/ExploitService/PerformExploit',
                request_serializer=exploitation__pb2.ExploitRequest.SerializeToString,
                response_deserializer=models__pb2.Exploit.FromString,
                )
        self.PerformLoot = channel.unary_unary(
                '/ExploitService/PerformLoot',
                request_serializer=exploitation__pb2.LootRequest.SerializeToString,
                response_deserializer=models__pb2.Loot.FromString,
                )
        self.PerformMultipleLoot = channel.unary_unary(
                '/ExploitService/PerformMultipleLoot',
                request_serializer=exploitation__pb2.LootRequest.SerializeToString,
                response_deserializer=models__pb2.LootList.FromString,
                )
        self.CheckAccess = channel.unary_unary(
                '/ExploitService/CheckAccess',
                request_serializer=exploitation__pb2.AccessRequest.SerializeToString,
                response_deserializer=models__pb2.Access.FromString,
                )
        self.CheckMultipleAccess = channel.unary_unary(
                '/ExploitService/CheckMultipleAccess',
                request_serializer=exploitation__pb2.AccessRequest.SerializeToString,
                response_deserializer=models__pb2.AccessList.FromString,
                )
        self.ListLootModules = channel.unary_unary(
                '/ExploitService/ListLootModules',
                request_serializer=models__pb2.EmptyRequest.SerializeToString,
                response_deserializer=models__pb2.LootModuleList.FromString,
                )
        self.ListLoginModules = channel.unary_unary(
                '/ExploitService/ListLoginModules',
                request_serializer=models__pb2.EmptyRequest.SerializeToString,
                response_deserializer=models__pb2.LoginModuleList.FromString,
                )
        self.CancelLoot = channel.unary_unary(
                '/ExploitService/CancelLoot',
                request_serializer=exploitation__pb2.CancelRequest.SerializeToString,
                response_deserializer=models__pb2.EmptyMessage.FromString,
                )
        self.CancelExploit = channel.unary_unary(
                '/ExploitService/CancelExploit',
                request_serializer=exploitation__pb2.CancelRequest.SerializeToString,
                response_deserializer=models__pb2.EmptyMessage.FromString,
                )
        self.IndexDirectory = channel.unary_unary(
                '/ExploitService/IndexDirectory',
                request_serializer=exploitation__pb2.IndexRequest.SerializeToString,
                response_deserializer=models__pb2.EmptyMessage.FromString,
                )
        self.DownloadFile = channel.unary_unary(
                '/ExploitService/DownloadFile',
                request_serializer=exploitation__pb2.DownloadRequest.SerializeToString,
                response_deserializer=models__pb2.EmptyMessage.FromString,
                )
        self.DownloadMultipleFiles = channel.unary_unary(
                '/ExploitService/DownloadMultipleFiles',
                request_serializer=exploitation__pb2.MultiDownloadRequest.SerializeToString,
                response_deserializer=models__pb2.CountMessage.FromString,
                )
        self.ParseFiles = channel.unary_unary(
                '/ExploitService/ParseFiles',
                request_serializer=exploitation__pb2.MultiParseRequest.SerializeToString,
                response_deserializer=models__pb2.CountMessage.FromString,
                )
        self.CreatePasswordSpray = channel.unary_unary(
                '/ExploitService/CreatePasswordSpray',
                request_serializer=models__pb2.PasswordSpray.SerializeToString,
                response_deserializer=models__pb2.PasswordSpray.FromString,
                )
        self.StartPasswordSpray = channel.unary_unary(
                '/ExploitService/StartPasswordSpray',
                request_serializer=models__pb2.PasswordSpray.SerializeToString,
                response_deserializer=models__pb2.PasswordSpray.FromString,
                )
        self.ModifyPasswordSpray = channel.unary_unary(
                '/ExploitService/ModifyPasswordSpray',
                request_serializer=models__pb2.PasswordSpray.SerializeToString,
                response_deserializer=models__pb2.PasswordSpray.FromString,
                )
        self.ModifyPasswordSprayRun = channel.unary_unary(
                '/ExploitService/ModifyPasswordSprayRun',
                request_serializer=models__pb2.PasswordSprayRun.SerializeToString,
                response_deserializer=models__pb2.PasswordSprayRun.FromString,
                )
        self.CancelPasswordSpray = channel.unary_unary(
                '/ExploitService/CancelPasswordSpray',
                request_serializer=models__pb2.PasswordSpray.SerializeToString,
                response_deserializer=models__pb2.PasswordSpray.FromString,
                )
        self.DeletePasswordSprayUser = channel.unary_unary(
                '/ExploitService/DeletePasswordSprayUser',
                request_serializer=models__pb2.PasswordSprayUser.SerializeToString,
                response_deserializer=models__pb2.EmptyMessage.FromString,
                )
        self.AddPasswordSprayUser = channel.unary_unary(
                '/ExploitService/AddPasswordSprayUser',
                request_serializer=models__pb2.PasswordSprayUser.SerializeToString,
                response_deserializer=models__pb2.PasswordSprayUser.FromString,
                )
        self.DeletePasswordSprayRun = channel.unary_unary(
                '/ExploitService/DeletePasswordSprayRun',
                request_serializer=models__pb2.PasswordSprayRun.SerializeToString,
                response_deserializer=models__pb2.EmptyMessage.FromString,
                )
        self.AddPasswordSprayRun = channel.unary_unary(
                '/ExploitService/AddPasswordSprayRun',
                request_serializer=models__pb2.PasswordSprayRun.SerializeToString,
                response_deserializer=models__pb2.PasswordSprayRun.FromString,
                )


class ExploitServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PerformExploit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformLoot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformMultipleLoot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckMultipleAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListLootModules(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListLoginModules(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelLoot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelExploit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IndexDirectory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadMultipleFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ParseFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePasswordSpray(self, request, context):
        """Password spraying related calls
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartPasswordSpray(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModifyPasswordSpray(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModifyPasswordSprayRun(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelPasswordSpray(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePasswordSprayUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddPasswordSprayUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePasswordSprayRun(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddPasswordSprayRun(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExploitServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PerformExploit': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformExploit,
                    request_deserializer=exploitation__pb2.ExploitRequest.FromString,
                    response_serializer=models__pb2.Exploit.SerializeToString,
            ),
            'PerformLoot': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformLoot,
                    request_deserializer=exploitation__pb2.LootRequest.FromString,
                    response_serializer=models__pb2.Loot.SerializeToString,
            ),
            'PerformMultipleLoot': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformMultipleLoot,
                    request_deserializer=exploitation__pb2.LootRequest.FromString,
                    response_serializer=models__pb2.LootList.SerializeToString,
            ),
            'CheckAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckAccess,
                    request_deserializer=exploitation__pb2.AccessRequest.FromString,
                    response_serializer=models__pb2.Access.SerializeToString,
            ),
            'CheckMultipleAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckMultipleAccess,
                    request_deserializer=exploitation__pb2.AccessRequest.FromString,
                    response_serializer=models__pb2.AccessList.SerializeToString,
            ),
            'ListLootModules': grpc.unary_unary_rpc_method_handler(
                    servicer.ListLootModules,
                    request_deserializer=models__pb2.EmptyRequest.FromString,
                    response_serializer=models__pb2.LootModuleList.SerializeToString,
            ),
            'ListLoginModules': grpc.unary_unary_rpc_method_handler(
                    servicer.ListLoginModules,
                    request_deserializer=models__pb2.EmptyRequest.FromString,
                    response_serializer=models__pb2.LoginModuleList.SerializeToString,
            ),
            'CancelLoot': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelLoot,
                    request_deserializer=exploitation__pb2.CancelRequest.FromString,
                    response_serializer=models__pb2.EmptyMessage.SerializeToString,
            ),
            'CancelExploit': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelExploit,
                    request_deserializer=exploitation__pb2.CancelRequest.FromString,
                    response_serializer=models__pb2.EmptyMessage.SerializeToString,
            ),
            'IndexDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.IndexDirectory,
                    request_deserializer=exploitation__pb2.IndexRequest.FromString,
                    response_serializer=models__pb2.EmptyMessage.SerializeToString,
            ),
            'DownloadFile': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadFile,
                    request_deserializer=exploitation__pb2.DownloadRequest.FromString,
                    response_serializer=models__pb2.EmptyMessage.SerializeToString,
            ),
            'DownloadMultipleFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadMultipleFiles,
                    request_deserializer=exploitation__pb2.MultiDownloadRequest.FromString,
                    response_serializer=models__pb2.CountMessage.SerializeToString,
            ),
            'ParseFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ParseFiles,
                    request_deserializer=exploitation__pb2.MultiParseRequest.FromString,
                    response_serializer=models__pb2.CountMessage.SerializeToString,
            ),
            'CreatePasswordSpray': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePasswordSpray,
                    request_deserializer=models__pb2.PasswordSpray.FromString,
                    response_serializer=models__pb2.PasswordSpray.SerializeToString,
            ),
            'StartPasswordSpray': grpc.unary_unary_rpc_method_handler(
                    servicer.StartPasswordSpray,
                    request_deserializer=models__pb2.PasswordSpray.FromString,
                    response_serializer=models__pb2.PasswordSpray.SerializeToString,
            ),
            'ModifyPasswordSpray': grpc.unary_unary_rpc_method_handler(
                    servicer.ModifyPasswordSpray,
                    request_deserializer=models__pb2.PasswordSpray.FromString,
                    response_serializer=models__pb2.PasswordSpray.SerializeToString,
            ),
            'ModifyPasswordSprayRun': grpc.unary_unary_rpc_method_handler(
                    servicer.ModifyPasswordSprayRun,
                    request_deserializer=models__pb2.PasswordSprayRun.FromString,
                    response_serializer=models__pb2.PasswordSprayRun.SerializeToString,
            ),
            'CancelPasswordSpray': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelPasswordSpray,
                    request_deserializer=models__pb2.PasswordSpray.FromString,
                    response_serializer=models__pb2.PasswordSpray.SerializeToString,
            ),
            'DeletePasswordSprayUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePasswordSprayUser,
                    request_deserializer=models__pb2.PasswordSprayUser.FromString,
                    response_serializer=models__pb2.EmptyMessage.SerializeToString,
            ),
            'AddPasswordSprayUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AddPasswordSprayUser,
                    request_deserializer=models__pb2.PasswordSprayUser.FromString,
                    response_serializer=models__pb2.PasswordSprayUser.SerializeToString,
            ),
            'DeletePasswordSprayRun': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePasswordSprayRun,
                    request_deserializer=models__pb2.PasswordSprayRun.FromString,
                    response_serializer=models__pb2.EmptyMessage.SerializeToString,
            ),
            'AddPasswordSprayRun': grpc.unary_unary_rpc_method_handler(
                    servicer.AddPasswordSprayRun,
                    request_deserializer=models__pb2.PasswordSprayRun.FromString,
                    response_serializer=models__pb2.PasswordSprayRun.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ExploitService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExploitService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PerformExploit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/PerformExploit',
            exploitation__pb2.ExploitRequest.SerializeToString,
            models__pb2.Exploit.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PerformLoot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/PerformLoot',
            exploitation__pb2.LootRequest.SerializeToString,
            models__pb2.Loot.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PerformMultipleLoot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/PerformMultipleLoot',
            exploitation__pb2.LootRequest.SerializeToString,
            models__pb2.LootList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/CheckAccess',
            exploitation__pb2.AccessRequest.SerializeToString,
            models__pb2.Access.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckMultipleAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/CheckMultipleAccess',
            exploitation__pb2.AccessRequest.SerializeToString,
            models__pb2.AccessList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListLootModules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/ListLootModules',
            models__pb2.EmptyRequest.SerializeToString,
            models__pb2.LootModuleList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListLoginModules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/ListLoginModules',
            models__pb2.EmptyRequest.SerializeToString,
            models__pb2.LoginModuleList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelLoot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/CancelLoot',
            exploitation__pb2.CancelRequest.SerializeToString,
            models__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelExploit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/CancelExploit',
            exploitation__pb2.CancelRequest.SerializeToString,
            models__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IndexDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/IndexDirectory',
            exploitation__pb2.IndexRequest.SerializeToString,
            models__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/DownloadFile',
            exploitation__pb2.DownloadRequest.SerializeToString,
            models__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadMultipleFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/DownloadMultipleFiles',
            exploitation__pb2.MultiDownloadRequest.SerializeToString,
            models__pb2.CountMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ParseFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/ParseFiles',
            exploitation__pb2.MultiParseRequest.SerializeToString,
            models__pb2.CountMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreatePasswordSpray(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/CreatePasswordSpray',
            models__pb2.PasswordSpray.SerializeToString,
            models__pb2.PasswordSpray.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartPasswordSpray(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/StartPasswordSpray',
            models__pb2.PasswordSpray.SerializeToString,
            models__pb2.PasswordSpray.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModifyPasswordSpray(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/ModifyPasswordSpray',
            models__pb2.PasswordSpray.SerializeToString,
            models__pb2.PasswordSpray.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModifyPasswordSprayRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/ModifyPasswordSprayRun',
            models__pb2.PasswordSprayRun.SerializeToString,
            models__pb2.PasswordSprayRun.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelPasswordSpray(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/CancelPasswordSpray',
            models__pb2.PasswordSpray.SerializeToString,
            models__pb2.PasswordSpray.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeletePasswordSprayUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/DeletePasswordSprayUser',
            models__pb2.PasswordSprayUser.SerializeToString,
            models__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddPasswordSprayUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/AddPasswordSprayUser',
            models__pb2.PasswordSprayUser.SerializeToString,
            models__pb2.PasswordSprayUser.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeletePasswordSprayRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/DeletePasswordSprayRun',
            models__pb2.PasswordSprayRun.SerializeToString,
            models__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddPasswordSprayRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExploitService/AddPasswordSprayRun',
            models__pb2.PasswordSprayRun.SerializeToString,
            models__pb2.PasswordSprayRun.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
