# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import cracker_pb2 as cracker__pb2


class CrackingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/main.CrackingService/Ping',
                request_serializer=cracker__pb2.PingMessage.SerializeToString,
                response_deserializer=cracker__pb2.PingMessage.FromString,
                )
        self.GetLists = channel.unary_unary(
                '/main.CrackingService/GetLists',
                request_serializer=cracker__pb2.EmptyMessage.SerializeToString,
                response_deserializer=cracker__pb2.Lists.FromString,
                )
        self.AddJob = channel.unary_unary(
                '/main.CrackingService/AddJob',
                request_serializer=cracker__pb2.Job.SerializeToString,
                response_deserializer=cracker__pb2.Job.FromString,
                )
        self.AddHashes = channel.stream_unary(
                '/main.CrackingService/AddHashes',
                request_serializer=cracker__pb2.Hash.SerializeToString,
                response_deserializer=cracker__pb2.Job.FromString,
                )
        self.StartJob = channel.unary_unary(
                '/main.CrackingService/StartJob',
                request_serializer=cracker__pb2.Job.SerializeToString,
                response_deserializer=cracker__pb2.Job.FromString,
                )
        self.ListJobs = channel.unary_unary(
                '/main.CrackingService/ListJobs',
                request_serializer=cracker__pb2.JobPagination.SerializeToString,
                response_deserializer=cracker__pb2.JobList.FromString,
                )
        self.GetJob = channel.unary_unary(
                '/main.CrackingService/GetJob',
                request_serializer=cracker__pb2.Job.SerializeToString,
                response_deserializer=cracker__pb2.Job.FromString,
                )
        self.GetResults = channel.unary_stream(
                '/main.CrackingService/GetResults',
                request_serializer=cracker__pb2.Job.SerializeToString,
                response_deserializer=cracker__pb2.Result.FromString,
                )


class CrackingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddHashes(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListJobs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResults(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CrackingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=cracker__pb2.PingMessage.FromString,
                    response_serializer=cracker__pb2.PingMessage.SerializeToString,
            ),
            'GetLists': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLists,
                    request_deserializer=cracker__pb2.EmptyMessage.FromString,
                    response_serializer=cracker__pb2.Lists.SerializeToString,
            ),
            'AddJob': grpc.unary_unary_rpc_method_handler(
                    servicer.AddJob,
                    request_deserializer=cracker__pb2.Job.FromString,
                    response_serializer=cracker__pb2.Job.SerializeToString,
            ),
            'AddHashes': grpc.stream_unary_rpc_method_handler(
                    servicer.AddHashes,
                    request_deserializer=cracker__pb2.Hash.FromString,
                    response_serializer=cracker__pb2.Job.SerializeToString,
            ),
            'StartJob': grpc.unary_unary_rpc_method_handler(
                    servicer.StartJob,
                    request_deserializer=cracker__pb2.Job.FromString,
                    response_serializer=cracker__pb2.Job.SerializeToString,
            ),
            'ListJobs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListJobs,
                    request_deserializer=cracker__pb2.JobPagination.FromString,
                    response_serializer=cracker__pb2.JobList.SerializeToString,
            ),
            'GetJob': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJob,
                    request_deserializer=cracker__pb2.Job.FromString,
                    response_serializer=cracker__pb2.Job.SerializeToString,
            ),
            'GetResults': grpc.unary_stream_rpc_method_handler(
                    servicer.GetResults,
                    request_deserializer=cracker__pb2.Job.FromString,
                    response_serializer=cracker__pb2.Result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'main.CrackingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CrackingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.CrackingService/Ping',
            cracker__pb2.PingMessage.SerializeToString,
            cracker__pb2.PingMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.CrackingService/GetLists',
            cracker__pb2.EmptyMessage.SerializeToString,
            cracker__pb2.Lists.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.CrackingService/AddJob',
            cracker__pb2.Job.SerializeToString,
            cracker__pb2.Job.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddHashes(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/main.CrackingService/AddHashes',
            cracker__pb2.Hash.SerializeToString,
            cracker__pb2.Job.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.CrackingService/StartJob',
            cracker__pb2.Job.SerializeToString,
            cracker__pb2.Job.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListJobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.CrackingService/ListJobs',
            cracker__pb2.JobPagination.SerializeToString,
            cracker__pb2.JobList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.CrackingService/GetJob',
            cracker__pb2.Job.SerializeToString,
            cracker__pb2.Job.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/main.CrackingService/GetResults',
            cracker__pb2.Job.SerializeToString,
            cracker__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
