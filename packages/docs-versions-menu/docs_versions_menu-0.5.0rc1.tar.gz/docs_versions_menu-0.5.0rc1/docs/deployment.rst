==================
Step 2: Deployment
==================

The Docs-Versions-Menu package includes a ``docs-versions-menu``
executable. This executable should be run in the root of the *deployed*
documentation. That is, the root of the ``gh-pages`` branch when using
`Github Pages`_.

The main purpose of the ``docs-versions-menu`` command is to generate the
``versions.json`` file that the :ref:`Sphinx extension <sphinx_extension>`
relies on, in the root of the deployed documentation.


.. _deployment-with-github-actions:

Deployment with Github Actions
------------------------------

For projects on Github, using `Github Actions`_ to deploy to `Github Pages`_ is
the best-supported option without any external dependencies. Set up your
workflow_ with the following steps:

* Build the documentation, zip the resulting html and upload it as an artifact
* In a second job within the same workflow:

  - Check out the ``gh-pages`` branch
  - Download the artifact generated by the first job and unpack it to a temporary location
  - Synchronize the unpacked html files with the appropriate subfolder within the ``gh-pages`` branch
  - Run the ``doctr-versions-menu`` command
  - Commit and push the changes.

A Github action is automatically authenticated to upload/download artifacts and to have push-access to the underlying repository.

`See docs-versions-menu's own workflow file for an example. <https://github.com/goerz/docs_versions_menu/blob/master/.github/workflows/docs.yml>`_



Deployment with Travis and Doctr
--------------------------------


When using Travis_ to deploy to `Github Pages`_ via Doctr_, the
``docs-versions-menu`` command should be invoked through
|docs_deploy_command_flag|_.  As the explicit purpose of Docs-Versions-Menu
is to enable documentation for multiple versions of a package at the same time,
you'll likely want to invoke ``doctr deploy`` also with the
|no_require_master_flag|_ and |build_tags_flag|_ options.

.. |docs_deploy_command_flag| replace:: ``doctr deploy``'s ``--command`` flag
.. _docs_deploy_command_flag: https://drdoctr.github.io/commandline.html#cmdoption-doctr-deploy-command

.. |no_require_master_flag| replace:: ``--no-required-master``
.. _no_require_master_flag: https://drdoctr.github.io/commandline.html#cmdoption-doctr-deploy-no-require-master

.. |build_tags_flag| replace:: ``--build-tags``
.. _build_tags_flag: https://drdoctr.github.io/commandline.html#cmdoption-doctr-deploy-build-tags

For example, your ``.travis.yml`` file might include the following
for deploying previously built documentation:

.. code-block:: shell

    if [ ! -z "$TRAVIS_TAG" ]; then DEPLOY_DIR="$TRAVIS_TAG"; else DEPLOY_DIR="$TRAVIS_BRANCH"; fi

    doctr deploy --command=docs-versions-menu --no-require-master --build-tags "$DEPLOY_DIR"

.. note::

    Originally, ``docs-versions-menu`` was named ``doctr-versions-menu`` and
    targeted the above workflow. However, as of 2021, Travis no longer provides
    free services to open source projects and should be avoided.


Deployment to a static webhost
------------------------------

When deploying the documentation not to `Github Pages`_, but directly to a
static webhost, you will likely want to invoke rsync_ in your continuous
integration (e.g., `Github Actions`_ workflow) to upload the documentation to
the appropriate subfolder in the server's webroot. After the call to ``rsync``,
invoke the ``docs-versions-menu`` executable to run in the root of the deployed
documentation, via ``ssh``.


Interactive maintenance
-----------------------

Unless :option:`--no-write-versions-py <docs-versions-menu
--no-write-versions-py>` is given or
``DOCS_VERSIONS_MENU_WRITE_VERSIONS_PY=false`` is set, running
``docs-versions-menu`` will generate a script ``versions.py``. Running this
script again installs the Docs-Versions-Menu package into a temporary virtual
environment and runs ``docs-versions-menu`` with the same options that created
``versions.py`` in the first place.

The intent behind this is to allow for for manual, interactive maintenance, on
the ``gh-pages`` branch or in the server's webroot. For example, you may
occasionally want to remove folders for outdated branches or pre-releases from
the ``gh-pages`` branch, or update existing download links. After any such
change, run the ``versions.py`` script to updates ``versions.json``.

Remember that each folder on the ``gh-pages`` branch generally contains its own
``docs-versions-menu.js`` script. Switching a project to a new major version
of ``docs-versions-menu``, if that version changes the internal data structure of
``versions.json``, may require updating the ``docs-versions-menu.js`` script
in existing folders by hand.

.. _Travis: https://travis-ci.org
.. _Doctr: https://drdoctr.github.io
.. _Github Actions: https://github.com/features/actions
.. _Github Pages: https://pages.github.com
.. _workflow: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
.. _rsync: https://en.wikipedia.org/wiki/Rsync
