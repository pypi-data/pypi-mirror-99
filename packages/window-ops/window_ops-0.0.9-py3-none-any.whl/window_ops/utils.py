# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/utils.ipynb (unless otherwise specified).

__all__ = ['first_not_na']

# Internal Cell
from math import sqrt
from typing import Optional, Tuple

import numpy as np
from numba import njit  # type: ignore

# Internal Cell
@njit
def _validate_rolling_sizes(n_samples: int,
                            window_size: int,
                            min_samples: Optional[int] = None) -> Tuple[int,int]:
    if window_size > n_samples:
        window_size = n_samples
    # have to split the following if because of numba
    if min_samples is None:
        min_samples = window_size
    if min_samples > window_size:
        min_samples = window_size
    return window_size, min_samples

@njit
def _gt(x: float, y: float) -> float:
    return x - y

@njit
def _lt(x: float, y: float) -> float:
    return -_gt(x, y)

# Cell
@njit
def first_not_na(input_array: np.ndarray) -> int:
    """Returns the index of the first non-na value in the array."""
    for index, element in enumerate(input_array):
        if not np.isnan(element):
            return index
    return input_array.size