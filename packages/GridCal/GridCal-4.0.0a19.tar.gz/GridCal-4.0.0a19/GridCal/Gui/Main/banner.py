# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'banner.ui'
##
## Created by: Qt User Interface Compiler version 5.15.0
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide2.QtCore import (QCoreApplication, QDate, QDateTime, QMetaObject,
    QObject, QPoint, QRect, QSize, QTime, QUrl, Qt)
from PySide2.QtGui import (QBrush, QColor, QConicalGradient, QCursor, QFont,
    QFontDatabase, QIcon, QKeySequence, QLinearGradient, QPalette, QPainter,
    QPixmap, QRadialGradient)
from PySide2.QtWidgets import *

from .icons_rc import *

class Ui_mainWindow(object):
    def setupUi(self, mainWindow):
        if not mainWindow.objectName():
            mainWindow.setObjectName(u"mainWindow")
        mainWindow.resize(570, 354)
        mainWindow.setBaseSize(QSize(0, 0))
        icon = QIcon()
        icon.addFile(u":/Program icon/GridCal_icon.svg", QSize(), QIcon.Normal, QIcon.Off)
        mainWindow.setWindowIcon(icon)
        mainWindow.setIconSize(QSize(24, 24))
        mainWindow.setDocumentMode(False)
        mainWindow.setTabShape(QTabWidget.Rounded)
        mainWindow.setUnifiedTitleAndToolBarOnMac(False)
        self.actionOpen_file = QAction(mainWindow)
        self.actionOpen_file.setObjectName(u"actionOpen_file")
        icon1 = QIcon()
        icon1.addFile(u":/Icons/icons/loadc.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionOpen_file.setIcon(icon1)
        self.actionSave = QAction(mainWindow)
        self.actionSave.setObjectName(u"actionSave")
        icon2 = QIcon()
        icon2.addFile(u":/Icons/icons/savec.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSave.setIcon(icon2)
        self.actionExport = QAction(mainWindow)
        self.actionExport.setObjectName(u"actionExport")
        icon3 = QIcon()
        icon3.addFile(u":/Icons/icons/save.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionExport.setIcon(icon3)
        self.actionNew_project = QAction(mainWindow)
        self.actionNew_project.setObjectName(u"actionNew_project")
        icon4 = QIcon()
        icon4.addFile(u":/Icons/icons/new2c.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionNew_project.setIcon(icon4)
        self.actionPower_flow = QAction(mainWindow)
        self.actionPower_flow.setObjectName(u"actionPower_flow")
        icon5 = QIcon()
        icon5.addFile(u":/Icons/icons/pf.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionPower_flow.setIcon(icon5)
        self.actionPower_Flow_Time_series = QAction(mainWindow)
        self.actionPower_Flow_Time_series.setObjectName(u"actionPower_Flow_Time_series")
        icon6 = QIcon()
        icon6.addFile(u":/Icons/icons/pf_ts.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionPower_Flow_Time_series.setIcon(icon6)
        self.actionBigger_nodes = QAction(mainWindow)
        self.actionBigger_nodes.setObjectName(u"actionBigger_nodes")
        icon7 = QIcon()
        icon7.addFile(u":/Icons/icons/plus (gray).svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionBigger_nodes.setIcon(icon7)
        self.actionSmaller_nodes = QAction(mainWindow)
        self.actionSmaller_nodes.setObjectName(u"actionSmaller_nodes")
        icon8 = QIcon()
        icon8.addFile(u":/Icons/icons/minus (gray).svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSmaller_nodes.setIcon(icon8)
        self.actionPower_flow_Stochastic = QAction(mainWindow)
        self.actionPower_flow_Stochastic.setObjectName(u"actionPower_flow_Stochastic")
        icon9 = QIcon()
        icon9.addFile(u":/Icons/icons/stochastic_power_flow.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionPower_flow_Stochastic.setIcon(icon9)
        self.actionVoltage_stability = QAction(mainWindow)
        self.actionVoltage_stability.setObjectName(u"actionVoltage_stability")
        icon10 = QIcon()
        icon10.addFile(u":/Icons/icons/continuation_power_flow.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionVoltage_stability.setIcon(icon10)
        self.actionAbout = QAction(mainWindow)
        self.actionAbout.setObjectName(u"actionAbout")
        self.actionAbout.setIcon(icon)
        self.actionCenter_view = QAction(mainWindow)
        self.actionCenter_view.setObjectName(u"actionCenter_view")
        icon11 = QIcon()
        icon11.addFile(u":/Icons/icons/resize.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionCenter_view.setIcon(icon11)
        self.actionShort_Circuit = QAction(mainWindow)
        self.actionShort_Circuit.setObjectName(u"actionShort_Circuit")
        icon12 = QIcon()
        icon12.addFile(u":/Icons/icons/short_circuit.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionShort_Circuit.setIcon(icon12)
        self.actionAutoatic_layout = QAction(mainWindow)
        self.actionAutoatic_layout.setObjectName(u"actionAutoatic_layout")
        icon13 = QIcon()
        icon13.addFile(u":/Icons/icons/automatic_layout.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionAutoatic_layout.setIcon(icon13)
        self.actionLatin_Hypercube_Sampling = QAction(mainWindow)
        self.actionLatin_Hypercube_Sampling.setObjectName(u"actionLatin_Hypercube_Sampling")
        icon14 = QIcon()
        icon14.addFile(u":/Icons/icons/latin_hypercube2.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionLatin_Hypercube_Sampling.setIcon(icon14)
        self.actionBlackout_cascade = QAction(mainWindow)
        self.actionBlackout_cascade.setObjectName(u"actionBlackout_cascade")
        self.actionBlackout_cascade.setCheckable(True)
        icon15 = QIcon()
        icon15.addFile(u":/Icons/icons/blackout.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionBlackout_cascade.setIcon(icon15)
        self.actionOPF = QAction(mainWindow)
        self.actionOPF.setObjectName(u"actionOPF")
        icon16 = QIcon()
        icon16.addFile(u":/Icons/icons/dcopf.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionOPF.setIcon(icon16)
        self.actionOPF_time_series = QAction(mainWindow)
        self.actionOPF_time_series.setObjectName(u"actionOPF_time_series")
        icon17 = QIcon()
        icon17.addFile(u":/Icons/icons/dcopf_ts.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionOPF_time_series.setIcon(icon17)
        self.actionDetect_transformers = QAction(mainWindow)
        self.actionDetect_transformers.setObjectName(u"actionDetect_transformers")
        icon18 = QIcon()
        icon18.addFile(u":/Icons/icons/detect_tr.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionDetect_transformers.setIcon(icon18)
        self.actionAuto_rate_branches = QAction(mainWindow)
        self.actionAuto_rate_branches.setObjectName(u"actionAuto_rate_branches")
        icon19 = QIcon()
        icon19.addFile(u":/Icons/icons/rate_br.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionAuto_rate_branches.setIcon(icon19)
        self.actionExport_all_the_device_s_profiles = QAction(mainWindow)
        self.actionExport_all_the_device_s_profiles.setObjectName(u"actionExport_all_the_device_s_profiles")
        self.actionExport_all_the_device_s_profiles.setIcon(icon3)
        self.actionGrid_Reduction = QAction(mainWindow)
        self.actionGrid_Reduction.setObjectName(u"actionGrid_Reduction")
        icon20 = QIcon()
        icon20.addFile(u":/Icons/icons/grid_reduction.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionGrid_Reduction.setIcon(icon20)
        self.actionStorage_location_suggestion = QAction(mainWindow)
        self.actionStorage_location_suggestion.setObjectName(u"actionStorage_location_suggestion")
        self.actionStorage_location_suggestion.setCheckable(True)
        icon21 = QIcon()
        icon21.addFile(u":/Icons/icons/storage_loc.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionStorage_location_suggestion.setIcon(icon21)
        self.actionLaunch_data_analysis_tool = QAction(mainWindow)
        self.actionLaunch_data_analysis_tool.setObjectName(u"actionLaunch_data_analysis_tool")
        icon22 = QIcon()
        icon22.addFile(u":/Icons/icons/bars.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionLaunch_data_analysis_tool.setIcon(icon22)
        self.actionOnline_documentation = QAction(mainWindow)
        self.actionOnline_documentation.setObjectName(u"actionOnline_documentation")
        icon23 = QIcon()
        icon23.addFile(u":/Icons/icons/new.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionOnline_documentation.setIcon(icon23)
        self.actionExport_all_results = QAction(mainWindow)
        self.actionExport_all_results.setObjectName(u"actionExport_all_results")
        icon24 = QIcon()
        icon24.addFile(u":/Icons/icons/export_pickle.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionExport_all_results.setIcon(icon24)
        self.actionSave_as = QAction(mainWindow)
        self.actionSave_as.setObjectName(u"actionSave_as")
        self.actionSave_as.setIcon(icon3)
        self.actionDelete_selected = QAction(mainWindow)
        self.actionDelete_selected.setObjectName(u"actionDelete_selected")
        icon25 = QIcon()
        icon25.addFile(u":/Icons/icons/delete3.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionDelete_selected.setIcon(icon25)
        self.actionPTDF = QAction(mainWindow)
        self.actionPTDF.setObjectName(u"actionPTDF")
        icon26 = QIcon()
        icon26.addFile(u":/Icons/icons/ptdf.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionPTDF.setIcon(icon26)
        self.actionOTDF = QAction(mainWindow)
        self.actionOTDF.setObjectName(u"actionOTDF")
        icon27 = QIcon()
        icon27.addFile(u":/Icons/icons/otdf.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionOTDF.setIcon(icon27)
        self.actionReset_console = QAction(mainWindow)
        self.actionReset_console.setObjectName(u"actionReset_console")
        icon28 = QIcon()
        icon28.addFile(u":/Icons/icons/undo.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionReset_console.setIcon(icon28)
        self.actionOpf_to_Power_flow = QAction(mainWindow)
        self.actionOpf_to_Power_flow.setObjectName(u"actionOpf_to_Power_flow")
        self.actionOpf_to_Power_flow.setCheckable(True)
        icon29 = QIcon()
        icon29.addFile(u":/Icons/icons/dcopf2ts.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionOpf_to_Power_flow.setIcon(icon29)
        self.actionTry_to_fix_buses_location = QAction(mainWindow)
        self.actionTry_to_fix_buses_location.setObjectName(u"actionTry_to_fix_buses_location")
        icon30 = QIcon()
        icon30.addFile(u":/Icons/icons/move_bus.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionTry_to_fix_buses_location.setIcon(icon30)
        self.actionSet_OPF_generation_to_profiles = QAction(mainWindow)
        self.actionSet_OPF_generation_to_profiles.setObjectName(u"actionSet_OPF_generation_to_profiles")
        self.actionSet_OPF_generation_to_profiles.setIcon(icon29)
        self.actionPTDF_time_series = QAction(mainWindow)
        self.actionPTDF_time_series.setObjectName(u"actionPTDF_time_series")
        icon31 = QIcon()
        icon31.addFile(u":/Icons/icons/ptdf_ts.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionPTDF_time_series.setIcon(icon31)
        self.actionShow_color_controls = QAction(mainWindow)
        self.actionShow_color_controls.setObjectName(u"actionShow_color_controls")
        self.actionShow_color_controls.setCheckable(True)
        icon32 = QIcon()
        icon32.addFile(u":/Icons/icons/map.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionShow_color_controls.setIcon(icon32)
        self.actionAdd_circuit = QAction(mainWindow)
        self.actionAdd_circuit.setObjectName(u"actionAdd_circuit")
        icon33 = QIcon()
        icon33.addFile(u":/Icons/icons/load_add.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionAdd_circuit.setIcon(icon33)
        self.actionSync = QAction(mainWindow)
        self.actionSync.setObjectName(u"actionSync")
        self.actionSync.setCheckable(True)
        icon34 = QIcon()
        icon34.addFile(u":/Icons/icons/sync.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSync.setIcon(icon34)
        self.actionDrawSchematic = QAction(mainWindow)
        self.actionDrawSchematic.setObjectName(u"actionDrawSchematic")
        icon35 = QIcon()
        icon35.addFile(u":/Icons/icons/grid_icon.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionDrawSchematic.setIcon(icon35)
        self.actionSigma_analysis = QAction(mainWindow)
        self.actionSigma_analysis.setObjectName(u"actionSigma_analysis")
        icon36 = QIcon()
        icon36.addFile(u":/Icons/icons/sigma.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSigma_analysis.setIcon(icon36)
        self.actionClear_stuff_running_right_now = QAction(mainWindow)
        self.actionClear_stuff_running_right_now.setObjectName(u"actionClear_stuff_running_right_now")
        icon37 = QIcon()
        icon37.addFile(u":/Icons/icons/clear_runs.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionClear_stuff_running_right_now.setIcon(icon37)
        self.actionAdd_default_catalogue = QAction(mainWindow)
        self.actionAdd_default_catalogue.setObjectName(u"actionAdd_default_catalogue")
        icon38 = QIcon()
        icon38.addFile(u":/Icons/icons/CatalogueAdd.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionAdd_default_catalogue.setIcon(icon38)
        self.actionFind_node_groups = QAction(mainWindow)
        self.actionFind_node_groups.setObjectName(u"actionFind_node_groups")
        self.actionFind_node_groups.setCheckable(True)
        icon39 = QIcon()
        icon39.addFile(u":/Icons/icons/color_grid2.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionFind_node_groups.setIcon(icon39)
        self.actiongrid_Generator = QAction(mainWindow)
        self.actiongrid_Generator.setObjectName(u"actiongrid_Generator")
        self.actiongrid_Generator.setIcon(icon13)
        self.centralwidget = QWidget(mainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.verticalLayout = QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.label = QLabel(self.centralwidget)
        self.label.setObjectName(u"label")
        self.label.setTextFormat(Qt.PlainText)
        self.label.setPixmap(QPixmap(u":/Program icon/icons/GridCal_banner.svg"))
        self.label.setScaledContents(True)

        self.verticalLayout.addWidget(self.label)

        mainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(mainWindow)

        QMetaObject.connectSlotsByName(mainWindow)
    # setupUi

    def retranslateUi(self, mainWindow):
        mainWindow.setWindowTitle(QCoreApplication.translate("mainWindow", u"GridCal", None))
        self.actionOpen_file.setText(QCoreApplication.translate("mainWindow", u"Open file", None))
#if QT_CONFIG(shortcut)
        self.actionOpen_file.setShortcut(QCoreApplication.translate("mainWindow", u"Ctrl+O", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave.setText(QCoreApplication.translate("mainWindow", u"Save", None))
#if QT_CONFIG(shortcut)
        self.actionSave.setShortcut(QCoreApplication.translate("mainWindow", u"Ctrl+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionExport.setText(QCoreApplication.translate("mainWindow", u"Export schematic picture", None))
        self.actionNew_project.setText(QCoreApplication.translate("mainWindow", u"New project", None))
#if QT_CONFIG(shortcut)
        self.actionNew_project.setShortcut(QCoreApplication.translate("mainWindow", u"Ctrl+N", None))
#endif // QT_CONFIG(shortcut)
        self.actionPower_flow.setText(QCoreApplication.translate("mainWindow", u"Power Flow", None))
#if QT_CONFIG(shortcut)
        self.actionPower_flow.setShortcut(QCoreApplication.translate("mainWindow", u"F5", None))
#endif // QT_CONFIG(shortcut)
        self.actionPower_Flow_Time_series.setText(QCoreApplication.translate("mainWindow", u"Power Flow: Time series", None))
#if QT_CONFIG(tooltip)
        self.actionPower_Flow_Time_series.setToolTip(QCoreApplication.translate("mainWindow", u"Power flow time series", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionPower_Flow_Time_series.setShortcut(QCoreApplication.translate("mainWindow", u"F6", None))
#endif // QT_CONFIG(shortcut)
        self.actionBigger_nodes.setText(QCoreApplication.translate("mainWindow", u"Expand", None))
#if QT_CONFIG(tooltip)
        self.actionBigger_nodes.setToolTip(QCoreApplication.translate("mainWindow", u"Expand distances", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionBigger_nodes.setShortcut(QCoreApplication.translate("mainWindow", u"F3", None))
#endif // QT_CONFIG(shortcut)
        self.actionSmaller_nodes.setText(QCoreApplication.translate("mainWindow", u"Shrink", None))
#if QT_CONFIG(tooltip)
        self.actionSmaller_nodes.setToolTip(QCoreApplication.translate("mainWindow", u"Shrink distances", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionSmaller_nodes.setShortcut(QCoreApplication.translate("mainWindow", u"F2", None))
#endif // QT_CONFIG(shortcut)
        self.actionPower_flow_Stochastic.setText(QCoreApplication.translate("mainWindow", u"Stochastic power flow: Monte Carlo", None))
#if QT_CONFIG(tooltip)
        self.actionPower_flow_Stochastic.setToolTip(QCoreApplication.translate("mainWindow", u"Monte Carlo stochastic power flow", None))
#endif // QT_CONFIG(tooltip)
        self.actionVoltage_stability.setText(QCoreApplication.translate("mainWindow", u"Continuation power flow", None))
#if QT_CONFIG(tooltip)
        self.actionVoltage_stability.setToolTip(QCoreApplication.translate("mainWindow", u"Continuation power flow", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionVoltage_stability.setShortcut(QCoreApplication.translate("mainWindow", u"F7", None))
#endif // QT_CONFIG(shortcut)
        self.actionAbout.setText(QCoreApplication.translate("mainWindow", u"About", None))
        self.actionCenter_view.setText(QCoreApplication.translate("mainWindow", u"center view", None))
#if QT_CONFIG(tooltip)
        self.actionCenter_view.setToolTip(QCoreApplication.translate("mainWindow", u"Center view", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionCenter_view.setShortcut(QCoreApplication.translate("mainWindow", u"F4", None))
#endif // QT_CONFIG(shortcut)
        self.actionShort_Circuit.setText(QCoreApplication.translate("mainWindow", u"Short Circuit", None))
        self.actionAutoatic_layout.setText(QCoreApplication.translate("mainWindow", u"Automatic grid layout", None))
#if QT_CONFIG(tooltip)
        self.actionAutoatic_layout.setToolTip(QCoreApplication.translate("mainWindow", u"Automatic layout the of the grid", None))
#endif // QT_CONFIG(tooltip)
        self.actionLatin_Hypercube_Sampling.setText(QCoreApplication.translate("mainWindow", u"Stochastic power flow: Latin Hypercube", None))
#if QT_CONFIG(tooltip)
        self.actionLatin_Hypercube_Sampling.setToolTip(QCoreApplication.translate("mainWindow", u"Latin Hypercube stochastic power flow", None))
#endif // QT_CONFIG(tooltip)
        self.actionBlackout_cascade.setText(QCoreApplication.translate("mainWindow", u"Blackout cascade", None))
#if QT_CONFIG(tooltip)
        self.actionBlackout_cascade.setToolTip(QCoreApplication.translate("mainWindow", u"Run a simulation or step by step blackout cascade", None))
#endif // QT_CONFIG(tooltip)
        self.actionOPF.setText(QCoreApplication.translate("mainWindow", u"OPF", None))
#if QT_CONFIG(tooltip)
        self.actionOPF.setToolTip(QCoreApplication.translate("mainWindow", u"Optimal power flow", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionOPF.setShortcut(QCoreApplication.translate("mainWindow", u"F9", None))
#endif // QT_CONFIG(shortcut)
        self.actionOPF_time_series.setText(QCoreApplication.translate("mainWindow", u"OPF time series", None))
#if QT_CONFIG(tooltip)
        self.actionOPF_time_series.setToolTip(QCoreApplication.translate("mainWindow", u"Optimal power flow time series", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionOPF_time_series.setShortcut(QCoreApplication.translate("mainWindow", u"F10", None))
#endif // QT_CONFIG(shortcut)
        self.actionDetect_transformers.setText(QCoreApplication.translate("mainWindow", u"Detect transformers", None))
#if QT_CONFIG(tooltip)
        self.actionDetect_transformers.setToolTip(QCoreApplication.translate("mainWindow", u"<html><head/><body><p>Detect transformers.</p><p>Use the nodes nominal voltage to determine which branches should be a transformer.</p><p>If a branch joins two nodes with different voltage levels, the branch should be a transformer.</p></body></html>", None))
#endif // QT_CONFIG(tooltip)
        self.actionAuto_rate_branches.setText(QCoreApplication.translate("mainWindow", u"Auto rate branches", None))
#if QT_CONFIG(tooltip)
        self.actionAuto_rate_branches.setToolTip(QCoreApplication.translate("mainWindow", u"<html><head/><body><p>Automatic rating of the branches.</p><p>Use the branches calculated power to establish a rate, if the branch rate is unknown. A factor is available in the settings.</p></body></html>", None))
#endif // QT_CONFIG(tooltip)
        self.actionExport_all_the_device_s_profiles.setText(QCoreApplication.translate("mainWindow", u"Export all the device's profiles", None))
        self.actionGrid_Reduction.setText(QCoreApplication.translate("mainWindow", u"Grid Reduction", None))
#if QT_CONFIG(tooltip)
        self.actionGrid_Reduction.setToolTip(QCoreApplication.translate("mainWindow", u"Performs a topological grid reduction", None))
#endif // QT_CONFIG(tooltip)
        self.actionStorage_location_suggestion.setText(QCoreApplication.translate("mainWindow", u"Storage location suggestion", None))
#if QT_CONFIG(tooltip)
        self.actionStorage_location_suggestion.setToolTip(QCoreApplication.translate("mainWindow", u"Suggest places where storage devices are useful", None))
#endif // QT_CONFIG(tooltip)
        self.actionLaunch_data_analysis_tool.setText(QCoreApplication.translate("mainWindow", u"Launch data analysis tool", None))
#if QT_CONFIG(shortcut)
        self.actionLaunch_data_analysis_tool.setShortcut(QCoreApplication.translate("mainWindow", u"F8", None))
#endif // QT_CONFIG(shortcut)
        self.actionOnline_documentation.setText(QCoreApplication.translate("mainWindow", u"Online documentation", None))
#if QT_CONFIG(shortcut)
        self.actionOnline_documentation.setShortcut(QCoreApplication.translate("mainWindow", u"F1", None))
#endif // QT_CONFIG(shortcut)
        self.actionExport_all_results.setText(QCoreApplication.translate("mainWindow", u"Export all results", None))
#if QT_CONFIG(tooltip)
        self.actionExport_all_results.setToolTip(QCoreApplication.translate("mainWindow", u"Export all the results", None))
#endif // QT_CONFIG(tooltip)
        self.actionSave_as.setText(QCoreApplication.translate("mainWindow", u"Save as", None))
        self.actionDelete_selected.setText(QCoreApplication.translate("mainWindow", u"Delete selected", None))
#if QT_CONFIG(tooltip)
        self.actionDelete_selected.setToolTip(QCoreApplication.translate("mainWindow", u"Delete selected objects", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionDelete_selected.setShortcut(QCoreApplication.translate("mainWindow", u"Del", None))
#endif // QT_CONFIG(shortcut)
        self.actionPTDF.setText(QCoreApplication.translate("mainWindow", u"PTDF (Power Transfer Distribution Factors)", None))
#if QT_CONFIG(tooltip)
        self.actionPTDF.setToolTip(QCoreApplication.translate("mainWindow", u"Power Transfer Distribution Factors", None))
#endif // QT_CONFIG(tooltip)
        self.actionOTDF.setText(QCoreApplication.translate("mainWindow", u"N-1 / OTDF (Outage Transfer Distribution Factors)", None))
#if QT_CONFIG(tooltip)
        self.actionOTDF.setToolTip(QCoreApplication.translate("mainWindow", u"N-1 / OTDF (Outage Transfer Distribution Factors)", None))
#endif // QT_CONFIG(tooltip)
        self.actionReset_console.setText(QCoreApplication.translate("mainWindow", u"Reset console", None))
        self.actionOpf_to_Power_flow.setText(QCoreApplication.translate("mainWindow", u"Set OPF results to Power flow (non destructive)", None))
#if QT_CONFIG(tooltip)
        self.actionOpf_to_Power_flow.setToolTip(QCoreApplication.translate("mainWindow", u"Set the OPF resultsinto the power flow or time series simulations (non destructive)", None))
#endif // QT_CONFIG(tooltip)
        self.actionTry_to_fix_buses_location.setText(QCoreApplication.translate("mainWindow", u"Correct buses location", None))
#if QT_CONFIG(tooltip)
        self.actionTry_to_fix_buses_location.setToolTip(QCoreApplication.translate("mainWindow", u"Set selected buses location closer to their neighbours", None))
#endif // QT_CONFIG(tooltip)
        self.actionSet_OPF_generation_to_profiles.setText(QCoreApplication.translate("mainWindow", u"Copy OPF generation to profiles (destructive)", None))
#if QT_CONFIG(tooltip)
        self.actionSet_OPF_generation_to_profiles.setToolTip(QCoreApplication.translate("mainWindow", u"Destructive copy of the OPF generation results to the input profiles", None))
#endif // QT_CONFIG(tooltip)
        self.actionPTDF_time_series.setText(QCoreApplication.translate("mainWindow", u"PTDF time series power flow", None))
#if QT_CONFIG(tooltip)
        self.actionPTDF_time_series.setToolTip(QCoreApplication.translate("mainWindow", u"Runs the PTDF based time series power flow", None))
#endif // QT_CONFIG(tooltip)
        self.actionShow_color_controls.setText(QCoreApplication.translate("mainWindow", u"Show color controls", None))
        self.actionAdd_circuit.setText(QCoreApplication.translate("mainWindow", u"Add circuit", None))
#if QT_CONFIG(tooltip)
        self.actionAdd_circuit.setToolTip(QCoreApplication.translate("mainWindow", u"Add circuit to the current circuit", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionAdd_circuit.setShortcut(QCoreApplication.translate("mainWindow", u"Ctrl+N, Ctrl+O", None))
#endif // QT_CONFIG(shortcut)
        self.actionSync.setText(QCoreApplication.translate("mainWindow", u"Sync", None))
#if QT_CONFIG(tooltip)
        self.actionSync.setToolTip(QCoreApplication.translate("mainWindow", u"Sync with the file for colaborative editing of the grid", None))
#endif // QT_CONFIG(tooltip)
        self.actionDrawSchematic.setText(QCoreApplication.translate("mainWindow", u"Draw schematic", None))
        self.actionSigma_analysis.setText(QCoreApplication.translate("mainWindow", u"Sigma analysis", None))
#if QT_CONFIG(tooltip)
        self.actionSigma_analysis.setToolTip(QCoreApplication.translate("mainWindow", u"Perform HELM-Sigma analysis", None))
#endif // QT_CONFIG(tooltip)
        self.actionClear_stuff_running_right_now.setText(QCoreApplication.translate("mainWindow", u"Clear \"stuff running right now\"", None))
        self.actionAdd_default_catalogue.setText(QCoreApplication.translate("mainWindow", u"Add default catalogue", None))
        self.actionFind_node_groups.setText(QCoreApplication.translate("mainWindow", u"Find node groups", None))
#if QT_CONFIG(tooltip)
        self.actionFind_node_groups.setToolTip(QCoreApplication.translate("mainWindow", u"<html><head/><body><p>Finds the electrically related nodes by using their electrical distance and the DBSCAN clustering method</p></body></html>", None))
#endif // QT_CONFIG(tooltip)
        self.actiongrid_Generator.setText(QCoreApplication.translate("mainWindow", u"Grid Generator", None))
#if QT_CONFIG(shortcut)
        self.actiongrid_Generator.setShortcut(QCoreApplication.translate("mainWindow", u"Ctrl+G", None))
#endif // QT_CONFIG(shortcut)
        self.label.setText("")
    # retranslateUi

