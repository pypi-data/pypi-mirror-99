Metadata-Version: 2.1
Name: django-etesync-journal
Version: 1.2.3
Summary: The server side implementation of the EteSync protocol.
Home-page: https://www.etesync.com/
Author: EteSync
Author-email: development@etesync.com
License: AGPL-3.0-only
Description: <p align="center">
          <img width="120" src="icon.svg" />
          <h1 align="center">EteSync - Secure Data Sync</h1>
        </p>
        
        **IMPORTANT:** This repo is deprecated, please use refer to https://github.com/etesync/server/
        
        This is a reusable django app that implements the server side of EteSync
        
        ![GitHub tag](https://img.shields.io/github/tag/etesync/journal-manager.svg)
        [![PyPI](https://img.shields.io/pypi/v/django-etesync-journal.svg)](https://pypi.python.org/pypi/django-etesync-journal/)
        [![Build Status](https://travis-ci.com/etesync/journal-manager.svg?branch=master)](https://travis-ci.com/etesync/journal-manager)
        [![Chat on freenode](https://img.shields.io/badge/irc.freenode.net-%23EteSync-blue.svg)](https://webchat.freenode.net/?channels=#etesync)
        
        More info is available on the [EteSync website](https://www.etesync.com)
        
        # Quick start
        
        1. Add "journal" to your INSTALLED_APPS setting like this::
        
        ```
        INSTALLED_APPS = [
            ...
            'journal.apps.JournalConfig',
        ]
        ```
        
        2. Include the "journal" URLconf in your project's urls.py like this:
        
        ```
        from django.conf.urls import include, url
        
        from rest_framework import routers
        
        from journal import views
        
        router = routers.DefaultRouter()
        router.register(r'journals', views.JournalViewSet)
        router.register(r'journal/(?P<journal>[^/]+)', views.EntryViewSet)
        
        urlpatterns = [
            url(r'^api/v1/', include(router.urls)),
        ]
        ```
        
        3. Run `python manage.py migrate` to create the journal models
        
Platform: UNKNOWN
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU Affero General Public License v3
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Description-Content-Type: text/markdown
