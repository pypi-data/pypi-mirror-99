# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .secret_backend import *
from .secret_backend_cert import *
from .secret_backend_config_ca import *
from .secret_backend_config_urls import *
from .secret_backend_crl_config import *
from .secret_backend_intermediate_cert_request import *
from .secret_backend_intermediate_set_signed import *
from .secret_backend_role import *
from .secret_backend_root_cert import *
from .secret_backend_root_sign_intermediate import *
from .secret_backend_sign import *

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "vault:pkiSecret/secretBackend:SecretBackend":
                return SecretBackend(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "vault:pkiSecret/secretBackendCert:SecretBackendCert":
                return SecretBackendCert(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "vault:pkiSecret/secretBackendConfigCa:SecretBackendConfigCa":
                return SecretBackendConfigCa(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "vault:pkiSecret/secretBackendConfigUrls:SecretBackendConfigUrls":
                return SecretBackendConfigUrls(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "vault:pkiSecret/secretBackendCrlConfig:SecretBackendCrlConfig":
                return SecretBackendCrlConfig(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "vault:pkiSecret/secretBackendIntermediateCertRequest:SecretBackendIntermediateCertRequest":
                return SecretBackendIntermediateCertRequest(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "vault:pkiSecret/secretBackendIntermediateSetSigned:SecretBackendIntermediateSetSigned":
                return SecretBackendIntermediateSetSigned(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "vault:pkiSecret/secretBackendRole:SecretBackendRole":
                return SecretBackendRole(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "vault:pkiSecret/secretBackendRootCert:SecretBackendRootCert":
                return SecretBackendRootCert(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "vault:pkiSecret/secretBackendRootSignIntermediate:SecretBackendRootSignIntermediate":
                return SecretBackendRootSignIntermediate(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "vault:pkiSecret/secretBackendSign:SecretBackendSign":
                return SecretBackendSign(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("vault", "pkiSecret/secretBackend", _module_instance)
    pulumi.runtime.register_resource_module("vault", "pkiSecret/secretBackendCert", _module_instance)
    pulumi.runtime.register_resource_module("vault", "pkiSecret/secretBackendConfigCa", _module_instance)
    pulumi.runtime.register_resource_module("vault", "pkiSecret/secretBackendConfigUrls", _module_instance)
    pulumi.runtime.register_resource_module("vault", "pkiSecret/secretBackendCrlConfig", _module_instance)
    pulumi.runtime.register_resource_module("vault", "pkiSecret/secretBackendIntermediateCertRequest", _module_instance)
    pulumi.runtime.register_resource_module("vault", "pkiSecret/secretBackendIntermediateSetSigned", _module_instance)
    pulumi.runtime.register_resource_module("vault", "pkiSecret/secretBackendRole", _module_instance)
    pulumi.runtime.register_resource_module("vault", "pkiSecret/secretBackendRootCert", _module_instance)
    pulumi.runtime.register_resource_module("vault", "pkiSecret/secretBackendRootSignIntermediate", _module_instance)
    pulumi.runtime.register_resource_module("vault", "pkiSecret/secretBackendSign", _module_instance)

_register_module()
