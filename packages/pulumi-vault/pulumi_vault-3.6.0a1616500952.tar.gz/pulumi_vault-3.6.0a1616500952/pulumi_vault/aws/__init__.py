# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .auth_backend_cert import *
from .auth_backend_client import *
from .auth_backend_identity_whitelist import *
from .auth_backend_login import *
from .auth_backend_role import *
from .auth_backend_role_tag import *
from .auth_backend_roletag_blacklist import *
from .auth_backend_sts_role import *
from .get_access_credentials import *
from .secret_backend import *
from .secret_backend_role import *

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "vault:aws/authBackendCert:AuthBackendCert":
                return AuthBackendCert(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "vault:aws/authBackendClient:AuthBackendClient":
                return AuthBackendClient(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "vault:aws/authBackendIdentityWhitelist:AuthBackendIdentityWhitelist":
                return AuthBackendIdentityWhitelist(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "vault:aws/authBackendLogin:AuthBackendLogin":
                return AuthBackendLogin(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "vault:aws/authBackendRole:AuthBackendRole":
                return AuthBackendRole(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "vault:aws/authBackendRoleTag:AuthBackendRoleTag":
                return AuthBackendRoleTag(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "vault:aws/authBackendRoletagBlacklist:AuthBackendRoletagBlacklist":
                return AuthBackendRoletagBlacklist(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "vault:aws/authBackendStsRole:AuthBackendStsRole":
                return AuthBackendStsRole(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "vault:aws/secretBackend:SecretBackend":
                return SecretBackend(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "vault:aws/secretBackendRole:SecretBackendRole":
                return SecretBackendRole(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("vault", "aws/authBackendCert", _module_instance)
    pulumi.runtime.register_resource_module("vault", "aws/authBackendClient", _module_instance)
    pulumi.runtime.register_resource_module("vault", "aws/authBackendIdentityWhitelist", _module_instance)
    pulumi.runtime.register_resource_module("vault", "aws/authBackendLogin", _module_instance)
    pulumi.runtime.register_resource_module("vault", "aws/authBackendRole", _module_instance)
    pulumi.runtime.register_resource_module("vault", "aws/authBackendRoleTag", _module_instance)
    pulumi.runtime.register_resource_module("vault", "aws/authBackendRoletagBlacklist", _module_instance)
    pulumi.runtime.register_resource_module("vault", "aws/authBackendStsRole", _module_instance)
    pulumi.runtime.register_resource_module("vault", "aws/secretBackend", _module_instance)
    pulumi.runtime.register_resource_module("vault", "aws/secretBackendRole", _module_instance)

_register_module()
