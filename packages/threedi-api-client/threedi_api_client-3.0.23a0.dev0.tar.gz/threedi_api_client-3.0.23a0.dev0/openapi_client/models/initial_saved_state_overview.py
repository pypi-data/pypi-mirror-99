# coding: utf-8

"""
    3Di API

    3Di simulation API (latest version: 3.0)   Framework release: 1.0.16   3Di core release: 2.0.11  deployed on:  07:33AM (UTC) on September 04, 2020  # noqa: E501

    The version of the OpenAPI document: 3.0
    Contact: info@nelen-schuurmans.nl
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InitialSavedStateOverview(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'url': 'str',
        'saved_state': 'SavedStateOverview',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'url': 'url',
        'saved_state': 'saved_state',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, url=None, saved_state=None, id=None, uuid=None, local_vars_configuration=None):  # noqa: E501
        """InitialSavedStateOverview - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._url = None
        self._saved_state = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if saved_state is not None:
            self.saved_state = saved_state
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def url(self):
        """Gets the url of this InitialSavedStateOverview.  # noqa: E501


        :return: The url of this InitialSavedStateOverview.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InitialSavedStateOverview.


        :param url: The url of this InitialSavedStateOverview.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def saved_state(self):
        """Gets the saved_state of this InitialSavedStateOverview.  # noqa: E501


        :return: The saved_state of this InitialSavedStateOverview.  # noqa: E501
        :rtype: SavedStateOverview
        """
        return self._saved_state

    @saved_state.setter
    def saved_state(self, saved_state):
        """Sets the saved_state of this InitialSavedStateOverview.


        :param saved_state: The saved_state of this InitialSavedStateOverview.  # noqa: E501
        :type: SavedStateOverview
        """

        self._saved_state = saved_state

    @property
    def id(self):
        """Gets the id of this InitialSavedStateOverview.  # noqa: E501


        :return: The id of this InitialSavedStateOverview.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InitialSavedStateOverview.


        :param id: The id of this InitialSavedStateOverview.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this InitialSavedStateOverview.  # noqa: E501


        :return: The uuid of this InitialSavedStateOverview.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this InitialSavedStateOverview.


        :param uuid: The uuid of this InitialSavedStateOverview.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InitialSavedStateOverview):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InitialSavedStateOverview):
            return True

        return self.to_dict() != other.to_dict()
