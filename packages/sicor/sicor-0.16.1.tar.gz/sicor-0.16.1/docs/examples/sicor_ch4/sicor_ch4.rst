
.. code:: python

    from pathlib import Path
    import sys
    import os

.. code:: python

    sicor_dir = Path(os.getcwd()).parent.absolute()

.. code:: python

    sys.path.insert(0,str(sicor_dir))
    import sicor; print(sicor)


.. parsed-literal::

    <module 'sicor' from '/misc/fluo6/andre/projekte/Sentinel2/py/sicor/sicor/__init__.py'>


SICOR CH4 Setup
===============

.. code:: python

    %load_ext autoreload
    %autoreload 2

.. code:: python

    import matplotlib.pyplot as plt
    %matplotlib inline

.. code:: python

    import h5py
    import numpy as np
    import logging
    from time import time
    import builtins
    from tqdm import tqdm
    from os import path

.. code:: python

    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger("CH4")

.. code:: python

    from sicor.Tools import SolarIrradiance
    from sicor.AC.RtFo import sat, RtFo
    from sicor.AC.ACG import get_pt_names_and_indexes, get_fo_dims,get_point_and_error_fields
    from sicor.AC.ACG import convert_data_to_reflectance
    from sicor.AC.ACG import rho_models_to_kwargs
    from sicor.AC.ACG import instrument_subset
    from sicor.AC.RtFo import __minimize__
    from sicor.AC.RtFo import FF

.. code:: python

    def mk_global(var_names):
        for var_name in var_names:
            exec("builtins.%s = %s" % tuple(2*[var_name]))

    def ch4_opts(default_sensor,fn):
        return {
            'atm_tables_fn': fn,
            'default_sensor': default_sensor,
            'dim_atm': ['spr', 'coz', 'cwv', 'ch4'],
            'dim_scat': ['tau_a'],
            'flag': 10,
            'hash_formats': {'coz': '%.0f,','cwv': '%.0f,','spr': '%.0f,','sza': '%.0f,','tau_a': '%.2f,','tmp': '%0f,','vza': '%.0f,'},
            'n_pcs': 35,
            'only_toa': True,
            'sensor_interpolation_reference': 'sensor',
            'slices': {},
            'table_path': '/table_aerosol/type_0_tmp_0'}

    def spectral_ids(wv_min,wv_max,wvls):
        return np.arange(len(wvls))[np.logical_and(wvls>wv_min,wvls<wv_max)]

    def _get_obs(ds,parameter):
        param = {"sun":(4,-9999.)}
        ii,nodata = param[parameter]

        obs = np.array(ds["obs"][:,:,ii],dtype=np.float32)
        obs[obs == nodata] = np.NaN
        return obs

.. code:: python

    fn = str(sicor_dir / "tests"/ "data" / "hyper_spectral" / "ang20150422t163638_rdn_v1e"/ "ang20150422t163638_rdn_v1e_img_350_700_500_750_1603.48nm_2500.03nm.h5")
    fn_table_ch4 = str(sicor_dir / "sicor" / "tables" / "linear_atm_functions_ncwv_4_npre_2_ncoz_2_ntmp_1_nch4_4_wvl_350.0_2550.0_1.00_pca.h5")

.. code:: python

    # load data
    ds = h5py.File(fn)
    data = 10.0 * np.array(ds["data"])
    data[data == -50] = np.NaN
    metadata = { ## obs missing for now
        "wvl":np.array(ds["wvl"]),
        "fwhm":np.array(ds["fwhm"]),
        "sza":_get_obs(ds,"sun"),
    }
    ds.close()
    # rtfo settings
    wvl_ch4 = (2268,2498)
    wvl_rsp_resolution = 1.0
    s2f = 2.0 * np.sqrt(2.0 * np.log(2.0))
    wvl_rsp = np.arange(np.min(metadata["wvl"])-3*np.max(metadata["fwhm"]),
                        np.max(metadata["wvl"])+3*np.max(metadata["fwhm"]),
                        wvl_rsp_resolution)
    solar = SolarIrradiance(dataset="Thuillier2002")
    wvls_id_ch4 = spectral_ids(*wvl_ch4,wvls=metadata["wvl"])
    sensors = {"AVIRIS-NG-CH4": sat(rspf_type="gaussian",wvl_inst=np.array(metadata["wvl"]),solar=solar,
                                    sigma=np.array(metadata["fwhm"]),wvl_rsp=wvl_rsp)}
    sensors["AVIRIS-NG-CH4-subset"] = instrument_subset(sensors["AVIRIS-NG-CH4"],wvls_id_ch4)

    settings = {"fo_instances":{"clear":ch4_opts(default_sensor="AVIRIS-NG-CH4",fn=fn_table_ch4)},
                "atm_fields": ["spr", "coz", "cwv", "ch4", "tau_a","tau_c"]}
    fos = {"clear": RtFo(sensors=sensors,**settings["fo_instances"]["clear"])}
    pt_names,pt_indexes,flag_to_indexes_res,flag_to_indexes_common,fo_flags = get_pt_names_and_indexes(fos,settings)
    pt_ind_atm_save = np.array([ii for ii,dim in enumerate(pt_names) if dim in settings["atm_fields"]],dtype=int)
    fo_dims = get_fo_dims(fos)

    #scene parameters
    p0 = np.zeros(list(data.shape[:2]) + [len(pt_names)], dtype=np.float32)
    e0 = np.zeros(list(data.shape[:2]) + [len(pt_names)], dtype=np.float32)

    p0[:,:,list(pt_names).index("sza")][:,:] = metadata["sza"]

    args = {"input_type":"radiance"}

    convert_data_to_reflectance(data,p0[:,:,pt_indexes["clear"]],fos["clear"],args)

    settings["rho_models_kwargs"] = {"AVIRIS-NG-CH4-subset": rho_models_to_kwargs(
        rtfo=fos["clear"],logger=logger,rho_model={"type":"linear_segments","linear_segments":[list(wvl_ch4)]},
        wvls=fos["clear"].wvl_sensors["AVIRIS-NG-CH4-subset"])}

    fo = fos["clear"]
    fo.reduce_luts("ch4_cwv",{"azi":0.0,"coz":350.0,"vza":0.0,"tau_a":0.2,"spr":1013})
    fo.reduce_luts("ch4",{"azi":0.0,"coz":350.0,"vza":0.0,"tau_a":0.2,"cwv":20.0,"spr":1013})
    fo.set_sensor('AVIRIS-NG-CH4-subset')
    fo.set_luts("ch4_cwv")
    fo.set_rho_lin(**settings["rho_models_kwargs"]['AVIRIS-NG-CH4-subset'])


.. parsed-literal::

    INFO:CH4:Include rho model of type: linear_segments
    INFO:CH4:Rho_wvl not given for linear model, take all wvls.
    INFO:CH4:Add linear rho model to PCA list.


.. code:: python

    sensors["AVIRIS-NG-CH4"]




.. parsed-literal::

    {'rspf': array([[  8.87607042e-04,   1.58530029e-03,   2.72038617e-03, ...,
               0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
            [  2.65819447e-05,   5.80078818e-05,   1.21622936e-04, ...,
               0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
            [  2.92232496e-07,   7.79180762e-07,   1.99607179e-06, ...,
               0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
            ...,
            [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00, ...,
               3.29762361e-06,   1.31598301e-06,   5.04577296e-07],
            [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00, ...,
               1.79914820e-04,   8.77258769e-05,   4.10976243e-05],
            [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00, ...,
               3.60475681e-03,   2.14755397e-03,   1.22925058e-03]]),
     'sol_irr': array([ 245.55512236,  241.92010817,  238.7558643 ,  237.25122092,
             237.2524688 ,  236.29781221,  232.08950109,  226.60292482,
             224.00889804,  224.11027982,  224.37768729,  223.75932867,
             221.50654656,  217.84397082,  213.46914144,  209.27456827,
             207.78817363,  208.75309626,  208.89110502,  207.02531161,
             204.17321568,  201.74073817,  200.39735568,  198.85122593,
             196.37353346,  192.98593268,  188.63742185,  186.72158141,
             187.21835689,  187.08531585,  186.1963452 ,  184.50169394,
             182.29636149,  180.31580637,  178.19055373,  176.08143294,
             174.68711452,  173.70008286,  172.45225717,  170.9182145 ,
             169.26775787,  166.95946753,  163.05730941,  160.1053685 ,
             160.47341264,  161.1026868 ,  160.1641588 ,  158.33765685,
             156.46108716,  155.38726398,  154.57643882,  153.06932898,
             150.86675754,  147.40414248,  143.48180565,  143.11330159,
             144.60347717,  143.88959873,  142.00461153,  140.94912256,
             140.28656785,  139.16318099,  137.92082552,  136.75381198,
             135.42381468,  133.74761625,  132.02014868,  129.38243759,
             126.36193688,  126.09766552,  127.45437356,  127.36885367,
             126.01574383,  124.50789769,  122.80731075,  121.31000648,
             120.30517083,  119.44083386,  118.40107604,  117.43890553,
             116.63625031,  115.87866698,  114.85958751,  113.478922  ,
             112.14750656,  110.96856728,  109.92080716,  109.24916605,
             108.79819002,  107.98971719,  106.85393047,  105.60050984,
             104.54027254,  103.88081243,  103.25323584,  102.32220589,
             101.28564825,  100.23880658,   99.25380812,   98.68371854,
              98.16353115,   97.33566995,   96.30738769,   95.25255048,
              94.40487809,   93.81245045,   93.21912556,   92.66471264,
              92.14713964,   91.50581703,   90.53561232,   88.75220198,
              86.60443534,   86.07199073,   86.56492471,   86.45704586,
              85.92296671,   85.22117235,   84.49867652,   83.57250141,
              82.41118784,   81.59579562,   81.16090417,   80.61220113,
              79.91396583,   79.23225317,   78.51784635,   77.72357255,
              77.01575626,   76.3128617 ,   75.60877628,   74.98294443,
              74.43469364,   73.95053805,   73.33630076,   72.52900172,
              71.82303592,   71.15261941,   70.36655556,   69.89040718,
              69.60047756,   69.10100755,   68.34024407,   67.38238035,
              66.53158692,   66.10301164,   65.81583284,   65.49257298,
              65.01731858,   64.16069798,   63.3073464 ,   62.94894931,
              62.70303704,   62.18950741,   61.53981767,   60.70640921,
              59.74880168,   59.2845993 ,   59.18308051,   59.12249291,
              59.0726856 ,   59.04147713,   59.02314797,   59.01180083,
              59.00418151,   58.99869829,   58.99454819,   58.99129212,
              58.98866658,   58.98650269,   58.98468611,   58.98313755,
              58.98180028,   58.98063343,   58.97960669,   58.9786975 ,
              58.97788846,   58.97716609,   58.97651947,   58.9759398 ]),
     'wvl_inst': array([ 1603.47570801,  1608.484375  ,  1613.49304199,  1618.50170898,
             1623.51049805,  1628.51916504,  1633.52783203,  1638.53649902,
             1643.54516602,  1648.55383301,  1653.5625    ,  1658.57116699,
             1663.57983398,  1668.58850098,  1673.59716797,  1678.60583496,
             1683.61450195,  1688.62316895,  1693.63183594,  1698.64050293,
             1703.64916992,  1708.65783691,  1713.66650391,  1718.6751709 ,
             1723.68383789,  1728.69250488,  1733.70117188,  1738.70983887,
             1743.71850586,  1748.72717285,  1753.73583984,  1758.74450684,
             1763.75317383,  1768.76184082,  1773.77050781,  1778.7791748 ,
             1783.7878418 ,  1788.79650879,  1793.80517578,  1798.81384277,
             1803.82250977,  1808.83117676,  1813.83984375,  1818.84851074,
             1823.85717773,  1828.8659668 ,  1833.87463379,  1838.88330078,
             1843.89196777,  1848.90063477,  1853.90930176,  1858.91796875,
             1863.92663574,  1868.93530273,  1873.94396973,  1878.95263672,
             1883.96130371,  1888.9699707 ,  1893.9786377 ,  1898.98730469,
             1903.99597168,  1909.00463867,  1914.01330566,  1919.02197266,
             1924.03063965,  1929.03930664,  1934.04797363,  1939.05664062,
             1944.06530762,  1949.07397461,  1954.0826416 ,  1959.09130859,
             1964.09997559,  1969.10864258,  1974.11730957,  1979.12597656,
             1984.13464355,  1989.14331055,  1994.15197754,  1999.16064453,
             2004.16931152,  2009.17797852,  2014.18676758,  2019.19543457,
             2024.20410156,  2029.21276855,  2034.22143555,  2039.23010254,
             2044.23876953,  2049.24731445,  2054.25610352,  2059.26464844,
             2064.2734375 ,  2069.28198242,  2074.29077148,  2079.29931641,
             2084.30810547,  2089.31665039,  2094.32543945,  2099.33398438,
             2104.34277344,  2109.35131836,  2114.36010742,  2119.36889648,
             2124.37744141,  2129.38623047,  2134.39477539,  2139.40356445,
             2144.41210938,  2149.42089844,  2154.42944336,  2159.43823242,
             2164.44677734,  2169.45556641,  2174.46411133,  2179.47290039,
             2184.48144531,  2189.49023438,  2194.4987793 ,  2199.50756836,
             2204.51611328,  2209.52490234,  2214.53344727,  2219.54223633,
             2224.55078125,  2229.55957031,  2234.56811523,  2239.5769043 ,
             2244.58544922,  2249.59423828,  2254.6027832 ,  2259.61157227,
             2264.62011719,  2269.62890625,  2274.63745117,  2279.64624023,
             2284.65478516,  2289.66357422,  2294.67211914,  2299.6809082 ,
             2304.68945312,  2309.69824219,  2314.70678711,  2319.71557617,
             2324.72436523,  2329.73291016,  2334.74169922,  2339.75024414,
             2344.7590332 ,  2349.76757812,  2354.77636719,  2359.78491211,
             2364.79370117,  2369.80224609,  2374.81103516,  2379.81958008,
             2384.82836914,  2389.83691406,  2394.84570312,  2399.85424805,
             2404.86303711,  2409.87158203,  2414.88037109,  2419.88891602,
             2424.89770508,  2429.90625   ,  2434.91503906,  2439.92358398,
             2444.93237305,  2449.94091797,  2454.94970703,  2459.95825195,
             2464.96704102,  2469.97558594,  2474.984375  ,  2479.99291992,
             2485.00170898,  2490.01025391,  2495.01904297,  2500.02758789], dtype=float32),
     'wvl_rsp': array([ 1588.47570801,  1589.47570801,  1590.47570801,  1591.47570801,
             1592.47570801,  1593.47570801,  1594.47570801,  1595.47570801,
             1596.47570801,  1597.47570801,  1598.47570801,  1599.47570801,
             1600.47570801,  1601.47570801,  1602.47570801,  1603.47570801,
             1604.47570801,  1605.47570801,  1606.47570801,  1607.47570801,
             1608.47570801,  1609.47570801,  1610.47570801,  1611.47570801,
             1612.47570801,  1613.47570801,  1614.47570801,  1615.47570801,
             1616.47570801,  1617.47570801,  1618.47570801,  1619.47570801,
             1620.47570801,  1621.47570801,  1622.47570801,  1623.47570801,
             1624.47570801,  1625.47570801,  1626.47570801,  1627.47570801,
             1628.47570801,  1629.47570801,  1630.47570801,  1631.47570801,
             1632.47570801,  1633.47570801,  1634.47570801,  1635.47570801,
             1636.47570801,  1637.47570801,  1638.47570801,  1639.47570801,
             1640.47570801,  1641.47570801,  1642.47570801,  1643.47570801,
             1644.47570801,  1645.47570801,  1646.47570801,  1647.47570801,
             1648.47570801,  1649.47570801,  1650.47570801,  1651.47570801,
             1652.47570801,  1653.47570801,  1654.47570801,  1655.47570801,
             1656.47570801,  1657.47570801,  1658.47570801,  1659.47570801,
             1660.47570801,  1661.47570801,  1662.47570801,  1663.47570801,
             1664.47570801,  1665.47570801,  1666.47570801,  1667.47570801,
             1668.47570801,  1669.47570801,  1670.47570801,  1671.47570801,
             1672.47570801,  1673.47570801,  1674.47570801,  1675.47570801,
             1676.47570801,  1677.47570801,  1678.47570801,  1679.47570801,
             1680.47570801,  1681.47570801,  1682.47570801,  1683.47570801,
             1684.47570801,  1685.47570801,  1686.47570801,  1687.47570801,
             1688.47570801,  1689.47570801,  1690.47570801,  1691.47570801,
             1692.47570801,  1693.47570801,  1694.47570801,  1695.47570801,
             1696.47570801,  1697.47570801,  1698.47570801,  1699.47570801,
             1700.47570801,  1701.47570801,  1702.47570801,  1703.47570801,
             1704.47570801,  1705.47570801,  1706.47570801,  1707.47570801,
             1708.47570801,  1709.47570801,  1710.47570801,  1711.47570801,
             1712.47570801,  1713.47570801,  1714.47570801,  1715.47570801,
             1716.47570801,  1717.47570801,  1718.47570801,  1719.47570801,
             1720.47570801,  1721.47570801,  1722.47570801,  1723.47570801,
             1724.47570801,  1725.47570801,  1726.47570801,  1727.47570801,
             1728.47570801,  1729.47570801,  1730.47570801,  1731.47570801,
             1732.47570801,  1733.47570801,  1734.47570801,  1735.47570801,
             1736.47570801,  1737.47570801,  1738.47570801,  1739.47570801,
             1740.47570801,  1741.47570801,  1742.47570801,  1743.47570801,
             1744.47570801,  1745.47570801,  1746.47570801,  1747.47570801,
             1748.47570801,  1749.47570801,  1750.47570801,  1751.47570801,
             1752.47570801,  1753.47570801,  1754.47570801,  1755.47570801,
             1756.47570801,  1757.47570801,  1758.47570801,  1759.47570801,
             1760.47570801,  1761.47570801,  1762.47570801,  1763.47570801,
             1764.47570801,  1765.47570801,  1766.47570801,  1767.47570801,
             1768.47570801,  1769.47570801,  1770.47570801,  1771.47570801,
             1772.47570801,  1773.47570801,  1774.47570801,  1775.47570801,
             1776.47570801,  1777.47570801,  1778.47570801,  1779.47570801,
             1780.47570801,  1781.47570801,  1782.47570801,  1783.47570801,
             1784.47570801,  1785.47570801,  1786.47570801,  1787.47570801,
             1788.47570801,  1789.47570801,  1790.47570801,  1791.47570801,
             1792.47570801,  1793.47570801,  1794.47570801,  1795.47570801,
             1796.47570801,  1797.47570801,  1798.47570801,  1799.47570801,
             1800.47570801,  1801.47570801,  1802.47570801,  1803.47570801,
             1804.47570801,  1805.47570801,  1806.47570801,  1807.47570801,
             1808.47570801,  1809.47570801,  1810.47570801,  1811.47570801,
             1812.47570801,  1813.47570801,  1814.47570801,  1815.47570801,
             1816.47570801,  1817.47570801,  1818.47570801,  1819.47570801,
             1820.47570801,  1821.47570801,  1822.47570801,  1823.47570801,
             1824.47570801,  1825.47570801,  1826.47570801,  1827.47570801,
             1828.47570801,  1829.47570801,  1830.47570801,  1831.47570801,
             1832.47570801,  1833.47570801,  1834.47570801,  1835.47570801,
             1836.47570801,  1837.47570801,  1838.47570801,  1839.47570801,
             1840.47570801,  1841.47570801,  1842.47570801,  1843.47570801,
             1844.47570801,  1845.47570801,  1846.47570801,  1847.47570801,
             1848.47570801,  1849.47570801,  1850.47570801,  1851.47570801,
             1852.47570801,  1853.47570801,  1854.47570801,  1855.47570801,
             1856.47570801,  1857.47570801,  1858.47570801,  1859.47570801,
             1860.47570801,  1861.47570801,  1862.47570801,  1863.47570801,
             1864.47570801,  1865.47570801,  1866.47570801,  1867.47570801,
             1868.47570801,  1869.47570801,  1870.47570801,  1871.47570801,
             1872.47570801,  1873.47570801,  1874.47570801,  1875.47570801,
             1876.47570801,  1877.47570801,  1878.47570801,  1879.47570801,
             1880.47570801,  1881.47570801,  1882.47570801,  1883.47570801,
             1884.47570801,  1885.47570801,  1886.47570801,  1887.47570801,
             1888.47570801,  1889.47570801,  1890.47570801,  1891.47570801,
             1892.47570801,  1893.47570801,  1894.47570801,  1895.47570801,
             1896.47570801,  1897.47570801,  1898.47570801,  1899.47570801,
             1900.47570801,  1901.47570801,  1902.47570801,  1903.47570801,
             1904.47570801,  1905.47570801,  1906.47570801,  1907.47570801,
             1908.47570801,  1909.47570801,  1910.47570801,  1911.47570801,
             1912.47570801,  1913.47570801,  1914.47570801,  1915.47570801,
             1916.47570801,  1917.47570801,  1918.47570801,  1919.47570801,
             1920.47570801,  1921.47570801,  1922.47570801,  1923.47570801,
             1924.47570801,  1925.47570801,  1926.47570801,  1927.47570801,
             1928.47570801,  1929.47570801,  1930.47570801,  1931.47570801,
             1932.47570801,  1933.47570801,  1934.47570801,  1935.47570801,
             1936.47570801,  1937.47570801,  1938.47570801,  1939.47570801,
             1940.47570801,  1941.47570801,  1942.47570801,  1943.47570801,
             1944.47570801,  1945.47570801,  1946.47570801,  1947.47570801,
             1948.47570801,  1949.47570801,  1950.47570801,  1951.47570801,
             1952.47570801,  1953.47570801,  1954.47570801,  1955.47570801,
             1956.47570801,  1957.47570801,  1958.47570801,  1959.47570801,
             1960.47570801,  1961.47570801,  1962.47570801,  1963.47570801,
             1964.47570801,  1965.47570801,  1966.47570801,  1967.47570801,
             1968.47570801,  1969.47570801,  1970.47570801,  1971.47570801,
             1972.47570801,  1973.47570801,  1974.47570801,  1975.47570801,
             1976.47570801,  1977.47570801,  1978.47570801,  1979.47570801,
             1980.47570801,  1981.47570801,  1982.47570801,  1983.47570801,
             1984.47570801,  1985.47570801,  1986.47570801,  1987.47570801,
             1988.47570801,  1989.47570801,  1990.47570801,  1991.47570801,
             1992.47570801,  1993.47570801,  1994.47570801,  1995.47570801,
             1996.47570801,  1997.47570801,  1998.47570801,  1999.47570801,
             2000.47570801,  2001.47570801,  2002.47570801,  2003.47570801,
             2004.47570801,  2005.47570801,  2006.47570801,  2007.47570801,
             2008.47570801,  2009.47570801,  2010.47570801,  2011.47570801,
             2012.47570801,  2013.47570801,  2014.47570801,  2015.47570801,
             2016.47570801,  2017.47570801,  2018.47570801,  2019.47570801,
             2020.47570801,  2021.47570801,  2022.47570801,  2023.47570801,
             2024.47570801,  2025.47570801,  2026.47570801,  2027.47570801,
             2028.47570801,  2029.47570801,  2030.47570801,  2031.47570801,
             2032.47570801,  2033.47570801,  2034.47570801,  2035.47570801,
             2036.47570801,  2037.47570801,  2038.47570801,  2039.47570801,
             2040.47570801,  2041.47570801,  2042.47570801,  2043.47570801,
             2044.47570801,  2045.47570801,  2046.47570801,  2047.47570801,
             2048.47570801,  2049.47570801,  2050.47570801,  2051.47570801,
             2052.47570801,  2053.47570801,  2054.47570801,  2055.47570801,
             2056.47570801,  2057.47570801,  2058.47570801,  2059.47570801,
             2060.47570801,  2061.47570801,  2062.47570801,  2063.47570801,
             2064.47570801,  2065.47570801,  2066.47570801,  2067.47570801,
             2068.47570801,  2069.47570801,  2070.47570801,  2071.47570801,
             2072.47570801,  2073.47570801,  2074.47570801,  2075.47570801,
             2076.47570801,  2077.47570801,  2078.47570801,  2079.47570801,
             2080.47570801,  2081.47570801,  2082.47570801,  2083.47570801,
             2084.47570801,  2085.47570801,  2086.47570801,  2087.47570801,
             2088.47570801,  2089.47570801,  2090.47570801,  2091.47570801,
             2092.47570801,  2093.47570801,  2094.47570801,  2095.47570801,
             2096.47570801,  2097.47570801,  2098.47570801,  2099.47570801,
             2100.47570801,  2101.47570801,  2102.47570801,  2103.47570801,
             2104.47570801,  2105.47570801,  2106.47570801,  2107.47570801,
             2108.47570801,  2109.47570801,  2110.47570801,  2111.47570801,
             2112.47570801,  2113.47570801,  2114.47570801,  2115.47570801,
             2116.47570801,  2117.47570801,  2118.47570801,  2119.47570801,
             2120.47570801,  2121.47570801,  2122.47570801,  2123.47570801,
             2124.47570801,  2125.47570801,  2126.47570801,  2127.47570801,
             2128.47570801,  2129.47570801,  2130.47570801,  2131.47570801,
             2132.47570801,  2133.47570801,  2134.47570801,  2135.47570801,
             2136.47570801,  2137.47570801,  2138.47570801,  2139.47570801,
             2140.47570801,  2141.47570801,  2142.47570801,  2143.47570801,
             2144.47570801,  2145.47570801,  2146.47570801,  2147.47570801,
             2148.47570801,  2149.47570801,  2150.47570801,  2151.47570801,
             2152.47570801,  2153.47570801,  2154.47570801,  2155.47570801,
             2156.47570801,  2157.47570801,  2158.47570801,  2159.47570801,
             2160.47570801,  2161.47570801,  2162.47570801,  2163.47570801,
             2164.47570801,  2165.47570801,  2166.47570801,  2167.47570801,
             2168.47570801,  2169.47570801,  2170.47570801,  2171.47570801,
             2172.47570801,  2173.47570801,  2174.47570801,  2175.47570801,
             2176.47570801,  2177.47570801,  2178.47570801,  2179.47570801,
             2180.47570801,  2181.47570801,  2182.47570801,  2183.47570801,
             2184.47570801,  2185.47570801,  2186.47570801,  2187.47570801,
             2188.47570801,  2189.47570801,  2190.47570801,  2191.47570801,
             2192.47570801,  2193.47570801,  2194.47570801,  2195.47570801,
             2196.47570801,  2197.47570801,  2198.47570801,  2199.47570801,
             2200.47570801,  2201.47570801,  2202.47570801,  2203.47570801,
             2204.47570801,  2205.47570801,  2206.47570801,  2207.47570801,
             2208.47570801,  2209.47570801,  2210.47570801,  2211.47570801,
             2212.47570801,  2213.47570801,  2214.47570801,  2215.47570801,
             2216.47570801,  2217.47570801,  2218.47570801,  2219.47570801,
             2220.47570801,  2221.47570801,  2222.47570801,  2223.47570801,
             2224.47570801,  2225.47570801,  2226.47570801,  2227.47570801,
             2228.47570801,  2229.47570801,  2230.47570801,  2231.47570801,
             2232.47570801,  2233.47570801,  2234.47570801,  2235.47570801,
             2236.47570801,  2237.47570801,  2238.47570801,  2239.47570801,
             2240.47570801,  2241.47570801,  2242.47570801,  2243.47570801,
             2244.47570801,  2245.47570801,  2246.47570801,  2247.47570801,
             2248.47570801,  2249.47570801,  2250.47570801,  2251.47570801,
             2252.47570801,  2253.47570801,  2254.47570801,  2255.47570801,
             2256.47570801,  2257.47570801,  2258.47570801,  2259.47570801,
             2260.47570801,  2261.47570801,  2262.47570801,  2263.47570801,
             2264.47570801,  2265.47570801,  2266.47570801,  2267.47570801,
             2268.47570801,  2269.47570801,  2270.47570801,  2271.47570801,
             2272.47570801,  2273.47570801,  2274.47570801,  2275.47570801,
             2276.47570801,  2277.47570801,  2278.47570801,  2279.47570801,
             2280.47570801,  2281.47570801,  2282.47570801,  2283.47570801,
             2284.47570801,  2285.47570801,  2286.47570801,  2287.47570801,
             2288.47570801,  2289.47570801,  2290.47570801,  2291.47570801,
             2292.47570801,  2293.47570801,  2294.47570801,  2295.47570801,
             2296.47570801,  2297.47570801,  2298.47570801,  2299.47570801,
             2300.47570801,  2301.47570801,  2302.47570801,  2303.47570801,
             2304.47570801,  2305.47570801,  2306.47570801,  2307.47570801,
             2308.47570801,  2309.47570801,  2310.47570801,  2311.47570801,
             2312.47570801,  2313.47570801,  2314.47570801,  2315.47570801,
             2316.47570801,  2317.47570801,  2318.47570801,  2319.47570801,
             2320.47570801,  2321.47570801,  2322.47570801,  2323.47570801,
             2324.47570801,  2325.47570801,  2326.47570801,  2327.47570801,
             2328.47570801,  2329.47570801,  2330.47570801,  2331.47570801,
             2332.47570801,  2333.47570801,  2334.47570801,  2335.47570801,
             2336.47570801,  2337.47570801,  2338.47570801,  2339.47570801,
             2340.47570801,  2341.47570801,  2342.47570801,  2343.47570801,
             2344.47570801,  2345.47570801,  2346.47570801,  2347.47570801,
             2348.47570801,  2349.47570801,  2350.47570801,  2351.47570801,
             2352.47570801,  2353.47570801,  2354.47570801,  2355.47570801,
             2356.47570801,  2357.47570801,  2358.47570801,  2359.47570801,
             2360.47570801,  2361.47570801,  2362.47570801,  2363.47570801,
             2364.47570801,  2365.47570801,  2366.47570801,  2367.47570801,
             2368.47570801,  2369.47570801,  2370.47570801,  2371.47570801,
             2372.47570801,  2373.47570801,  2374.47570801,  2375.47570801,
             2376.47570801,  2377.47570801,  2378.47570801,  2379.47570801,
             2380.47570801,  2381.47570801,  2382.47570801,  2383.47570801,
             2384.47570801,  2385.47570801,  2386.47570801,  2387.47570801,
             2388.47570801,  2389.47570801,  2390.47570801,  2391.47570801,
             2392.47570801,  2393.47570801,  2394.47570801,  2395.47570801,
             2396.47570801,  2397.47570801,  2398.47570801,  2399.47570801,
             2400.47570801,  2401.47570801,  2402.47570801,  2403.47570801,
             2404.47570801,  2405.47570801,  2406.47570801,  2407.47570801,
             2408.47570801,  2409.47570801,  2410.47570801,  2411.47570801,
             2412.47570801,  2413.47570801,  2414.47570801,  2415.47570801,
             2416.47570801,  2417.47570801,  2418.47570801,  2419.47570801,
             2420.47570801,  2421.47570801,  2422.47570801,  2423.47570801,
             2424.47570801,  2425.47570801,  2426.47570801,  2427.47570801,
             2428.47570801,  2429.47570801,  2430.47570801,  2431.47570801,
             2432.47570801,  2433.47570801,  2434.47570801,  2435.47570801,
             2436.47570801,  2437.47570801,  2438.47570801,  2439.47570801,
             2440.47570801,  2441.47570801,  2442.47570801,  2443.47570801,
             2444.47570801,  2445.47570801,  2446.47570801,  2447.47570801,
             2448.47570801,  2449.47570801,  2450.47570801,  2451.47570801,
             2452.47570801,  2453.47570801,  2454.47570801,  2455.47570801,
             2456.47570801,  2457.47570801,  2458.47570801,  2459.47570801,
             2460.47570801,  2461.47570801,  2462.47570801,  2463.47570801,
             2464.47570801,  2465.47570801,  2466.47570801,  2467.47570801,
             2468.47570801,  2469.47570801,  2470.47570801,  2471.47570801,
             2472.47570801,  2473.47570801,  2474.47570801,  2475.47570801,
             2476.47570801,  2477.47570801,  2478.47570801,  2479.47570801,
             2480.47570801,  2481.47570801,  2482.47570801,  2483.47570801,
             2484.47570801,  2485.47570801,  2486.47570801,  2487.47570801,
             2488.47570801,  2489.47570801,  2490.47570801,  2491.47570801,
             2492.47570801,  2493.47570801,  2494.47570801,  2495.47570801,
             2496.47570801,  2497.47570801,  2498.47570801,  2499.47570801,
             2500.47570801,  2501.47570801,  2502.47570801,  2503.47570801,
             2504.47570801,  2505.47570801,  2506.47570801,  2507.47570801,
             2508.47570801,  2509.47570801,  2510.47570801,  2511.47570801,
             2512.47570801,  2513.47570801,  2514.47570801])}




.. code:: python

    settings["fo_instances"]["clear"]




.. parsed-literal::

    {'atm_tables_fn': '/misc/fluo6/andre/projekte/Sentinel2/py/sicor/sicor/tables/linear_atm_functions_ncwv_4_npre_2_ncoz_2_ntmp_1_nch4_4_wvl_350.0_2550.0_1.00_pca.h5',
     'default_sensor': 'AVIRIS-NG-CH4',
     'dim_atm': ['spr', 'coz', 'cwv', 'ch4'],
     'dim_scat': ['tau_a'],
     'flag': 10,
     'hash_formats': {'coz': '%.0f,',
      'cwv': '%.0f,',
      'spr': '%.0f,',
      'sza': '%.0f,',
      'tau_a': '%.2f,',
      'tmp': '%0f,',
      'vza': '%.0f,'},
     'n_pcs': 35,
     'only_toa': True,
     'sensor_interpolation_reference': 'sensor',
     'slices': {},
     'table_path': '/table_aerosol/type_0_tmp_0'}



.. code:: python

    settings["rho_models_kwargs"]['AVIRIS-NG-CH4-subset']

Forward Operator Retrieval
==========================

.. code:: python

    fo.set_sensor('AVIRIS-NG-CH4-subset')
    fo.set_luts("ch4")
    fo.set_rho_lin(**settings["rho_models_kwargs"]['AVIRIS-NG-CH4-subset'])
    fo.interpolation_settings(jacobean=True, caching=False)

    mk_global(["p0","pt_names"])
    p0[:,:,list(pt_names).index("ch4")] = 3.0
    p0[:,:,list(pt_names).index("tau_a")] = 0.1
    p0[:,:,list(pt_names).index("cwv")] = 20.0
    data[np.nanmean(data[:,:,wvls_id_ch4],axis=2)<0.005] = np.NaN

    opt_range = "full"
    #opt_range = ((50,200,1),(200,370,1))
    #opt_range = ((190,200,1),(160,170,1))
    #opt_range = ((100,200,1),(100,200,1))
    #opt_range = ((100,101,1),(100,101,1))

    ff = FF(fo=fo,optimize_dims_atm=("ch4",))
    t0 = time()
    for zoom_factor,maxiter in ((None,50),):
        rr,mm,nr = __minimize__(pt_index=pt_indexes["clear"],
                                data=data[:,:,wvls_id_ch4],
                                zoom_factor = zoom_factor,opt_func = ff,
                                opt_range = opt_range,
                                processes=3,
                                monitor=False,
                                zoom_interpolation_order=1,debug=False,update_p0=True,
                                opt_options={"maxiter":maxiter,"disp":False})
    nr = np.sum(np.abs(mm - data[:,:,wvls_id_ch4]),axis=2) / len(wvls_id_ch4)
    t1 = time()
    print(t1-t0,"s", ((t1-t0) / np.sum(nr>0.0)) * np.prod(data.shape[:2]) / 60**2,"h")


.. parsed-literal::

    1000.1497676372528 s 0.277819379899 h


.. code:: python

    ch4 = np.copy(rr[:,:,0])
    ch4[nr>0.01] = np.NaN

    fig = plt.figure(figsize=(10,data.shape[0] / data.shape[1] * 0.8 * 10) )
    ax = plt.subplot(221)
    im = ax.imshow(ch4[:,:],cmap=plt.cm.Oranges,vmin=np.nanmedian(ch4[:,:]),vmax=1.4*np.nanmedian(ch4[:,:]))
    plt.colorbar(im)

    ax = plt.subplot(222)
    im = ax.imshow(nr[:,:],cmap=plt.cm.Oranges,vmin=0,vmax=0.01)
    plt.colorbar(im)

    ax = plt.subplot(223)
    im = ax.imshow(rr[:,:,1],cmap=plt.cm.Oranges,vmin=0.0,vmax=0.8)
    plt.colorbar(im)

    ax = plt.subplot(224)
    im = ax.imshow(rr[:,:,2],cmap=plt.cm.Oranges,vmin=0.0,vmax=0.8)
    plt.colorbar(im)
    plt.savefig(path.basename(fn).replace(".h5","_physical_ch4.jpg"),bbox_inches='tight',dpi=300)



.. image:: /misc/fluo6/andre/projekte/Sentinel2/py/sicor/docs/examples/sicor_ch4/sicor_ch4_18_0.png


ML Approach to CH4 Retreival
============================

.. code:: python

    from sklearn.linear_model import LinearRegression
    from sklearn import svm
    from sklearn.preprocessing import PolynomialFeatures
    from sklearn.pipeline import Pipeline
    from itertools import product
    from sklearn.neural_network import MLPRegressor
    from sklearn.preprocessing import normalize
    from sklearn.preprocessing import Normalizer
    from sklearn.model_selection import train_test_split

.. code:: python

    def ch4_opt(ch4,rho_1,rho_2,cwv=20.0):
        """use as: fo.reflectance_toa(**ch4_opt( 1.5,0.2,0.3)) -> spectrum"""
        bf = np.zeros(p0.shape[-1])
        bf[list(pt_names).index("ch4")] = ch4
        bf[list(pt_names).index("cwv")] = cwv
        bf[list(pt_names).index("tau_a")] = 0.1
        return {"pt":bf,"rho":fo.rj_to_rho_J(np.array([rho_1,rho_2],dtype=float))[0]}

.. code:: python

    fo.set_sensor('AVIRIS-NG-CH4-subset')
    fo.set_luts("ch4_cwv")
    fo.set_rho_lin(**settings["rho_models_kwargs"]['AVIRIS-NG-CH4-subset'])
    fo.interpolation_settings(jacobean=False, caching=False)

.. code:: python

    XX = []
    YY = []

    if True:
        for ii in range(500000):
            ch4 = np.random.uniform(0.7,10.0)
            cwv = np.random.uniform(1.0,30.0)
            r1,r2 = np.random.uniform(0.0,0.6),np.random.uniform(0.0,0.6)
            YY.append([ch4, r1,r2,cwv])
            XX.append(fo.reflectance_toa(**ch4_opt(ch4,r1,r2,cwv=cwv)))

    XX = np.array(XX,dtype=float)
    YY = np.array(YY,dtype=float)
    XX_train,XX_test, YY_train, YY_test = train_test_split(XX,YY,test_size=0.4)
    print(XX.shape,YY.shape)
    print(XX_train.shape,YY_train.shape)
    print(XX_test.shape,YY_test.shape)

    _ = plt.plot(data[:,:,wvls_id_ch4].reshape((-1,len(wvls_id_ch4)))[::500,:].transpose(),"k")
    _ = plt.plot(XX_test[::500,:].transpose(),"0.9")


.. parsed-literal::

    (500000, 46) (500000, 4)
    (300000, 46) (300000, 4)
    (200000, 46) (200000, 4)



.. image:: /misc/fluo6/andre/projekte/Sentinel2/py/sicor/docs/examples/sicor_ch4/sicor_ch4_23_1.png


.. code:: python

    data_YY = data[:,:,wvls_id_ch4].reshape((-1,len(wvls_id_ch4)))
    data_YY_valid = np.all(np.isfinite(data_YY),axis=1)
    res = np.zeros((data.shape[0],data.shape[1],YY_train.shape[-1]))
    res_flat = res.reshape((-1,YY_train.shape[-1]))
    res[:] = np.NaN

    if False:
        clf = Pipeline([('normalize', Normalizer()),
                        ('mpl',MLPRegressor(solver='adam', alpha=1e-5,hidden_layer_sizes=(100,100,100), random_state=42) )])
        clf = clf.fit(X=XX_train,y=YY_train)

    if True:
        clf = Pipeline([
            ('normalize', Normalizer()),
            ('mpl',MLPRegressor(solver='adam', alpha=1e-5,hidden_layer_sizes=(30,30,30,30), random_state=42,
                                activation='tanh'))
        ])
        clf = clf.fit(X=XX_train,y=YY_train)


    print(clf.score(XX_test,YY_test),clf.score(XX_train,YY_train))


.. parsed-literal::

    0.999266198941 0.999285873205


.. code:: python

    res_flat[data_YY_valid,:] = clf.predict(data_YY[data_YY_valid])
    res_flat[res_flat[:,0]<fo_dims["ch4"][0]] = fo_dims["ch4"][0]
    res_flat[res_flat[:,0]>fo_dims["ch4"][-1]] = fo_dims["ch4"][-1]

    data_inv = np.empty(data[:,:,wvls_id_ch4].shape)
    data_inv_flat = data_inv.reshape((-1,len(wvls_id_ch4)))
    data_inv[:] = np.NaN

    # use ml resulto to compte forwar operator value, then copute cost function (variable nr)
    vl = 0
    for ir,rr in tqdm(enumerate(res_flat[:,:])):
        if np.all(np.isfinite(rr)) is np.True_:
            try:
                data_inv_flat[ir,:] = fo.reflectance_toa(**ch4_opt(*rr))
                vl += 1
            except ValueError:
                data_inv_flat[ir,:] = np.NaN
    print(vl)
    nr = np.sum(np.abs(data_inv - data[:,:,wvls_id_ch4]),axis=2) / len(wvls_id_ch4)


.. parsed-literal::

    87500it [00:16, 5152.31it/s]


.. parsed-literal::

    87406


.. code:: python

    nr_min = 0.08
    ch4 = np.copy(res[:,:,0])
    ch4[nr>nr_min] = np.NaN
    for ii in range(3):
        i1,i2 = np.random.randint(0,data_inv.shape[0]-1),np.random.randint(0,data_inv.shape[1]-1)
        if np.isfinite(ch4[i1,i2]):
            if nr[i1,i2] < nr_min:
                plt.plot(data_inv[i1,i2,:],"k",label=str((i1,i2,nr[i1,i2])))
                plt.plot(data[i1,i2,wvls_id_ch4],"r")
    plt.legend()


.. parsed-literal::

    /misc/fluo6/andre/programme/anaconda/4.3.2/lib/python3.6/site-packages/ipykernel/__main__.py:3: RuntimeWarning: invalid value encountered in greater
      app.launch_new_instance()




.. parsed-literal::

    <matplotlib.legend.Legend at 0x2abaa5ab1940>




.. image:: /misc/fluo6/andre/projekte/Sentinel2/py/sicor/docs/examples/sicor_ch4/sicor_ch4_26_2.png


.. code:: python

    fig = plt.figure(figsize=(10,data.shape[0] / data.shape[1] * 0.8 * 10) )
    ax = plt.subplot(221)
    im = ax.imshow(ch4[:,:],cmap=plt.cm.Oranges,vmin=np.nanmedian(ch4[:,:]),vmax=1.4*np.nanmedian(ch4[:,:]))
    plt.colorbar(im)

    ax = plt.subplot(222)
    im = ax.imshow(nr[:,:],cmap=plt.cm.Oranges,vmin=0,vmax=0.1)
    plt.colorbar(im)

    ax = plt.subplot(223)
    im = ax.imshow(res[:,:,1],cmap=plt.cm.Oranges,vmin=0.0,vmax=0.7)
    plt.colorbar(im)

    ax = plt.subplot(224)
    im = ax.imshow(res[:,:,3],cmap=plt.cm.Oranges)
    plt.colorbar(im)
    plt.savefig(path.basename(fn).replace(".h5","_mpc_ch4.jpg"),bbox_inches='tight',dpi=300)



.. image:: /misc/fluo6/andre/projekte/Sentinel2/py/sicor/docs/examples/sicor_ch4/sicor_ch4_27_0.png

