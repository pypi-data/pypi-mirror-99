# Copyright 2020 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
######################## train lenet example ########################
train lenet and get network model files(.ckpt) :
python train.py --data_path /YourDataPath
"""
import os
import argparse

import mindspore.nn as nn
from mindspore import context
from mindspore.communication.management import init, get_rank
from mindspore.train.callback import ModelCheckpoint, CheckpointConfig, LossMonitor, TimeMonitor
from mindspore.train import Model
from mindspore.context import ParallelMode
from mindspore.train.serialization import load_checkpoint, load_param_into_net
from mindspore.nn.metrics import Accuracy
from mindspore.common import set_seed

from src.config import cfg
from src.dataset import create_dataset
from src.lenet import LeNet5

set_seed(1)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='MindSpore Lenet Example')
    parser.add_argument('--run_distribute', type=bool, default=False, help='Run distribute')
    parser.add_argument('--device_num', type=int, default=1, help='Device num.')
    parser.add_argument('--device_target', type=str, default="Ascend", choices=['Ascend', 'GPU'],
                        help='device where the code will be implemented (default: Ascend)')
    parser.add_argument('--dataset_path', type=str, default="./Data",
                        help='path where the dataset is saved')
    parser.add_argument('--pre_trained', type=str, default=None, help='Pre-trained checkpoint path')
    parser.add_argument('--dataset_sink', action='store_true', help='enable dataset sink or not')

    args = parser.parse_args()

    context.set_context(mode=context.GRAPH_MODE, device_target=args.device_target)
    ckpt_save_dir = './'
    if args.run_distribute:
        if args.device_target == 'Ascend':
            device_id = int(os.getenv('DEVICE_ID'))
            context.set_context(device_id=device_id)
            init()
        elif args.device_target == "GPU":
            init("nccl")
            ckpt_save_dir = os.path.join(ckpt_save_dir, 'ckpt_' + str(get_rank()))
        else:
            raise ValueError('Distribute running is no supported on %s' % args.device_target)
        context.reset_auto_parallel_context()
        context.set_auto_parallel_context(device_num=args.device_num, parallel_mode=ParallelMode.DATA_PARALLEL,
                                          gradients_mean=True)

    data_path = args.dataset_path
    do_train = True

    ds_train = create_dataset(data_path=data_path, do_train=do_train,
                              batch_size=cfg.batch_size, target=args.device_target)

    network = LeNet5(cfg.num_classes)
    if args.pre_trained:
        param_dict = load_checkpoint(args.pre_trained)
        load_param_into_net(network, param_dict)
    {% if loss=='SoftmaxCrossEntropyWithLogits' %}
    net_loss = nn.SoftmaxCrossEntropyWithLogits(sparse=True, reduction="mean")
    {% elif loss=='SoftmaxCrossEntropyExpand' %}
    net_loss = nn.SoftmaxCrossEntropyExpand(sparse=True)
    {% endif %}
    {% if optimizer=='Momentum' %}
    net_opt = nn.Momentum(network.trainable_params(), learning_rate=cfg.lr, momentum=cfg.momentum)
    {% else %}
    net_opt = nn.{{ optimizer }}(network.trainable_params(), learning_rate=cfg.lr)
    {% endif %}
    time_cb = TimeMonitor(data_size=ds_train.get_dataset_size())
    config_ck = CheckpointConfig(save_checkpoint_steps=cfg.save_checkpoint_steps,
                                 keep_checkpoint_max=cfg.keep_checkpoint_max)
    ckpoint_cb = ModelCheckpoint(prefix="checkpoint_lenet", directory=ckpt_save_dir, config=config_ck)
    model = Model(network, net_loss, net_opt, metrics={"Accuracy": Accuracy()})

    print("============== Starting Training ==============")
    model.train(cfg['epoch_size'], ds_train, callbacks=[time_cb, ckpoint_cb, LossMonitor()],
                dataset_sink_mode=args.dataset_sink)
