# Copyright 2020 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""train resnet."""
import os
import random
import argparse
import numpy as np
import mindspore.nn as nn
from mindspore import context
from mindspore import dataset as de
from mindspore.train.model import Model
from mindspore.train.serialization import load_checkpoint, load_param_into_net
from src.CrossEntropySmooth import CrossEntropySmooth

parser = argparse.ArgumentParser(description='Image classification')

parser.add_argument('--checkpoint_path', type=str, default=None, help='Checkpoint file path')
parser.add_argument('--dataset_path', type=str, default=None, help='Dataset path')
parser.add_argument('--device_target', type=str, default='Ascend', help='Device target')
parser.add_argument('--dataset_sink_mode', type=str, default='True', choices = ['True', 'False'],
                    help='DataSet sink mode is True or False')
args_opt = parser.parse_args()

random.seed(1)
np.random.seed(1)
de.config.set_seed(1)


from src.resnet50 import resnet50


from src.config import cfg
from src.dataset import create_dataset


if __name__ == '__main__':
    target = args_opt.device_target

    # init context
    device_id = int(os.getenv('DEVICE_ID'))
    context.set_context(mode=context.GRAPH_MODE, device_target=target, save_graphs=False, device_id=device_id)
    dataset_sink_mode = args_opt.dataset_sink_mode=='True'

    # create dataset
    dataset = create_dataset(data_path=args_opt.dataset_path, do_train=False, batch_size=cfg.batch_size, target=target)
    step_size = dataset.get_dataset_size()

    # define net
    net = resnet50(class_num=cfg.num_classes)

    # load checkpoint
    param_dict = load_checkpoint(args_opt.checkpoint_path)
    load_param_into_net(net, param_dict)
    net.set_train(False)

    # define loss, model
    {% if dataset=='ImageNet' %}
    {% if loss=='SoftmaxCrossEntropyWithLogits' %}
    if not cfg.use_label_smooth:
        cfg.label_smooth_factor = 0.0
    loss = CrossEntropySmooth(sparse=True, reduction='mean',
                              smooth_factor=cfg.label_smooth_factor, num_classes=cfg.num_classes)
    {% elif loss=='SoftmaxCrossEntropyExpand' %}
    loss = nn.SoftmaxCrossEntropyExpand(sparse=True)
    {% endif %}
    {% else %}
    {% if loss=='SoftmaxCrossEntropyWithLogits' %}
    loss = nn.SoftmaxCrossEntropyWithLogits(sparse=True, reduction='mean')
    {% elif loss=='SoftmaxCrossEntropyExpand' %}
    loss = nn.SoftmaxCrossEntropyExpand(sparse=True)
    {% endif %}
    {% endif %}
    # define model
    model = Model(net, loss_fn=loss, metrics={'top_1_accuracy', 'top_5_accuracy'})

    # eval model
    res = model.eval(dataset, dataset_sink_mode=dataset_sink_mode)
    print("result:", res, "ckpt=", args_opt.checkpoint_path)
