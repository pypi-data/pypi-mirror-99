# Copyright (C) 2017-2021  The SymbiFlow Authors.
#
# Use of this source code is governed by a ISC-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/ISC
#
# SPDX-License-Identifier: ISC

# !! WARNING !!
# Do not modify this file directly!
# !! WARNING !!
#
# It is generated from: ../workflows-src/build-and-upload-for-pypi-pure.yml
# using the script from https://github.com/mithro/actions-includes@main

name: Build (pure python) packages and publish on PyPI
on:
  push:
  pull_request:
jobs:

  Source:
    name: Source
    runs-on: ubuntu-20.04
    steps:
    - uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/build-and-upload-for-pypi-pure.yml
    - name: üß∞ Checkout
      uses: actions/checkout@v2
      with:
      # Always clone the full depth so git-describe works.
        fetch-depth: 0
        submodules: true

    - name: Git Info
      run: |
        git branch -v -a
        git tag -l
        git log -n1
        git describe
    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install latest pip
      run: |
        pip install -U pip wheel virtualenv

    - name: Install packaging tooling
      run: |
        pip install twine wheel auditwheel build

  # Install run dependencies
    - name: Install development tools
      run: |
        pip install -r requirements.txt
    - name: üöß Build distribution üì¶
      run: |
        python -m build --sdist --no-isolation .

    - name: ‚úîÔ∏é Check source üì¶
      shell: bash
      run: |
        shopt -s nullglob
        for SRC in dist/*.zip; do
          echo
          echo "::group::Checking $SRC"
          echo
          python -m zipfile --test $SRC
          python -m zipfile --list $SRC
          echo
          twine check $SRC
          echo
          echo "::endgroup::"
        done
        for SRC in dist/*.t*gz; do
          echo
          echo "::group::Checking $SRC"
          echo
          python -m tarfile --list $SRC
          echo
          twine check $SRC
          echo
          echo "::endgroup::"
        done

    - name: üì§ Upload source üì¶
      uses: actions/upload-artifact@v2
      with:
        name: source
        path: dist

  # Publish to PyPI if requested.
    - name: üì§ Publish source to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TEST_PASSWORD }}
      if: ${{ github.ref == 'refs/heads/master' && env.TWINE_PASSWORD != null }}
      run: |
        twine upload --skip-existing --verbose --repository testpypi dist/*

    - name: üì§ Publish source to PyPI
      if: ${{ github.ref == 'refs/heads/master' && startsWith(github.repository, 'SymbiFlow') && github.event_name != 'pull_request' && env.TWINE_PASSWORD != null }}
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/*
  Wheels:
    strategy:
      matrix:
        python-version:
        - 2.x
        - 3.x
      fail-fast: false

    name: ${{ matrix.python-version }}
    runs-on: ubuntu-20.04
    steps:
    - uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/build-and-upload-for-pypi-pure.yml
    - name: üß∞ Checkout
      uses: actions/checkout@v2
      with:
      # Always clone the full depth so git-describe works.
        fetch-depth: 0
        submodules: true

    - name: Git Info
      run: |
        git branch -v -a
        git tag -l
        git log -n1
        git describe
    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install latest pip
      run: |
        pip install -U pip wheel virtualenv

    - name: Install packaging tooling
      run: |
        pip install twine wheel auditwheel build

  # Install run dependencies
    - name: üöß Build distribution üì¶
      run: |
        python -m build --wheel .

    - name: ‚úîÔ∏é Check wheels üì¶
      shell: bash
      run: |
        PYVER=$(python2 -c "import sys; print(sys.version[0])")
        for WHEEL in dist/*.whl; do
          echo
          echo "::group::Checking $WHEEL"
          echo
          python -m zipfile -t $WHEEL
          python -m zipfile -l $WHEEL
          echo
          if [ "$(uname)" = "Linux" -a $PYVER -eq 3 ]; then
            auditwheel show $WHEEL
          fi
          echo
          twine check $WHEEL
          echo
          echo "::endgroup::"
        done

    - name: üì§ Upload wheels üì¶
      uses: actions/upload-artifact@v2
      with:
        name: wheels-${{ runner.os }}
        path: dist

  # Check and upload source package
    - name: üì§ Publish wheels to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TEST_PASSWORD }}
      if: ${{ github.ref == 'refs/heads/master' && env.TWINE_PASSWORD != null }}
      run: |
        twine upload --skip-existing --verbose --repository testpypi dist/*

    - name: üì§ Publish wheels to PyPI
      if: ${{ github.ref == 'refs/heads/master' && startsWith(github.repository, 'SymbiFlow') && github.event_name != 'pull_request' && env.TWINE_PASSWORD != null }}
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/*
