# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['cognite',
 'cognite.well_model',
 'cognite.well_model.client',
 'cognite.well_model.client.api',
 'cognite.well_model.client.models',
 'cognite.well_model.client.utils']

package_data = \
{'': ['*']}

install_requires = \
['cognite-logger>=0.5.0,<0.6.0',
 'helpers>=0.2.0,<0.3.0',
 'nulltype>=2.3.1,<3.0.0',
 'numpy>=1.18.1,<2.0.0',
 'oauthlib>=3.1.0,<4.0.0',
 'pandas>=1.0.1,<2.0.0',
 'pydantic>=1.8,<2.0',
 'requests-oauthlib>=1.3.0,<2.0.0',
 'requests>=2.21.0,<3.0.0']

setup_kwargs = {
    'name': 'cognite-wells-sdk',
    'version': '0.5.7',
    'description': '',
    'long_description': '## **Consuming**\n\n### Optionally set your env variables (must be valid for both cdf and geospatial API)\n\n```bash\nCOGNITE_WELLS_PROJECT=<project-tenant>\nCOGNITE_WELLS_CREDENTIALS=<your-api-key>\n```\n\nProject and key can then be accessed without exposing them in the code. Alternatively, the client can be initialised like:\n```python\nwells_client = CogniteWellsClient(project="your-project", api_key="your-api-key")\n```\n```\n\n### Set up client with Api-Key\n\n```python\nimport os\n\nfrom cognite.well_model import CogniteWellsClient\n\nwells_client = CogniteWellsClient(project=os.getenv("COGNITE_WELLS_PROJECT"), api_key=os.getenv("COGNITE_WELLS_CREDENTIALS"))\n```\n\n### **Well queries**\n\n#### _Get well by id:_\n\n```python\nwell = wells_client.wells.get_by_id(8456650753594878)\n```\n\n#### _List wells:_\n\n```python\nwells = wells_client.wells.list()\n```\n\n#### _Filter wells by wkt polygon:_\n\n```python\nfrom cognite.well_model.models import PolygonFilter\n\npolygon = \'POLYGON ((0.0 0.0, 0.0 80.0, 80.0 80.0, 80.0 0.0, 0.0 0.0))\'\nwells = wells_client.wells.filter(polygon=PolygonFilter(geometry=polygon, crs="epsg:4326"))\n```\n\n#### _Filter wells by wkt polygon, name/description and specify desired outputCrs_\n\n```python\npolygon = \'POLYGON ((0.0 0.0, 0.0 80.0, 80.0 80.0, 80.0 0.0, 0.0 0.0))\'\nwells = wells_client.wells.filter(\n    polygon=PolygonFilter(geometry=polygon, crs="epsg:4326", geometry_type="WKT"),\n    string_matching="16/",\n    output_crs="EPSG:23031"\n)\n```\n\n#### _Get wells that have a trajectory_\n\n```python\nfrom cognite.well_model.models import TrajectoryFilter\n\nwells = wells_client.wells.filter(has_trajectory=TrajectoryFilter(), limit=None)\n```\n\n#### _Get wells that have a trajectory with data between certain depths_\n\n```python\nwells = wells_client.wells.filter(has_trajectory=TrajectoryFilter(min_depth=1400.0, max_depth=1500.0), limit=None)\n```\n\n#### _Get wells that has the right set of measurement types_\n\n```python\nfrom cognite.well_model.models import MeasurementFilter, MeasurementFilters, MeasurementType\n\ngammarayFilter = MeasurementFilter(measurement_type=MeasurementType.gamma_ray)\ndensityFilter = MeasurementFilter(measurement_type=MeasurementType.density)\n\n# Get wells with all measurements\nmeasurements_filter = MeasurementFilters(contains_all=[gammarayFilter, densityFilter])\nwells = wells_client.wells.filter(has_measurements=measurements_filter, limit=None)\n\n# Or get wells with any of the measurements\nmeasurements_filter = MeasurementFilters(contains_any=[gammarayFilter, densityFilter])\nwells = wells_client.wells.filter(has_measurements=measurements_filter, limit=None)\n```\n\n#### _Get wellbores for a well id:_\n\n```python\nwellbores = wells_client.wellbores.get_from_well(well.id)\n```\n\nor\n\n```python\nwell = wells_client.wells.get_by_id(519497487848)\nwellbores = well.wellbores()\n```\n\n#### _Get wellbores from multiple well ids:_\n\n```python\nwellbores = wells_client.wellbores.get_from_wells([17257290836510, 8990585729991697])\n```\n\n#### _Filter - list all labels:_\n\n```python\nblocks = wells_client.wells.blocks()\nfields = wells_client.wells.fields()\noperators = wells_client.wells.operators()\nquadrants = wells_client.wells.quadrants()\nsources = wells_client.wells.sources()\nmeasurementTypes = wells_client.wells.measurements()\n```\n\n### **Wellbore queries**\n\n#### _Get wellbore by id:_\n\n```jupyterpython\nwellbore = wells_client.wellbores.get_by_id(2360682364100853)\n```\n\n#### _Get wellbore measurement for measurementType: \'GammaRay\':_\n\n```python\nmeasurements = wells_client.wellbores.get_measurement(wellbore_id=2360682364100853, measurement_type=MeasurementType.gamma_ray)\n```\n\n#### _Get trajectory for a wellbore:_\n\n```python\nwellbore = wells_client.wellbores.get_by_id(2360682364100853)\ntrajectory = wellbore.trajectory()\n```\n\nOr get it directly from a wellbore id\n\n```python\ntrajectory = wells_client.surveys.get_trajectory(2360682364100853)\n```\n\n### **Survey queries**\n\n#### _Get data from a survey, from start and end rows:_\n\n```python\ntrajectory_data = wells_client.surveys.get_data(17257290836510, start=0, end=100000, columns=["MD", "AZIMUTH"])\n```\n\n#### Get all data from a survey object\n```python\ntrajectory = wells_client.surveys.get_trajectory(2360682364100853)\ntrajectory_data = trajectory.data()\n```\n\n## Ingestion\n\n### Initialise tenant\n\nBefore ingesting any wells, the tenant must be initialised to add in the standard assets and labels used in the WDL.\n\n```python\nimport os\nfrom cognite.well_model import CogniteWellsClient\n\nwells_client = CogniteWellsClient(project=os.getenv("COGNITE_PROJECT"), api_key=os.getenv("COGNITE_API_KEY"))\nlog_output = wells_client.ingestion.ingestion_init()  # returns any log output seen while doing the initialisation\n```\n\n### Add source\n\nBefore ingestion from a source can take place the source must be registered in WDL\n\n```python\nimport os\nfrom cognite.well_model import CogniteWellsClient\n\nwells_client = CogniteWellsClient(project=os.getenv("COGNITE_PROJECT"), api_key=os.getenv("COGNITE_API_KEY"))\ncreated_sources = wells_client.sources.ingest_sources(["Source1, Source2"])\n```\n\n### Ingest wells\n```python\nimport os\nfrom datetime import date\n\nfrom cognite.well_model import CogniteWellsClient\nfrom cognite.well_model.models import DoubleWithUnit, WellDatum, Wellhead, WellIngestion\n\nwells_client = CogniteWellsClient(project=os.getenv("COGNITE_PROJECT"), api_key=os.getenv("COGNITE_API_KEY"))\nsource_asset_id = 102948135620745 # Id of the well source asset in cdf\n\nwell_to_create = WellIngestion(\n    asset_id=source_asset_id,\n    well_name="well-name",\n    description="Optional description for the well",\n    country="Norway",\n    quadrant="25",\n    block="25/5",\n    field="Example",\n    operator="Operator1",\n    spud_date=date(2021, 3, 17),\n    water_depth=0.0,\n    water_depth_unit="meters",\n    wellhead=Wellhead(\n        x = 21.0,\n        y = 42.0,\n        crs = "EPSG:4236" # Must be a EPSG code\n    ),\n    datum=WellDatum(\n        elevation = DoubleWithUnit(value=1.0, unit="meters"),\n        reference = "well-datum-reference",\n        name = "well-datum-name"\n    ),\n    source="Source System Name"\n)\n\nwells_client.ingestion.ingest_wells([well_to_create]) # Can add multiple WellIngestion objects at once\n```\n\n### Ingest wellbores with optional well and/or trajectory\n```python\nimport os\n\nfrom cognite.well_model import CogniteWellsClient\nfrom cognite.well_model.models import DoubleArrayWithUnit, TrajectoryIngestion, WellIngestion, WellboreIngestion, ParentType\n\nwells_client = CogniteWellsClient(project=os.getenv("COGNITE_PROJECT"), api_key=os.getenv("COGNITE_API_KEY"))\nsource_asset_id = 102948135620745 # Id of the wellbore source asset in cdf\nsource_trajectory_ext_id = "some sequence ext id" # Id of the source sequence in cdf\n\nwell_to_create = WellIngestion(...)\ntrajectory_to_create = TrajectoryIngestion(\n    source_sequence_ext_id=source_trajectory_ext_id,\n    measured_depths = DoubleArrayWithUnit(values=[0.0, 1.0, 2.0], unit="meters"),\n    inclinations = DoubleArrayWithUnit(values=[10.0, 1.0, 22.0], unit="degrees"),\n    azimuths = DoubleArrayWithUnit(values=[80.0, 81.0, 82.0], unit="degrees")\n)\n\nwellbore_to_create = WellboreIngestion(\n    asset_id = source_asset_id,\n    wellbore_name = "wellbore name",\n    parent_name = "name of parent well or wellbore",\n    parent_type = ParentType.well, # or ParentType.wellbore\n    source = "Source System Name",\n    trajectory_ingestion = trajectory_to_create,\n    well_ingestion = well_to_create # if not ingesting a well, then one must already exist\n)\n\nwells_client.ingestion.ingest_wells([wellbore_to_create]) # Can add multiple WellboreIngestion objects at once\n```\n\n### Ingest wellbores with optional well and/or trajectory\n```python\nimport os\n\nfrom cognite.well_model import CogniteWellsClient\nfrom cognite.well_model.models import DoubleArrayWithUnit, CasingIngestion\n\nwells_client = CogniteWellsClient(project=os.getenv("COGNITE_PROJECT"), api_key=os.getenv("COGNITE_API_KEY"))\nsource_casing_id = 102948135620745 # Id of the casing source sequence in cdf\n\n\ncasing_to_ingest = CasingIngestion(\n    source_casing_id = source_casing_id,\n    wellbore_name = "wellbore name",\n    casing_name = "Surface Casing",\n    body_inside_diameter = DoubleArrayWithUnit(values=[100.0, 120.0, 130.0], unit="mm"),\n    body_outside_diameter = DoubleArrayWithUnit(values=[100.0, 120.0, 130.0], unit="mm"),\n    md_top = DoubleArrayWithUnit(values=[100.0, 120.0, 130.0], unit="m"),\n    md_base = DoubleArrayWithUnit(values=[120.0, 150.0, 190.0], unit="m"),\n    tvd_top = DoubleArrayWithUnit(values=[100.0, 120.0, 130.0], unit="m"), # TVD measurements are optional\n    tvd_base = DoubleArrayWithUnit(values=[120.0, 150.0, 190.0], unit="m") # TVD measurements are optional\n)\n\nwells_client.ingestion.ingest_casings([casing_to_ingest]) # Can add multiple CasingIngestion objects at once\n```',
    'author': 'Dylan Phelps',
    'author_email': 'dylan.phelps@cognite.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7.0,<4.0.0',
}


setup(**setup_kwargs)
