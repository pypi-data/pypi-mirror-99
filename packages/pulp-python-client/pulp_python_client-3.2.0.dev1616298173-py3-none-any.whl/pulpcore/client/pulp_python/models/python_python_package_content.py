# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pulpcore.client.pulp_python.configuration import Configuration


class PythonPythonPackageContent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'artifact': 'str',
        'relative_path': 'str',
        'file': 'file',
        'repository': 'str',
        'summary': 'str',
        'description': 'str',
        'keywords': 'str',
        'home_page': 'str',
        'download_url': 'str',
        'author': 'str',
        'author_email': 'str',
        'maintainer': 'str',
        'maintainer_email': 'str',
        'license': 'str',
        'requires_python': 'str',
        'project_url': 'str',
        'platform': 'str',
        'supported_platform': 'str',
        'requires_dist': 'object',
        'provides_dist': 'object',
        'obsoletes_dist': 'object',
        'requires_external': 'object',
        'classifiers': 'object'
    }

    attribute_map = {
        'artifact': 'artifact',
        'relative_path': 'relative_path',
        'file': 'file',
        'repository': 'repository',
        'summary': 'summary',
        'description': 'description',
        'keywords': 'keywords',
        'home_page': 'home_page',
        'download_url': 'download_url',
        'author': 'author',
        'author_email': 'author_email',
        'maintainer': 'maintainer',
        'maintainer_email': 'maintainer_email',
        'license': 'license',
        'requires_python': 'requires_python',
        'project_url': 'project_url',
        'platform': 'platform',
        'supported_platform': 'supported_platform',
        'requires_dist': 'requires_dist',
        'provides_dist': 'provides_dist',
        'obsoletes_dist': 'obsoletes_dist',
        'requires_external': 'requires_external',
        'classifiers': 'classifiers'
    }

    def __init__(self, artifact=None, relative_path=None, file=None, repository=None, summary=None, description=None, keywords=None, home_page=None, download_url=None, author=None, author_email=None, maintainer=None, maintainer_email=None, license=None, requires_python=None, project_url=None, platform=None, supported_platform=None, requires_dist=None, provides_dist=None, obsoletes_dist=None, requires_external=None, classifiers=None, local_vars_configuration=None):  # noqa: E501
        """PythonPythonPackageContent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._artifact = None
        self._relative_path = None
        self._file = None
        self._repository = None
        self._summary = None
        self._description = None
        self._keywords = None
        self._home_page = None
        self._download_url = None
        self._author = None
        self._author_email = None
        self._maintainer = None
        self._maintainer_email = None
        self._license = None
        self._requires_python = None
        self._project_url = None
        self._platform = None
        self._supported_platform = None
        self._requires_dist = None
        self._provides_dist = None
        self._obsoletes_dist = None
        self._requires_external = None
        self._classifiers = None
        self.discriminator = None

        if artifact is not None:
            self.artifact = artifact
        self.relative_path = relative_path
        if file is not None:
            self.file = file
        if repository is not None:
            self.repository = repository
        if summary is not None:
            self.summary = summary
        if description is not None:
            self.description = description
        if keywords is not None:
            self.keywords = keywords
        if home_page is not None:
            self.home_page = home_page
        if download_url is not None:
            self.download_url = download_url
        if author is not None:
            self.author = author
        if author_email is not None:
            self.author_email = author_email
        if maintainer is not None:
            self.maintainer = maintainer
        if maintainer_email is not None:
            self.maintainer_email = maintainer_email
        if license is not None:
            self.license = license
        if requires_python is not None:
            self.requires_python = requires_python
        if project_url is not None:
            self.project_url = project_url
        if platform is not None:
            self.platform = platform
        if supported_platform is not None:
            self.supported_platform = supported_platform
        if requires_dist is not None:
            self.requires_dist = requires_dist
        if provides_dist is not None:
            self.provides_dist = provides_dist
        if obsoletes_dist is not None:
            self.obsoletes_dist = obsoletes_dist
        if requires_external is not None:
            self.requires_external = requires_external
        if classifiers is not None:
            self.classifiers = classifiers

    @property
    def artifact(self):
        """Gets the artifact of this PythonPythonPackageContent.  # noqa: E501

        Artifact file representing the physical content  # noqa: E501

        :return: The artifact of this PythonPythonPackageContent.  # noqa: E501
        :rtype: str
        """
        return self._artifact

    @artifact.setter
    def artifact(self, artifact):
        """Sets the artifact of this PythonPythonPackageContent.

        Artifact file representing the physical content  # noqa: E501

        :param artifact: The artifact of this PythonPythonPackageContent.  # noqa: E501
        :type: str
        """

        self._artifact = artifact

    @property
    def relative_path(self):
        """Gets the relative_path of this PythonPythonPackageContent.  # noqa: E501

        Path where the artifact is located relative to distributions base_path  # noqa: E501

        :return: The relative_path of this PythonPythonPackageContent.  # noqa: E501
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this PythonPythonPackageContent.

        Path where the artifact is located relative to distributions base_path  # noqa: E501

        :param relative_path: The relative_path of this PythonPythonPackageContent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and relative_path is None:  # noqa: E501
            raise ValueError("Invalid value for `relative_path`, must not be `None`")  # noqa: E501

        self._relative_path = relative_path

    @property
    def file(self):
        """Gets the file of this PythonPythonPackageContent.  # noqa: E501

        An uploaded file that may be turned into the artifact of the content unit.  # noqa: E501

        :return: The file of this PythonPythonPackageContent.  # noqa: E501
        :rtype: file
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this PythonPythonPackageContent.

        An uploaded file that may be turned into the artifact of the content unit.  # noqa: E501

        :param file: The file of this PythonPythonPackageContent.  # noqa: E501
        :type: file
        """

        self._file = file

    @property
    def repository(self):
        """Gets the repository of this PythonPythonPackageContent.  # noqa: E501

        A URI of a repository the new content unit should be associated with.  # noqa: E501

        :return: The repository of this PythonPythonPackageContent.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this PythonPythonPackageContent.

        A URI of a repository the new content unit should be associated with.  # noqa: E501

        :param repository: The repository of this PythonPythonPackageContent.  # noqa: E501
        :type: str
        """

        self._repository = repository

    @property
    def summary(self):
        """Gets the summary of this PythonPythonPackageContent.  # noqa: E501

        A one-line summary of what the package does.  # noqa: E501

        :return: The summary of this PythonPythonPackageContent.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this PythonPythonPackageContent.

        A one-line summary of what the package does.  # noqa: E501

        :param summary: The summary of this PythonPythonPackageContent.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def description(self):
        """Gets the description of this PythonPythonPackageContent.  # noqa: E501

        A longer description of the package that can run to several paragraphs.  # noqa: E501

        :return: The description of this PythonPythonPackageContent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PythonPythonPackageContent.

        A longer description of the package that can run to several paragraphs.  # noqa: E501

        :param description: The description of this PythonPythonPackageContent.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def keywords(self):
        """Gets the keywords of this PythonPythonPackageContent.  # noqa: E501

        Additional keywords to be used to assist searching for the package in a larger catalog.  # noqa: E501

        :return: The keywords of this PythonPythonPackageContent.  # noqa: E501
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this PythonPythonPackageContent.

        Additional keywords to be used to assist searching for the package in a larger catalog.  # noqa: E501

        :param keywords: The keywords of this PythonPythonPackageContent.  # noqa: E501
        :type: str
        """

        self._keywords = keywords

    @property
    def home_page(self):
        """Gets the home_page of this PythonPythonPackageContent.  # noqa: E501

        The URL for the package's home page.  # noqa: E501

        :return: The home_page of this PythonPythonPackageContent.  # noqa: E501
        :rtype: str
        """
        return self._home_page

    @home_page.setter
    def home_page(self, home_page):
        """Sets the home_page of this PythonPythonPackageContent.

        The URL for the package's home page.  # noqa: E501

        :param home_page: The home_page of this PythonPythonPackageContent.  # noqa: E501
        :type: str
        """

        self._home_page = home_page

    @property
    def download_url(self):
        """Gets the download_url of this PythonPythonPackageContent.  # noqa: E501

        Legacy field denoting the URL from which this package can be downloaded.  # noqa: E501

        :return: The download_url of this PythonPythonPackageContent.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this PythonPythonPackageContent.

        Legacy field denoting the URL from which this package can be downloaded.  # noqa: E501

        :param download_url: The download_url of this PythonPythonPackageContent.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def author(self):
        """Gets the author of this PythonPythonPackageContent.  # noqa: E501

        Text containing the author's name. Contact information can also be added, separated with newlines.  # noqa: E501

        :return: The author of this PythonPythonPackageContent.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this PythonPythonPackageContent.

        Text containing the author's name. Contact information can also be added, separated with newlines.  # noqa: E501

        :param author: The author of this PythonPythonPackageContent.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def author_email(self):
        """Gets the author_email of this PythonPythonPackageContent.  # noqa: E501

        The author's e-mail address.   # noqa: E501

        :return: The author_email of this PythonPythonPackageContent.  # noqa: E501
        :rtype: str
        """
        return self._author_email

    @author_email.setter
    def author_email(self, author_email):
        """Sets the author_email of this PythonPythonPackageContent.

        The author's e-mail address.   # noqa: E501

        :param author_email: The author_email of this PythonPythonPackageContent.  # noqa: E501
        :type: str
        """

        self._author_email = author_email

    @property
    def maintainer(self):
        """Gets the maintainer of this PythonPythonPackageContent.  # noqa: E501

        The maintainer's name at a minimum; additional contact information may be provided.  # noqa: E501

        :return: The maintainer of this PythonPythonPackageContent.  # noqa: E501
        :rtype: str
        """
        return self._maintainer

    @maintainer.setter
    def maintainer(self, maintainer):
        """Sets the maintainer of this PythonPythonPackageContent.

        The maintainer's name at a minimum; additional contact information may be provided.  # noqa: E501

        :param maintainer: The maintainer of this PythonPythonPackageContent.  # noqa: E501
        :type: str
        """

        self._maintainer = maintainer

    @property
    def maintainer_email(self):
        """Gets the maintainer_email of this PythonPythonPackageContent.  # noqa: E501

        The maintainer's e-mail address.  # noqa: E501

        :return: The maintainer_email of this PythonPythonPackageContent.  # noqa: E501
        :rtype: str
        """
        return self._maintainer_email

    @maintainer_email.setter
    def maintainer_email(self, maintainer_email):
        """Sets the maintainer_email of this PythonPythonPackageContent.

        The maintainer's e-mail address.  # noqa: E501

        :param maintainer_email: The maintainer_email of this PythonPythonPackageContent.  # noqa: E501
        :type: str
        """

        self._maintainer_email = maintainer_email

    @property
    def license(self):
        """Gets the license of this PythonPythonPackageContent.  # noqa: E501

        Text indicating the license covering the distribution  # noqa: E501

        :return: The license of this PythonPythonPackageContent.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this PythonPythonPackageContent.

        Text indicating the license covering the distribution  # noqa: E501

        :param license: The license of this PythonPythonPackageContent.  # noqa: E501
        :type: str
        """

        self._license = license

    @property
    def requires_python(self):
        """Gets the requires_python of this PythonPythonPackageContent.  # noqa: E501

        The Python version(s) that the distribution is guaranteed to be compatible with.  # noqa: E501

        :return: The requires_python of this PythonPythonPackageContent.  # noqa: E501
        :rtype: str
        """
        return self._requires_python

    @requires_python.setter
    def requires_python(self, requires_python):
        """Sets the requires_python of this PythonPythonPackageContent.

        The Python version(s) that the distribution is guaranteed to be compatible with.  # noqa: E501

        :param requires_python: The requires_python of this PythonPythonPackageContent.  # noqa: E501
        :type: str
        """

        self._requires_python = requires_python

    @property
    def project_url(self):
        """Gets the project_url of this PythonPythonPackageContent.  # noqa: E501

        A browsable URL for the project and a label for it, separated by a comma.  # noqa: E501

        :return: The project_url of this PythonPythonPackageContent.  # noqa: E501
        :rtype: str
        """
        return self._project_url

    @project_url.setter
    def project_url(self, project_url):
        """Sets the project_url of this PythonPythonPackageContent.

        A browsable URL for the project and a label for it, separated by a comma.  # noqa: E501

        :param project_url: The project_url of this PythonPythonPackageContent.  # noqa: E501
        :type: str
        """

        self._project_url = project_url

    @property
    def platform(self):
        """Gets the platform of this PythonPythonPackageContent.  # noqa: E501

        A comma-separated list of platform specifications, summarizing the operating systems supported by the package.  # noqa: E501

        :return: The platform of this PythonPythonPackageContent.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this PythonPythonPackageContent.

        A comma-separated list of platform specifications, summarizing the operating systems supported by the package.  # noqa: E501

        :param platform: The platform of this PythonPythonPackageContent.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def supported_platform(self):
        """Gets the supported_platform of this PythonPythonPackageContent.  # noqa: E501

        Field to specify the OS and CPU for which the binary package was compiled.   # noqa: E501

        :return: The supported_platform of this PythonPythonPackageContent.  # noqa: E501
        :rtype: str
        """
        return self._supported_platform

    @supported_platform.setter
    def supported_platform(self, supported_platform):
        """Sets the supported_platform of this PythonPythonPackageContent.

        Field to specify the OS and CPU for which the binary package was compiled.   # noqa: E501

        :param supported_platform: The supported_platform of this PythonPythonPackageContent.  # noqa: E501
        :type: str
        """

        self._supported_platform = supported_platform

    @property
    def requires_dist(self):
        """Gets the requires_dist of this PythonPythonPackageContent.  # noqa: E501

        A JSON list containing names of some other distutils project required by this distribution.  # noqa: E501

        :return: The requires_dist of this PythonPythonPackageContent.  # noqa: E501
        :rtype: object
        """
        return self._requires_dist

    @requires_dist.setter
    def requires_dist(self, requires_dist):
        """Sets the requires_dist of this PythonPythonPackageContent.

        A JSON list containing names of some other distutils project required by this distribution.  # noqa: E501

        :param requires_dist: The requires_dist of this PythonPythonPackageContent.  # noqa: E501
        :type: object
        """

        self._requires_dist = requires_dist

    @property
    def provides_dist(self):
        """Gets the provides_dist of this PythonPythonPackageContent.  # noqa: E501

        A JSON list containing names of a Distutils project which is contained within this distribution.  # noqa: E501

        :return: The provides_dist of this PythonPythonPackageContent.  # noqa: E501
        :rtype: object
        """
        return self._provides_dist

    @provides_dist.setter
    def provides_dist(self, provides_dist):
        """Sets the provides_dist of this PythonPythonPackageContent.

        A JSON list containing names of a Distutils project which is contained within this distribution.  # noqa: E501

        :param provides_dist: The provides_dist of this PythonPythonPackageContent.  # noqa: E501
        :type: object
        """

        self._provides_dist = provides_dist

    @property
    def obsoletes_dist(self):
        """Gets the obsoletes_dist of this PythonPythonPackageContent.  # noqa: E501

        A JSON list containing names of a distutils project's distribution which this distribution renders obsolete, meaning that the two projects should not be installed at the same time.  # noqa: E501

        :return: The obsoletes_dist of this PythonPythonPackageContent.  # noqa: E501
        :rtype: object
        """
        return self._obsoletes_dist

    @obsoletes_dist.setter
    def obsoletes_dist(self, obsoletes_dist):
        """Sets the obsoletes_dist of this PythonPythonPackageContent.

        A JSON list containing names of a distutils project's distribution which this distribution renders obsolete, meaning that the two projects should not be installed at the same time.  # noqa: E501

        :param obsoletes_dist: The obsoletes_dist of this PythonPythonPackageContent.  # noqa: E501
        :type: object
        """

        self._obsoletes_dist = obsoletes_dist

    @property
    def requires_external(self):
        """Gets the requires_external of this PythonPythonPackageContent.  # noqa: E501

        A JSON list containing some dependency in the system that the distribution is to be used.  # noqa: E501

        :return: The requires_external of this PythonPythonPackageContent.  # noqa: E501
        :rtype: object
        """
        return self._requires_external

    @requires_external.setter
    def requires_external(self, requires_external):
        """Sets the requires_external of this PythonPythonPackageContent.

        A JSON list containing some dependency in the system that the distribution is to be used.  # noqa: E501

        :param requires_external: The requires_external of this PythonPythonPackageContent.  # noqa: E501
        :type: object
        """

        self._requires_external = requires_external

    @property
    def classifiers(self):
        """Gets the classifiers of this PythonPythonPackageContent.  # noqa: E501

        A JSON list containing classification values for a Python package.  # noqa: E501

        :return: The classifiers of this PythonPythonPackageContent.  # noqa: E501
        :rtype: object
        """
        return self._classifiers

    @classifiers.setter
    def classifiers(self, classifiers):
        """Sets the classifiers of this PythonPythonPackageContent.

        A JSON list containing classification values for a Python package.  # noqa: E501

        :param classifiers: The classifiers of this PythonPythonPackageContent.  # noqa: E501
        :type: object
        """

        self._classifiers = classifiers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PythonPythonPackageContent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PythonPythonPackageContent):
            return True

        return self.to_dict() != other.to_dict()
