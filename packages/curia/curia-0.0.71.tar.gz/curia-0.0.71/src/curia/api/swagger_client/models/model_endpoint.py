# coding: utf-8

"""
    Curia Platform API

    These are the docs for the curia platform API. To test, generate an authorization token first.  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelEndpoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'endpoint_arn': 'str',
        'status': 'str',
        'config': 'object',
        'model_id': 'str',
        'model_job_id': 'str',
        'last_updated_by': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'version': 'float'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'endpoint_arn': 'endpointArn',
        'status': 'status',
        'config': 'config',
        'model_id': 'modelId',
        'model_job_id': 'modelJobId',
        'last_updated_by': 'lastUpdatedBy',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'version': 'version'
    }

    def __init__(self, id=None, name=None, endpoint_arn=None, status=None, config=None, model_id=None, model_job_id=None, last_updated_by=None, created_at=None, updated_at=None, version=None):  # noqa: E501
        """ModelEndpoint - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._endpoint_arn = None
        self._status = None
        self._config = None
        self._model_id = None
        self._model_job_id = None
        self._last_updated_by = None
        self._created_at = None
        self._updated_at = None
        self._version = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        if endpoint_arn is not None:
            self.endpoint_arn = endpoint_arn
        if status is not None:
            self.status = status
        if config is not None:
            self.config = config
        self.model_id = model_id
        self.model_job_id = model_job_id
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if version is not None:
            self.version = version

    @property
    def id(self):
        """Gets the id of this ModelEndpoint.  # noqa: E501


        :return: The id of this ModelEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelEndpoint.


        :param id: The id of this ModelEndpoint.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ModelEndpoint.  # noqa: E501


        :return: The name of this ModelEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelEndpoint.


        :param name: The name of this ModelEndpoint.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def endpoint_arn(self):
        """Gets the endpoint_arn of this ModelEndpoint.  # noqa: E501


        :return: The endpoint_arn of this ModelEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_arn

    @endpoint_arn.setter
    def endpoint_arn(self, endpoint_arn):
        """Sets the endpoint_arn of this ModelEndpoint.


        :param endpoint_arn: The endpoint_arn of this ModelEndpoint.  # noqa: E501
        :type: str
        """

        self._endpoint_arn = endpoint_arn

    @property
    def status(self):
        """Gets the status of this ModelEndpoint.  # noqa: E501


        :return: The status of this ModelEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ModelEndpoint.


        :param status: The status of this ModelEndpoint.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def config(self):
        """Gets the config of this ModelEndpoint.  # noqa: E501


        :return: The config of this ModelEndpoint.  # noqa: E501
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ModelEndpoint.


        :param config: The config of this ModelEndpoint.  # noqa: E501
        :type: object
        """

        self._config = config

    @property
    def model_id(self):
        """Gets the model_id of this ModelEndpoint.  # noqa: E501


        :return: The model_id of this ModelEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this ModelEndpoint.


        :param model_id: The model_id of this ModelEndpoint.  # noqa: E501
        :type: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")  # noqa: E501

        self._model_id = model_id

    @property
    def model_job_id(self):
        """Gets the model_job_id of this ModelEndpoint.  # noqa: E501


        :return: The model_job_id of this ModelEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._model_job_id

    @model_job_id.setter
    def model_job_id(self, model_job_id):
        """Sets the model_job_id of this ModelEndpoint.


        :param model_job_id: The model_job_id of this ModelEndpoint.  # noqa: E501
        :type: str
        """
        if model_job_id is None:
            raise ValueError("Invalid value for `model_job_id`, must not be `None`")  # noqa: E501

        self._model_job_id = model_job_id

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this ModelEndpoint.  # noqa: E501


        :return: The last_updated_by of this ModelEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this ModelEndpoint.


        :param last_updated_by: The last_updated_by of this ModelEndpoint.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def created_at(self):
        """Gets the created_at of this ModelEndpoint.  # noqa: E501


        :return: The created_at of this ModelEndpoint.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ModelEndpoint.


        :param created_at: The created_at of this ModelEndpoint.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ModelEndpoint.  # noqa: E501


        :return: The updated_at of this ModelEndpoint.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ModelEndpoint.


        :param updated_at: The updated_at of this ModelEndpoint.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def version(self):
        """Gets the version of this ModelEndpoint.  # noqa: E501


        :return: The version of this ModelEndpoint.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ModelEndpoint.


        :param version: The version of this ModelEndpoint.  # noqa: E501
        :type: float
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelEndpoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelEndpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
