# coding: utf-8

"""
    Curia Platform API

    These are the docs for the curia platform API. To test, generate an authorization token first.  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Project(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'organization_id': 'str',
        'parent_project_id': 'str',
        'project_level': 'float',
        'children_projects': 'list[Project]',
        'models': 'list[Model]',
        'members': 'list[ProjectMember]',
        'features': 'list[Feature]',
        'model_jobs': 'list[ModelJob]',
        'model_job_events': 'list[ModelJobEvent]',
        'user_favorites': 'list[UserFavorite]',
        'last_updated_by': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'version': 'float'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'organization_id': 'organizationId',
        'parent_project_id': 'parentProjectId',
        'project_level': 'projectLevel',
        'children_projects': 'childrenProjects',
        'models': 'models',
        'members': 'members',
        'features': 'features',
        'model_jobs': 'modelJobs',
        'model_job_events': 'modelJobEvents',
        'user_favorites': 'userFavorites',
        'last_updated_by': 'lastUpdatedBy',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'version': 'version'
    }

    def __init__(self, id=None, name=None, description=None, organization_id=None, parent_project_id=None, project_level=None, children_projects=None, models=None, members=None, features=None, model_jobs=None, model_job_events=None, user_favorites=None, last_updated_by=None, created_at=None, updated_at=None, version=None):  # noqa: E501
        """Project - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._organization_id = None
        self._parent_project_id = None
        self._project_level = None
        self._children_projects = None
        self._models = None
        self._members = None
        self._features = None
        self._model_jobs = None
        self._model_job_events = None
        self._user_favorites = None
        self._last_updated_by = None
        self._created_at = None
        self._updated_at = None
        self._version = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        if description is not None:
            self.description = description
        if organization_id is not None:
            self.organization_id = organization_id
        if parent_project_id is not None:
            self.parent_project_id = parent_project_id
        if project_level is not None:
            self.project_level = project_level
        if children_projects is not None:
            self.children_projects = children_projects
        if models is not None:
            self.models = models
        if members is not None:
            self.members = members
        if features is not None:
            self.features = features
        if model_jobs is not None:
            self.model_jobs = model_jobs
        if model_job_events is not None:
            self.model_job_events = model_job_events
        if user_favorites is not None:
            self.user_favorites = user_favorites
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if version is not None:
            self.version = version

    @property
    def id(self):
        """Gets the id of this Project.  # noqa: E501


        :return: The id of this Project.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.


        :param id: The id of this Project.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501


        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Project.  # noqa: E501


        :return: The description of this Project.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.


        :param description: The description of this Project.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def organization_id(self):
        """Gets the organization_id of this Project.  # noqa: E501


        :return: The organization_id of this Project.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Project.


        :param organization_id: The organization_id of this Project.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def parent_project_id(self):
        """Gets the parent_project_id of this Project.  # noqa: E501


        :return: The parent_project_id of this Project.  # noqa: E501
        :rtype: str
        """
        return self._parent_project_id

    @parent_project_id.setter
    def parent_project_id(self, parent_project_id):
        """Sets the parent_project_id of this Project.


        :param parent_project_id: The parent_project_id of this Project.  # noqa: E501
        :type: str
        """

        self._parent_project_id = parent_project_id

    @property
    def project_level(self):
        """Gets the project_level of this Project.  # noqa: E501


        :return: The project_level of this Project.  # noqa: E501
        :rtype: float
        """
        return self._project_level

    @project_level.setter
    def project_level(self, project_level):
        """Sets the project_level of this Project.


        :param project_level: The project_level of this Project.  # noqa: E501
        :type: float
        """

        self._project_level = project_level

    @property
    def children_projects(self):
        """Gets the children_projects of this Project.  # noqa: E501


        :return: The children_projects of this Project.  # noqa: E501
        :rtype: list[Project]
        """
        return self._children_projects

    @children_projects.setter
    def children_projects(self, children_projects):
        """Sets the children_projects of this Project.


        :param children_projects: The children_projects of this Project.  # noqa: E501
        :type: list[Project]
        """

        self._children_projects = children_projects

    @property
    def models(self):
        """Gets the models of this Project.  # noqa: E501


        :return: The models of this Project.  # noqa: E501
        :rtype: list[Model]
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this Project.


        :param models: The models of this Project.  # noqa: E501
        :type: list[Model]
        """

        self._models = models

    @property
    def members(self):
        """Gets the members of this Project.  # noqa: E501


        :return: The members of this Project.  # noqa: E501
        :rtype: list[ProjectMember]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this Project.


        :param members: The members of this Project.  # noqa: E501
        :type: list[ProjectMember]
        """

        self._members = members

    @property
    def features(self):
        """Gets the features of this Project.  # noqa: E501


        :return: The features of this Project.  # noqa: E501
        :rtype: list[Feature]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Project.


        :param features: The features of this Project.  # noqa: E501
        :type: list[Feature]
        """

        self._features = features

    @property
    def model_jobs(self):
        """Gets the model_jobs of this Project.  # noqa: E501


        :return: The model_jobs of this Project.  # noqa: E501
        :rtype: list[ModelJob]
        """
        return self._model_jobs

    @model_jobs.setter
    def model_jobs(self, model_jobs):
        """Sets the model_jobs of this Project.


        :param model_jobs: The model_jobs of this Project.  # noqa: E501
        :type: list[ModelJob]
        """

        self._model_jobs = model_jobs

    @property
    def model_job_events(self):
        """Gets the model_job_events of this Project.  # noqa: E501


        :return: The model_job_events of this Project.  # noqa: E501
        :rtype: list[ModelJobEvent]
        """
        return self._model_job_events

    @model_job_events.setter
    def model_job_events(self, model_job_events):
        """Sets the model_job_events of this Project.


        :param model_job_events: The model_job_events of this Project.  # noqa: E501
        :type: list[ModelJobEvent]
        """

        self._model_job_events = model_job_events

    @property
    def user_favorites(self):
        """Gets the user_favorites of this Project.  # noqa: E501


        :return: The user_favorites of this Project.  # noqa: E501
        :rtype: list[UserFavorite]
        """
        return self._user_favorites

    @user_favorites.setter
    def user_favorites(self, user_favorites):
        """Sets the user_favorites of this Project.


        :param user_favorites: The user_favorites of this Project.  # noqa: E501
        :type: list[UserFavorite]
        """

        self._user_favorites = user_favorites

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this Project.  # noqa: E501


        :return: The last_updated_by of this Project.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this Project.


        :param last_updated_by: The last_updated_by of this Project.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def created_at(self):
        """Gets the created_at of this Project.  # noqa: E501


        :return: The created_at of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Project.


        :param created_at: The created_at of this Project.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Project.  # noqa: E501


        :return: The updated_at of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Project.


        :param updated_at: The updated_at of this Project.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def version(self):
        """Gets the version of this Project.  # noqa: E501


        :return: The version of this Project.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Project.


        :param version: The version of this Project.  # noqa: E501
        :type: float
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Project, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
