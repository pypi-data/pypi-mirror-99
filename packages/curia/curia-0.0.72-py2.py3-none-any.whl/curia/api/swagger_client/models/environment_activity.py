# coding: utf-8

"""
    Curia Platform API

    These are the docs for the curia platform API. To test, generate an authorization token first.  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnvironmentActivity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'step_id': 'str',
        'step_name': 'str',
        'status': 'str',
        'environment_id': 'str',
        'details': 'object',
        'organization_id': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'version': 'float'
    }

    attribute_map = {
        'id': 'id',
        'step_id': 'stepId',
        'step_name': 'stepName',
        'status': 'status',
        'environment_id': 'environmentId',
        'details': 'details',
        'organization_id': 'organizationId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'version': 'version'
    }

    def __init__(self, id=None, step_id=None, step_name=None, status=None, environment_id=None, details=None, organization_id=None, created_at=None, updated_at=None, version=None):  # noqa: E501
        """EnvironmentActivity - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._step_id = None
        self._step_name = None
        self._status = None
        self._environment_id = None
        self._details = None
        self._organization_id = None
        self._created_at = None
        self._updated_at = None
        self._version = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.step_id = step_id
        self.step_name = step_name
        self.status = status
        self.environment_id = environment_id
        if details is not None:
            self.details = details
        if organization_id is not None:
            self.organization_id = organization_id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if version is not None:
            self.version = version

    @property
    def id(self):
        """Gets the id of this EnvironmentActivity.  # noqa: E501


        :return: The id of this EnvironmentActivity.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnvironmentActivity.


        :param id: The id of this EnvironmentActivity.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def step_id(self):
        """Gets the step_id of this EnvironmentActivity.  # noqa: E501


        :return: The step_id of this EnvironmentActivity.  # noqa: E501
        :rtype: str
        """
        return self._step_id

    @step_id.setter
    def step_id(self, step_id):
        """Sets the step_id of this EnvironmentActivity.


        :param step_id: The step_id of this EnvironmentActivity.  # noqa: E501
        :type: str
        """
        if step_id is None:
            raise ValueError("Invalid value for `step_id`, must not be `None`")  # noqa: E501

        self._step_id = step_id

    @property
    def step_name(self):
        """Gets the step_name of this EnvironmentActivity.  # noqa: E501


        :return: The step_name of this EnvironmentActivity.  # noqa: E501
        :rtype: str
        """
        return self._step_name

    @step_name.setter
    def step_name(self, step_name):
        """Sets the step_name of this EnvironmentActivity.


        :param step_name: The step_name of this EnvironmentActivity.  # noqa: E501
        :type: str
        """
        if step_name is None:
            raise ValueError("Invalid value for `step_name`, must not be `None`")  # noqa: E501

        self._step_name = step_name

    @property
    def status(self):
        """Gets the status of this EnvironmentActivity.  # noqa: E501


        :return: The status of this EnvironmentActivity.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EnvironmentActivity.


        :param status: The status of this EnvironmentActivity.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def environment_id(self):
        """Gets the environment_id of this EnvironmentActivity.  # noqa: E501


        :return: The environment_id of this EnvironmentActivity.  # noqa: E501
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this EnvironmentActivity.


        :param environment_id: The environment_id of this EnvironmentActivity.  # noqa: E501
        :type: str
        """
        if environment_id is None:
            raise ValueError("Invalid value for `environment_id`, must not be `None`")  # noqa: E501

        self._environment_id = environment_id

    @property
    def details(self):
        """Gets the details of this EnvironmentActivity.  # noqa: E501


        :return: The details of this EnvironmentActivity.  # noqa: E501
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this EnvironmentActivity.


        :param details: The details of this EnvironmentActivity.  # noqa: E501
        :type: object
        """

        self._details = details

    @property
    def organization_id(self):
        """Gets the organization_id of this EnvironmentActivity.  # noqa: E501


        :return: The organization_id of this EnvironmentActivity.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this EnvironmentActivity.


        :param organization_id: The organization_id of this EnvironmentActivity.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def created_at(self):
        """Gets the created_at of this EnvironmentActivity.  # noqa: E501


        :return: The created_at of this EnvironmentActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EnvironmentActivity.


        :param created_at: The created_at of this EnvironmentActivity.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this EnvironmentActivity.  # noqa: E501


        :return: The updated_at of this EnvironmentActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EnvironmentActivity.


        :param updated_at: The updated_at of this EnvironmentActivity.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def version(self):
        """Gets the version of this EnvironmentActivity.  # noqa: E501


        :return: The version of this EnvironmentActivity.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EnvironmentActivity.


        :param version: The version of this EnvironmentActivity.  # noqa: E501
        :type: float
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnvironmentActivity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnvironmentActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
